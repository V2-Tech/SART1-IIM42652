
AccelerometroOMDv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019f18  080081a0  080081a0  000081a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000136e4  080220b8  080220b8  000220b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803579c  0803579c  000402d0  2**0
                  CONTENTS
  4 .ARM          00000008  0803579c  0803579c  0003579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080357a4  080357a4  000402d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080357a4  080357a4  000357a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080357a8  080357a8  000357a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  080357ac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e89c  200002d0  08035a7c  000402d0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000eb6c  08035a7c  0004eb6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c7da  00000000  00000000  00040300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008433  00000000  00000000  0007cada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a88  00000000  00000000  00084f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027f0  00000000  00000000  00087998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021165  00000000  00000000  0008a188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032ac4  00000000  00000000  000ab2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad955  00000000  00000000  000dddb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0018b706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c2a8  00000000  00000000  0018b7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000038a2  00000000  00000000  00197a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	; (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	; (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	200002d0 	.word	0x200002d0
 80081bc:	00000000 	.word	0x00000000
 80081c0:	080220a0 	.word	0x080220a0

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	; (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	; (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	200002d4 	.word	0x200002d4
 80081dc:	080220a0 	.word	0x080220a0

080081e0 <strlen>:
 80081e0:	4603      	mov	r3, r0
 80081e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	d1fb      	bne.n	80081e2 <strlen+0x2>
 80081ea:	1a18      	subs	r0, r3, r0
 80081ec:	3801      	subs	r0, #1
 80081ee:	4770      	bx	lr

080081f0 <memchr>:
 80081f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081f4:	2a10      	cmp	r2, #16
 80081f6:	db2b      	blt.n	8008250 <memchr+0x60>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	d008      	beq.n	8008210 <memchr+0x20>
 80081fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008202:	3a01      	subs	r2, #1
 8008204:	428b      	cmp	r3, r1
 8008206:	d02d      	beq.n	8008264 <memchr+0x74>
 8008208:	f010 0f07 	tst.w	r0, #7
 800820c:	b342      	cbz	r2, 8008260 <memchr+0x70>
 800820e:	d1f6      	bne.n	80081fe <memchr+0xe>
 8008210:	b4f0      	push	{r4, r5, r6, r7}
 8008212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800821a:	f022 0407 	bic.w	r4, r2, #7
 800821e:	f07f 0700 	mvns.w	r7, #0
 8008222:	2300      	movs	r3, #0
 8008224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008228:	3c08      	subs	r4, #8
 800822a:	ea85 0501 	eor.w	r5, r5, r1
 800822e:	ea86 0601 	eor.w	r6, r6, r1
 8008232:	fa85 f547 	uadd8	r5, r5, r7
 8008236:	faa3 f587 	sel	r5, r3, r7
 800823a:	fa86 f647 	uadd8	r6, r6, r7
 800823e:	faa5 f687 	sel	r6, r5, r7
 8008242:	b98e      	cbnz	r6, 8008268 <memchr+0x78>
 8008244:	d1ee      	bne.n	8008224 <memchr+0x34>
 8008246:	bcf0      	pop	{r4, r5, r6, r7}
 8008248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800824c:	f002 0207 	and.w	r2, r2, #7
 8008250:	b132      	cbz	r2, 8008260 <memchr+0x70>
 8008252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008256:	3a01      	subs	r2, #1
 8008258:	ea83 0301 	eor.w	r3, r3, r1
 800825c:	b113      	cbz	r3, 8008264 <memchr+0x74>
 800825e:	d1f8      	bne.n	8008252 <memchr+0x62>
 8008260:	2000      	movs	r0, #0
 8008262:	4770      	bx	lr
 8008264:	3801      	subs	r0, #1
 8008266:	4770      	bx	lr
 8008268:	2d00      	cmp	r5, #0
 800826a:	bf06      	itte	eq
 800826c:	4635      	moveq	r5, r6
 800826e:	3803      	subeq	r0, #3
 8008270:	3807      	subne	r0, #7
 8008272:	f015 0f01 	tst.w	r5, #1
 8008276:	d107      	bne.n	8008288 <memchr+0x98>
 8008278:	3001      	adds	r0, #1
 800827a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800827e:	bf02      	ittt	eq
 8008280:	3001      	addeq	r0, #1
 8008282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008286:	3001      	addeq	r0, #1
 8008288:	bcf0      	pop	{r4, r5, r6, r7}
 800828a:	3801      	subs	r0, #1
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop

08008290 <__aeabi_drsub>:
 8008290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008294:	e002      	b.n	800829c <__adddf3>
 8008296:	bf00      	nop

08008298 <__aeabi_dsub>:
 8008298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800829c <__adddf3>:
 800829c:	b530      	push	{r4, r5, lr}
 800829e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80082a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80082a6:	ea94 0f05 	teq	r4, r5
 80082aa:	bf08      	it	eq
 80082ac:	ea90 0f02 	teqeq	r0, r2
 80082b0:	bf1f      	itttt	ne
 80082b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80082b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80082ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80082be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082c2:	f000 80e2 	beq.w	800848a <__adddf3+0x1ee>
 80082c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80082ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80082ce:	bfb8      	it	lt
 80082d0:	426d      	neglt	r5, r5
 80082d2:	dd0c      	ble.n	80082ee <__adddf3+0x52>
 80082d4:	442c      	add	r4, r5
 80082d6:	ea80 0202 	eor.w	r2, r0, r2
 80082da:	ea81 0303 	eor.w	r3, r1, r3
 80082de:	ea82 0000 	eor.w	r0, r2, r0
 80082e2:	ea83 0101 	eor.w	r1, r3, r1
 80082e6:	ea80 0202 	eor.w	r2, r0, r2
 80082ea:	ea81 0303 	eor.w	r3, r1, r3
 80082ee:	2d36      	cmp	r5, #54	; 0x36
 80082f0:	bf88      	it	hi
 80082f2:	bd30      	pophi	{r4, r5, pc}
 80082f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80082f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80082fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008304:	d002      	beq.n	800830c <__adddf3+0x70>
 8008306:	4240      	negs	r0, r0
 8008308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800830c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008318:	d002      	beq.n	8008320 <__adddf3+0x84>
 800831a:	4252      	negs	r2, r2
 800831c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008320:	ea94 0f05 	teq	r4, r5
 8008324:	f000 80a7 	beq.w	8008476 <__adddf3+0x1da>
 8008328:	f1a4 0401 	sub.w	r4, r4, #1
 800832c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008330:	db0d      	blt.n	800834e <__adddf3+0xb2>
 8008332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008336:	fa22 f205 	lsr.w	r2, r2, r5
 800833a:	1880      	adds	r0, r0, r2
 800833c:	f141 0100 	adc.w	r1, r1, #0
 8008340:	fa03 f20e 	lsl.w	r2, r3, lr
 8008344:	1880      	adds	r0, r0, r2
 8008346:	fa43 f305 	asr.w	r3, r3, r5
 800834a:	4159      	adcs	r1, r3
 800834c:	e00e      	b.n	800836c <__adddf3+0xd0>
 800834e:	f1a5 0520 	sub.w	r5, r5, #32
 8008352:	f10e 0e20 	add.w	lr, lr, #32
 8008356:	2a01      	cmp	r2, #1
 8008358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800835c:	bf28      	it	cs
 800835e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008362:	fa43 f305 	asr.w	r3, r3, r5
 8008366:	18c0      	adds	r0, r0, r3
 8008368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800836c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008370:	d507      	bpl.n	8008382 <__adddf3+0xe6>
 8008372:	f04f 0e00 	mov.w	lr, #0
 8008376:	f1dc 0c00 	rsbs	ip, ip, #0
 800837a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800837e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008386:	d31b      	bcc.n	80083c0 <__adddf3+0x124>
 8008388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800838c:	d30c      	bcc.n	80083a8 <__adddf3+0x10c>
 800838e:	0849      	lsrs	r1, r1, #1
 8008390:	ea5f 0030 	movs.w	r0, r0, rrx
 8008394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008398:	f104 0401 	add.w	r4, r4, #1
 800839c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80083a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80083a4:	f080 809a 	bcs.w	80084dc <__adddf3+0x240>
 80083a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80083ac:	bf08      	it	eq
 80083ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80083b2:	f150 0000 	adcs.w	r0, r0, #0
 80083b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80083ba:	ea41 0105 	orr.w	r1, r1, r5
 80083be:	bd30      	pop	{r4, r5, pc}
 80083c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80083c4:	4140      	adcs	r0, r0
 80083c6:	eb41 0101 	adc.w	r1, r1, r1
 80083ca:	3c01      	subs	r4, #1
 80083cc:	bf28      	it	cs
 80083ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80083d2:	d2e9      	bcs.n	80083a8 <__adddf3+0x10c>
 80083d4:	f091 0f00 	teq	r1, #0
 80083d8:	bf04      	itt	eq
 80083da:	4601      	moveq	r1, r0
 80083dc:	2000      	moveq	r0, #0
 80083de:	fab1 f381 	clz	r3, r1
 80083e2:	bf08      	it	eq
 80083e4:	3320      	addeq	r3, #32
 80083e6:	f1a3 030b 	sub.w	r3, r3, #11
 80083ea:	f1b3 0220 	subs.w	r2, r3, #32
 80083ee:	da0c      	bge.n	800840a <__adddf3+0x16e>
 80083f0:	320c      	adds	r2, #12
 80083f2:	dd08      	ble.n	8008406 <__adddf3+0x16a>
 80083f4:	f102 0c14 	add.w	ip, r2, #20
 80083f8:	f1c2 020c 	rsb	r2, r2, #12
 80083fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8008400:	fa21 f102 	lsr.w	r1, r1, r2
 8008404:	e00c      	b.n	8008420 <__adddf3+0x184>
 8008406:	f102 0214 	add.w	r2, r2, #20
 800840a:	bfd8      	it	le
 800840c:	f1c2 0c20 	rsble	ip, r2, #32
 8008410:	fa01 f102 	lsl.w	r1, r1, r2
 8008414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008418:	bfdc      	itt	le
 800841a:	ea41 010c 	orrle.w	r1, r1, ip
 800841e:	4090      	lslle	r0, r2
 8008420:	1ae4      	subs	r4, r4, r3
 8008422:	bfa2      	ittt	ge
 8008424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008428:	4329      	orrge	r1, r5
 800842a:	bd30      	popge	{r4, r5, pc}
 800842c:	ea6f 0404 	mvn.w	r4, r4
 8008430:	3c1f      	subs	r4, #31
 8008432:	da1c      	bge.n	800846e <__adddf3+0x1d2>
 8008434:	340c      	adds	r4, #12
 8008436:	dc0e      	bgt.n	8008456 <__adddf3+0x1ba>
 8008438:	f104 0414 	add.w	r4, r4, #20
 800843c:	f1c4 0220 	rsb	r2, r4, #32
 8008440:	fa20 f004 	lsr.w	r0, r0, r4
 8008444:	fa01 f302 	lsl.w	r3, r1, r2
 8008448:	ea40 0003 	orr.w	r0, r0, r3
 800844c:	fa21 f304 	lsr.w	r3, r1, r4
 8008450:	ea45 0103 	orr.w	r1, r5, r3
 8008454:	bd30      	pop	{r4, r5, pc}
 8008456:	f1c4 040c 	rsb	r4, r4, #12
 800845a:	f1c4 0220 	rsb	r2, r4, #32
 800845e:	fa20 f002 	lsr.w	r0, r0, r2
 8008462:	fa01 f304 	lsl.w	r3, r1, r4
 8008466:	ea40 0003 	orr.w	r0, r0, r3
 800846a:	4629      	mov	r1, r5
 800846c:	bd30      	pop	{r4, r5, pc}
 800846e:	fa21 f004 	lsr.w	r0, r1, r4
 8008472:	4629      	mov	r1, r5
 8008474:	bd30      	pop	{r4, r5, pc}
 8008476:	f094 0f00 	teq	r4, #0
 800847a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800847e:	bf06      	itte	eq
 8008480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008484:	3401      	addeq	r4, #1
 8008486:	3d01      	subne	r5, #1
 8008488:	e74e      	b.n	8008328 <__adddf3+0x8c>
 800848a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800848e:	bf18      	it	ne
 8008490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008494:	d029      	beq.n	80084ea <__adddf3+0x24e>
 8008496:	ea94 0f05 	teq	r4, r5
 800849a:	bf08      	it	eq
 800849c:	ea90 0f02 	teqeq	r0, r2
 80084a0:	d005      	beq.n	80084ae <__adddf3+0x212>
 80084a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80084a6:	bf04      	itt	eq
 80084a8:	4619      	moveq	r1, r3
 80084aa:	4610      	moveq	r0, r2
 80084ac:	bd30      	pop	{r4, r5, pc}
 80084ae:	ea91 0f03 	teq	r1, r3
 80084b2:	bf1e      	ittt	ne
 80084b4:	2100      	movne	r1, #0
 80084b6:	2000      	movne	r0, #0
 80084b8:	bd30      	popne	{r4, r5, pc}
 80084ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80084be:	d105      	bne.n	80084cc <__adddf3+0x230>
 80084c0:	0040      	lsls	r0, r0, #1
 80084c2:	4149      	adcs	r1, r1
 80084c4:	bf28      	it	cs
 80084c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80084ca:	bd30      	pop	{r4, r5, pc}
 80084cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80084d0:	bf3c      	itt	cc
 80084d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80084d6:	bd30      	popcc	{r4, r5, pc}
 80084d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80084dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80084e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084e4:	f04f 0000 	mov.w	r0, #0
 80084e8:	bd30      	pop	{r4, r5, pc}
 80084ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80084ee:	bf1a      	itte	ne
 80084f0:	4619      	movne	r1, r3
 80084f2:	4610      	movne	r0, r2
 80084f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80084f8:	bf1c      	itt	ne
 80084fa:	460b      	movne	r3, r1
 80084fc:	4602      	movne	r2, r0
 80084fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008502:	bf06      	itte	eq
 8008504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008508:	ea91 0f03 	teqeq	r1, r3
 800850c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008510:	bd30      	pop	{r4, r5, pc}
 8008512:	bf00      	nop

08008514 <__aeabi_ui2d>:
 8008514:	f090 0f00 	teq	r0, #0
 8008518:	bf04      	itt	eq
 800851a:	2100      	moveq	r1, #0
 800851c:	4770      	bxeq	lr
 800851e:	b530      	push	{r4, r5, lr}
 8008520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008528:	f04f 0500 	mov.w	r5, #0
 800852c:	f04f 0100 	mov.w	r1, #0
 8008530:	e750      	b.n	80083d4 <__adddf3+0x138>
 8008532:	bf00      	nop

08008534 <__aeabi_i2d>:
 8008534:	f090 0f00 	teq	r0, #0
 8008538:	bf04      	itt	eq
 800853a:	2100      	moveq	r1, #0
 800853c:	4770      	bxeq	lr
 800853e:	b530      	push	{r4, r5, lr}
 8008540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800854c:	bf48      	it	mi
 800854e:	4240      	negmi	r0, r0
 8008550:	f04f 0100 	mov.w	r1, #0
 8008554:	e73e      	b.n	80083d4 <__adddf3+0x138>
 8008556:	bf00      	nop

08008558 <__aeabi_f2d>:
 8008558:	0042      	lsls	r2, r0, #1
 800855a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800855e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008566:	bf1f      	itttt	ne
 8008568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800856c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008574:	4770      	bxne	lr
 8008576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800857a:	bf08      	it	eq
 800857c:	4770      	bxeq	lr
 800857e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008582:	bf04      	itt	eq
 8008584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008588:	4770      	bxeq	lr
 800858a:	b530      	push	{r4, r5, lr}
 800858c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008598:	e71c      	b.n	80083d4 <__adddf3+0x138>
 800859a:	bf00      	nop

0800859c <__aeabi_ul2d>:
 800859c:	ea50 0201 	orrs.w	r2, r0, r1
 80085a0:	bf08      	it	eq
 80085a2:	4770      	bxeq	lr
 80085a4:	b530      	push	{r4, r5, lr}
 80085a6:	f04f 0500 	mov.w	r5, #0
 80085aa:	e00a      	b.n	80085c2 <__aeabi_l2d+0x16>

080085ac <__aeabi_l2d>:
 80085ac:	ea50 0201 	orrs.w	r2, r0, r1
 80085b0:	bf08      	it	eq
 80085b2:	4770      	bxeq	lr
 80085b4:	b530      	push	{r4, r5, lr}
 80085b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80085ba:	d502      	bpl.n	80085c2 <__aeabi_l2d+0x16>
 80085bc:	4240      	negs	r0, r0
 80085be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80085c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80085c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80085ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80085ce:	f43f aed8 	beq.w	8008382 <__adddf3+0xe6>
 80085d2:	f04f 0203 	mov.w	r2, #3
 80085d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80085da:	bf18      	it	ne
 80085dc:	3203      	addne	r2, #3
 80085de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80085e2:	bf18      	it	ne
 80085e4:	3203      	addne	r2, #3
 80085e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80085ea:	f1c2 0320 	rsb	r3, r2, #32
 80085ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80085f2:	fa20 f002 	lsr.w	r0, r0, r2
 80085f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80085fa:	ea40 000e 	orr.w	r0, r0, lr
 80085fe:	fa21 f102 	lsr.w	r1, r1, r2
 8008602:	4414      	add	r4, r2
 8008604:	e6bd      	b.n	8008382 <__adddf3+0xe6>
 8008606:	bf00      	nop

08008608 <__aeabi_dmul>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800860e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008616:	bf1d      	ittte	ne
 8008618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800861c:	ea94 0f0c 	teqne	r4, ip
 8008620:	ea95 0f0c 	teqne	r5, ip
 8008624:	f000 f8de 	bleq	80087e4 <__aeabi_dmul+0x1dc>
 8008628:	442c      	add	r4, r5
 800862a:	ea81 0603 	eor.w	r6, r1, r3
 800862e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800863a:	bf18      	it	ne
 800863c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008648:	d038      	beq.n	80086bc <__aeabi_dmul+0xb4>
 800864a:	fba0 ce02 	umull	ip, lr, r0, r2
 800864e:	f04f 0500 	mov.w	r5, #0
 8008652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800865a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800865e:	f04f 0600 	mov.w	r6, #0
 8008662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008666:	f09c 0f00 	teq	ip, #0
 800866a:	bf18      	it	ne
 800866c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800867c:	d204      	bcs.n	8008688 <__aeabi_dmul+0x80>
 800867e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008682:	416d      	adcs	r5, r5
 8008684:	eb46 0606 	adc.w	r6, r6, r6
 8008688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800868c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800869c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80086a0:	bf88      	it	hi
 80086a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80086a6:	d81e      	bhi.n	80086e6 <__aeabi_dmul+0xde>
 80086a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80086ac:	bf08      	it	eq
 80086ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80086b2:	f150 0000 	adcs.w	r0, r0, #0
 80086b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80086ba:	bd70      	pop	{r4, r5, r6, pc}
 80086bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80086c0:	ea46 0101 	orr.w	r1, r6, r1
 80086c4:	ea40 0002 	orr.w	r0, r0, r2
 80086c8:	ea81 0103 	eor.w	r1, r1, r3
 80086cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80086d0:	bfc2      	ittt	gt
 80086d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80086d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80086da:	bd70      	popgt	{r4, r5, r6, pc}
 80086dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80086e0:	f04f 0e00 	mov.w	lr, #0
 80086e4:	3c01      	subs	r4, #1
 80086e6:	f300 80ab 	bgt.w	8008840 <__aeabi_dmul+0x238>
 80086ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80086ee:	bfde      	ittt	le
 80086f0:	2000      	movle	r0, #0
 80086f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80086f6:	bd70      	pople	{r4, r5, r6, pc}
 80086f8:	f1c4 0400 	rsb	r4, r4, #0
 80086fc:	3c20      	subs	r4, #32
 80086fe:	da35      	bge.n	800876c <__aeabi_dmul+0x164>
 8008700:	340c      	adds	r4, #12
 8008702:	dc1b      	bgt.n	800873c <__aeabi_dmul+0x134>
 8008704:	f104 0414 	add.w	r4, r4, #20
 8008708:	f1c4 0520 	rsb	r5, r4, #32
 800870c:	fa00 f305 	lsl.w	r3, r0, r5
 8008710:	fa20 f004 	lsr.w	r0, r0, r4
 8008714:	fa01 f205 	lsl.w	r2, r1, r5
 8008718:	ea40 0002 	orr.w	r0, r0, r2
 800871c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008728:	fa21 f604 	lsr.w	r6, r1, r4
 800872c:	eb42 0106 	adc.w	r1, r2, r6
 8008730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008734:	bf08      	it	eq
 8008736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	f1c4 040c 	rsb	r4, r4, #12
 8008740:	f1c4 0520 	rsb	r5, r4, #32
 8008744:	fa00 f304 	lsl.w	r3, r0, r4
 8008748:	fa20 f005 	lsr.w	r0, r0, r5
 800874c:	fa01 f204 	lsl.w	r2, r1, r4
 8008750:	ea40 0002 	orr.w	r0, r0, r2
 8008754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800875c:	f141 0100 	adc.w	r1, r1, #0
 8008760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008764:	bf08      	it	eq
 8008766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	f1c4 0520 	rsb	r5, r4, #32
 8008770:	fa00 f205 	lsl.w	r2, r0, r5
 8008774:	ea4e 0e02 	orr.w	lr, lr, r2
 8008778:	fa20 f304 	lsr.w	r3, r0, r4
 800877c:	fa01 f205 	lsl.w	r2, r1, r5
 8008780:	ea43 0302 	orr.w	r3, r3, r2
 8008784:	fa21 f004 	lsr.w	r0, r1, r4
 8008788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800878c:	fa21 f204 	lsr.w	r2, r1, r4
 8008790:	ea20 0002 	bic.w	r0, r0, r2
 8008794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800879c:	bf08      	it	eq
 800879e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	f094 0f00 	teq	r4, #0
 80087a8:	d10f      	bne.n	80087ca <__aeabi_dmul+0x1c2>
 80087aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80087ae:	0040      	lsls	r0, r0, #1
 80087b0:	eb41 0101 	adc.w	r1, r1, r1
 80087b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087b8:	bf08      	it	eq
 80087ba:	3c01      	subeq	r4, #1
 80087bc:	d0f7      	beq.n	80087ae <__aeabi_dmul+0x1a6>
 80087be:	ea41 0106 	orr.w	r1, r1, r6
 80087c2:	f095 0f00 	teq	r5, #0
 80087c6:	bf18      	it	ne
 80087c8:	4770      	bxne	lr
 80087ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80087ce:	0052      	lsls	r2, r2, #1
 80087d0:	eb43 0303 	adc.w	r3, r3, r3
 80087d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80087d8:	bf08      	it	eq
 80087da:	3d01      	subeq	r5, #1
 80087dc:	d0f7      	beq.n	80087ce <__aeabi_dmul+0x1c6>
 80087de:	ea43 0306 	orr.w	r3, r3, r6
 80087e2:	4770      	bx	lr
 80087e4:	ea94 0f0c 	teq	r4, ip
 80087e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80087ec:	bf18      	it	ne
 80087ee:	ea95 0f0c 	teqne	r5, ip
 80087f2:	d00c      	beq.n	800880e <__aeabi_dmul+0x206>
 80087f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80087f8:	bf18      	it	ne
 80087fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80087fe:	d1d1      	bne.n	80087a4 <__aeabi_dmul+0x19c>
 8008800:	ea81 0103 	eor.w	r1, r1, r3
 8008804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008808:	f04f 0000 	mov.w	r0, #0
 800880c:	bd70      	pop	{r4, r5, r6, pc}
 800880e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008812:	bf06      	itte	eq
 8008814:	4610      	moveq	r0, r2
 8008816:	4619      	moveq	r1, r3
 8008818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800881c:	d019      	beq.n	8008852 <__aeabi_dmul+0x24a>
 800881e:	ea94 0f0c 	teq	r4, ip
 8008822:	d102      	bne.n	800882a <__aeabi_dmul+0x222>
 8008824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008828:	d113      	bne.n	8008852 <__aeabi_dmul+0x24a>
 800882a:	ea95 0f0c 	teq	r5, ip
 800882e:	d105      	bne.n	800883c <__aeabi_dmul+0x234>
 8008830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008834:	bf1c      	itt	ne
 8008836:	4610      	movne	r0, r2
 8008838:	4619      	movne	r1, r3
 800883a:	d10a      	bne.n	8008852 <__aeabi_dmul+0x24a>
 800883c:	ea81 0103 	eor.w	r1, r1, r3
 8008840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800884c:	f04f 0000 	mov.w	r0, #0
 8008850:	bd70      	pop	{r4, r5, r6, pc}
 8008852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800885a:	bd70      	pop	{r4, r5, r6, pc}

0800885c <__aeabi_ddiv>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800886a:	bf1d      	ittte	ne
 800886c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008870:	ea94 0f0c 	teqne	r4, ip
 8008874:	ea95 0f0c 	teqne	r5, ip
 8008878:	f000 f8a7 	bleq	80089ca <__aeabi_ddiv+0x16e>
 800887c:	eba4 0405 	sub.w	r4, r4, r5
 8008880:	ea81 0e03 	eor.w	lr, r1, r3
 8008884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800888c:	f000 8088 	beq.w	80089a0 <__aeabi_ddiv+0x144>
 8008890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800889c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80088a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80088a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80088a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80088ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80088b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80088b4:	429d      	cmp	r5, r3
 80088b6:	bf08      	it	eq
 80088b8:	4296      	cmpeq	r6, r2
 80088ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80088be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80088c2:	d202      	bcs.n	80088ca <__aeabi_ddiv+0x6e>
 80088c4:	085b      	lsrs	r3, r3, #1
 80088c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80088ca:	1ab6      	subs	r6, r6, r2
 80088cc:	eb65 0503 	sbc.w	r5, r5, r3
 80088d0:	085b      	lsrs	r3, r3, #1
 80088d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80088d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80088da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80088de:	ebb6 0e02 	subs.w	lr, r6, r2
 80088e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088e6:	bf22      	ittt	cs
 80088e8:	1ab6      	subcs	r6, r6, r2
 80088ea:	4675      	movcs	r5, lr
 80088ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80088f0:	085b      	lsrs	r3, r3, #1
 80088f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80088f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80088fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088fe:	bf22      	ittt	cs
 8008900:	1ab6      	subcs	r6, r6, r2
 8008902:	4675      	movcs	r5, lr
 8008904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	ea4f 0232 	mov.w	r2, r2, rrx
 800890e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008916:	bf22      	ittt	cs
 8008918:	1ab6      	subcs	r6, r6, r2
 800891a:	4675      	movcs	r5, lr
 800891c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	ea4f 0232 	mov.w	r2, r2, rrx
 8008926:	ebb6 0e02 	subs.w	lr, r6, r2
 800892a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800892e:	bf22      	ittt	cs
 8008930:	1ab6      	subcs	r6, r6, r2
 8008932:	4675      	movcs	r5, lr
 8008934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008938:	ea55 0e06 	orrs.w	lr, r5, r6
 800893c:	d018      	beq.n	8008970 <__aeabi_ddiv+0x114>
 800893e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800894a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800894e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800895a:	d1c0      	bne.n	80088de <__aeabi_ddiv+0x82>
 800895c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008960:	d10b      	bne.n	800897a <__aeabi_ddiv+0x11e>
 8008962:	ea41 0100 	orr.w	r1, r1, r0
 8008966:	f04f 0000 	mov.w	r0, #0
 800896a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800896e:	e7b6      	b.n	80088de <__aeabi_ddiv+0x82>
 8008970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008974:	bf04      	itt	eq
 8008976:	4301      	orreq	r1, r0
 8008978:	2000      	moveq	r0, #0
 800897a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800897e:	bf88      	it	hi
 8008980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008984:	f63f aeaf 	bhi.w	80086e6 <__aeabi_dmul+0xde>
 8008988:	ebb5 0c03 	subs.w	ip, r5, r3
 800898c:	bf04      	itt	eq
 800898e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008996:	f150 0000 	adcs.w	r0, r0, #0
 800899a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80089a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80089a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80089ac:	bfc2      	ittt	gt
 80089ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80089b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80089b6:	bd70      	popgt	{r4, r5, r6, pc}
 80089b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80089bc:	f04f 0e00 	mov.w	lr, #0
 80089c0:	3c01      	subs	r4, #1
 80089c2:	e690      	b.n	80086e6 <__aeabi_dmul+0xde>
 80089c4:	ea45 0e06 	orr.w	lr, r5, r6
 80089c8:	e68d      	b.n	80086e6 <__aeabi_dmul+0xde>
 80089ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80089ce:	ea94 0f0c 	teq	r4, ip
 80089d2:	bf08      	it	eq
 80089d4:	ea95 0f0c 	teqeq	r5, ip
 80089d8:	f43f af3b 	beq.w	8008852 <__aeabi_dmul+0x24a>
 80089dc:	ea94 0f0c 	teq	r4, ip
 80089e0:	d10a      	bne.n	80089f8 <__aeabi_ddiv+0x19c>
 80089e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80089e6:	f47f af34 	bne.w	8008852 <__aeabi_dmul+0x24a>
 80089ea:	ea95 0f0c 	teq	r5, ip
 80089ee:	f47f af25 	bne.w	800883c <__aeabi_dmul+0x234>
 80089f2:	4610      	mov	r0, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	e72c      	b.n	8008852 <__aeabi_dmul+0x24a>
 80089f8:	ea95 0f0c 	teq	r5, ip
 80089fc:	d106      	bne.n	8008a0c <__aeabi_ddiv+0x1b0>
 80089fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008a02:	f43f aefd 	beq.w	8008800 <__aeabi_dmul+0x1f8>
 8008a06:	4610      	mov	r0, r2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	e722      	b.n	8008852 <__aeabi_dmul+0x24a>
 8008a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008a10:	bf18      	it	ne
 8008a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008a16:	f47f aec5 	bne.w	80087a4 <__aeabi_dmul+0x19c>
 8008a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008a1e:	f47f af0d 	bne.w	800883c <__aeabi_dmul+0x234>
 8008a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008a26:	f47f aeeb 	bne.w	8008800 <__aeabi_dmul+0x1f8>
 8008a2a:	e712      	b.n	8008852 <__aeabi_dmul+0x24a>

08008a2c <__gedf2>:
 8008a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8008a30:	e006      	b.n	8008a40 <__cmpdf2+0x4>
 8008a32:	bf00      	nop

08008a34 <__ledf2>:
 8008a34:	f04f 0c01 	mov.w	ip, #1
 8008a38:	e002      	b.n	8008a40 <__cmpdf2+0x4>
 8008a3a:	bf00      	nop

08008a3c <__cmpdf2>:
 8008a3c:	f04f 0c01 	mov.w	ip, #1
 8008a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008a50:	bf18      	it	ne
 8008a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008a56:	d01b      	beq.n	8008a90 <__cmpdf2+0x54>
 8008a58:	b001      	add	sp, #4
 8008a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008a5e:	bf0c      	ite	eq
 8008a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008a64:	ea91 0f03 	teqne	r1, r3
 8008a68:	bf02      	ittt	eq
 8008a6a:	ea90 0f02 	teqeq	r0, r2
 8008a6e:	2000      	moveq	r0, #0
 8008a70:	4770      	bxeq	lr
 8008a72:	f110 0f00 	cmn.w	r0, #0
 8008a76:	ea91 0f03 	teq	r1, r3
 8008a7a:	bf58      	it	pl
 8008a7c:	4299      	cmppl	r1, r3
 8008a7e:	bf08      	it	eq
 8008a80:	4290      	cmpeq	r0, r2
 8008a82:	bf2c      	ite	cs
 8008a84:	17d8      	asrcs	r0, r3, #31
 8008a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008a8a:	f040 0001 	orr.w	r0, r0, #1
 8008a8e:	4770      	bx	lr
 8008a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a98:	d102      	bne.n	8008aa0 <__cmpdf2+0x64>
 8008a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008a9e:	d107      	bne.n	8008ab0 <__cmpdf2+0x74>
 8008aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008aa8:	d1d6      	bne.n	8008a58 <__cmpdf2+0x1c>
 8008aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008aae:	d0d3      	beq.n	8008a58 <__cmpdf2+0x1c>
 8008ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_cdrcmple>:
 8008ab8:	4684      	mov	ip, r0
 8008aba:	4610      	mov	r0, r2
 8008abc:	4662      	mov	r2, ip
 8008abe:	468c      	mov	ip, r1
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4663      	mov	r3, ip
 8008ac4:	e000      	b.n	8008ac8 <__aeabi_cdcmpeq>
 8008ac6:	bf00      	nop

08008ac8 <__aeabi_cdcmpeq>:
 8008ac8:	b501      	push	{r0, lr}
 8008aca:	f7ff ffb7 	bl	8008a3c <__cmpdf2>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	bf48      	it	mi
 8008ad2:	f110 0f00 	cmnmi.w	r0, #0
 8008ad6:	bd01      	pop	{r0, pc}

08008ad8 <__aeabi_dcmpeq>:
 8008ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008adc:	f7ff fff4 	bl	8008ac8 <__aeabi_cdcmpeq>
 8008ae0:	bf0c      	ite	eq
 8008ae2:	2001      	moveq	r0, #1
 8008ae4:	2000      	movne	r0, #0
 8008ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008aea:	bf00      	nop

08008aec <__aeabi_dcmplt>:
 8008aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008af0:	f7ff ffea 	bl	8008ac8 <__aeabi_cdcmpeq>
 8008af4:	bf34      	ite	cc
 8008af6:	2001      	movcc	r0, #1
 8008af8:	2000      	movcs	r0, #0
 8008afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8008afe:	bf00      	nop

08008b00 <__aeabi_dcmple>:
 8008b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b04:	f7ff ffe0 	bl	8008ac8 <__aeabi_cdcmpeq>
 8008b08:	bf94      	ite	ls
 8008b0a:	2001      	movls	r0, #1
 8008b0c:	2000      	movhi	r0, #0
 8008b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b12:	bf00      	nop

08008b14 <__aeabi_dcmpge>:
 8008b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b18:	f7ff ffce 	bl	8008ab8 <__aeabi_cdrcmple>
 8008b1c:	bf94      	ite	ls
 8008b1e:	2001      	movls	r0, #1
 8008b20:	2000      	movhi	r0, #0
 8008b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b26:	bf00      	nop

08008b28 <__aeabi_dcmpgt>:
 8008b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b2c:	f7ff ffc4 	bl	8008ab8 <__aeabi_cdrcmple>
 8008b30:	bf34      	ite	cc
 8008b32:	2001      	movcc	r0, #1
 8008b34:	2000      	movcs	r0, #0
 8008b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b3a:	bf00      	nop

08008b3c <__aeabi_dcmpun>:
 8008b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b44:	d102      	bne.n	8008b4c <__aeabi_dcmpun+0x10>
 8008b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b4a:	d10a      	bne.n	8008b62 <__aeabi_dcmpun+0x26>
 8008b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b54:	d102      	bne.n	8008b5c <__aeabi_dcmpun+0x20>
 8008b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008b5a:	d102      	bne.n	8008b62 <__aeabi_dcmpun+0x26>
 8008b5c:	f04f 0000 	mov.w	r0, #0
 8008b60:	4770      	bx	lr
 8008b62:	f04f 0001 	mov.w	r0, #1
 8008b66:	4770      	bx	lr

08008b68 <__aeabi_d2iz>:
 8008b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008b70:	d215      	bcs.n	8008b9e <__aeabi_d2iz+0x36>
 8008b72:	d511      	bpl.n	8008b98 <__aeabi_d2iz+0x30>
 8008b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008b7c:	d912      	bls.n	8008ba4 <__aeabi_d2iz+0x3c>
 8008b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8008b92:	bf18      	it	ne
 8008b94:	4240      	negne	r0, r0
 8008b96:	4770      	bx	lr
 8008b98:	f04f 0000 	mov.w	r0, #0
 8008b9c:	4770      	bx	lr
 8008b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008ba2:	d105      	bne.n	8008bb0 <__aeabi_d2iz+0x48>
 8008ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008ba8:	bf08      	it	eq
 8008baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008bae:	4770      	bx	lr
 8008bb0:	f04f 0000 	mov.w	r0, #0
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop

08008bb8 <__aeabi_d2uiz>:
 8008bb8:	004a      	lsls	r2, r1, #1
 8008bba:	d211      	bcs.n	8008be0 <__aeabi_d2uiz+0x28>
 8008bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008bc0:	d211      	bcs.n	8008be6 <__aeabi_d2uiz+0x2e>
 8008bc2:	d50d      	bpl.n	8008be0 <__aeabi_d2uiz+0x28>
 8008bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008bcc:	d40e      	bmi.n	8008bec <__aeabi_d2uiz+0x34>
 8008bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008bda:	fa23 f002 	lsr.w	r0, r3, r2
 8008bde:	4770      	bx	lr
 8008be0:	f04f 0000 	mov.w	r0, #0
 8008be4:	4770      	bx	lr
 8008be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008bea:	d102      	bne.n	8008bf2 <__aeabi_d2uiz+0x3a>
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf0:	4770      	bx	lr
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	4770      	bx	lr

08008bf8 <__aeabi_d2f>:
 8008bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008c00:	bf24      	itt	cs
 8008c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008c0a:	d90d      	bls.n	8008c28 <__aeabi_d2f+0x30>
 8008c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008c20:	bf08      	it	eq
 8008c22:	f020 0001 	biceq.w	r0, r0, #1
 8008c26:	4770      	bx	lr
 8008c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008c2c:	d121      	bne.n	8008c72 <__aeabi_d2f+0x7a>
 8008c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008c32:	bfbc      	itt	lt
 8008c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008c38:	4770      	bxlt	lr
 8008c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008c42:	f1c2 0218 	rsb	r2, r2, #24
 8008c46:	f1c2 0c20 	rsb	ip, r2, #32
 8008c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8008c52:	bf18      	it	ne
 8008c54:	f040 0001 	orrne.w	r0, r0, #1
 8008c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008c64:	ea40 000c 	orr.w	r0, r0, ip
 8008c68:	fa23 f302 	lsr.w	r3, r3, r2
 8008c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c70:	e7cc      	b.n	8008c0c <__aeabi_d2f+0x14>
 8008c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008c76:	d107      	bne.n	8008c88 <__aeabi_d2f+0x90>
 8008c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008c7c:	bf1e      	ittt	ne
 8008c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008c86:	4770      	bxne	lr
 8008c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop

08008c98 <__aeabi_uldivmod>:
 8008c98:	b953      	cbnz	r3, 8008cb0 <__aeabi_uldivmod+0x18>
 8008c9a:	b94a      	cbnz	r2, 8008cb0 <__aeabi_uldivmod+0x18>
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	bf08      	it	eq
 8008ca0:	2800      	cmpeq	r0, #0
 8008ca2:	bf1c      	itt	ne
 8008ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8008cac:	f000 b974 	b.w	8008f98 <__aeabi_idiv0>
 8008cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008cb8:	f000 f806 	bl	8008cc8 <__udivmoddi4>
 8008cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cc4:	b004      	add	sp, #16
 8008cc6:	4770      	bx	lr

08008cc8 <__udivmoddi4>:
 8008cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ccc:	9d08      	ldr	r5, [sp, #32]
 8008cce:	4604      	mov	r4, r0
 8008cd0:	468e      	mov	lr, r1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d14d      	bne.n	8008d72 <__udivmoddi4+0xaa>
 8008cd6:	428a      	cmp	r2, r1
 8008cd8:	4694      	mov	ip, r2
 8008cda:	d969      	bls.n	8008db0 <__udivmoddi4+0xe8>
 8008cdc:	fab2 f282 	clz	r2, r2
 8008ce0:	b152      	cbz	r2, 8008cf8 <__udivmoddi4+0x30>
 8008ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8008ce6:	f1c2 0120 	rsb	r1, r2, #32
 8008cea:	fa20 f101 	lsr.w	r1, r0, r1
 8008cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8008cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8008cf6:	4094      	lsls	r4, r2
 8008cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008cfc:	0c21      	lsrs	r1, r4, #16
 8008cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8008d02:	fa1f f78c 	uxth.w	r7, ip
 8008d06:	fb08 e316 	mls	r3, r8, r6, lr
 8008d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008d0e:	fb06 f107 	mul.w	r1, r6, r7
 8008d12:	4299      	cmp	r1, r3
 8008d14:	d90a      	bls.n	8008d2c <__udivmoddi4+0x64>
 8008d16:	eb1c 0303 	adds.w	r3, ip, r3
 8008d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8008d1e:	f080 811f 	bcs.w	8008f60 <__udivmoddi4+0x298>
 8008d22:	4299      	cmp	r1, r3
 8008d24:	f240 811c 	bls.w	8008f60 <__udivmoddi4+0x298>
 8008d28:	3e02      	subs	r6, #2
 8008d2a:	4463      	add	r3, ip
 8008d2c:	1a5b      	subs	r3, r3, r1
 8008d2e:	b2a4      	uxth	r4, r4
 8008d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8008d34:	fb08 3310 	mls	r3, r8, r0, r3
 8008d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008d3c:	fb00 f707 	mul.w	r7, r0, r7
 8008d40:	42a7      	cmp	r7, r4
 8008d42:	d90a      	bls.n	8008d5a <__udivmoddi4+0x92>
 8008d44:	eb1c 0404 	adds.w	r4, ip, r4
 8008d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d4c:	f080 810a 	bcs.w	8008f64 <__udivmoddi4+0x29c>
 8008d50:	42a7      	cmp	r7, r4
 8008d52:	f240 8107 	bls.w	8008f64 <__udivmoddi4+0x29c>
 8008d56:	4464      	add	r4, ip
 8008d58:	3802      	subs	r0, #2
 8008d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008d5e:	1be4      	subs	r4, r4, r7
 8008d60:	2600      	movs	r6, #0
 8008d62:	b11d      	cbz	r5, 8008d6c <__udivmoddi4+0xa4>
 8008d64:	40d4      	lsrs	r4, r2
 8008d66:	2300      	movs	r3, #0
 8008d68:	e9c5 4300 	strd	r4, r3, [r5]
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d72:	428b      	cmp	r3, r1
 8008d74:	d909      	bls.n	8008d8a <__udivmoddi4+0xc2>
 8008d76:	2d00      	cmp	r5, #0
 8008d78:	f000 80ef 	beq.w	8008f5a <__udivmoddi4+0x292>
 8008d7c:	2600      	movs	r6, #0
 8008d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8008d82:	4630      	mov	r0, r6
 8008d84:	4631      	mov	r1, r6
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	fab3 f683 	clz	r6, r3
 8008d8e:	2e00      	cmp	r6, #0
 8008d90:	d14a      	bne.n	8008e28 <__udivmoddi4+0x160>
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d302      	bcc.n	8008d9c <__udivmoddi4+0xd4>
 8008d96:	4282      	cmp	r2, r0
 8008d98:	f200 80f9 	bhi.w	8008f8e <__udivmoddi4+0x2c6>
 8008d9c:	1a84      	subs	r4, r0, r2
 8008d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8008da2:	2001      	movs	r0, #1
 8008da4:	469e      	mov	lr, r3
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	d0e0      	beq.n	8008d6c <__udivmoddi4+0xa4>
 8008daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8008dae:	e7dd      	b.n	8008d6c <__udivmoddi4+0xa4>
 8008db0:	b902      	cbnz	r2, 8008db4 <__udivmoddi4+0xec>
 8008db2:	deff      	udf	#255	; 0xff
 8008db4:	fab2 f282 	clz	r2, r2
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	f040 8092 	bne.w	8008ee2 <__udivmoddi4+0x21a>
 8008dbe:	eba1 010c 	sub.w	r1, r1, ip
 8008dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008dc6:	fa1f fe8c 	uxth.w	lr, ip
 8008dca:	2601      	movs	r6, #1
 8008dcc:	0c20      	lsrs	r0, r4, #16
 8008dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8008dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8008dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008dda:	fb0e f003 	mul.w	r0, lr, r3
 8008dde:	4288      	cmp	r0, r1
 8008de0:	d908      	bls.n	8008df4 <__udivmoddi4+0x12c>
 8008de2:	eb1c 0101 	adds.w	r1, ip, r1
 8008de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8008dea:	d202      	bcs.n	8008df2 <__udivmoddi4+0x12a>
 8008dec:	4288      	cmp	r0, r1
 8008dee:	f200 80cb 	bhi.w	8008f88 <__udivmoddi4+0x2c0>
 8008df2:	4643      	mov	r3, r8
 8008df4:	1a09      	subs	r1, r1, r0
 8008df6:	b2a4      	uxth	r4, r4
 8008df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8008dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8008e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008e04:	fb0e fe00 	mul.w	lr, lr, r0
 8008e08:	45a6      	cmp	lr, r4
 8008e0a:	d908      	bls.n	8008e1e <__udivmoddi4+0x156>
 8008e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8008e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8008e14:	d202      	bcs.n	8008e1c <__udivmoddi4+0x154>
 8008e16:	45a6      	cmp	lr, r4
 8008e18:	f200 80bb 	bhi.w	8008f92 <__udivmoddi4+0x2ca>
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	eba4 040e 	sub.w	r4, r4, lr
 8008e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008e26:	e79c      	b.n	8008d62 <__udivmoddi4+0x9a>
 8008e28:	f1c6 0720 	rsb	r7, r6, #32
 8008e2c:	40b3      	lsls	r3, r6
 8008e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8008e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8008e36:	fa20 f407 	lsr.w	r4, r0, r7
 8008e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8008e3e:	431c      	orrs	r4, r3
 8008e40:	40f9      	lsrs	r1, r7
 8008e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008e46:	fa00 f306 	lsl.w	r3, r0, r6
 8008e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8008e4e:	0c20      	lsrs	r0, r4, #16
 8008e50:	fa1f fe8c 	uxth.w	lr, ip
 8008e54:	fb09 1118 	mls	r1, r9, r8, r1
 8008e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8008e60:	4288      	cmp	r0, r1
 8008e62:	fa02 f206 	lsl.w	r2, r2, r6
 8008e66:	d90b      	bls.n	8008e80 <__udivmoddi4+0x1b8>
 8008e68:	eb1c 0101 	adds.w	r1, ip, r1
 8008e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8008e70:	f080 8088 	bcs.w	8008f84 <__udivmoddi4+0x2bc>
 8008e74:	4288      	cmp	r0, r1
 8008e76:	f240 8085 	bls.w	8008f84 <__udivmoddi4+0x2bc>
 8008e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8008e7e:	4461      	add	r1, ip
 8008e80:	1a09      	subs	r1, r1, r0
 8008e82:	b2a4      	uxth	r4, r4
 8008e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8008e88:	fb09 1110 	mls	r1, r9, r0, r1
 8008e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8008e94:	458e      	cmp	lr, r1
 8008e96:	d908      	bls.n	8008eaa <__udivmoddi4+0x1e2>
 8008e98:	eb1c 0101 	adds.w	r1, ip, r1
 8008e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8008ea0:	d26c      	bcs.n	8008f7c <__udivmoddi4+0x2b4>
 8008ea2:	458e      	cmp	lr, r1
 8008ea4:	d96a      	bls.n	8008f7c <__udivmoddi4+0x2b4>
 8008ea6:	3802      	subs	r0, #2
 8008ea8:	4461      	add	r1, ip
 8008eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008eae:	fba0 9402 	umull	r9, r4, r0, r2
 8008eb2:	eba1 010e 	sub.w	r1, r1, lr
 8008eb6:	42a1      	cmp	r1, r4
 8008eb8:	46c8      	mov	r8, r9
 8008eba:	46a6      	mov	lr, r4
 8008ebc:	d356      	bcc.n	8008f6c <__udivmoddi4+0x2a4>
 8008ebe:	d053      	beq.n	8008f68 <__udivmoddi4+0x2a0>
 8008ec0:	b15d      	cbz	r5, 8008eda <__udivmoddi4+0x212>
 8008ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8008ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8008eca:	fa01 f707 	lsl.w	r7, r1, r7
 8008ece:	fa22 f306 	lsr.w	r3, r2, r6
 8008ed2:	40f1      	lsrs	r1, r6
 8008ed4:	431f      	orrs	r7, r3
 8008ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8008eda:	2600      	movs	r6, #0
 8008edc:	4631      	mov	r1, r6
 8008ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee2:	f1c2 0320 	rsb	r3, r2, #32
 8008ee6:	40d8      	lsrs	r0, r3
 8008ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8008eec:	fa21 f303 	lsr.w	r3, r1, r3
 8008ef0:	4091      	lsls	r1, r2
 8008ef2:	4301      	orrs	r1, r0
 8008ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008ef8:	fa1f fe8c 	uxth.w	lr, ip
 8008efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8008f00:	fb07 3610 	mls	r6, r7, r0, r3
 8008f04:	0c0b      	lsrs	r3, r1, #16
 8008f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8008f0e:	429e      	cmp	r6, r3
 8008f10:	fa04 f402 	lsl.w	r4, r4, r2
 8008f14:	d908      	bls.n	8008f28 <__udivmoddi4+0x260>
 8008f16:	eb1c 0303 	adds.w	r3, ip, r3
 8008f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8008f1e:	d22f      	bcs.n	8008f80 <__udivmoddi4+0x2b8>
 8008f20:	429e      	cmp	r6, r3
 8008f22:	d92d      	bls.n	8008f80 <__udivmoddi4+0x2b8>
 8008f24:	3802      	subs	r0, #2
 8008f26:	4463      	add	r3, ip
 8008f28:	1b9b      	subs	r3, r3, r6
 8008f2a:	b289      	uxth	r1, r1
 8008f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8008f30:	fb07 3316 	mls	r3, r7, r6, r3
 8008f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f38:	fb06 f30e 	mul.w	r3, r6, lr
 8008f3c:	428b      	cmp	r3, r1
 8008f3e:	d908      	bls.n	8008f52 <__udivmoddi4+0x28a>
 8008f40:	eb1c 0101 	adds.w	r1, ip, r1
 8008f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8008f48:	d216      	bcs.n	8008f78 <__udivmoddi4+0x2b0>
 8008f4a:	428b      	cmp	r3, r1
 8008f4c:	d914      	bls.n	8008f78 <__udivmoddi4+0x2b0>
 8008f4e:	3e02      	subs	r6, #2
 8008f50:	4461      	add	r1, ip
 8008f52:	1ac9      	subs	r1, r1, r3
 8008f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008f58:	e738      	b.n	8008dcc <__udivmoddi4+0x104>
 8008f5a:	462e      	mov	r6, r5
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	e705      	b.n	8008d6c <__udivmoddi4+0xa4>
 8008f60:	4606      	mov	r6, r0
 8008f62:	e6e3      	b.n	8008d2c <__udivmoddi4+0x64>
 8008f64:	4618      	mov	r0, r3
 8008f66:	e6f8      	b.n	8008d5a <__udivmoddi4+0x92>
 8008f68:	454b      	cmp	r3, r9
 8008f6a:	d2a9      	bcs.n	8008ec0 <__udivmoddi4+0x1f8>
 8008f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8008f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8008f74:	3801      	subs	r0, #1
 8008f76:	e7a3      	b.n	8008ec0 <__udivmoddi4+0x1f8>
 8008f78:	4646      	mov	r6, r8
 8008f7a:	e7ea      	b.n	8008f52 <__udivmoddi4+0x28a>
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	e794      	b.n	8008eaa <__udivmoddi4+0x1e2>
 8008f80:	4640      	mov	r0, r8
 8008f82:	e7d1      	b.n	8008f28 <__udivmoddi4+0x260>
 8008f84:	46d0      	mov	r8, sl
 8008f86:	e77b      	b.n	8008e80 <__udivmoddi4+0x1b8>
 8008f88:	3b02      	subs	r3, #2
 8008f8a:	4461      	add	r1, ip
 8008f8c:	e732      	b.n	8008df4 <__udivmoddi4+0x12c>
 8008f8e:	4630      	mov	r0, r6
 8008f90:	e709      	b.n	8008da6 <__udivmoddi4+0xde>
 8008f92:	4464      	add	r4, ip
 8008f94:	3802      	subs	r0, #2
 8008f96:	e742      	b.n	8008e1e <__udivmoddi4+0x156>

08008f98 <__aeabi_idiv0>:
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop

08008f9c <DAC7571_Init>:
 * 			the configuration information for the specified I2C.
 * @param	Vdd DAC7571 Supply voltage
 * @param	timerHandle Pointer to timer handle used in test function
 */
void DAC7571_Init(DAC7571_t *dac, I2C_HandleTypeDef *i2cHandle, float Vdd)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	ed87 0a01 	vstr	s0, [r7, #4]
	dac->m_i2cHandle = i2cHandle;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	601a      	str	r2, [r3, #0]
	dac->m_Vdd = Vdd;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	60da      	str	r2, [r3, #12]

	dac->m_InitDone = 1;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	721a      	strb	r2, [r3, #8]
}
 8008fbc:	bf00      	nop
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <DAC7571_SetOutVoltage>:
 * @param	Vdd DAC7571 Supply voltage
 * @param	Vout Desired output voltage
 * @return	Data stored in struct buffer (1), Data out of range (0).
 */
uint8_t DAC7571_SetOutVoltage(DAC7571_t *dac, float Vout)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	ed87 0a00 	vstr	s0, [r7]
	uint16_t data_i;
	/* Check if desired output voltage is in range, if not return an error */
	if (Vout > dac->m_Vdd || Vout < 0)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8008fda:	ed97 7a00 	vldr	s14, [r7]
 8008fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe6:	dc06      	bgt.n	8008ff6 <DAC7571_SetOutVoltage+0x2e>
 8008fe8:	edd7 7a00 	vldr	s15, [r7]
 8008fec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff4:	d501      	bpl.n	8008ffa <DAC7571_SetOutVoltage+0x32>
	{
		return 1;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e02c      	b.n	8009054 <DAC7571_SetOutVoltage+0x8c>
	}
	/* Convert Voltage(float) to the equivalent 12bit-scaled value */
	data_i = floor((Vout/dac->m_Vdd)*4095.0);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	edd3 7a03 	vldr	s15, [r3, #12]
 8009000:	ed97 7a00 	vldr	s14, [r7]
 8009004:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009008:	ee16 0a90 	vmov	r0, s13
 800900c:	f7ff faa4 	bl	8008558 <__aeabi_f2d>
 8009010:	a313      	add	r3, pc, #76	; (adr r3, 8009060 <DAC7571_SetOutVoltage+0x98>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f7ff faf7 	bl	8008608 <__aeabi_dmul>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	ec43 2b17 	vmov	d7, r2, r3
 8009022:	eeb0 0a47 	vmov.f32	s0, s14
 8009026:	eef0 0a67 	vmov.f32	s1, s15
 800902a:	f016 f80d 	bl	801f048 <floor>
 800902e:	ec53 2b10 	vmov	r2, r3, d0
 8009032:	4610      	mov	r0, r2
 8009034:	4619      	mov	r1, r3
 8009036:	f7ff fdbf 	bl	8008bb8 <__aeabi_d2uiz>
 800903a:	4603      	mov	r3, r0
 800903c:	81fb      	strh	r3, [r7, #14]
	data_i = (REG_CONFIG_OP_NORMAL | data_i);

	/* Split 16bit calculated data value into two byte.
	 * HAL library can handle only byte's data.
	 */
	dac->TxDataBuffer[0] = data_i>>8;
 800903e:	89fb      	ldrh	r3, [r7, #14]
 8009040:	0a1b      	lsrs	r3, r3, #8
 8009042:	b29b      	uxth	r3, r3
 8009044:	b2da      	uxtb	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	715a      	strb	r2, [r3, #5]
	dac->TxDataBuffer[1] = data_i;
 800904a:	89fb      	ldrh	r3, [r7, #14]
 800904c:	b2da      	uxtb	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	719a      	strb	r2, [r3, #6]

	return 0;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	f3af 8000 	nop.w
 8009060:	00000000 	.word	0x00000000
 8009064:	40affe00 	.word	0x40affe00

08009068 <DAC7571_SetOutEnabling>:
 * @param	EnableState enable (1) or disable (0) the sending of the output buffer value to the DAC.
 * 			If you put it in disable state, output buffer will be set to zero.
 *
 */
void DAC7571_SetOutEnabling(DAC7571_t *dac, uint8_t EnableState)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
	dac->m_EnableDAC = EnableState;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	78fa      	ldrb	r2, [r7, #3]
 8009078:	71da      	strb	r2, [r3, #7]
	if (EnableState == 0)
 800907a:	78fb      	ldrb	r3, [r7, #3]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d104      	bne.n	800908a <DAC7571_SetOutEnabling+0x22>
	{
		DAC7571_SetOutVoltage(dac, 0);
 8009080:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8009094 <DAC7571_SetOutEnabling+0x2c>
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff ff9f 	bl	8008fc8 <DAC7571_SetOutVoltage>
	}
}
 800908a:	bf00      	nop
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	00000000 	.word	0x00000000

08009098 <DAC7571_WriteDMA>:
		return 1;
	}
}

uint8_t DAC7571_WriteDMA(DAC7571_t *dac)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
	/*
	 * Send the data to I2C bus
	 */
	if (dac->m_EnableDAC == 1)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	79db      	ldrb	r3, [r3, #7]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d111      	bne.n	80090cc <DAC7571_WriteDMA+0x34>
	{
		if (HAL_I2C_Master_Transmit_DMA(dac->m_i2cHandle, DAC7571_BUS_ADDRESS, dac->TxDataBuffer, 2) == HAL_OK)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6818      	ldr	r0, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	1d5a      	adds	r2, r3, #5
 80090b0:	2302      	movs	r3, #2
 80090b2:	2198      	movs	r1, #152	; 0x98
 80090b4:	f007 fadc 	bl	8010670 <HAL_I2C_Master_Transmit_DMA>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <DAC7571_WriteDMA+0x30>
		{
			dac->m_writingAnalogVal = 1;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	711a      	strb	r2, [r3, #4]
			/* Data sent correctly to I2C DMA */
			return 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e002      	b.n	80090ce <DAC7571_WriteDMA+0x36>
		}
		else
		{
			/* Error on sending data */
			return 1;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e000      	b.n	80090ce <DAC7571_WriteDMA+0x36>
		}
	}
	else
	{
		return 1;
 80090cc:	2301      	movs	r3, #1
	}
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <DAC7571_WriteDMA_Complete>:
void DAC7571_WriteDMA_Complete(DAC7571_t *dac)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
	/*
	* I2C DMA Writing loop
	*/
	DAC7571_WriteDMA(dac);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff ffda 	bl	8009098 <DAC7571_WriteDMA>
	dac->m_writingAnalogVal = 0;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	711a      	strb	r2, [r3, #4]
}
 80090ea:	bf00      	nop
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	0000      	movs	r0, r0
 80090f4:	0000      	movs	r0, r0
	...

080090f8 <DAC7571_TestOutput>:

void DAC7571_TestOutput(DAC7571_t *dac)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
	static uint16_t currentVal;
	static uint8_t slope;

	DAC7571_SetOutEnabling(dac, 1);
 8009100:	2101      	movs	r1, #1
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff ffb0 	bl	8009068 <DAC7571_SetOutEnabling>

	if (currentVal < SinNS && slope == 0)
 8009108:	4b21      	ldr	r3, [pc, #132]	; (8009190 <DAC7571_TestOutput+0x98>)
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	2b7f      	cmp	r3, #127	; 0x7f
 800910e:	d809      	bhi.n	8009124 <DAC7571_TestOutput+0x2c>
 8009110:	4b20      	ldr	r3, [pc, #128]	; (8009194 <DAC7571_TestOutput+0x9c>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d105      	bne.n	8009124 <DAC7571_TestOutput+0x2c>
	{
		currentVal++;
 8009118:	4b1d      	ldr	r3, [pc, #116]	; (8009190 <DAC7571_TestOutput+0x98>)
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	b29a      	uxth	r2, r3
 8009120:	4b1b      	ldr	r3, [pc, #108]	; (8009190 <DAC7571_TestOutput+0x98>)
 8009122:	801a      	strh	r2, [r3, #0]
	}
	if (currentVal == SinNS)
 8009124:	4b1a      	ldr	r3, [pc, #104]	; (8009190 <DAC7571_TestOutput+0x98>)
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	2b80      	cmp	r3, #128	; 0x80
 800912a:	d102      	bne.n	8009132 <DAC7571_TestOutput+0x3a>
	{
		currentVal = 0;
 800912c:	4b18      	ldr	r3, [pc, #96]	; (8009190 <DAC7571_TestOutput+0x98>)
 800912e:	2200      	movs	r2, #0
 8009130:	801a      	strh	r2, [r3, #0]
	}

	DAC7571_SetOutVoltage(dac, DAC_ALIM_VOLTAGE*SinWave[currentVal]/4095.0);
 8009132:	4b17      	ldr	r3, [pc, #92]	; (8009190 <DAC7571_TestOutput+0x98>)
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	4b17      	ldr	r3, [pc, #92]	; (8009198 <DAC7571_TestOutput+0xa0>)
 800913a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff f9f8 	bl	8008534 <__aeabi_i2d>
 8009144:	a30e      	add	r3, pc, #56	; (adr r3, 8009180 <DAC7571_TestOutput+0x88>)
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f7ff fa5d 	bl	8008608 <__aeabi_dmul>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	4610      	mov	r0, r2
 8009154:	4619      	mov	r1, r3
 8009156:	a30c      	add	r3, pc, #48	; (adr r3, 8009188 <DAC7571_TestOutput+0x90>)
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f7ff fb7e 	bl	800885c <__aeabi_ddiv>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4610      	mov	r0, r2
 8009166:	4619      	mov	r1, r3
 8009168:	f7ff fd46 	bl	8008bf8 <__aeabi_d2f>
 800916c:	4603      	mov	r3, r0
 800916e:	ee00 3a10 	vmov	s0, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7ff ff28 	bl	8008fc8 <DAC7571_SetOutVoltage>
}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	c28f5c29 	.word	0xc28f5c29
 8009184:	400a28f5 	.word	0x400a28f5
 8009188:	00000000 	.word	0x00000000
 800918c:	40affe00 	.word	0x40affe00
 8009190:	200002fc 	.word	0x200002fc
 8009194:	200002fe 	.word	0x200002fe
 8009198:	080222bc 	.word	0x080222bc

0800919c <IIM42652_Init>:
//--------------------------------------
// ------ INITIALIZATION METHODS -------
//--------------------------------------

uint8_t IIM42652_Init(IIM42652_t *imu, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *csImuPinBank, uint16_t csImuPin, AC1_Config_t *actConfig)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
 80091a8:	807b      	strh	r3, [r7, #2]
	imu->m_spiHandle = spiHandle;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	601a      	str	r2, [r3, #0]
	imu->m_csImuPinBank = csImuPinBank;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	605a      	str	r2, [r3, #4]
	imu->m_csImuPin = csImuPin;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	887a      	ldrh	r2, [r7, #2]
 80091ba:	811a      	strh	r2, [r3, #8]
	imu->m_RegisterBank = 0;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	imu->bSingleShot = 0;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	741a      	strb	r2, [r3, #16]
	imu->decimationFactor = 32;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d4:	2220      	movs	r2, #32
 80091d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	imu->m_DMPStarted = 0;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	imu->m_actUserConfig = actConfig;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ec:	461a      	mov	r2, r3
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	66d3      	str	r3, [r2, #108]	; 0x6c

	memset(imu->txBufDMA, 0x00, sizeof(imu->txBufDMA));
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3313      	adds	r3, #19
 80091f6:	f44f 6201 	mov.w	r2, #2064	; 0x810
 80091fa:	2100      	movs	r1, #0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f016 f91d 	bl	801f43c <memset>

	/* Activate SPI-type communication */
	uint8_t txBuf[2] = {0x10 | 0x80, 0x00}; //Read dummy address: set the 8th-bit to 1.
 8009202:	2390      	movs	r3, #144	; 0x90
 8009204:	82bb      	strh	r3, [r7, #20]
	uint8_t rxBuf[2];
	HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6858      	ldr	r0, [r3, #4]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	891b      	ldrh	r3, [r3, #8]
 800920e:	2200      	movs	r2, #0
 8009210:	4619      	mov	r1, r3
 8009212:	f007 f8b7 	bl	8010384 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	f107 0210 	add.w	r2, r7, #16
 800921e:	f107 0114 	add.w	r1, r7, #20
 8009222:	f04f 33ff 	mov.w	r3, #4294967295
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	2302      	movs	r3, #2
 800922a:	f00b faae 	bl	801478a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6858      	ldr	r0, [r3, #4]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	891b      	ldrh	r3, [r3, #8]
 8009236:	2201      	movs	r2, #1
 8009238:	4619      	mov	r1, r3
 800923a:	f007 f8a3 	bl	8010384 <HAL_GPIO_WritePin>

	/* Check communication with the device */
	uint8_t status = HAL_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	75fb      	strb	r3, [r7, #23]

	status += IIM42652_CheckCommunication(imu);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 f890 	bl	8009368 <IIM42652_CheckCommunication>
 8009248:	4603      	mov	r3, r0
 800924a:	461a      	mov	r2, r3
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	4413      	add	r3, r2
 8009250:	75fb      	strb	r3, [r7, #23]

	if (status == HAL_OK)
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d164      	bne.n	8009322 <IIM42652_Init+0x186>
	{
		/* Connection OK */
		/* Initialize the device registers */
		status += IIM42652_SetBasicConfig(imu);
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 f8b9 	bl	80093d0 <IIM42652_SetBasicConfig>
 800925e:	4603      	mov	r3, r0
 8009260:	461a      	mov	r2, r3
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	4413      	add	r3, r2
 8009266:	75fb      	strb	r3, [r7, #23]

		if (imu->m_actUserConfig->OMD_CONFIG_VBYTE != USER_DATA_VALID_VALUE)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800926e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009270:	7b1b      	ldrb	r3, [r3, #12]
 8009272:	2bac      	cmp	r3, #172	; 0xac
 8009274:	d04d      	beq.n	8009312 <IIM42652_Init+0x176>
		{
			//Initialize user config data to a valid/default state
			imu->m_actUserConfig->OMD_CONFIG_VBYTE = USER_DATA_VALID_VALUE;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800927e:	22ac      	movs	r2, #172	; 0xac
 8009280:	731a      	strb	r2, [r3, #12]
			imu->m_actUserConfig->OMD_CONFIG_ACC_ODR = IIM42652_Accelerometer_8kHz;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928a:	2203      	movs	r2, #3
 800928c:	705a      	strb	r2, [r3, #1]
			imu->m_actUserConfig->OMD_CONFIG_ACC_FSR = IIM42652_Accelerometer_8G;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009296:	2201      	movs	r2, #1
 8009298:	701a      	strb	r2, [r3, #0]
			imu->m_actUserConfig->OMD_CONFIG_ACC_FILT_BW = IIM42652_Accelerometer_ODR_LL;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092a2:	220e      	movs	r2, #14
 80092a4:	709a      	strb	r2, [r3, #2]
			imu->m_actUserConfig->OMD_CONFIG_GYRO_ODR = IIM42652_Gyroscope_8kHz;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ae:	2203      	movs	r2, #3
 80092b0:	711a      	strb	r2, [r3, #4]
			imu->m_actUserConfig->OMD_CONFIG_GYRO_FSR = IIM42652_Gyroscope_2000dps;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ba:	2200      	movs	r2, #0
 80092bc:	70da      	strb	r2, [r3, #3]
			imu->m_actUserConfig->OMD_CONFIG_GYRO_FILT_BW = IIM42652_Gyroscope_ODR_LL;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c6:	220e      	movs	r2, #14
 80092c8:	715a      	strb	r2, [r3, #5]
			imu->m_actUserConfig->OMD_CONFIG_WOM_X_TH = 128;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092d2:	2280      	movs	r2, #128	; 0x80
 80092d4:	719a      	strb	r2, [r3, #6]
			imu->m_actUserConfig->OMD_CONFIG_WOM_Y_TH = 128;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092de:	2280      	movs	r2, #128	; 0x80
 80092e0:	71da      	strb	r2, [r3, #7]
			imu->m_actUserConfig->OMD_CONFIG_WOM_Z_TH = 128;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ea:	2280      	movs	r2, #128	; 0x80
 80092ec:	721a      	strb	r2, [r3, #8]
			imu->m_actUserConfig->OMD_CONFIG_WOM_INT_MODE = IMU_WOMIntMode_OR;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092f6:	2200      	movs	r2, #0
 80092f8:	725a      	strb	r2, [r3, #9]
			imu->m_actUserConfig->OMD_CONFIG_WOM_MODE = IMU_WOMMode_Previous;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009302:	2201      	movs	r2, #1
 8009304:	729a      	strb	r2, [r3, #10]
			imu->m_actUserConfig->OMD_CONFIG_SMD_MODE = IMU_SMDMode_WOM;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800930c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800930e:	2201      	movs	r2, #1
 8009310:	72da      	strb	r2, [r3, #11]
		}

		status += IIM42652_SetUserConfig(imu);
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 f96a 	bl	80095ec <IIM42652_SetUserConfig>
 8009318:	4603      	mov	r3, r0
 800931a:	461a      	mov	r2, r3
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	4413      	add	r3, r2
 8009320:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <IIM42652_InitBusGuard>:

uint8_t IIM42652_InitBusGuard(IIM42652_t *imu, osSemaphoreId spiSemaphoreHandler)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
	imu->m_spiSemaphoreHandle = spiSemaphoreHandler;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	60da      	str	r2, [r3, #12]
	configASSERT(imu->m_spiSemaphoreHandle);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10a      	bne.n	800935a <IIM42652_InitBusGuard+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009356:	bf00      	nop
 8009358:	e7fe      	b.n	8009358 <IIM42652_InitBusGuard+0x2c>

	return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <IIM42652_CheckCommunication>:

uint8_t IIM42652_CheckCommunication(IIM42652_t *imu)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af02      	add	r7, sp, #8
 800936e:	6078      	str	r0, [r7, #4]
	uint8_t txBuf[2] = {REG_WHO_AM_I | 0x80, 0x00}; //Read operation: set the 8th-bit to 1.
 8009370:	23f5      	movs	r3, #245	; 0xf5
 8009372:	81bb      	strh	r3, [r7, #12]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6858      	ldr	r0, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	891b      	ldrh	r3, [r3, #8]
 800937c:	2200      	movs	r2, #0
 800937e:	4619      	mov	r1, r3
 8009380:	f007 f800 	bl	8010384 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	f107 0208 	add.w	r2, r7, #8
 800938c:	f107 010c 	add.w	r1, r7, #12
 8009390:	f04f 33ff 	mov.w	r3, #4294967295
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	2302      	movs	r3, #2
 8009398:	f00b f9f7 	bl	801478a <HAL_SPI_TransmitReceive>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6858      	ldr	r0, [r3, #4]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	891b      	ldrh	r3, [r3, #8]
 80093a8:	2201      	movs	r2, #1
 80093aa:	4619      	mov	r1, r3
 80093ac:	f006 ffea 	bl	8010384 <HAL_GPIO_WritePin>

	if ((status == HAL_OK) && (rxBuf[1] == IIM42652_WHO_AM_I_ID))
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d105      	bne.n	80093c2 <IIM42652_CheckCommunication+0x5a>
 80093b6:	7a7b      	ldrb	r3, [r7, #9]
 80093b8:	2b6f      	cmp	r3, #111	; 0x6f
 80093ba:	d102      	bne.n	80093c2 <IIM42652_CheckCommunication+0x5a>
	{
		/* IMU correctly recognized */
		status = HAL_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]
 80093c0:	e001      	b.n	80093c6 <IIM42652_CheckCommunication+0x5e>
	}
	else
	{
		status = HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80093c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <IIM42652_SetBasicConfig>:

uint8_t IIM42652_SetBasicConfig(IIM42652_t *imu)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	uint8_t status = HAL_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]

	/* Power OFF Accel, Gyro and Temp sensors*/
	__IMU_TURN_OFF(imu);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fddc 	bl	8009f9a <__IMU_TURN_OFF>

	/* Check actual register bank selected */
	if (imu->m_RegisterBank != 0)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <IIM42652_SetBasicConfig+0x28>
	{
		IIM42652_SetRegisterBank(imu, IMU_RegBank_0);
 80093f0:	2100      	movs	r1, #0
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fe06 	bl	800a004 <IIM42652_SetRegisterBank>
	}

	/* Soft-reset */
	status += IIM42652_SoftReset(imu);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fdeb 	bl	8009fd4 <IIM42652_SoftReset>
 80093fe:	4603      	mov	r3, r0
 8009400:	461a      	mov	r2, r3
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	4413      	add	r3, r2
 8009406:	73fb      	strb	r3, [r7, #15]

	/* Interrupt pins configuration */
	status += IIM42652_SetIntType(imu, IMU_Int_1_2, IMU_Int_Pulsed);
 8009408:	2200      	movs	r2, #0
 800940a:	2103      	movs	r1, #3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fec0 	bl	800a192 <IIM42652_SetIntType>
 8009412:	4603      	mov	r3, r0
 8009414:	461a      	mov	r2, r3
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	4413      	add	r3, r2
 800941a:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetIntCircuit(imu, IMU_Int_1_2, IMU_Int_PushPull);
 800941c:	2201      	movs	r2, #1
 800941e:	2103      	movs	r1, #3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 ff06 	bl	800a232 <IIM42652_SetIntCircuit>
 8009426:	4603      	mov	r3, r0
 8009428:	461a      	mov	r2, r3
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	4413      	add	r3, r2
 800942e:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetIntPolarity(imu, IMU_Int_1_2, IMU_Int_ActiveHigh);
 8009430:	2201      	movs	r2, #1
 8009432:	2103      	movs	r1, #3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 ff4c 	bl	800a2d2 <IIM42652_SetIntPolarity>
 800943a:	4603      	mov	r3, r0
 800943c:	461a      	mov	r2, r3
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	4413      	add	r3, r2
 8009442:	73fb      	strb	r3, [r7, #15]

	/* FIFO configuration */
	status += IIM42652_SetFIFOMode(imu, IMU_FIFOMode_Steam_Continuos);
 8009444:	2101      	movs	r1, #1
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 ff93 	bl	800a372 <IIM42652_SetFIFOMode>
 800944c:	4603      	mov	r3, r0
 800944e:	461a      	mov	r2, r3
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	4413      	add	r3, r2
 8009454:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetFIFOCountMode(imu, IMU_FIFOCountMode_Records);
 8009456:	2101      	movs	r1, #1
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 ffa4 	bl	800a3a6 <IIM42652_SetFIFOCountMode>
 800945e:	4603      	mov	r3, r0
 8009460:	461a      	mov	r2, r3
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	4413      	add	r3, r2
 8009466:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetFIFOHoldLastValidData_Enable(imu, DISABLE);
 8009468:	2100      	movs	r1, #0
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 ffb5 	bl	800a3da <IIM42652_SetFIFOHoldLastValidData_Enable>
 8009470:	4603      	mov	r3, r0
 8009472:	461a      	mov	r2, r3
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	4413      	add	r3, r2
 8009478:	73fb      	strb	r3, [r7, #15]
//	status += IIM42652_SetFIFOIntThreshold_Point(imu, IIM42652_FIFO_MIRRORING_SIZE / (2 * FIFO_16BYTES_PACKET_SIZE));
	status += IIM42652_SetFIFOIntThreshold_Point(imu, 125 /* packets */);
 800947a:	217d      	movs	r1, #125	; 0x7d
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f001 f82e 	bl	800a4de <IIM42652_SetFIFOIntThreshold_Point>
 8009482:	4603      	mov	r3, r0
 8009484:	461a      	mov	r2, r3
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	4413      	add	r3, r2
 800948a:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetFIFOIntThreshold_Enable(imu, ENABLE);
 800948c:	2101      	movs	r1, #1
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 ffbd 	bl	800a40e <IIM42652_SetFIFOIntThreshold_Enable>
 8009494:	4603      	mov	r3, r0
 8009496:	461a      	mov	r2, r3
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	4413      	add	r3, r2
 800949c:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetFIFOStore_Accel(imu, ENABLE);
 800949e:	2101      	movs	r1, #1
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 ffce 	bl	800a442 <IIM42652_SetFIFOStore_Accel>
 80094a6:	4603      	mov	r3, r0
 80094a8:	461a      	mov	r2, r3
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
 80094ac:	4413      	add	r3, r2
 80094ae:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetFIFOStore_Gyro(imu, ENABLE);
 80094b0:	2101      	movs	r1, #1
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 ffdf 	bl	800a476 <IIM42652_SetFIFOStore_Gyro>
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	4413      	add	r3, r2
 80094c0:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetFIFOStore_Temperature(imu, ENABLE);
 80094c2:	2101      	movs	r1, #1
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fff0 	bl	800a4aa <IIM42652_SetFIFOStore_Temperature>
 80094ca:	4603      	mov	r3, r0
 80094cc:	461a      	mov	r2, r3
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	4413      	add	r3, r2
 80094d2:	73fb      	strb	r3, [r7, #15]
//	status += IIM42652_SetFIFOStore_FsyncTimestamp(imu, DISABLE);

	/* Interrupt event configuration */
	status += IIM42652_SetIntPulsDuration(imu, IMU_IntPuls_8u);
 80094d4:	2101      	movs	r1, #1
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 f822 	bl	800a520 <IIM42652_SetIntPulsDuration>
 80094dc:	4603      	mov	r3, r0
 80094de:	461a      	mov	r2, r3
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	4413      	add	r3, r2
 80094e4:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetIntPulsDeassert(imu, DISABLE);
 80094e6:	2100      	movs	r1, #0
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f001 f833 	bl	800a554 <IIM42652_SetIntPulsDeassert>
 80094ee:	4603      	mov	r3, r0
 80094f0:	461a      	mov	r2, r3
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	4413      	add	r3, r2
 80094f6:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetIntPulsAsyncReset(imu, ENABLE);
 80094f8:	2101      	movs	r1, #1
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 f849 	bl	800a592 <IIM42652_SetIntPulsAsyncReset>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4413      	add	r3, r2
 8009508:	73fb      	strb	r3, [r7, #15]

	/* INTERRUPT 1 sources configuration */
	status += IIM42652_SetIntSource(imu, IMU_Int_1, IMU_IntSource_RESET_DONE, DISABLE);
 800950a:	2300      	movs	r3, #0
 800950c:	2204      	movs	r2, #4
 800950e:	2101      	movs	r1, #1
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f001 f85d 	bl	800a5d0 <IIM42652_SetIntSource>
 8009516:	4603      	mov	r3, r0
 8009518:	461a      	mov	r2, r3
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	4413      	add	r3, r2
 800951e:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetIntSource(imu, IMU_Int_1, IMU_IntSource_UI_Data_RDY, DISABLE);
 8009520:	2300      	movs	r3, #0
 8009522:	2203      	movs	r2, #3
 8009524:	2101      	movs	r1, #1
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f001 f852 	bl	800a5d0 <IIM42652_SetIntSource>
 800952c:	4603      	mov	r3, r0
 800952e:	461a      	mov	r2, r3
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	4413      	add	r3, r2
 8009534:	73fb      	strb	r3, [r7, #15]
//	status += IIM42652_SetIntSource(imu, IMU_Int_1, IMU_IntSource_SMD, ENABLE);
	status += IIM42652_SetIntSource(imu, IMU_Int_1, IMU_IntSource_FIFO_THS, ENABLE);
 8009536:	2301      	movs	r3, #1
 8009538:	2202      	movs	r2, #2
 800953a:	2101      	movs	r1, #1
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f001 f847 	bl	800a5d0 <IIM42652_SetIntSource>
 8009542:	4603      	mov	r3, r0
 8009544:	461a      	mov	r2, r3
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	4413      	add	r3, r2
 800954a:	73fb      	strb	r3, [r7, #15]
	//(Default = 1163)
	//ODR 8kHz -> Set AAF BW to max value of 3979 <= Nyquist frequency + (-3dB range):
	//AAF_DELT=63, DELTSQR=3968, BITSHIFT=3
	uint16_t dummy16;
	uint8_t dummy8;
	status += IIM42652_GetAccelAafBW(imu, &dummy16);
 800954c:	f107 030c 	add.w	r3, r7, #12
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 fa50 	bl	800a9f8 <IIM42652_GetAccelAafBW>
 8009558:	4603      	mov	r3, r0
 800955a:	461a      	mov	r2, r3
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	4413      	add	r3, r2
 8009560:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_GetAccelFilterOrder(imu, &dummy8);
 8009562:	f107 030b 	add.w	r3, r7, #11
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 fc0c 	bl	800ad86 <IIM42652_GetAccelFilterOrder>
 800956e:	4603      	mov	r3, r0
 8009570:	461a      	mov	r2, r3
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	4413      	add	r3, r2
 8009576:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_GetGyroFilterOrder(imu, &dummy8);
 8009578:	f107 030b 	add.w	r3, r7, #11
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f001 fc15 	bl	800adae <IIM42652_GetGyroFilterOrder>
 8009584:	4603      	mov	r3, r0
 8009586:	461a      	mov	r2, r3
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	4413      	add	r3, r2
 800958c:	73fb      	strb	r3, [r7, #15]

	/* Timestamp */
	status += IIM42652_SetTMSFSyncEnable(imu, DISABLE);
 800958e:	2100      	movs	r1, #0
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f001 fd05 	bl	800afa0 <IIM42652_SetTMSFSyncEnable>
 8009596:	4603      	mov	r3, r0
 8009598:	461a      	mov	r2, r3
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	4413      	add	r3, r2
 800959e:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetTMSDeltaMode(imu, ENABLE);
 80095a0:	2101      	movs	r1, #1
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 fd16 	bl	800afd4 <IIM42652_SetTMSDeltaMode>
 80095a8:	4603      	mov	r3, r0
 80095aa:	461a      	mov	r2, r3
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	4413      	add	r3, r2
 80095b0:	73fb      	strb	r3, [r7, #15]

	/* APEX/DMP configuration */
	status += IIM42652_SetDMPPowerSaveMode(imu, DISABLE);
 80095b2:	2100      	movs	r1, #0
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 fd27 	bl	800b008 <IIM42652_SetDMPPowerSaveMode>
 80095ba:	4603      	mov	r3, r0
 80095bc:	461a      	mov	r2, r3
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	4413      	add	r3, r2
 80095c2:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetDMPodr(imu, IIM42652_DMP_100Hz);
 80095c4:	2103      	movs	r1, #3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f001 fd35 	bl	800b036 <IIM42652_SetDMPodr>
 80095cc:	4603      	mov	r3, r0
 80095ce:	461a      	mov	r2, r3
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	4413      	add	r3, r2
 80095d4:	73fb      	strb	r3, [r7, #15]

	osDelay(200);
 80095d6:	20c8      	movs	r0, #200	; 0xc8
 80095d8:	f010 fb83 	bl	8019ce2 <osDelay>

	/* Power ON Accel, Gyro and Temp sensors in LN mode */
	__IMU_TURN_ON(imu);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fcbf 	bl	8009f60 <__IMU_TURN_ON>

	return status;
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <IIM42652_SetUserConfig>:

uint8_t IIM42652_SetUserConfig(IIM42652_t *imu)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	uint8_t status = HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]

	/* Power OFF Accel, Gyro and Temp sensors*/
	__IMU_TURN_OFF(imu);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fcce 	bl	8009f9a <__IMU_TURN_OFF>

	/* Sensors ODR and FSR */
	status += IIM42652_SetGyroFSR(imu, imu->m_actUserConfig->OMD_CONFIG_GYRO_FSR);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009606:	78db      	ldrb	r3, [r3, #3]
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 fa2d 	bl	800aa6a <IIM42652_SetGyroFSR>
 8009610:	4603      	mov	r3, r0
 8009612:	461a      	mov	r2, r3
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	4413      	add	r3, r2
 8009618:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetGyroODR(imu, imu->m_actUserConfig->OMD_CONFIG_GYRO_ODR);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009622:	791b      	ldrb	r3, [r3, #4]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f001 fa9d 	bl	800ab66 <IIM42652_SetGyroODR>
 800962c:	4603      	mov	r3, r0
 800962e:	461a      	mov	r2, r3
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	4413      	add	r3, r2
 8009634:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetAccelFSR(imu, imu->m_actUserConfig->OMD_CONFIG_ACC_FSR);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800963c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 fa50 	bl	800aae8 <IIM42652_SetAccelFSR>
 8009648:	4603      	mov	r3, r0
 800964a:	461a      	mov	r2, r3
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	4413      	add	r3, r2
 8009650:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetAccelODR(imu, imu->m_actUserConfig->OMD_CONFIG_ACC_ODR);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 fad2 	bl	800ac08 <IIM42652_SetAccelODR>
 8009664:	4603      	mov	r3, r0
 8009666:	461a      	mov	r2, r3
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	4413      	add	r3, r2
 800966c:	73fb      	strb	r3, [r7, #15]

	/* Sensors BW */
	status += IIM42652_SetGyroBW(imu, imu->m_actUserConfig->OMD_CONFIG_GYRO_FILT_BW);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009676:	795b      	ldrb	r3, [r3, #5]
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 fb4c 	bl	800ad18 <IIM42652_SetGyroBW>
 8009680:	4603      	mov	r3, r0
 8009682:	461a      	mov	r2, r3
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	4413      	add	r3, r2
 8009688:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetAccelBW(imu, imu->m_actUserConfig->OMD_CONFIG_ACC_FILT_BW);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009692:	789b      	ldrb	r3, [r3, #2]
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f001 fb07 	bl	800acaa <IIM42652_SetAccelBW>
 800969c:	4603      	mov	r3, r0
 800969e:	461a      	mov	r2, r3
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	4413      	add	r3, r2
 80096a4:	73fb      	strb	r3, [r7, #15]

	/* WOM configuration */
	status += IIM42652_SetWomXTh(imu, imu->m_actUserConfig->OMD_CONFIG_WOM_X_TH);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ae:	799b      	ldrb	r3, [r3, #6]
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 f82d 	bl	800a712 <IIM42652_SetWomXTh>
 80096b8:	4603      	mov	r3, r0
 80096ba:	461a      	mov	r2, r3
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	4413      	add	r3, r2
 80096c0:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetWomYTh(imu, imu->m_actUserConfig->OMD_CONFIG_WOM_Y_TH);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ca:	79db      	ldrb	r3, [r3, #7]
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 f84b 	bl	800a76a <IIM42652_SetWomYTh>
 80096d4:	4603      	mov	r3, r0
 80096d6:	461a      	mov	r2, r3
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	4413      	add	r3, r2
 80096dc:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetWomZTh(imu, imu->m_actUserConfig->OMD_CONFIG_WOM_Z_TH);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096e6:	7a1b      	ldrb	r3, [r3, #8]
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 f869 	bl	800a7c2 <IIM42652_SetWomZTh>
 80096f0:	4603      	mov	r3, r0
 80096f2:	461a      	mov	r2, r3
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	4413      	add	r3, r2
 80096f8:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetIntSource(imu, IMU_Int_2, IMU_IntSource_WOM_X, ENABLE);
 80096fa:	2301      	movs	r3, #1
 80096fc:	2208      	movs	r2, #8
 80096fe:	2102      	movs	r1, #2
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 ff65 	bl	800a5d0 <IIM42652_SetIntSource>
 8009706:	4603      	mov	r3, r0
 8009708:	461a      	mov	r2, r3
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	4413      	add	r3, r2
 800970e:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetIntSource(imu, IMU_Int_2, IMU_IntSource_WOM_Y, ENABLE);
 8009710:	2301      	movs	r3, #1
 8009712:	2209      	movs	r2, #9
 8009714:	2102      	movs	r1, #2
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 ff5a 	bl	800a5d0 <IIM42652_SetIntSource>
 800971c:	4603      	mov	r3, r0
 800971e:	461a      	mov	r2, r3
 8009720:	7bfb      	ldrb	r3, [r7, #15]
 8009722:	4413      	add	r3, r2
 8009724:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetIntSource(imu, IMU_Int_2, IMU_IntSource_WOM_Z, ENABLE);
 8009726:	2301      	movs	r3, #1
 8009728:	220a      	movs	r2, #10
 800972a:	2102      	movs	r1, #2
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 ff4f 	bl	800a5d0 <IIM42652_SetIntSource>
 8009732:	4603      	mov	r3, r0
 8009734:	461a      	mov	r2, r3
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	4413      	add	r3, r2
 800973a:	73fb      	strb	r3, [r7, #15]

	osDelay(50);
 800973c:	2032      	movs	r0, #50	; 0x32
 800973e:	f010 fad0 	bl	8019ce2 <osDelay>

	status += IIM42652_SetWOMIntMode(imu, imu->m_actUserConfig->OMD_CONFIG_WOM_INT_MODE);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800974a:	7a5b      	ldrb	r3, [r3, #9]
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 f863 	bl	800a81a <IIM42652_SetWOMIntMode>
 8009754:	4603      	mov	r3, r0
 8009756:	461a      	mov	r2, r3
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	4413      	add	r3, r2
 800975c:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetWOMMode(imu, imu->m_actUserConfig->OMD_CONFIG_WOM_MODE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009766:	7a9b      	ldrb	r3, [r3, #10]
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 f880 	bl	800a870 <IIM42652_SetWOMMode>
 8009770:	4603      	mov	r3, r0
 8009772:	461a      	mov	r2, r3
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	4413      	add	r3, r2
 8009778:	73fb      	strb	r3, [r7, #15]
	status += IIM42652_SetSMDMode(imu, imu->m_actUserConfig->OMD_CONFIG_SMD_MODE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009782:	7adb      	ldrb	r3, [r3, #11]
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f001 f89d 	bl	800a8c6 <IIM42652_SetSMDMode>
 800978c:	4603      	mov	r3, r0
 800978e:	461a      	mov	r2, r3
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	4413      	add	r3, r2
 8009794:	73fb      	strb	r3, [r7, #15]

	/* APEX/DMP enabling */
//	status += IIM42652_DMPStart(imu);

	/* Power ON Accel, Gyro and Temp sensors in LN mode */
	__IMU_TURN_ON(imu);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fbe2 	bl	8009f60 <__IMU_TURN_ON>

	return status;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <IIM42652_ReadRegister>:

//--------------------------------------
// ------- COMMUNICATION METHODS -------
//--------------------------------------
uint8_t IIM42652_ReadRegister(IIM42652_t *imu, uint8_t regAddr, uint8_t regBank, uint8_t *data)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b088      	sub	sp, #32
 80097aa:	af02      	add	r7, sp, #8
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	607b      	str	r3, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	72fb      	strb	r3, [r7, #11]
 80097b4:	4613      	mov	r3, r2
 80097b6:	72bb      	strb	r3, [r7, #10]
	uint8_t txBuf[2] = {regAddr | 0x80, 0x00}; //Read operation: set the 8th-bit to 1.
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	753b      	strb	r3, [r7, #20]
 80097c2:	2300      	movs	r3, #0
 80097c4:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];
	uint8_t status = HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	75fb      	strb	r3, [r7, #23]

	if (imu->m_RegisterBank != regBank)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80097d4:	7aba      	ldrb	r2, [r7, #10]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d004      	beq.n	80097e4 <IIM42652_ReadRegister+0x3e>
	{
		IIM42652_SetRegisterBank(imu, regBank);
 80097da:	7abb      	ldrb	r3, [r7, #10]
 80097dc:	4619      	mov	r1, r3
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 fc10 	bl	800a004 <IIM42652_SetRegisterBank>
	}

	if (osKernelRunning() == 1)
 80097e4:	f010 fa25 	bl	8019c32 <osKernelRunning>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d12a      	bne.n	8009844 <IIM42652_ReadRegister+0x9e>
	{
		osSemaphoreWait(imu->m_spiSemaphoreHandle, osWaitForever);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f04f 31ff 	mov.w	r1, #4294967295
 80097f6:	4618      	mov	r0, r3
 80097f8:	f010 fbce 	bl	8019f98 <osSemaphoreWait>
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6858      	ldr	r0, [r3, #4]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	891b      	ldrh	r3, [r3, #8]
 8009804:	2200      	movs	r2, #0
 8009806:	4619      	mov	r1, r3
 8009808:	f006 fdbc 	bl	8010384 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY));
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6818      	ldr	r0, [r3, #0]
 8009810:	f107 0210 	add.w	r2, r7, #16
 8009814:	f107 0114 	add.w	r1, r7, #20
 8009818:	f04f 33ff 	mov.w	r3, #4294967295
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	2302      	movs	r3, #2
 8009820:	f00a ffb3 	bl	801478a <HAL_SPI_TransmitReceive>
 8009824:	4603      	mov	r3, r0
 8009826:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6858      	ldr	r0, [r3, #4]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	891b      	ldrh	r3, [r3, #8]
 8009830:	2201      	movs	r2, #1
 8009832:	4619      	mov	r1, r3
 8009834:	f006 fda6 	bl	8010384 <HAL_GPIO_WritePin>
		osSemaphoreRelease(imu->m_spiSemaphoreHandle);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	4618      	mov	r0, r3
 800983e:	f010 fbf9 	bl	801a034 <osSemaphoreRelease>
 8009842:	e01d      	b.n	8009880 <IIM42652_ReadRegister+0xda>
	}
	else
	{
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6858      	ldr	r0, [r3, #4]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	891b      	ldrh	r3, [r3, #8]
 800984c:	2200      	movs	r2, #0
 800984e:	4619      	mov	r1, r3
 8009850:	f006 fd98 	bl	8010384 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY));
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6818      	ldr	r0, [r3, #0]
 8009858:	f107 0210 	add.w	r2, r7, #16
 800985c:	f107 0114 	add.w	r1, r7, #20
 8009860:	f04f 33ff 	mov.w	r3, #4294967295
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	2302      	movs	r3, #2
 8009868:	f00a ff8f 	bl	801478a <HAL_SPI_TransmitReceive>
 800986c:	4603      	mov	r3, r0
 800986e:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6858      	ldr	r0, [r3, #4]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	891b      	ldrh	r3, [r3, #8]
 8009878:	2201      	movs	r2, #1
 800987a:	4619      	mov	r1, r3
 800987c:	f006 fd82 	bl	8010384 <HAL_GPIO_WritePin>
	}

	if (status == HAL_OK)
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d102      	bne.n	800988c <IIM42652_ReadRegister+0xe6>
	{
		*data = rxBuf[1];
 8009886:	7c7a      	ldrb	r2, [r7, #17]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800988c:	7dfb      	ldrb	r3, [r7, #23]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <IIM42652_ReadRegisterBits>:
 * @param len 		Number of bits to read (not more than 8)
 * @param *data 	Pointer to variable where store the retrieved right-aligned read value
 * @return Status of operation (0 = success, 1 = error)
 */
uint8_t IIM42652_ReadRegisterBits(IIM42652_t *imu, uint8_t regAddr, uint8_t regBank, uint8_t start_bit, uint8_t len, uint8_t* data)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	4608      	mov	r0, r1
 80098a0:	4611      	mov	r1, r2
 80098a2:	461a      	mov	r2, r3
 80098a4:	4603      	mov	r3, r0
 80098a6:	70fb      	strb	r3, [r7, #3]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70bb      	strb	r3, [r7, #2]
 80098ac:	4613      	mov	r3, r2
 80098ae:	707b      	strb	r3, [r7, #1]
	uint8_t status = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	73fb      	strb	r3, [r7, #15]
	uint8_t tempData = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	737b      	strb	r3, [r7, #13]

	if (len>8 || start_bit>7)
 80098b8:	7e3b      	ldrb	r3, [r7, #24]
 80098ba:	2b08      	cmp	r3, #8
 80098bc:	d802      	bhi.n	80098c4 <IIM42652_ReadRegisterBits+0x2e>
 80098be:	787b      	ldrb	r3, [r7, #1]
 80098c0:	2b07      	cmp	r3, #7
 80098c2:	d901      	bls.n	80098c8 <IIM42652_ReadRegisterBits+0x32>
	{
		return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e030      	b.n	800992a <IIM42652_ReadRegisterBits+0x94>
	}

	if (IIM42652_ReadRegister(imu, regAddr, regBank, &tempData) == HAL_OK)
 80098c8:	f107 030d 	add.w	r3, r7, #13
 80098cc:	78ba      	ldrb	r2, [r7, #2]
 80098ce:	78f9      	ldrb	r1, [r7, #3]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff ff68 	bl	80097a6 <IIM42652_ReadRegister>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d120      	bne.n	800991e <IIM42652_ReadRegisterBits+0x88>
	{
		uint8_t mask = ((1 << len) - 1) << (start_bit - len + 1);
 80098dc:	7e3b      	ldrb	r3, [r7, #24]
 80098de:	2201      	movs	r2, #1
 80098e0:	fa02 f303 	lsl.w	r3, r2, r3
 80098e4:	1e5a      	subs	r2, r3, #1
 80098e6:	7879      	ldrb	r1, [r7, #1]
 80098e8:	7e3b      	ldrb	r3, [r7, #24]
 80098ea:	1acb      	subs	r3, r1, r3
 80098ec:	3301      	adds	r3, #1
 80098ee:	fa02 f303 	lsl.w	r3, r2, r3
 80098f2:	73bb      	strb	r3, [r7, #14]
		tempData &= mask; // zero all non-important bits in data
 80098f4:	7b7a      	ldrb	r2, [r7, #13]
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
 80098f8:	4013      	ands	r3, r2
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	737b      	strb	r3, [r7, #13]
		tempData >>= (start_bit - len + 1); //shift data to zero position
 80098fe:	7b7b      	ldrb	r3, [r7, #13]
 8009900:	4619      	mov	r1, r3
 8009902:	787a      	ldrb	r2, [r7, #1]
 8009904:	7e3b      	ldrb	r3, [r7, #24]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	3301      	adds	r3, #1
 800990a:	fa41 f303 	asr.w	r3, r1, r3
 800990e:	b2db      	uxtb	r3, r3
 8009910:	737b      	strb	r3, [r7, #13]
		*data = tempData;
 8009912:	7b7a      	ldrb	r2, [r7, #13]
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	701a      	strb	r2, [r3, #0]
		status = HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]
 800991c:	e004      	b.n	8009928 <IIM42652_ReadRegisterBits+0x92>
	}
	else
	{
		status = HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	73fb      	strb	r3, [r7, #15]
		*data = 0;
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	2200      	movs	r2, #0
 8009926:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <IIM42652_WriteRegister>:
uint8_t IIM42652_WriteRegister(IIM42652_t *imu, uint8_t regAddr, uint8_t regBank, uint8_t data)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b086      	sub	sp, #24
 8009936:	af02      	add	r7, sp, #8
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	4608      	mov	r0, r1
 800993c:	4611      	mov	r1, r2
 800993e:	461a      	mov	r2, r3
 8009940:	4603      	mov	r3, r0
 8009942:	70fb      	strb	r3, [r7, #3]
 8009944:	460b      	mov	r3, r1
 8009946:	70bb      	strb	r3, [r7, #2]
 8009948:	4613      	mov	r3, r2
 800994a:	707b      	strb	r3, [r7, #1]
	uint8_t txBuf[2] = {regAddr | 0x00, data}; //Write operation: set the 8th-bit to 0.
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	733b      	strb	r3, [r7, #12]
 8009950:	787b      	ldrb	r3, [r7, #1]
 8009952:	737b      	strb	r3, [r7, #13]
	uint8_t rxBuf[2];
	uint8_t status = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	73fb      	strb	r3, [r7, #15]

	if (imu->m_RegisterBank != regBank)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800995e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009962:	78ba      	ldrb	r2, [r7, #2]
 8009964:	429a      	cmp	r2, r3
 8009966:	d004      	beq.n	8009972 <IIM42652_WriteRegister+0x40>
	{
		IIM42652_SetRegisterBank(imu, regBank);
 8009968:	78bb      	ldrb	r3, [r7, #2]
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fb49 	bl	800a004 <IIM42652_SetRegisterBank>
	}

	if (osKernelRunning() == 1)
 8009972:	f010 f95e 	bl	8019c32 <osKernelRunning>
 8009976:	4603      	mov	r3, r0
 8009978:	2b01      	cmp	r3, #1
 800997a:	d133      	bne.n	80099e4 <IIM42652_WriteRegister+0xb2>
	{
		osSemaphoreWait(imu->m_spiSemaphoreHandle, osWaitForever);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f04f 31ff 	mov.w	r1, #4294967295
 8009984:	4618      	mov	r0, r3
 8009986:	f010 fb07 	bl	8019f98 <osSemaphoreWait>
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6858      	ldr	r0, [r3, #4]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	891b      	ldrh	r3, [r3, #8]
 8009992:	2200      	movs	r2, #0
 8009994:	4619      	mov	r1, r3
 8009996:	f006 fcf5 	bl	8010384 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY));
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f107 0208 	add.w	r2, r7, #8
 80099a2:	f107 010c 	add.w	r1, r7, #12
 80099a6:	f04f 33ff 	mov.w	r3, #4294967295
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	2302      	movs	r3, #2
 80099ae:	f00a feec 	bl	801478a <HAL_SPI_TransmitReceive>
 80099b2:	4603      	mov	r3, r0
 80099b4:	73fb      	strb	r3, [r7, #15]
		while(HAL_SPI_GetState(imu->m_spiHandle) != HAL_SPI_STATE_READY);
 80099b6:	bf00      	nop
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4618      	mov	r0, r3
 80099be:	f00b fab1 	bl	8014f24 <HAL_SPI_GetState>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d1f7      	bne.n	80099b8 <IIM42652_WriteRegister+0x86>
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6858      	ldr	r0, [r3, #4]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	891b      	ldrh	r3, [r3, #8]
 80099d0:	2201      	movs	r2, #1
 80099d2:	4619      	mov	r1, r3
 80099d4:	f006 fcd6 	bl	8010384 <HAL_GPIO_WritePin>
		osSemaphoreRelease(imu->m_spiSemaphoreHandle);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	4618      	mov	r0, r3
 80099de:	f010 fb29 	bl	801a034 <osSemaphoreRelease>
 80099e2:	e026      	b.n	8009a32 <IIM42652_WriteRegister+0x100>
	}
	else
	{
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6858      	ldr	r0, [r3, #4]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	891b      	ldrh	r3, [r3, #8]
 80099ec:	2200      	movs	r2, #0
 80099ee:	4619      	mov	r1, r3
 80099f0:	f006 fcc8 	bl	8010384 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6818      	ldr	r0, [r3, #0]
 80099f8:	f107 0208 	add.w	r2, r7, #8
 80099fc:	f107 010c 	add.w	r1, r7, #12
 8009a00:	f04f 33ff 	mov.w	r3, #4294967295
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	2302      	movs	r3, #2
 8009a08:	f00a febf 	bl	801478a <HAL_SPI_TransmitReceive>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]
		while(HAL_SPI_GetState(imu->m_spiHandle) != HAL_SPI_STATE_READY);
 8009a10:	bf00      	nop
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f00b fa84 	bl	8014f24 <HAL_SPI_GetState>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d1f7      	bne.n	8009a12 <IIM42652_WriteRegister+0xe0>
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6858      	ldr	r0, [r3, #4]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	891b      	ldrh	r3, [r3, #8]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f006 fca9 	bl	8010384 <HAL_GPIO_WritePin>
	}

	return status;
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <IIM42652_WriteRegisterBits>:
 * @param len 		Number of bits to write (not more than 8)
 * @param data 		Right-aligned value to write
 * @return Status of operation (0 = success, 1 = error)
 */
uint8_t IIM42652_WriteRegisterBits(IIM42652_t *imu, uint8_t regAddr, uint8_t regBank, uint8_t start_bit, uint8_t len, uint8_t data)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b088      	sub	sp, #32
 8009a40:	af02      	add	r7, sp, #8
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	4608      	mov	r0, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	70fb      	strb	r3, [r7, #3]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70bb      	strb	r3, [r7, #2]
 8009a52:	4613      	mov	r3, r2
 8009a54:	707b      	strb	r3, [r7, #1]
	uint8_t txBuf[2];
	uint8_t rxBuf[2];
	uint8_t status = HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	75fb      	strb	r3, [r7, #23]
	uint8_t tempData = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	73fb      	strb	r3, [r7, #15]

	if (len>8 || start_bit>7)
 8009a5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a62:	2b08      	cmp	r3, #8
 8009a64:	d802      	bhi.n	8009a6c <IIM42652_WriteRegisterBits+0x30>
 8009a66:	787b      	ldrb	r3, [r7, #1]
 8009a68:	2b07      	cmp	r3, #7
 8009a6a:	d901      	bls.n	8009a70 <IIM42652_WriteRegisterBits+0x34>
	{
		return HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e09e      	b.n	8009bae <IIM42652_WriteRegisterBits+0x172>
	}

	if (IIM42652_ReadRegister(imu, regAddr, regBank, &tempData) == HAL_OK)
 8009a70:	f107 030f 	add.w	r3, r7, #15
 8009a74:	78ba      	ldrb	r2, [r7, #2]
 8009a76:	78f9      	ldrb	r1, [r7, #3]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff fe94 	bl	80097a6 <IIM42652_ReadRegister>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f040 8093 	bne.w	8009bac <IIM42652_WriteRegisterBits+0x170>
	{
		uint8_t mask = ((1 << len) - 1) << (start_bit - len + 1);
 8009a86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a90:	1e5a      	subs	r2, r3, #1
 8009a92:	7879      	ldrb	r1, [r7, #1]
 8009a94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a98:	1acb      	subs	r3, r1, r3
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa0:	75bb      	strb	r3, [r7, #22]
		data <<= (start_bit - len + 1); // shift data into correct position
 8009aa2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009aa6:	7879      	ldrb	r1, [r7, #1]
 8009aa8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009aac:	1acb      	subs	r3, r1, r3
 8009aae:	3301      	adds	r3, #1
 8009ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		data &= mask; // zero all non-important bits in data
 8009ab8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009abc:	7dbb      	ldrb	r3, [r7, #22]
 8009abe:	4013      	ands	r3, r2
 8009ac0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		tempData &= ~(mask); // zero all important bits in existing byte
 8009ac4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	b25a      	sxtb	r2, r3
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	b25b      	sxtb	r3, r3
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	b25b      	sxtb	r3, r3
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	73fb      	strb	r3, [r7, #15]
		tempData |= data; // combine data with existing byte
 8009ad8:	7bfa      	ldrb	r2, [r7, #15]
 8009ada:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	73fb      	strb	r3, [r7, #15]

		txBuf[0] = regAddr;
 8009ae4:	78fb      	ldrb	r3, [r7, #3]
 8009ae6:	753b      	strb	r3, [r7, #20]
		txBuf[1] = tempData;
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	757b      	strb	r3, [r7, #21]
		if (osKernelRunning() == 1)
 8009aec:	f010 f8a1 	bl	8019c32 <osKernelRunning>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d133      	bne.n	8009b5e <IIM42652_WriteRegisterBits+0x122>
		{
			osSemaphoreWait(imu->m_spiSemaphoreHandle, osWaitForever);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	f04f 31ff 	mov.w	r1, #4294967295
 8009afe:	4618      	mov	r0, r3
 8009b00:	f010 fa4a 	bl	8019f98 <osSemaphoreWait>
			HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6858      	ldr	r0, [r3, #4]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	891b      	ldrh	r3, [r3, #8]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4619      	mov	r1, r3
 8009b10:	f006 fc38 	bl	8010384 <HAL_GPIO_WritePin>
			status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	f107 0210 	add.w	r2, r7, #16
 8009b1c:	f107 0114 	add.w	r1, r7, #20
 8009b20:	f04f 33ff 	mov.w	r3, #4294967295
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	2302      	movs	r3, #2
 8009b28:	f00a fe2f 	bl	801478a <HAL_SPI_TransmitReceive>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	75fb      	strb	r3, [r7, #23]
			while(HAL_SPI_GetState(imu->m_spiHandle) != HAL_SPI_STATE_READY);
 8009b30:	bf00      	nop
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f00b f9f4 	bl	8014f24 <HAL_SPI_GetState>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d1f7      	bne.n	8009b32 <IIM42652_WriteRegisterBits+0xf6>
			HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6858      	ldr	r0, [r3, #4]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	891b      	ldrh	r3, [r3, #8]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f006 fc19 	bl	8010384 <HAL_GPIO_WritePin>
			osSemaphoreRelease(imu->m_spiSemaphoreHandle);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f010 fa6c 	bl	801a034 <osSemaphoreRelease>
 8009b5c:	e026      	b.n	8009bac <IIM42652_WriteRegisterBits+0x170>
		}
		else
		{
			HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6858      	ldr	r0, [r3, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	891b      	ldrh	r3, [r3, #8]
 8009b66:	2200      	movs	r2, #0
 8009b68:	4619      	mov	r1, r3
 8009b6a:	f006 fc0b 	bl	8010384 <HAL_GPIO_WritePin>
			status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY));
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	f107 0210 	add.w	r2, r7, #16
 8009b76:	f107 0114 	add.w	r1, r7, #20
 8009b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	2302      	movs	r3, #2
 8009b82:	f00a fe02 	bl	801478a <HAL_SPI_TransmitReceive>
 8009b86:	4603      	mov	r3, r0
 8009b88:	75fb      	strb	r3, [r7, #23]
			while(HAL_SPI_GetState(imu->m_spiHandle) != HAL_SPI_STATE_READY);
 8009b8a:	bf00      	nop
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f00b f9c7 	bl	8014f24 <HAL_SPI_GetState>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d1f7      	bne.n	8009b8c <IIM42652_WriteRegisterBits+0x150>
			HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6858      	ldr	r0, [r3, #4]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	891b      	ldrh	r3, [r3, #8]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	f006 fbec 	bl	8010384 <HAL_GPIO_WritePin>
		}
	}

	return status;
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3718      	adds	r7, #24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <IIM42652_ReadMultiRegisters>:

uint8_t IIM42652_ReadMultiRegisters(IIM42652_t *imu, uint8_t regAddr, uint8_t regBank, uint8_t *data, uint16_t byteQuantity)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b08a      	sub	sp, #40	; 0x28
 8009bba:	af02      	add	r7, sp, #8
 8009bbc:	60f8      	str	r0, [r7, #12]
 8009bbe:	607b      	str	r3, [r7, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	72fb      	strb	r3, [r7, #11]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	72bb      	strb	r3, [r7, #10]
	uint8_t *pTxBuf;
	uint8_t *pRxBuf;
	uint8_t status = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	77fb      	strb	r3, [r7, #31]

	if (imu->m_RegisterBank != regBank)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009bd6:	7aba      	ldrb	r2, [r7, #10]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d004      	beq.n	8009be6 <IIM42652_ReadMultiRegisters+0x30>
	{
		IIM42652_SetRegisterBank(imu, regBank);
 8009bdc:	7abb      	ldrb	r3, [r7, #10]
 8009bde:	4619      	mov	r1, r3
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 fa0f 	bl	800a004 <IIM42652_SetRegisterBank>
	}

	pTxBuf = ( uint8_t * )pvPortMalloc(sizeof(uint8_t) * (byteQuantity + 1));
 8009be6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009be8:	3301      	adds	r3, #1
 8009bea:	4618      	mov	r0, r3
 8009bec:	f013 fb64 	bl	801d2b8 <pvPortMalloc>
 8009bf0:	61b8      	str	r0, [r7, #24]
	pRxBuf = ( uint8_t * )pvPortMalloc(sizeof(uint8_t) * (byteQuantity + 1));
 8009bf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f013 fb5e 	bl	801d2b8 <pvPortMalloc>
 8009bfc:	6178      	str	r0, [r7, #20]
	memset(pTxBuf, 0, byteQuantity + 1*sizeof(uint8_t));
 8009bfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c00:	3301      	adds	r3, #1
 8009c02:	461a      	mov	r2, r3
 8009c04:	2100      	movs	r1, #0
 8009c06:	69b8      	ldr	r0, [r7, #24]
 8009c08:	f015 fc18 	bl	801f43c <memset>

	pTxBuf[0] = regAddr | 0x80; //Read operation: set the 8th-bit to 1.
 8009c0c:	7afb      	ldrb	r3, [r7, #11]
 8009c0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	701a      	strb	r2, [r3, #0]

	if (osKernelRunning() == 1)
 8009c18:	f010 f80b 	bl	8019c32 <osKernelRunning>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d12a      	bne.n	8009c78 <IIM42652_ReadMultiRegisters+0xc2>
	{
		osSemaphoreWait(imu->m_spiSemaphoreHandle, osWaitForever);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	f04f 31ff 	mov.w	r1, #4294967295
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f010 f9b4 	bl	8019f98 <osSemaphoreWait>
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6858      	ldr	r0, [r3, #4]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	891b      	ldrh	r3, [r3, #8]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	f006 fba2 	bl	8010384 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, pTxBuf, pRxBuf, byteQuantity+1, HAL_MAX_DELAY));
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6818      	ldr	r0, [r3, #0]
 8009c44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c46:	3301      	adds	r3, #1
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4e:	9200      	str	r2, [sp, #0]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	69b9      	ldr	r1, [r7, #24]
 8009c54:	f00a fd99 	bl	801478a <HAL_SPI_TransmitReceive>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	77fb      	strb	r3, [r7, #31]
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6858      	ldr	r0, [r3, #4]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	891b      	ldrh	r3, [r3, #8]
 8009c64:	2201      	movs	r2, #1
 8009c66:	4619      	mov	r1, r3
 8009c68:	f006 fb8c 	bl	8010384 <HAL_GPIO_WritePin>
		osSemaphoreRelease(imu->m_spiSemaphoreHandle);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f010 f9df 	bl	801a034 <osSemaphoreRelease>
 8009c76:	e01d      	b.n	8009cb4 <IIM42652_ReadMultiRegisters+0xfe>
	}
	else
	{
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6858      	ldr	r0, [r3, #4]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	891b      	ldrh	r3, [r3, #8]
 8009c80:	2200      	movs	r2, #0
 8009c82:	4619      	mov	r1, r3
 8009c84:	f006 fb7e 	bl	8010384 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, pTxBuf, pRxBuf, byteQuantity+1, HAL_MAX_DELAY));
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c8e:	3301      	adds	r3, #1
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	f04f 32ff 	mov.w	r2, #4294967295
 8009c96:	9200      	str	r2, [sp, #0]
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	69b9      	ldr	r1, [r7, #24]
 8009c9c:	f00a fd75 	bl	801478a <HAL_SPI_TransmitReceive>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	77fb      	strb	r3, [r7, #31]
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6858      	ldr	r0, [r3, #4]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	891b      	ldrh	r3, [r3, #8]
 8009cac:	2201      	movs	r2, #1
 8009cae:	4619      	mov	r1, r3
 8009cb0:	f006 fb68 	bl	8010384 <HAL_GPIO_WritePin>
	}

	if (status == HAL_OK)
 8009cb4:	7ffb      	ldrb	r3, [r7, #31]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d106      	bne.n	8009cc8 <IIM42652_ReadMultiRegisters+0x112>
	{
		memcpy(data, &pRxBuf[1], byteQuantity*sizeof(uint8_t));
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f015 fb92 	bl	801f3ec <memcpy>
	}

	vPortFree(pTxBuf);
 8009cc8:	69b8      	ldr	r0, [r7, #24]
 8009cca:	f013 fb07 	bl	801d2dc <vPortFree>
	vPortFree(pRxBuf);
 8009cce:	6978      	ldr	r0, [r7, #20]
 8009cd0:	f013 fb04 	bl	801d2dc <vPortFree>

	return status;
 8009cd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3720      	adds	r7, #32
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <IIM42652_WriteMultiRegisters>:

uint8_t IIM42652_WriteMultiRegisters(IIM42652_t *imu, uint8_t regAddr, uint8_t regBank, uint8_t *data, uint16_t byteQuantity)
{
 8009cde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce2:	b08f      	sub	sp, #60	; 0x3c
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	6178      	str	r0, [r7, #20]
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	460b      	mov	r3, r1
 8009cec:	74fb      	strb	r3, [r7, #19]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	74bb      	strb	r3, [r7, #18]
 8009cf2:	466b      	mov	r3, sp
 8009cf4:	461e      	mov	r6, r3
	uint8_t txBuf[byteQuantity + 1];
 8009cf6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009cfa:	1c59      	adds	r1, r3, #1
 8009cfc:	1e4b      	subs	r3, r1, #1
 8009cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d00:	460a      	mov	r2, r1
 8009d02:	2300      	movs	r3, #0
 8009d04:	603a      	str	r2, [r7, #0]
 8009d06:	607b      	str	r3, [r7, #4]
 8009d08:	f04f 0200 	mov.w	r2, #0
 8009d0c:	f04f 0300 	mov.w	r3, #0
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	00c3      	lsls	r3, r0, #3
 8009d14:	6838      	ldr	r0, [r7, #0]
 8009d16:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009d1a:	6838      	ldr	r0, [r7, #0]
 8009d1c:	00c2      	lsls	r2, r0, #3
 8009d1e:	460a      	mov	r2, r1
 8009d20:	2300      	movs	r3, #0
 8009d22:	4692      	mov	sl, r2
 8009d24:	469b      	mov	fp, r3
 8009d26:	f04f 0200 	mov.w	r2, #0
 8009d2a:	f04f 0300 	mov.w	r3, #0
 8009d2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	3307      	adds	r3, #7
 8009d3e:	08db      	lsrs	r3, r3, #3
 8009d40:	00db      	lsls	r3, r3, #3
 8009d42:	ebad 0d03 	sub.w	sp, sp, r3
 8009d46:	ab02      	add	r3, sp, #8
 8009d48:	3300      	adds	r3, #0
 8009d4a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t rxBuf[byteQuantity + 1];
 8009d4c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009d50:	1c59      	adds	r1, r3, #1
 8009d52:	1e4b      	subs	r3, r1, #1
 8009d54:	623b      	str	r3, [r7, #32]
 8009d56:	460a      	mov	r2, r1
 8009d58:	2300      	movs	r3, #0
 8009d5a:	4690      	mov	r8, r2
 8009d5c:	4699      	mov	r9, r3
 8009d5e:	f04f 0200 	mov.w	r2, #0
 8009d62:	f04f 0300 	mov.w	r3, #0
 8009d66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d72:	460a      	mov	r2, r1
 8009d74:	2300      	movs	r3, #0
 8009d76:	4614      	mov	r4, r2
 8009d78:	461d      	mov	r5, r3
 8009d7a:	f04f 0200 	mov.w	r2, #0
 8009d7e:	f04f 0300 	mov.w	r3, #0
 8009d82:	00eb      	lsls	r3, r5, #3
 8009d84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d88:	00e2      	lsls	r2, r4, #3
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	3307      	adds	r3, #7
 8009d8e:	08db      	lsrs	r3, r3, #3
 8009d90:	00db      	lsls	r3, r3, #3
 8009d92:	ebad 0d03 	sub.w	sp, sp, r3
 8009d96:	ab02      	add	r3, sp, #8
 8009d98:	3300      	adds	r3, #0
 8009d9a:	61fb      	str	r3, [r7, #28]
	uint8_t status = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (imu->m_RegisterBank != regBank)
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009dac:	7cba      	ldrb	r2, [r7, #18]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d004      	beq.n	8009dbc <IIM42652_WriteMultiRegisters+0xde>
	{
		IIM42652_SetRegisterBank(imu, regBank);
 8009db2:	7cbb      	ldrb	r3, [r7, #18]
 8009db4:	4619      	mov	r1, r3
 8009db6:	6978      	ldr	r0, [r7, #20]
 8009db8:	f000 f924 	bl	800a004 <IIM42652_SetRegisterBank>
	}

	txBuf[0] = regAddr | 0x00; //Write operation: set the 8th-bit to 0.
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	7cfa      	ldrb	r2, [r7, #19]
 8009dc0:	701a      	strb	r2, [r3, #0]
	memcpy(txBuf+1, data, byteQuantity);
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8009dca:	68f9      	ldr	r1, [r7, #12]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f015 fb0d 	bl	801f3ec <memcpy>

	if (osKernelRunning() == 1)
 8009dd2:	f00f ff2e 	bl	8019c32 <osKernelRunning>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d12c      	bne.n	8009e36 <IIM42652_WriteMultiRegisters+0x158>
	{
		osSemaphoreWait(imu->m_spiSemaphoreHandle, osWaitForever);
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	f04f 31ff 	mov.w	r1, #4294967295
 8009de4:	4618      	mov	r0, r3
 8009de6:	f010 f8d7 	bl	8019f98 <osSemaphoreWait>
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	6858      	ldr	r0, [r3, #4]
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	891b      	ldrh	r3, [r3, #8]
 8009df2:	2200      	movs	r2, #0
 8009df4:	4619      	mov	r1, r3
 8009df6:	f006 fac5 	bl	8010384 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, byteQuantity+1, HAL_MAX_DELAY));
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009e02:	3301      	adds	r3, #1
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0a:	9200      	str	r2, [sp, #0]
 8009e0c:	69fa      	ldr	r2, [r7, #28]
 8009e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e10:	f00a fcbb 	bl	801478a <HAL_SPI_TransmitReceive>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	6858      	ldr	r0, [r3, #4]
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	891b      	ldrh	r3, [r3, #8]
 8009e22:	2201      	movs	r2, #1
 8009e24:	4619      	mov	r1, r3
 8009e26:	f006 faad 	bl	8010384 <HAL_GPIO_WritePin>
		osSemaphoreRelease(imu->m_spiSemaphoreHandle);
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f010 f900 	bl	801a034 <osSemaphoreRelease>
 8009e34:	e01f      	b.n	8009e76 <IIM42652_WriteMultiRegisters+0x198>
	}
	else
	{
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	6858      	ldr	r0, [r3, #4]
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	891b      	ldrh	r3, [r3, #8]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4619      	mov	r1, r3
 8009e42:	f006 fa9f 	bl	8010384 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, byteQuantity+1, HAL_MAX_DELAY));
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009e4e:	3301      	adds	r3, #1
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	f04f 32ff 	mov.w	r2, #4294967295
 8009e56:	9200      	str	r2, [sp, #0]
 8009e58:	69fa      	ldr	r2, [r7, #28]
 8009e5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e5c:	f00a fc95 	bl	801478a <HAL_SPI_TransmitReceive>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	6858      	ldr	r0, [r3, #4]
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	891b      	ldrh	r3, [r3, #8]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	4619      	mov	r1, r3
 8009e72:	f006 fa87 	bl	8010384 <HAL_GPIO_WritePin>
	}


	return status;
 8009e76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e7a:	46b5      	mov	sp, r6
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3734      	adds	r7, #52	; 0x34
 8009e80:	46bd      	mov	sp, r7
 8009e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e86 <IIM42652_ReadMultiRegisters_DMA>:
		}
	}
}

uint8_t IIM42652_ReadMultiRegisters_DMA(IIM42652_t *imu, uint8_t regAddr, uint8_t regBank, volatile uint8_t *pRxBuf, uint16_t byteQuantity)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b086      	sub	sp, #24
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	607b      	str	r3, [r7, #4]
 8009e90:	460b      	mov	r3, r1
 8009e92:	72fb      	strb	r3, [r7, #11]
 8009e94:	4613      	mov	r3, r2
 8009e96:	72bb      	strb	r3, [r7, #10]
	uint8_t status = HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	75fb      	strb	r3, [r7, #23]
	pTxBuf = ( uint8_t * )pvPortMalloc(sizeof(uint8_t) * (byteQuantity + 1));
	memset(pTxBuf, 0, byteQuantity + 1*sizeof(uint8_t));

	pTxBuf[0] = regAddr | 0x80; //Read operation: set the 8th-bit to 1.
	*/
	if (imu->m_RegisterBank != regBank)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ea6:	7aba      	ldrb	r2, [r7, #10]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d004      	beq.n	8009eb6 <IIM42652_ReadMultiRegisters_DMA+0x30>
	{
		IIM42652_SetRegisterBank(imu, regBank);
 8009eac:	7abb      	ldrb	r3, [r7, #10]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 f8a7 	bl	800a004 <IIM42652_SetRegisterBank>
	}

	imu->txBufDMA[0] = regAddr | 0x80; //Read operation: set the 8th-bit to 1.
 8009eb6:	7afb      	ldrb	r3, [r7, #11]
 8009eb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	74da      	strb	r2, [r3, #19]

	if (osKernelRunning() == 1)
 8009ec2:	f00f feb6 	bl	8019c32 <osKernelRunning>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d12f      	bne.n	8009f2c <IIM42652_ReadMultiRegisters_DMA+0xa6>
	{
		if( osSemaphoreWait(imu->m_spiSemaphoreHandle, osWaitForever) == osOK )
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f010 f85f 	bl	8019f98 <osSemaphoreWait>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d13a      	bne.n	8009f56 <IIM42652_ReadMultiRegisters_DMA+0xd0>
		{
			HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6858      	ldr	r0, [r3, #4]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	891b      	ldrh	r3, [r3, #8]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4619      	mov	r1, r3
 8009eec:	f006 fa4a 	bl	8010384 <HAL_GPIO_WritePin>
			status = (HAL_SPI_TransmitReceive_DMA(imu->m_spiHandle, imu->txBufDMA, (uint8_t *)pRxBuf, byteQuantity+1));
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f103 0113 	add.w	r1, r3, #19
 8009efa:	8c3b      	ldrh	r3, [r7, #32]
 8009efc:	3301      	adds	r3, #1
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	f00a fde5 	bl	8014ad0 <HAL_SPI_TransmitReceive_DMA>
 8009f06:	4603      	mov	r3, r0
 8009f08:	75fb      	strb	r3, [r7, #23]
			if (status != HAL_OK)
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d022      	beq.n	8009f56 <IIM42652_ReadMultiRegisters_DMA+0xd0>
			{
				HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6858      	ldr	r0, [r3, #4]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	891b      	ldrh	r3, [r3, #8]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	f006 fa32 	bl	8010384 <HAL_GPIO_WritePin>
				osSemaphoreRelease(imu->m_spiSemaphoreHandle);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f010 f885 	bl	801a034 <osSemaphoreRelease>
 8009f2a:	e014      	b.n	8009f56 <IIM42652_ReadMultiRegisters_DMA+0xd0>
			}
		}
	}
	else
	{
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6858      	ldr	r0, [r3, #4]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	891b      	ldrh	r3, [r3, #8]
 8009f34:	2200      	movs	r2, #0
 8009f36:	4619      	mov	r1, r3
 8009f38:	f006 fa24 	bl	8010384 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive_DMA(imu->m_spiHandle, imu->txBufDMA, (uint8_t *)pRxBuf, byteQuantity+1));
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f103 0113 	add.w	r1, r3, #19
 8009f46:	8c3b      	ldrh	r3, [r7, #32]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	f00a fdbf 	bl	8014ad0 <HAL_SPI_TransmitReceive_DMA>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]
	}

	//vPortFree(pTxBuf);

	return status;
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <__IMU_TURN_ON>:

//--------------------------------------
// ------- CONFIGURATION METHODS -------
//--------------------------------------
uint8_t __IMU_TURN_ON(IIM42652_t *imu)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	uint8_t status = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	73fb      	strb	r3, [r7, #15]

	status = IIM42652_SetAccelMode(imu,IMU_AccelMode_LN);
 8009f6c:	2103      	movs	r1, #3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fcd4 	bl	800a91c <IIM42652_SetAccelMode>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]
	status = IIM42652_SetGyroMode(imu,IMU_GyroMode_LN);
 8009f78:	2103      	movs	r1, #3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fcf1 	bl	800a962 <IIM42652_SetGyroMode>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73fb      	strb	r3, [r7, #15]
	status = IIM42652_SetTempMode(imu,ENABLE);
 8009f84:	2101      	movs	r1, #1
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fd0e 	bl	800a9a8 <IIM42652_SetTempMode>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	73fb      	strb	r3, [r7, #15]

	return status;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <__IMU_TURN_OFF>:
	status = IIM42652_SetTempMode(imu,ENABLE);

	return status;
}
uint8_t __IMU_TURN_OFF(IIM42652_t *imu)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
	uint8_t status = HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	73fb      	strb	r3, [r7, #15]

	status = IIM42652_SetAccelMode(imu,IMU_AccelMode_OFF);
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fcb7 	bl	800a91c <IIM42652_SetAccelMode>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	73fb      	strb	r3, [r7, #15]
	status = IIM42652_SetGyroMode(imu,IMU_GyroMode_OFF);
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fcd4 	bl	800a962 <IIM42652_SetGyroMode>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	73fb      	strb	r3, [r7, #15]
	status = IIM42652_SetTempMode(imu,DISABLE);
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fcf1 	bl	800a9a8 <IIM42652_SetTempMode>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	73fb      	strb	r3, [r7, #15]

	return status;
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <IIM42652_SoftReset>:
void __IMU_INT2_OFF()
{
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
}
uint8_t IIM42652_SoftReset(IIM42652_t *imu)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af02      	add	r7, sp, #8
 8009fda:	6078      	str	r0, [r7, #4]
	 * 	MSB		6		5		4				3		2		1		LSB
	 *	RES		RES		RES		SPI_MODE		RES		RES		RES		SOFT_RESET
	 *							0 = Mode 0 & 3							0
	 *							1 = Mode 1 & 2							1 = Activate reset (wait >1ms before ALL other operation)
	 */
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_DEVICE_CONFIG, IMU_RegBank_0, 0, 1, IIM42652_SOFTRESET);
 8009fdc:	2301      	movs	r3, #1
 8009fde:	9301      	str	r3, [sp, #4]
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2111      	movs	r1, #17
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7ff fd26 	bl	8009a3c <IIM42652_WriteRegisterBits>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73fb      	strb	r3, [r7, #15]
	osDelay(2);
 8009ff4:	2002      	movs	r0, #2
 8009ff6:	f00f fe74 	bl	8019ce2 <osDelay>

	return status;
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <IIM42652_SetRegisterBank>:
 * 	MSB		6		5		4		3		2:LSB
 *	RES		RES		RES		RES		RES		0-4=Bank Number
 */

uint8_t IIM42652_SetRegisterBank(IIM42652_t *imu, IIM42652_RegBankValue RegisterBankNumber)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af02      	add	r7, sp, #8
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70fb      	strb	r3, [r7, #3]
	uint8_t txBuf[2] = {REG_REG_BANK_SEL | 0x80, 0x00}; //Read operation: set the 8th-bit to 1.
 800a010:	23f6      	movs	r3, #246	; 0xf6
 800a012:	823b      	strh	r3, [r7, #16]
	uint8_t rxBuf[2];
	uint8_t status = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	75fb      	strb	r3, [r7, #23]
	uint8_t tempData = 0;
 800a018:	2300      	movs	r3, #0
 800a01a:	75bb      	strb	r3, [r7, #22]
	uint8_t start_bit = 2;
 800a01c:	2302      	movs	r3, #2
 800a01e:	757b      	strb	r3, [r7, #21]
	uint8_t len = 3;
 800a020:	2303      	movs	r3, #3
 800a022:	753b      	strb	r3, [r7, #20]

	if (RegisterBankNumber > 4)
 800a024:	78fb      	ldrb	r3, [r7, #3]
 800a026:	2b04      	cmp	r3, #4
 800a028:	d901      	bls.n	800a02e <IIM42652_SetRegisterBank+0x2a>
	{
		return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e0ad      	b.n	800a18a <IIM42652_SetRegisterBank+0x186>
	}

	if (osKernelRunning() == 1)
 800a02e:	f00f fe00 	bl	8019c32 <osKernelRunning>
 800a032:	4603      	mov	r3, r0
 800a034:	2b01      	cmp	r3, #1
 800a036:	d106      	bne.n	800a046 <IIM42652_SetRegisterBank+0x42>
	{
		osSemaphoreWait(imu->m_spiSemaphoreHandle, osWaitForever);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f04f 31ff 	mov.w	r1, #4294967295
 800a040:	4618      	mov	r0, r3
 800a042:	f00f ffa9 	bl	8019f98 <osSemaphoreWait>
	}

	HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6858      	ldr	r0, [r3, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	891b      	ldrh	r3, [r3, #8]
 800a04e:	2200      	movs	r2, #0
 800a050:	4619      	mov	r1, r3
 800a052:	f006 f997 	bl	8010384 <HAL_GPIO_WritePin>
	status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f107 020c 	add.w	r2, r7, #12
 800a05e:	f107 0110 	add.w	r1, r7, #16
 800a062:	f04f 33ff 	mov.w	r3, #4294967295
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	2302      	movs	r3, #2
 800a06a:	f00a fb8e 	bl	801478a <HAL_SPI_TransmitReceive>
 800a06e:	4603      	mov	r3, r0
 800a070:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6858      	ldr	r0, [r3, #4]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	891b      	ldrh	r3, [r3, #8]
 800a07a:	2201      	movs	r2, #1
 800a07c:	4619      	mov	r1, r3
 800a07e:	f006 f981 	bl	8010384 <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d14f      	bne.n	800a128 <IIM42652_SetRegisterBank+0x124>
	{
		tempData = rxBuf[1];
 800a088:	7b7b      	ldrb	r3, [r7, #13]
 800a08a:	75bb      	strb	r3, [r7, #22]
		memset(txBuf, 0x00, sizeof(txBuf));
 800a08c:	f107 0310 	add.w	r3, r7, #16
 800a090:	2202      	movs	r2, #2
 800a092:	2100      	movs	r1, #0
 800a094:	4618      	mov	r0, r3
 800a096:	f015 f9d1 	bl	801f43c <memset>
		memset(rxBuf, 0x00, sizeof(rxBuf));
 800a09a:	f107 030c 	add.w	r3, r7, #12
 800a09e:	2202      	movs	r2, #2
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f015 f9ca 	bl	801f43c <memset>
			osSemaphoreRelease(imu->m_spiSemaphoreHandle);
		}
		return status;
	}

	uint8_t mask = ((1 << len) - 1) << (start_bit - len + 1);
 800a0a8:	7d3b      	ldrb	r3, [r7, #20]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b0:	1e5a      	subs	r2, r3, #1
 800a0b2:	7d79      	ldrb	r1, [r7, #21]
 800a0b4:	7d3b      	ldrb	r3, [r7, #20]
 800a0b6:	1acb      	subs	r3, r1, r3
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a0be:	74fb      	strb	r3, [r7, #19]
	RegisterBankNumber <<= (start_bit - len + 1); // shift data into correct position
 800a0c0:	78fa      	ldrb	r2, [r7, #3]
 800a0c2:	7d79      	ldrb	r1, [r7, #21]
 800a0c4:	7d3b      	ldrb	r3, [r7, #20]
 800a0c6:	1acb      	subs	r3, r1, r3
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	70fb      	strb	r3, [r7, #3]
	RegisterBankNumber &= mask; // zero all non-important bits in data
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	7cfb      	ldrb	r3, [r7, #19]
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	70fb      	strb	r3, [r7, #3]
	tempData &= ~(mask); // zero all important bits in existing byte
 800a0d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0dc:	43db      	mvns	r3, r3
 800a0de:	b25a      	sxtb	r2, r3
 800a0e0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	b25b      	sxtb	r3, r3
 800a0e8:	75bb      	strb	r3, [r7, #22]
	tempData |= RegisterBankNumber; // combine data with existing byte
 800a0ea:	7dba      	ldrb	r2, [r7, #22]
 800a0ec:	78fb      	ldrb	r3, [r7, #3]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	75bb      	strb	r3, [r7, #22]

	txBuf[0] = REG_REG_BANK_SEL;
 800a0f2:	2376      	movs	r3, #118	; 0x76
 800a0f4:	743b      	strb	r3, [r7, #16]
	txBuf[1] = tempData;
 800a0f6:	7dbb      	ldrb	r3, [r7, #22]
 800a0f8:	747b      	strb	r3, [r7, #17]

	HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6858      	ldr	r0, [r3, #4]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	891b      	ldrh	r3, [r3, #8]
 800a102:	2200      	movs	r2, #0
 800a104:	4619      	mov	r1, r3
 800a106:	f006 f93d 	bl	8010384 <HAL_GPIO_WritePin>
	status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY));
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	f107 020c 	add.w	r2, r7, #12
 800a112:	f107 0110 	add.w	r1, r7, #16
 800a116:	f04f 33ff 	mov.w	r3, #4294967295
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	2302      	movs	r3, #2
 800a11e:	f00a fb34 	bl	801478a <HAL_SPI_TransmitReceive>
 800a122:	4603      	mov	r3, r0
 800a124:	75fb      	strb	r3, [r7, #23]
	while(HAL_SPI_GetState(imu->m_spiHandle) != HAL_SPI_STATE_READY);
 800a126:	e00b      	b.n	800a140 <IIM42652_SetRegisterBank+0x13c>
		if (osKernelRunning() == 1)
 800a128:	f00f fd83 	bl	8019c32 <osKernelRunning>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d104      	bne.n	800a13c <IIM42652_SetRegisterBank+0x138>
			osSemaphoreRelease(imu->m_spiSemaphoreHandle);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	4618      	mov	r0, r3
 800a138:	f00f ff7c 	bl	801a034 <osSemaphoreRelease>
		return status;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	e024      	b.n	800a18a <IIM42652_SetRegisterBank+0x186>
	while(HAL_SPI_GetState(imu->m_spiHandle) != HAL_SPI_STATE_READY);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4618      	mov	r0, r3
 800a146:	f00a feed 	bl	8014f24 <HAL_SPI_GetState>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d1f7      	bne.n	800a140 <IIM42652_SetRegisterBank+0x13c>
	HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6858      	ldr	r0, [r3, #4]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	891b      	ldrh	r3, [r3, #8]
 800a158:	2201      	movs	r2, #1
 800a15a:	4619      	mov	r1, r3
 800a15c:	f006 f912 	bl	8010384 <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <IIM42652_SetRegisterBank+0x170>
	{
		imu->m_RegisterBank = RegisterBankNumber;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a16c:	461a      	mov	r2, r3
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	}

	if (osKernelRunning() == 1)
 800a174:	f00f fd5d 	bl	8019c32 <osKernelRunning>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d104      	bne.n	800a188 <IIM42652_SetRegisterBank+0x184>
	{
		osSemaphoreRelease(imu->m_spiSemaphoreHandle);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	4618      	mov	r0, r3
 800a184:	f00f ff56 	bl	801a034 <osSemaphoreRelease>
	}

	//	_DELAY_AUTO(1); !!!! Generate FreeRTOS crash if we call this function from ISR !!!
	return status;
 800a188:	7dfb      	ldrb	r3, [r7, #23]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <IIM42652_SetIntType>:
 *	RES		RES		INT2_MODE	INT2_CIRCUIT	INT2_POLARITY	INT1_MODE	INT1_CIRCUIT	INT1_POLARITY
 *					0 = Puls	0 = Open drain	0 = Active low  0 = Puls	0 = Open drain	0 = Active low
 *					1 = Latch	1 = Push pull	1 = Active high 1 = Latch	1 = Push pull	1 = Active high
 */
uint8_t IIM42652_SetIntType (IIM42652_t *imu, IIM42652_InterruptPinNumber InterruptPinNumber, IIM42652_InterruptType type)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b086      	sub	sp, #24
 800a196:	af02      	add	r7, sp, #8
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	460b      	mov	r3, r1
 800a19c:	70fb      	strb	r3, [r7, #3]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	70bb      	strb	r3, [r7, #2]
	uint8_t status = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	73fb      	strb	r3, [r7, #15]

	if (InterruptPinNumber == IMU_Int_1)
 800a1a6:	78fb      	ldrb	r3, [r7, #3]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d10c      	bne.n	800a1c6 <IIM42652_SetIntType+0x34>
	{
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 2, 1, type);
 800a1ac:	78bb      	ldrb	r3, [r7, #2]
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2114      	movs	r1, #20
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff fc3e 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
 800a1c4:	e02d      	b.n	800a222 <IIM42652_SetIntType+0x90>
	}
	else if (InterruptPinNumber == IMU_Int_2)
 800a1c6:	78fb      	ldrb	r3, [r7, #3]
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d10c      	bne.n	800a1e6 <IIM42652_SetIntType+0x54>
	{
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 5, 1, type);
 800a1cc:	78bb      	ldrb	r3, [r7, #2]
 800a1ce:	9301      	str	r3, [sp, #4]
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	2305      	movs	r3, #5
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	2114      	movs	r1, #20
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7ff fc2e 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73fb      	strb	r3, [r7, #15]
 800a1e4:	e01d      	b.n	800a222 <IIM42652_SetIntType+0x90>
	}
	else if (InterruptPinNumber == IMU_Int_1_2)
 800a1e6:	78fb      	ldrb	r3, [r7, #3]
 800a1e8:	2b03      	cmp	r3, #3
 800a1ea:	d118      	bne.n	800a21e <IIM42652_SetIntType+0x8c>
	{
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 2, 1, type);
 800a1ec:	78bb      	ldrb	r3, [r7, #2]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2114      	movs	r1, #20
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff fc1e 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a200:	4603      	mov	r3, r0
 800a202:	73fb      	strb	r3, [r7, #15]
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 5, 1, type);
 800a204:	78bb      	ldrb	r3, [r7, #2]
 800a206:	9301      	str	r3, [sp, #4]
 800a208:	2301      	movs	r3, #1
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	2305      	movs	r3, #5
 800a20e:	2200      	movs	r2, #0
 800a210:	2114      	movs	r1, #20
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7ff fc12 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
 800a21c:	e001      	b.n	800a222 <IIM42652_SetIntType+0x90>
	}
	else
	{
		status = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	73fb      	strb	r3, [r7, #15]
	}

	osDelay(1);
 800a222:	2001      	movs	r0, #1
 800a224:	f00f fd5d 	bl	8019ce2 <osDelay>

	return status;
 800a228:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <IIM42652_SetIntCircuit>:
uint8_t IIM42652_SetIntCircuit (IIM42652_t *imu, IIM42652_InterruptPinNumber InterruptPinNumber, IIM42652_InterruptCircuit type)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b086      	sub	sp, #24
 800a236:	af02      	add	r7, sp, #8
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	460b      	mov	r3, r1
 800a23c:	70fb      	strb	r3, [r7, #3]
 800a23e:	4613      	mov	r3, r2
 800a240:	70bb      	strb	r3, [r7, #2]
	uint8_t status = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]

	if (InterruptPinNumber == IMU_Int_1)
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d10c      	bne.n	800a266 <IIM42652_SetIntCircuit+0x34>
	{
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 1, 1, type);
 800a24c:	78bb      	ldrb	r3, [r7, #2]
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	2301      	movs	r3, #1
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	2301      	movs	r3, #1
 800a256:	2200      	movs	r2, #0
 800a258:	2114      	movs	r1, #20
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff fbee 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a260:	4603      	mov	r3, r0
 800a262:	73fb      	strb	r3, [r7, #15]
 800a264:	e02d      	b.n	800a2c2 <IIM42652_SetIntCircuit+0x90>
	}
	else if (InterruptPinNumber == IMU_Int_2)
 800a266:	78fb      	ldrb	r3, [r7, #3]
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d10c      	bne.n	800a286 <IIM42652_SetIntCircuit+0x54>
	{
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 4, 1, type);
 800a26c:	78bb      	ldrb	r3, [r7, #2]
 800a26e:	9301      	str	r3, [sp, #4]
 800a270:	2301      	movs	r3, #1
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	2304      	movs	r3, #4
 800a276:	2200      	movs	r2, #0
 800a278:	2114      	movs	r1, #20
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff fbde 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a280:	4603      	mov	r3, r0
 800a282:	73fb      	strb	r3, [r7, #15]
 800a284:	e01d      	b.n	800a2c2 <IIM42652_SetIntCircuit+0x90>
	}
	else if (InterruptPinNumber == IMU_Int_1_2)
 800a286:	78fb      	ldrb	r3, [r7, #3]
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d118      	bne.n	800a2be <IIM42652_SetIntCircuit+0x8c>
	{
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 1, 1, type);
 800a28c:	78bb      	ldrb	r3, [r7, #2]
 800a28e:	9301      	str	r3, [sp, #4]
 800a290:	2301      	movs	r3, #1
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	2301      	movs	r3, #1
 800a296:	2200      	movs	r2, #0
 800a298:	2114      	movs	r1, #20
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7ff fbce 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 4, 1, type);
 800a2a4:	78bb      	ldrb	r3, [r7, #2]
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	2304      	movs	r3, #4
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2114      	movs	r1, #20
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7ff fbc2 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]
 800a2bc:	e001      	b.n	800a2c2 <IIM42652_SetIntCircuit+0x90>
	}
	else
	{
		status = HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	73fb      	strb	r3, [r7, #15]
	}

	osDelay(1);
 800a2c2:	2001      	movs	r0, #1
 800a2c4:	f00f fd0d 	bl	8019ce2 <osDelay>

	return status;
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <IIM42652_SetIntPolarity>:
uint8_t IIM42652_SetIntPolarity (IIM42652_t *imu, IIM42652_InterruptPinNumber InterruptPinNumber, IIM42652_InterruptPolarity type)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b086      	sub	sp, #24
 800a2d6:	af02      	add	r7, sp, #8
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	460b      	mov	r3, r1
 800a2dc:	70fb      	strb	r3, [r7, #3]
 800a2de:	4613      	mov	r3, r2
 800a2e0:	70bb      	strb	r3, [r7, #2]
	uint8_t status = 0;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]

	if (InterruptPinNumber == IMU_Int_1)
 800a2e6:	78fb      	ldrb	r3, [r7, #3]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d10c      	bne.n	800a306 <IIM42652_SetIntPolarity+0x34>
	{
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 0, 1, type);
 800a2ec:	78bb      	ldrb	r3, [r7, #2]
 800a2ee:	9301      	str	r3, [sp, #4]
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	2114      	movs	r1, #20
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7ff fb9e 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a300:	4603      	mov	r3, r0
 800a302:	73fb      	strb	r3, [r7, #15]
 800a304:	e02d      	b.n	800a362 <IIM42652_SetIntPolarity+0x90>
	}
	else if (InterruptPinNumber == IMU_Int_2)
 800a306:	78fb      	ldrb	r3, [r7, #3]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d10c      	bne.n	800a326 <IIM42652_SetIntPolarity+0x54>
	{
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 3, 1, type);
 800a30c:	78bb      	ldrb	r3, [r7, #2]
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	2301      	movs	r3, #1
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	2303      	movs	r3, #3
 800a316:	2200      	movs	r2, #0
 800a318:	2114      	movs	r1, #20
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff fb8e 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a320:	4603      	mov	r3, r0
 800a322:	73fb      	strb	r3, [r7, #15]
 800a324:	e01d      	b.n	800a362 <IIM42652_SetIntPolarity+0x90>
	}
	else if (InterruptPinNumber == IMU_Int_1_2)
 800a326:	78fb      	ldrb	r3, [r7, #3]
 800a328:	2b03      	cmp	r3, #3
 800a32a:	d118      	bne.n	800a35e <IIM42652_SetIntPolarity+0x8c>
	{
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 0, 1, type);
 800a32c:	78bb      	ldrb	r3, [r7, #2]
 800a32e:	9301      	str	r3, [sp, #4]
 800a330:	2301      	movs	r3, #1
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	2300      	movs	r3, #0
 800a336:	2200      	movs	r2, #0
 800a338:	2114      	movs	r1, #20
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7ff fb7e 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a340:	4603      	mov	r3, r0
 800a342:	73fb      	strb	r3, [r7, #15]
		status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG, IMU_RegBank_0, 3, 1, type);
 800a344:	78bb      	ldrb	r3, [r7, #2]
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	2301      	movs	r3, #1
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	2303      	movs	r3, #3
 800a34e:	2200      	movs	r2, #0
 800a350:	2114      	movs	r1, #20
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7ff fb72 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a358:	4603      	mov	r3, r0
 800a35a:	73fb      	strb	r3, [r7, #15]
 800a35c:	e001      	b.n	800a362 <IIM42652_SetIntPolarity+0x90>
	}
	else
	{
		status = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	73fb      	strb	r3, [r7, #15]
	}

	osDelay(1);
 800a362:	2001      	movs	r0, #1
 800a364:	f00f fcbd 	bl	8019ce2 <osDelay>

	return status;
 800a368:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <IIM42652_SetFIFOMode>:
*	0 = Bypass
*	1 = Stream-to-FIFO
*	2/3 = STOP-on-FULL
*/
uint8_t IIM42652_SetFIFOMode(IIM42652_t *imu, IIM42652_FIFOMode mode)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b086      	sub	sp, #24
 800a376:	af02      	add	r7, sp, #8
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	460b      	mov	r3, r1
 800a37c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_FIFO_CONFIG, IMU_RegBank_0, 7, 2, mode);
 800a37e:	78fb      	ldrb	r3, [r7, #3]
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	2302      	movs	r3, #2
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	2307      	movs	r3, #7
 800a388:	2200      	movs	r2, #0
 800a38a:	2116      	movs	r1, #22
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff fb55 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a392:	4603      	mov	r3, r0
 800a394:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800a396:	2001      	movs	r0, #1
 800a398:	f00f fca3 	bl	8019ce2 <osDelay>
	return status;
 800a39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <IIM42652_SetFIFOCountMode>:
*	HOLD_LAST_DATA_EN	FIFO_COUNT_REC				FIFO_COUNT_ENDIAN		SENSOR_DATA_ENDIAN	RES		UI_SIFS_CFG
*						0 = COUNT report bytes		0 = Little endian       0 = Little endian 			2 = Disable SPI
*						1 = COUNT report record		1 = Big endian          1 = Big endian    			3 = Disable I2C
*/
uint8_t IIM42652_SetFIFOCountMode(IIM42652_t *imu, IIM42652_FIFOCountMode mode)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b086      	sub	sp, #24
 800a3aa:	af02      	add	r7, sp, #8
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_INTF_CONFIG0, IMU_RegBank_0, 6, 1, mode);
 800a3b2:	78fb      	ldrb	r3, [r7, #3]
 800a3b4:	9301      	str	r3, [sp, #4]
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	2306      	movs	r3, #6
 800a3bc:	2200      	movs	r2, #0
 800a3be:	214c      	movs	r1, #76	; 0x4c
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7ff fb3b 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	f00f fc89 	bl	8019ce2 <osDelay>
	return status;
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <IIM42652_SetFIFOHoldLastValidData_Enable>:
uint8_t IIM42652_SetFIFOHoldLastValidData_Enable(IIM42652_t *imu, uint8_t EnableState)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b086      	sub	sp, #24
 800a3de:	af02      	add	r7, sp, #8
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_INTF_CONFIG0, IMU_RegBank_0, 7, 1, EnableState);
 800a3e6:	78fb      	ldrb	r3, [r7, #3]
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	2307      	movs	r3, #7
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	214c      	movs	r1, #76	; 0x4c
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7ff fb21 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800a3fe:	2001      	movs	r0, #1
 800a400:	f00f fc6f 	bl	8019ce2 <osDelay>
	return status;
 800a404:	7bfb      	ldrb	r3, [r7, #15]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <IIM42652_SetFIFOIntThreshold_Enable>:
/* FIFO_CONFIG1 Register bits
* 	MSB		6			5			4			3				2			1			LSB
*	RES		PARTIAL_RD	WM_GT_TH	HIRES_EN	TMST_FSYNC_EN	TEMP_EN		GYRO_EN		ACCEL_EN
*/
uint8_t IIM42652_SetFIFOIntThreshold_Enable(IIM42652_t *imu, uint8_t EnableState)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b086      	sub	sp, #24
 800a412:	af02      	add	r7, sp, #8
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	460b      	mov	r3, r1
 800a418:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_FIFO_CONFIG1, IMU_RegBank_0, 5, 1, EnableState);
 800a41a:	78fb      	ldrb	r3, [r7, #3]
 800a41c:	9301      	str	r3, [sp, #4]
 800a41e:	2301      	movs	r3, #1
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	2305      	movs	r3, #5
 800a424:	2200      	movs	r2, #0
 800a426:	215f      	movs	r1, #95	; 0x5f
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff fb07 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a42e:	4603      	mov	r3, r0
 800a430:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800a432:	2001      	movs	r0, #1
 800a434:	f00f fc55 	bl	8019ce2 <osDelay>
	return status;
 800a438:	7bfb      	ldrb	r3, [r7, #15]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <IIM42652_SetFIFOStore_Accel>:
uint8_t IIM42652_SetFIFOStore_Accel(IIM42652_t *imu, uint8_t EnableState)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b086      	sub	sp, #24
 800a446:	af02      	add	r7, sp, #8
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	460b      	mov	r3, r1
 800a44c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_FIFO_CONFIG1, IMU_RegBank_0, 0, 1, EnableState);
 800a44e:	78fb      	ldrb	r3, [r7, #3]
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	2301      	movs	r3, #1
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	2300      	movs	r3, #0
 800a458:	2200      	movs	r2, #0
 800a45a:	215f      	movs	r1, #95	; 0x5f
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff faed 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800a466:	2001      	movs	r0, #1
 800a468:	f00f fc3b 	bl	8019ce2 <osDelay>
	return status;
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <IIM42652_SetFIFOStore_Gyro>:
uint8_t IIM42652_SetFIFOStore_Gyro(IIM42652_t *imu, uint8_t EnableState)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b086      	sub	sp, #24
 800a47a:	af02      	add	r7, sp, #8
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	460b      	mov	r3, r1
 800a480:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_FIFO_CONFIG1, IMU_RegBank_0, 1, 1, EnableState);
 800a482:	78fb      	ldrb	r3, [r7, #3]
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	2301      	movs	r3, #1
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	2301      	movs	r3, #1
 800a48c:	2200      	movs	r2, #0
 800a48e:	215f      	movs	r1, #95	; 0x5f
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff fad3 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a496:	4603      	mov	r3, r0
 800a498:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800a49a:	2001      	movs	r0, #1
 800a49c:	f00f fc21 	bl	8019ce2 <osDelay>
	return status;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <IIM42652_SetFIFOStore_Temperature>:
uint8_t IIM42652_SetFIFOStore_Temperature(IIM42652_t *imu, uint8_t EnableState)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b086      	sub	sp, #24
 800a4ae:	af02      	add	r7, sp, #8
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_FIFO_CONFIG1, IMU_RegBank_0, 2, 1, EnableState);
 800a4b6:	78fb      	ldrb	r3, [r7, #3]
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	2302      	movs	r3, #2
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	215f      	movs	r1, #95	; 0x5f
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7ff fab9 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800a4ce:	2001      	movs	r0, #1
 800a4d0:	f00f fc07 	bl	8019ce2 <osDelay>
	return status;
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <IIM42652_SetFIFOIntThreshold_Point>:
/* FIFO_CONFIG3 Register bits
 * 	MSB:LSB
 *	FIFO_WM[11:8]
 */
uint8_t IIM42652_SetFIFOIntThreshold_Point(IIM42652_t *imu, uint16_t threshold)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b086      	sub	sp, #24
 800a4e2:	af02      	add	r7, sp, #8
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];
	data[0] = threshold & 0x00ff;
 800a4ea:	887b      	ldrh	r3, [r7, #2]
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	733b      	strb	r3, [r7, #12]
	data[1] = (threshold >> 8) & 0x00ff;
 800a4f0:	887b      	ldrh	r3, [r7, #2]
 800a4f2:	0a1b      	lsrs	r3, r3, #8
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	737b      	strb	r3, [r7, #13]
	uint8_t status = IIM42652_WriteMultiRegisters(imu, REG_FIFO_CONFIG2, IMU_RegBank_0, data, 2);
 800a4fa:	f107 030c 	add.w	r3, r7, #12
 800a4fe:	2202      	movs	r2, #2
 800a500:	9200      	str	r2, [sp, #0]
 800a502:	2200      	movs	r2, #0
 800a504:	2160      	movs	r1, #96	; 0x60
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff fbe9 	bl	8009cde <IIM42652_WriteMultiRegisters>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800a510:	2001      	movs	r0, #1
 800a512:	f00f fbe6 	bl	8019ce2 <osDelay>
	return status;
 800a516:	7bfb      	ldrb	r3, [r7, #15]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <IIM42652_SetIntPulsDuration>:
/* INT_CONFIG1 Register bits
 * 	MSB		6				5					4			3		2		1		LSB
 *	RES		TPULSE_DURATION	TDEASSERT_DISABLE	ASYNC_RESET	RES		RES		RES		RES
 */
uint8_t IIM42652_SetIntPulsDuration(IIM42652_t *imu, IIM42652_InterruptDuration duration)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af02      	add	r7, sp, #8
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	460b      	mov	r3, r1
 800a52a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG1, IMU_RegBank_0, 6, 1, duration);
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	2301      	movs	r3, #1
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	2306      	movs	r3, #6
 800a536:	2200      	movs	r2, #0
 800a538:	2164      	movs	r1, #100	; 0x64
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff fa7e 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800a544:	2001      	movs	r0, #1
 800a546:	f00f fbcc 	bl	8019ce2 <osDelay>
	return status;
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <IIM42652_SetIntPulsDeassert>:
uint8_t IIM42652_SetIntPulsDeassert(IIM42652_t *imu, uint8_t EnableState)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af02      	add	r7, sp, #8
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG1, IMU_RegBank_0, 5, 1, !EnableState);
 800a560:	78fb      	ldrb	r3, [r7, #3]
 800a562:	2b00      	cmp	r3, #0
 800a564:	bf0c      	ite	eq
 800a566:	2301      	moveq	r3, #1
 800a568:	2300      	movne	r3, #0
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	2301      	movs	r3, #1
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	2305      	movs	r3, #5
 800a574:	2200      	movs	r2, #0
 800a576:	2164      	movs	r1, #100	; 0x64
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff fa5f 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a57e:	4603      	mov	r3, r0
 800a580:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800a582:	2001      	movs	r0, #1
 800a584:	f00f fbad 	bl	8019ce2 <osDelay>
	return status;
 800a588:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <IIM42652_SetIntPulsAsyncReset>:
uint8_t IIM42652_SetIntPulsAsyncReset(IIM42652_t *imu, uint8_t EnableState)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b086      	sub	sp, #24
 800a596:	af02      	add	r7, sp, #8
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	460b      	mov	r3, r1
 800a59c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_INT_CONFIG1, IMU_RegBank_0, 4, 1, !EnableState);
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bf0c      	ite	eq
 800a5a4:	2301      	moveq	r3, #1
 800a5a6:	2300      	movne	r3, #0
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	9301      	str	r3, [sp, #4]
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	2304      	movs	r3, #4
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	2164      	movs	r1, #100	; 0x64
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff fa40 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	f00f fb8e 	bl	8019ce2 <osDelay>
	return status;
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <IIM42652_SetIntSource>:
* 	MSB		6					5		4		3		2		1		LSB
*	RES		I3C_PROTOCOL_ERROR	RES		RES		SMD		WOM_Z	WOM_Y	WOM_X
*/
uint8_t IIM42652_SetIntSource(IIM42652_t *imu, IIM42652_InterruptPinNumber InterruptPinNumber,
								IIM42652_InterruptSource source, uint8_t EnableState)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af02      	add	r7, sp, #8
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	4608      	mov	r0, r1
 800a5da:	4611      	mov	r1, r2
 800a5dc:	461a      	mov	r2, r3
 800a5de:	4603      	mov	r3, r0
 800a5e0:	70fb      	strb	r3, [r7, #3]
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	70bb      	strb	r3, [r7, #2]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	707b      	strb	r3, [r7, #1]
	uint8_t status = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	73fb      	strb	r3, [r7, #15]

	if (InterruptPinNumber == IMU_Int_1)
 800a5ee:	78fb      	ldrb	r3, [r7, #3]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d120      	bne.n	800a636 <IIM42652_SetIntSource+0x66>
	{
		if (source <= IMU_IntSource_UI_FSYNC)
 800a5f4:	78bb      	ldrb	r3, [r7, #2]
 800a5f6:	2b06      	cmp	r3, #6
 800a5f8:	d80d      	bhi.n	800a616 <IIM42652_SetIntSource+0x46>
		{
			status = IIM42652_WriteRegisterBits(imu, REG_INT_SOURCE0, IMU_RegBank_0, source, 1, EnableState);
 800a5fa:	78ba      	ldrb	r2, [r7, #2]
 800a5fc:	787b      	ldrb	r3, [r7, #1]
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	2301      	movs	r3, #1
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	4613      	mov	r3, r2
 800a606:	2200      	movs	r2, #0
 800a608:	2165      	movs	r1, #101	; 0x65
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7ff fa16 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a610:	4603      	mov	r3, r0
 800a612:	73fb      	strb	r3, [r7, #15]
 800a614:	e075      	b.n	800a702 <IIM42652_SetIntSource+0x132>
		}
		else
		{
			status = IIM42652_WriteRegisterBits(imu, REG_INT_SOURCE1, IMU_RegBank_0, source-8, 1, EnableState);
 800a616:	78bb      	ldrb	r3, [r7, #2]
 800a618:	3b08      	subs	r3, #8
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	787b      	ldrb	r3, [r7, #1]
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	2301      	movs	r3, #1
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	4613      	mov	r3, r2
 800a626:	2200      	movs	r2, #0
 800a628:	2166      	movs	r1, #102	; 0x66
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7ff fa06 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a630:	4603      	mov	r3, r0
 800a632:	73fb      	strb	r3, [r7, #15]
 800a634:	e065      	b.n	800a702 <IIM42652_SetIntSource+0x132>
		}
	}
	else if (InterruptPinNumber == IMU_Int_2)
 800a636:	78fb      	ldrb	r3, [r7, #3]
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d120      	bne.n	800a67e <IIM42652_SetIntSource+0xae>
	{
		if (source <= IMU_IntSource_UI_FSYNC)
 800a63c:	78bb      	ldrb	r3, [r7, #2]
 800a63e:	2b06      	cmp	r3, #6
 800a640:	d80d      	bhi.n	800a65e <IIM42652_SetIntSource+0x8e>
		{
			status = IIM42652_WriteRegisterBits(imu, REG_INT_SOURCE3, IMU_RegBank_0, source, 1, EnableState);
 800a642:	78ba      	ldrb	r2, [r7, #2]
 800a644:	787b      	ldrb	r3, [r7, #1]
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	2301      	movs	r3, #1
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	4613      	mov	r3, r2
 800a64e:	2200      	movs	r2, #0
 800a650:	2168      	movs	r1, #104	; 0x68
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff f9f2 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a658:	4603      	mov	r3, r0
 800a65a:	73fb      	strb	r3, [r7, #15]
 800a65c:	e051      	b.n	800a702 <IIM42652_SetIntSource+0x132>
		}
		else
		{
			status = IIM42652_WriteRegisterBits(imu, REG_INT_SOURCE4, IMU_RegBank_0, source-8, 1, EnableState);
 800a65e:	78bb      	ldrb	r3, [r7, #2]
 800a660:	3b08      	subs	r3, #8
 800a662:	b2da      	uxtb	r2, r3
 800a664:	787b      	ldrb	r3, [r7, #1]
 800a666:	9301      	str	r3, [sp, #4]
 800a668:	2301      	movs	r3, #1
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	4613      	mov	r3, r2
 800a66e:	2200      	movs	r2, #0
 800a670:	2169      	movs	r1, #105	; 0x69
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7ff f9e2 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]
 800a67c:	e041      	b.n	800a702 <IIM42652_SetIntSource+0x132>
		}
	}
	else if (InterruptPinNumber == IMU_Int_1_2)
 800a67e:	78fb      	ldrb	r3, [r7, #3]
 800a680:	2b03      	cmp	r3, #3
 800a682:	d13c      	bne.n	800a6fe <IIM42652_SetIntSource+0x12e>
	{
		if (source <= IMU_IntSource_UI_FSYNC)
 800a684:	78bb      	ldrb	r3, [r7, #2]
 800a686:	2b06      	cmp	r3, #6
 800a688:	d81a      	bhi.n	800a6c0 <IIM42652_SetIntSource+0xf0>
		{
			status = IIM42652_WriteRegisterBits(imu, REG_INT_SOURCE0, IMU_RegBank_0, source, 1, EnableState);
 800a68a:	78ba      	ldrb	r2, [r7, #2]
 800a68c:	787b      	ldrb	r3, [r7, #1]
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	2301      	movs	r3, #1
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	4613      	mov	r3, r2
 800a696:	2200      	movs	r2, #0
 800a698:	2165      	movs	r1, #101	; 0x65
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff f9ce 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73fb      	strb	r3, [r7, #15]
			status = IIM42652_WriteRegisterBits(imu, REG_INT_SOURCE3, IMU_RegBank_0, source, 1, EnableState);
 800a6a4:	78ba      	ldrb	r2, [r7, #2]
 800a6a6:	787b      	ldrb	r3, [r7, #1]
 800a6a8:	9301      	str	r3, [sp, #4]
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2168      	movs	r1, #104	; 0x68
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff f9c1 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	73fb      	strb	r3, [r7, #15]
 800a6be:	e020      	b.n	800a702 <IIM42652_SetIntSource+0x132>
		}
		else
		{
			status = IIM42652_WriteRegisterBits(imu, REG_INT_SOURCE1, IMU_RegBank_0, source-8, 1, EnableState);
 800a6c0:	78bb      	ldrb	r3, [r7, #2]
 800a6c2:	3b08      	subs	r3, #8
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	787b      	ldrb	r3, [r7, #1]
 800a6c8:	9301      	str	r3, [sp, #4]
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2166      	movs	r1, #102	; 0x66
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff f9b1 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	73fb      	strb	r3, [r7, #15]
			status = IIM42652_WriteRegisterBits(imu, REG_INT_SOURCE4, IMU_RegBank_0, source-8, 1, EnableState);
 800a6de:	78bb      	ldrb	r3, [r7, #2]
 800a6e0:	3b08      	subs	r3, #8
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	787b      	ldrb	r3, [r7, #1]
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2169      	movs	r1, #105	; 0x69
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7ff f9a2 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	73fb      	strb	r3, [r7, #15]
 800a6fc:	e001      	b.n	800a702 <IIM42652_SetIntSource+0x132>
		}
	}
	else
	{
		status = HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	73fb      	strb	r3, [r7, #15]
	}

	osDelay(1);
 800a702:	2001      	movs	r0, #1
 800a704:	f00f faed 	bl	8019ce2 <osDelay>

	return status;
 800a708:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <IIM42652_SetWomXTh>:
/* ACCEL_WOM_X_THR Register bits
 * 	MSB:LSB
 *	WOM_X_THR Fixed range [0g : 1g] with resolution 1g/256=~3.9mg
 */
uint8_t IIM42652_SetWomXTh(IIM42652_t *imu, uint8_t threshold)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b084      	sub	sp, #16
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	460b      	mov	r3, r1
 800a71c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegister(imu, REG_ACCEL_WOM_X_THR, IMU_RegBank_4, threshold);
 800a71e:	78fb      	ldrb	r3, [r7, #3]
 800a720:	2204      	movs	r2, #4
 800a722:	214a      	movs	r1, #74	; 0x4a
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7ff f904 	bl	8009932 <IIM42652_WriteRegister>
 800a72a:	4603      	mov	r3, r0
 800a72c:	73fb      	strb	r3, [r7, #15]

	uint8_t value;
	IIM42652_GetWomXTh(imu, &value);
 800a72e:	f107 030e 	add.w	r3, r7, #14
 800a732:	4619      	mov	r1, r3
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f808 	bl	800a74a <IIM42652_GetWomXTh>
	osDelay(1);
 800a73a:	2001      	movs	r0, #1
 800a73c:	f00f fad1 	bl	8019ce2 <osDelay>
	return status;
 800a740:	7bfb      	ldrb	r3, [r7, #15]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <IIM42652_GetWomXTh>:
uint8_t IIM42652_GetWomXTh(IIM42652_t *imu, uint8_t* value)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegister(imu, REG_ACCEL_WOM_X_THR, IMU_RegBank_4, value);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2204      	movs	r2, #4
 800a758:	214a      	movs	r1, #74	; 0x4a
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff f823 	bl	80097a6 <IIM42652_ReadRegister>
 800a760:	4603      	mov	r3, r0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <IIM42652_SetWomYTh>:
uint8_t IIM42652_SetWomYTh(IIM42652_t *imu, uint8_t threshold)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegister(imu, REG_ACCEL_WOM_Y_THR, IMU_RegBank_4, threshold);
 800a776:	78fb      	ldrb	r3, [r7, #3]
 800a778:	2204      	movs	r2, #4
 800a77a:	214b      	movs	r1, #75	; 0x4b
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff f8d8 	bl	8009932 <IIM42652_WriteRegister>
 800a782:	4603      	mov	r3, r0
 800a784:	73fb      	strb	r3, [r7, #15]
	uint8_t value;
	IIM42652_GetWomYTh(imu, &value);
 800a786:	f107 030e 	add.w	r3, r7, #14
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f808 	bl	800a7a2 <IIM42652_GetWomYTh>
	osDelay(1);
 800a792:	2001      	movs	r0, #1
 800a794:	f00f faa5 	bl	8019ce2 <osDelay>
	return status;
 800a798:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <IIM42652_GetWomYTh>:
uint8_t IIM42652_GetWomYTh(IIM42652_t *imu, uint8_t* value)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b082      	sub	sp, #8
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegister(imu, REG_ACCEL_WOM_Y_THR, IMU_RegBank_4, value);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2204      	movs	r2, #4
 800a7b0:	214b      	movs	r1, #75	; 0x4b
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7fe fff7 	bl	80097a6 <IIM42652_ReadRegister>
 800a7b8:	4603      	mov	r3, r0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <IIM42652_SetWomZTh>:
uint8_t IIM42652_SetWomZTh(IIM42652_t *imu, uint8_t threshold)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegister(imu, REG_ACCEL_WOM_Z_THR, IMU_RegBank_4, threshold);
 800a7ce:	78fb      	ldrb	r3, [r7, #3]
 800a7d0:	2204      	movs	r2, #4
 800a7d2:	214c      	movs	r1, #76	; 0x4c
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff f8ac 	bl	8009932 <IIM42652_WriteRegister>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	73fb      	strb	r3, [r7, #15]
	uint8_t value;
	IIM42652_GetWomZTh(imu, &value);
 800a7de:	f107 030e 	add.w	r3, r7, #14
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f808 	bl	800a7fa <IIM42652_GetWomZTh>
	osDelay(1);
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	f00f fa79 	bl	8019ce2 <osDelay>
	return status;
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <IIM42652_GetWomZTh>:
uint8_t IIM42652_GetWomZTh(IIM42652_t *imu, uint8_t* value)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b082      	sub	sp, #8
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegister(imu, REG_ACCEL_WOM_Z_THR, IMU_RegBank_4, value);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2204      	movs	r2, #4
 800a808:	214c      	movs	r1, #76	; 0x4c
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7fe ffcb 	bl	80097a6 <IIM42652_ReadRegister>
 800a810:	4603      	mov	r3, r0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <IIM42652_SetWOMIntMode>:
/* SMD_CONFIG Register bits
 * 	MSB		6		5		4		3				2			1:LSB
 *	RES		RES		RES		RES		WOM_INT_MODE	WOM_MODE	SMD_MODE
 */
uint8_t IIM42652_SetWOMIntMode(IIM42652_t *imu, IIM42652_WOMInterruptMode mode)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b086      	sub	sp, #24
 800a81e:	af02      	add	r7, sp, #8
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_SMD_CONFIG, IMU_RegBank_0, 3, 1, mode);
 800a826:	78fb      	ldrb	r3, [r7, #3]
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	2301      	movs	r3, #1
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	2303      	movs	r3, #3
 800a830:	2200      	movs	r2, #0
 800a832:	2157      	movs	r1, #87	; 0x57
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7ff f901 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a83a:	4603      	mov	r3, r0
 800a83c:	73fb      	strb	r3, [r7, #15]
//	_DELAY_AUTO(1);
	return status;
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <IIM42652_GetWOMIntMode>:
uint8_t IIM42652_GetWOMIntMode(IIM42652_t *imu, uint8_t* value)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af02      	add	r7, sp, #8
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegisterBits(imu, REG_SMD_CONFIG, IMU_RegBank_0, 3, 1, value);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	9301      	str	r3, [sp, #4]
 800a856:	2301      	movs	r3, #1
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	2303      	movs	r3, #3
 800a85c:	2200      	movs	r2, #0
 800a85e:	2157      	movs	r1, #87	; 0x57
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f7ff f818 	bl	8009896 <IIM42652_ReadRegisterBits>
 800a866:	4603      	mov	r3, r0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <IIM42652_SetWOMMode>:
uint8_t IIM42652_SetWOMMode(IIM42652_t *imu, IIM42652_WOMMode mode)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af02      	add	r7, sp, #8
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_SMD_CONFIG, IMU_RegBank_0, 2, 1, mode);
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	2301      	movs	r3, #1
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	2302      	movs	r3, #2
 800a886:	2200      	movs	r2, #0
 800a888:	2157      	movs	r1, #87	; 0x57
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7ff f8d6 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a890:	4603      	mov	r3, r0
 800a892:	73fb      	strb	r3, [r7, #15]
//	_DELAY_AUTO(1);
	return status;
 800a894:	7bfb      	ldrb	r3, [r7, #15]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <IIM42652_GetWOMMode>:
uint8_t IIM42652_GetWOMMode(IIM42652_t *imu, uint8_t* value)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	af02      	add	r7, sp, #8
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegisterBits(imu, REG_SMD_CONFIG, IMU_RegBank_0, 2, 1, value);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	9301      	str	r3, [sp, #4]
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2157      	movs	r1, #87	; 0x57
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7fe ffed 	bl	8009896 <IIM42652_ReadRegisterBits>
 800a8bc:	4603      	mov	r3, r0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <IIM42652_SetSMDMode>:
uint8_t IIM42652_SetSMDMode(IIM42652_t *imu, IIM42652_SMDMode mode)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b086      	sub	sp, #24
 800a8ca:	af02      	add	r7, sp, #8
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_SMD_CONFIG, IMU_RegBank_0, 1, 2, mode);
 800a8d2:	78fb      	ldrb	r3, [r7, #3]
 800a8d4:	9301      	str	r3, [sp, #4]
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	2301      	movs	r3, #1
 800a8dc:	2200      	movs	r2, #0
 800a8de:	2157      	movs	r1, #87	; 0x57
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7ff f8ab 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73fb      	strb	r3, [r7, #15]
//	_DELAY_AUTO(1);
	return status;
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <IIM42652_GetSMDMode>:
uint8_t IIM42652_GetSMDMode(IIM42652_t *imu, uint8_t* value)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af02      	add	r7, sp, #8
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegisterBits(imu, REG_SMD_CONFIG, IMU_RegBank_0, 1, 2, value);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	2302      	movs	r3, #2
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	2301      	movs	r3, #1
 800a908:	2200      	movs	r2, #0
 800a90a:	2157      	movs	r1, #87	; 0x57
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7fe ffc2 	bl	8009896 <IIM42652_ReadRegisterBits>
 800a912:	4603      	mov	r3, r0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <IIM42652_SetAccelMode>:
/* PWR_MGMT0 Register bits
 * 	MSB		6		5			4		3:2			1:LSB
 *	RES		RES		TEMP_DIS	IDLE	GYRO_MODE	ACCEL_MODE
 */
uint8_t IIM42652_SetAccelMode(IIM42652_t *imu, IIM42652_AccelMode mode)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af02      	add	r7, sp, #8
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	460b      	mov	r3, r1
 800a926:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_PWR_MGMT0, IMU_RegBank_0, 1, 2, mode);
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	2302      	movs	r3, #2
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	2301      	movs	r3, #1
 800a932:	2200      	movs	r2, #0
 800a934:	214e      	movs	r1, #78	; 0x4e
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7ff f880 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73fb      	strb	r3, [r7, #15]
	_DELAY_AUTO(1);
 800a940:	f00f f977 	bl	8019c32 <osKernelRunning>
 800a944:	4603      	mov	r3, r0
 800a946:	2b01      	cmp	r3, #1
 800a948:	d103      	bne.n	800a952 <IIM42652_SetAccelMode+0x36>
 800a94a:	2001      	movs	r0, #1
 800a94c:	f00f f9c9 	bl	8019ce2 <osDelay>
 800a950:	e002      	b.n	800a958 <IIM42652_SetAccelMode+0x3c>
 800a952:	2001      	movs	r0, #1
 800a954:	f004 fbec 	bl	800f130 <HAL_Delay>
	return status;
 800a958:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <IIM42652_SetGyroMode>:
uint8_t IIM42652_SetGyroMode(IIM42652_t *imu, IIM42652_GyroMode mode)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b086      	sub	sp, #24
 800a966:	af02      	add	r7, sp, #8
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	460b      	mov	r3, r1
 800a96c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_PWR_MGMT0, IMU_RegBank_0, 3, 2, mode);
 800a96e:	78fb      	ldrb	r3, [r7, #3]
 800a970:	9301      	str	r3, [sp, #4]
 800a972:	2302      	movs	r3, #2
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	2303      	movs	r3, #3
 800a978:	2200      	movs	r2, #0
 800a97a:	214e      	movs	r1, #78	; 0x4e
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7ff f85d 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a982:	4603      	mov	r3, r0
 800a984:	73fb      	strb	r3, [r7, #15]
	_DELAY_AUTO(1);
 800a986:	f00f f954 	bl	8019c32 <osKernelRunning>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d103      	bne.n	800a998 <IIM42652_SetGyroMode+0x36>
 800a990:	2001      	movs	r0, #1
 800a992:	f00f f9a6 	bl	8019ce2 <osDelay>
 800a996:	e002      	b.n	800a99e <IIM42652_SetGyroMode+0x3c>
 800a998:	2001      	movs	r0, #1
 800a99a:	f004 fbc9 	bl	800f130 <HAL_Delay>
	return status;
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <IIM42652_SetTempMode>:
uint8_t IIM42652_SetTempMode(IIM42652_t *imu, uint8_t EnableState)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af02      	add	r7, sp, #8
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_PWR_MGMT0, IMU_RegBank_0, 5, 1, !EnableState);
 800a9b4:	78fb      	ldrb	r3, [r7, #3]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	bf0c      	ite	eq
 800a9ba:	2301      	moveq	r3, #1
 800a9bc:	2300      	movne	r3, #0
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	9301      	str	r3, [sp, #4]
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	2305      	movs	r3, #5
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	214e      	movs	r1, #78	; 0x4e
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7ff f835 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	73fb      	strb	r3, [r7, #15]
	_DELAY_AUTO(1);
 800a9d6:	f00f f92c 	bl	8019c32 <osKernelRunning>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d103      	bne.n	800a9e8 <IIM42652_SetTempMode+0x40>
 800a9e0:	2001      	movs	r0, #1
 800a9e2:	f00f f97e 	bl	8019ce2 <osDelay>
 800a9e6:	e002      	b.n	800a9ee <IIM42652_SetTempMode+0x46>
 800a9e8:	2001      	movs	r0, #1
 800a9ea:	f004 fba1 	bl	800f130 <HAL_Delay>
	return status;
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <IIM42652_GetAccelAafBW>:

uint8_t IIM42652_GetAccelAafBW(IIM42652_t *imu, uint16_t* value)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b088      	sub	sp, #32
 800a9fc:	af02      	add	r7, sp, #8
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
	uint8_t AAF_en_state = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	75fb      	strb	r3, [r7, #23]
	uint8_t AAF_delt = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	75bb      	strb	r3, [r7, #22]
	uint16_t AAF_deltSqr = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	82bb      	strh	r3, [r7, #20]
	uint8_t AAF_bs = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	74fb      	strb	r3, [r7, #19]
	uint8_t dataBuf[3];
	uint8_t status = IIM42652_ReadMultiRegisters(imu, REG_ACCEL_CONFIG_STATIC2, IMU_RegBank_2, dataBuf, 3);
 800aa12:	f107 030c 	add.w	r3, r7, #12
 800aa16:	2203      	movs	r2, #3
 800aa18:	9200      	str	r2, [sp, #0]
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	2103      	movs	r1, #3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff f8c9 	bl	8009bb6 <IIM42652_ReadMultiRegisters>
 800aa24:	4603      	mov	r3, r0
 800aa26:	74bb      	strb	r3, [r7, #18]

	AAF_en_state = (dataBuf[0] & 0x01);
 800aa28:	7b3b      	ldrb	r3, [r7, #12]
 800aa2a:	f003 0301 	and.w	r3, r3, #1
 800aa2e:	75fb      	strb	r3, [r7, #23]
	AAF_en_state ^= 1U;
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	f083 0301 	eor.w	r3, r3, #1
 800aa36:	75fb      	strb	r3, [r7, #23]

	AAF_delt = (dataBuf[0] >> 1) & 0x3F;
 800aa38:	7b3b      	ldrb	r3, [r7, #12]
 800aa3a:	085b      	lsrs	r3, r3, #1
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa42:	75bb      	strb	r3, [r7, #22]

	AAF_deltSqr = dataBuf[1] | ((dataBuf[2] & 0x0F) << 8);
 800aa44:	7b7b      	ldrb	r3, [r7, #13]
 800aa46:	b21a      	sxth	r2, r3
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	021b      	lsls	r3, r3, #8
 800aa4c:	b21b      	sxth	r3, r3
 800aa4e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aa52:	b21b      	sxth	r3, r3
 800aa54:	4313      	orrs	r3, r2
 800aa56:	b21b      	sxth	r3, r3
 800aa58:	82bb      	strh	r3, [r7, #20]

	AAF_bs = ((dataBuf[2] >> 4) & 0x0F);
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
 800aa5c:	091b      	lsrs	r3, r3, #4
 800aa5e:	74fb      	strb	r3, [r7, #19]

	return status;
 800aa60:	7cbb      	ldrb	r3, [r7, #18]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3718      	adds	r7, #24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <IIM42652_SetGyroFSR>:
{
	;
}

uint8_t IIM42652_SetGyroFSR(IIM42652_t *imu, IIM42652_GyroFSRValues GyroFSR)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b086      	sub	sp, #24
 800aa6e:	af02      	add	r7, sp, #8
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	460b      	mov	r3, r1
 800aa74:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_GYRO_CONFIG0, IMU_RegBank_0, 7, 3, GyroFSR);
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	2307      	movs	r3, #7
 800aa80:	2200      	movs	r2, #0
 800aa82:	214f      	movs	r1, #79	; 0x4f
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f7fe ffd9 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d104      	bne.n	800aa9e <IIM42652_SetGyroFSR+0x34>
	{
		IIM42652_SetGyroScaleFactor(imu, GyroFSR);
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f9d7 	bl	800ae4c <IIM42652_SetGyroScaleFactor>
	}
	_DELAY_AUTO(1);
 800aa9e:	f00f f8c8 	bl	8019c32 <osKernelRunning>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d103      	bne.n	800aab0 <IIM42652_SetGyroFSR+0x46>
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	f00f f91a 	bl	8019ce2 <osDelay>
 800aaae:	e002      	b.n	800aab6 <IIM42652_SetGyroFSR+0x4c>
 800aab0:	2001      	movs	r0, #1
 800aab2:	f004 fb3d 	bl	800f130 <HAL_Delay>
	return status;
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <IIM42652_GetGyroFSR>:
uint8_t IIM42652_GetGyroFSR(IIM42652_t *imu, uint8_t* value)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af02      	add	r7, sp, #8
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegisterBits(imu, REG_GYRO_CONFIG0, IMU_RegBank_0, 7, 3, value);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	9301      	str	r3, [sp, #4]
 800aace:	2303      	movs	r3, #3
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	2307      	movs	r3, #7
 800aad4:	2200      	movs	r2, #0
 800aad6:	214f      	movs	r1, #79	; 0x4f
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7fe fedc 	bl	8009896 <IIM42652_ReadRegisterBits>
 800aade:	4603      	mov	r3, r0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <IIM42652_SetAccelFSR>:
uint8_t IIM42652_SetAccelFSR(IIM42652_t *imu, IIM42652_AccFSRValues AccelFSR)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af02      	add	r7, sp, #8
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_ACCEL_CONFIG0, IMU_RegBank_0, 7, 3, AccelFSR);
 800aaf4:	78fb      	ldrb	r3, [r7, #3]
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	2303      	movs	r3, #3
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	2307      	movs	r3, #7
 800aafe:	2200      	movs	r2, #0
 800ab00:	2150      	movs	r1, #80	; 0x50
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7fe ff9a 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d104      	bne.n	800ab1c <IIM42652_SetAccelFSR+0x34>
	{
		IIM42652_SetAccelScaleFactor(imu, AccelFSR);
 800ab12:	78fb      	ldrb	r3, [r7, #3]
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f95e 	bl	800add8 <IIM42652_SetAccelScaleFactor>
	}
	_DELAY_AUTO(1);
 800ab1c:	f00f f889 	bl	8019c32 <osKernelRunning>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d103      	bne.n	800ab2e <IIM42652_SetAccelFSR+0x46>
 800ab26:	2001      	movs	r0, #1
 800ab28:	f00f f8db 	bl	8019ce2 <osDelay>
 800ab2c:	e002      	b.n	800ab34 <IIM42652_SetAccelFSR+0x4c>
 800ab2e:	2001      	movs	r0, #1
 800ab30:	f004 fafe 	bl	800f130 <HAL_Delay>
	return status;
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <IIM42652_GetAccelFSR>:
uint8_t IIM42652_GetAccelFSR(IIM42652_t *imu, uint8_t* value)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af02      	add	r7, sp, #8
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegisterBits(imu, REG_ACCEL_CONFIG0, IMU_RegBank_0, 7, 3, value);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	9301      	str	r3, [sp, #4]
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	2307      	movs	r3, #7
 800ab52:	2200      	movs	r2, #0
 800ab54:	2150      	movs	r1, #80	; 0x50
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7fe fe9d 	bl	8009896 <IIM42652_ReadRegisterBits>
 800ab5c:	4603      	mov	r3, r0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <IIM42652_SetGyroODR>:
uint8_t IIM42652_SetGyroODR(IIM42652_t *imu, IIM42652_GyroODRValues GyroODR)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b086      	sub	sp, #24
 800ab6a:	af02      	add	r7, sp, #8
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_GYRO_CONFIG0, IMU_RegBank_0, 3, 4, GyroODR);
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	9301      	str	r3, [sp, #4]
 800ab76:	2304      	movs	r3, #4
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	214f      	movs	r1, #79	; 0x4f
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7fe ff5b 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73fb      	strb	r3, [r7, #15]
	if (GyroODR == IIM42652_Gyroscope_32kHz)
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d106      	bne.n	800ab9e <IIM42652_SetGyroODR+0x38>
	{
		imu->decimationFactor = 2;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab96:	2202      	movs	r2, #2
 800ab98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ab9c:	e00f      	b.n	800abbe <IIM42652_SetGyroODR+0x58>
	}
	else if(GyroODR == IIM42652_Gyroscope_16kHz)
 800ab9e:	78fb      	ldrb	r3, [r7, #3]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d106      	bne.n	800abb2 <IIM42652_SetGyroODR+0x4c>
	{
		imu->decimationFactor = 1;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800abb0:	e005      	b.n	800abbe <IIM42652_SetGyroODR+0x58>
	}
	else
	{
		imu->decimationFactor = 0;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}
	_DELAY_AUTO(1);
 800abbe:	f00f f838 	bl	8019c32 <osKernelRunning>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d103      	bne.n	800abd0 <IIM42652_SetGyroODR+0x6a>
 800abc8:	2001      	movs	r0, #1
 800abca:	f00f f88a 	bl	8019ce2 <osDelay>
 800abce:	e002      	b.n	800abd6 <IIM42652_SetGyroODR+0x70>
 800abd0:	2001      	movs	r0, #1
 800abd2:	f004 faad 	bl	800f130 <HAL_Delay>
	return status;
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <IIM42652_GetGyroODR>:
uint8_t IIM42652_GetGyroODR(IIM42652_t *imu, uint8_t* value)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af02      	add	r7, sp, #8
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegisterBits(imu, REG_GYRO_CONFIG0, IMU_RegBank_0, 3, 4, value);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	2304      	movs	r3, #4
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	2303      	movs	r3, #3
 800abf4:	2200      	movs	r2, #0
 800abf6:	214f      	movs	r1, #79	; 0x4f
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7fe fe4c 	bl	8009896 <IIM42652_ReadRegisterBits>
 800abfe:	4603      	mov	r3, r0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <IIM42652_SetAccelODR>:
uint8_t IIM42652_SetAccelODR(IIM42652_t *imu, IIM42652_AccODRValues AccelODR)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_ACCEL_CONFIG0, IMU_RegBank_0, 3, 4, AccelODR);
 800ac14:	78fb      	ldrb	r3, [r7, #3]
 800ac16:	9301      	str	r3, [sp, #4]
 800ac18:	2304      	movs	r3, #4
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2150      	movs	r1, #80	; 0x50
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7fe ff0a 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73fb      	strb	r3, [r7, #15]
	if (AccelODR == IIM42652_Accelerometer_32kHz)
 800ac2c:	78fb      	ldrb	r3, [r7, #3]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d106      	bne.n	800ac40 <IIM42652_SetAccelODR+0x38>
	{
		imu->decimationFactor = 2;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac38:	2202      	movs	r2, #2
 800ac3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ac3e:	e00f      	b.n	800ac60 <IIM42652_SetAccelODR+0x58>
	}
	else if(AccelODR == IIM42652_Accelerometer_16kHz)
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d106      	bne.n	800ac54 <IIM42652_SetAccelODR+0x4c>
	{
		imu->decimationFactor = 1;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ac52:	e005      	b.n	800ac60 <IIM42652_SetAccelODR+0x58>
	}
	else
	{
		imu->decimationFactor = 0;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}
	_DELAY_AUTO(1);
 800ac60:	f00e ffe7 	bl	8019c32 <osKernelRunning>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d103      	bne.n	800ac72 <IIM42652_SetAccelODR+0x6a>
 800ac6a:	2001      	movs	r0, #1
 800ac6c:	f00f f839 	bl	8019ce2 <osDelay>
 800ac70:	e002      	b.n	800ac78 <IIM42652_SetAccelODR+0x70>
 800ac72:	2001      	movs	r0, #1
 800ac74:	f004 fa5c 	bl	800f130 <HAL_Delay>
	return status;
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <IIM42652_GetAccelODR>:
uint8_t IIM42652_GetAccelODR(IIM42652_t *imu, uint8_t* value)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b084      	sub	sp, #16
 800ac86:	af02      	add	r7, sp, #8
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegisterBits(imu, REG_ACCEL_CONFIG0, IMU_RegBank_0, 3, 4, value);
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	2304      	movs	r3, #4
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	2303      	movs	r3, #3
 800ac96:	2200      	movs	r2, #0
 800ac98:	2150      	movs	r1, #80	; 0x50
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7fe fdfb 	bl	8009896 <IIM42652_ReadRegisterBits>
 800aca0:	4603      	mov	r3, r0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <IIM42652_SetAccelBW>:
/* 	GYRO_ACCEL_CONFIG0 Register bits
* 	MSB:4				3:LSB
*	ACCEL_UI_FILT_BW	GYRO_UI_FILT_BW
*/
uint8_t IIM42652_SetAccelBW(IIM42652_t *imu, IIM42652_AccBWValues AccelBW)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b086      	sub	sp, #24
 800acae:	af02      	add	r7, sp, #8
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	460b      	mov	r3, r1
 800acb4:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_GYRO_ACCEL_CONFIG0, IMU_RegBank_0, 7, 4, AccelBW);
 800acb6:	78fb      	ldrb	r3, [r7, #3]
 800acb8:	9301      	str	r3, [sp, #4]
 800acba:	2304      	movs	r3, #4
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	2307      	movs	r3, #7
 800acc0:	2200      	movs	r2, #0
 800acc2:	2152      	movs	r1, #82	; 0x52
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7fe feb9 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800acca:	4603      	mov	r3, r0
 800accc:	73fb      	strb	r3, [r7, #15]
	_DELAY_AUTO(1);
 800acce:	f00e ffb0 	bl	8019c32 <osKernelRunning>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d103      	bne.n	800ace0 <IIM42652_SetAccelBW+0x36>
 800acd8:	2001      	movs	r0, #1
 800acda:	f00f f802 	bl	8019ce2 <osDelay>
 800acde:	e002      	b.n	800ace6 <IIM42652_SetAccelBW+0x3c>
 800ace0:	2001      	movs	r0, #1
 800ace2:	f004 fa25 	bl	800f130 <HAL_Delay>
	return status;
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <IIM42652_GetAccelBW>:
uint8_t IIM42652_GetAccelBW(IIM42652_t *imu, uint8_t* value)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegisterBits(imu, REG_GYRO_ACCEL_CONFIG0, IMU_RegBank_0, 7, 4, value);
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	2304      	movs	r3, #4
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	2307      	movs	r3, #7
 800ad04:	2200      	movs	r2, #0
 800ad06:	2152      	movs	r1, #82	; 0x52
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7fe fdc4 	bl	8009896 <IIM42652_ReadRegisterBits>
 800ad0e:	4603      	mov	r3, r0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <IIM42652_SetGyroBW>:
uint8_t IIM42652_SetGyroBW(IIM42652_t *imu, IIM42652_GyroBWValues GyroBW)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af02      	add	r7, sp, #8
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_GYRO_ACCEL_CONFIG0, IMU_RegBank_0, 3, 4, GyroBW);
 800ad24:	78fb      	ldrb	r3, [r7, #3]
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	2304      	movs	r3, #4
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	2200      	movs	r2, #0
 800ad30:	2152      	movs	r1, #82	; 0x52
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7fe fe82 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]
	_DELAY_AUTO(1);
 800ad3c:	f00e ff79 	bl	8019c32 <osKernelRunning>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d103      	bne.n	800ad4e <IIM42652_SetGyroBW+0x36>
 800ad46:	2001      	movs	r0, #1
 800ad48:	f00e ffcb 	bl	8019ce2 <osDelay>
 800ad4c:	e002      	b.n	800ad54 <IIM42652_SetGyroBW+0x3c>
 800ad4e:	2001      	movs	r0, #1
 800ad50:	f004 f9ee 	bl	800f130 <HAL_Delay>
	return status;
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <IIM42652_GetGyroBW>:
uint8_t IIM42652_GetGyroBW(IIM42652_t *imu, uint8_t* value)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b084      	sub	sp, #16
 800ad62:	af02      	add	r7, sp, #8
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegisterBits(imu, REG_GYRO_ACCEL_CONFIG0, IMU_RegBank_0, 3, 4, value);
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	9301      	str	r3, [sp, #4]
 800ad6c:	2304      	movs	r3, #4
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	2303      	movs	r3, #3
 800ad72:	2200      	movs	r2, #0
 800ad74:	2152      	movs	r1, #82	; 0x52
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7fe fd8d 	bl	8009896 <IIM42652_ReadRegisterBits>
 800ad7c:	4603      	mov	r3, r0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3708      	adds	r7, #8
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <IIM42652_GetAccelFilterOrder>:
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_ACCEL_CONFIG1, IMU_RegBank_0, 4, 2, FO);
	_DELAY_AUTO(1);
	return status;
}
uint8_t IIM42652_GetAccelFilterOrder(IIM42652_t *imu, uint8_t* value)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af02      	add	r7, sp, #8
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegisterBits(imu, REG_ACCEL_CONFIG1, IMU_RegBank_0, 4, 2, value);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	9301      	str	r3, [sp, #4]
 800ad94:	2302      	movs	r3, #2
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	2304      	movs	r3, #4
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2153      	movs	r1, #83	; 0x53
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7fe fd79 	bl	8009896 <IIM42652_ReadRegisterBits>
 800ada4:	4603      	mov	r3, r0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <IIM42652_GetGyroFilterOrder>:
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_GYRO_CONFIG1, IMU_RegBank_0, 3, 2, FO);
	_DELAY_AUTO(1);
	return status;
}
uint8_t IIM42652_GetGyroFilterOrder(IIM42652_t *imu, uint8_t* value)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af02      	add	r7, sp, #8
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
	return IIM42652_ReadRegisterBits(imu, REG_GYRO_CONFIG1, IMU_RegBank_0, 3, 2, value);
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	9301      	str	r3, [sp, #4]
 800adbc:	2302      	movs	r3, #2
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	2303      	movs	r3, #3
 800adc2:	2200      	movs	r2, #0
 800adc4:	2151      	movs	r1, #81	; 0x51
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7fe fd65 	bl	8009896 <IIM42652_ReadRegisterBits>
 800adcc:	4603      	mov	r3, r0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <IIM42652_SetAccelScaleFactor>:

void IIM42652_SetAccelScaleFactor(IIM42652_t *imu, IIM42652_AccFSRValues AccelFSR)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	460b      	mov	r3, r1
 800ade2:	70fb      	strb	r3, [r7, #3]
	switch (AccelFSR)
 800ade4:	78fb      	ldrb	r3, [r7, #3]
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d82a      	bhi.n	800ae40 <IIM42652_SetAccelScaleFactor+0x68>
 800adea:	a201      	add	r2, pc, #4	; (adr r2, 800adf0 <IIM42652_SetAccelScaleFactor+0x18>)
 800adec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf0:	0800ae01 	.word	0x0800ae01
 800adf4:	0800ae11 	.word	0x0800ae11
 800adf8:	0800ae21 	.word	0x0800ae21
 800adfc:	0800ae31 	.word	0x0800ae31
	{
	case IIM42652_Accelerometer_16G:
		imu->AccelScaleFactor = 2048;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae06:	461a      	mov	r2, r3
 800ae08:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 800ae0c:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800ae0e:	e017      	b.n	800ae40 <IIM42652_SetAccelScaleFactor+0x68>
	case IIM42652_Accelerometer_8G:
		imu->AccelScaleFactor = 4096;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae16:	461a      	mov	r2, r3
 800ae18:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800ae1c:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800ae1e:	e00f      	b.n	800ae40 <IIM42652_SetAccelScaleFactor+0x68>
	case IIM42652_Accelerometer_4G:
		imu->AccelScaleFactor = 8192;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae26:	461a      	mov	r2, r3
 800ae28:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 800ae2c:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800ae2e:	e007      	b.n	800ae40 <IIM42652_SetAccelScaleFactor+0x68>
	case IIM42652_Accelerometer_2G:
		imu->AccelScaleFactor = 16384;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae36:	461a      	mov	r2, r3
 800ae38:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 800ae3c:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800ae3e:	bf00      	nop
	}
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <IIM42652_SetGyroScaleFactor>:
void IIM42652_SetGyroScaleFactor(IIM42652_t *imu, IIM42652_GyroFSRValues GyroFSR)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70fb      	strb	r3, [r7, #3]
	switch (GyroFSR)
 800ae58:	78fb      	ldrb	r3, [r7, #3]
 800ae5a:	2b07      	cmp	r3, #7
 800ae5c:	d87a      	bhi.n	800af54 <IIM42652_SetGyroScaleFactor+0x108>
 800ae5e:	a201      	add	r2, pc, #4	; (adr r2, 800ae64 <IIM42652_SetGyroScaleFactor+0x18>)
 800ae60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae64:	0800ae85 	.word	0x0800ae85
 800ae68:	0800ae9f 	.word	0x0800ae9f
 800ae6c:	0800aeb9 	.word	0x0800aeb9
 800ae70:	0800aed3 	.word	0x0800aed3
 800ae74:	0800aeed 	.word	0x0800aeed
 800ae78:	0800af07 	.word	0x0800af07
 800ae7c:	0800af21 	.word	0x0800af21
 800ae80:	0800af3b 	.word	0x0800af3b
	{
	case IIM42652_Gyroscope_2000dps:
		imu->GyroScaleFactorRad = 16.4 / ((2 * M_PI)/360.0);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	4b34      	ldr	r3, [pc, #208]	; (800af60 <IIM42652_SetGyroScaleFactor+0x114>)
 800ae8e:	6453      	str	r3, [r2, #68]	; 0x44
		imu->GyroScaleFactorDegree = 16.4;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae96:	461a      	mov	r2, r3
 800ae98:	4b32      	ldr	r3, [pc, #200]	; (800af64 <IIM42652_SetGyroScaleFactor+0x118>)
 800ae9a:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800ae9c:	e05a      	b.n	800af54 <IIM42652_SetGyroScaleFactor+0x108>
	case IIM42652_Gyroscope_1000dps:
		imu->GyroScaleFactorRad = 32.8 / ((2 * M_PI)/360.0);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aea4:	461a      	mov	r2, r3
 800aea6:	4b30      	ldr	r3, [pc, #192]	; (800af68 <IIM42652_SetGyroScaleFactor+0x11c>)
 800aea8:	6453      	str	r3, [r2, #68]	; 0x44
		imu->GyroScaleFactorDegree = 32.8;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	4b2e      	ldr	r3, [pc, #184]	; (800af6c <IIM42652_SetGyroScaleFactor+0x120>)
 800aeb4:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800aeb6:	e04d      	b.n	800af54 <IIM42652_SetGyroScaleFactor+0x108>
	case IIM42652_Gyroscope_500dps:
		imu->GyroScaleFactorRad = 65.5 / ((2 * M_PI)/360.0);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aebe:	461a      	mov	r2, r3
 800aec0:	4b2b      	ldr	r3, [pc, #172]	; (800af70 <IIM42652_SetGyroScaleFactor+0x124>)
 800aec2:	6453      	str	r3, [r2, #68]	; 0x44
		imu->GyroScaleFactorDegree = 65.5;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeca:	461a      	mov	r2, r3
 800aecc:	4b29      	ldr	r3, [pc, #164]	; (800af74 <IIM42652_SetGyroScaleFactor+0x128>)
 800aece:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800aed0:	e040      	b.n	800af54 <IIM42652_SetGyroScaleFactor+0x108>
	case IIM42652_Gyroscope_250dps:
		imu->GyroScaleFactorRad = 131 / ((2 * M_PI)/360.0);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aed8:	461a      	mov	r2, r3
 800aeda:	4b27      	ldr	r3, [pc, #156]	; (800af78 <IIM42652_SetGyroScaleFactor+0x12c>)
 800aedc:	6453      	str	r3, [r2, #68]	; 0x44
		imu->GyroScaleFactorDegree = 131;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee4:	461a      	mov	r2, r3
 800aee6:	4b25      	ldr	r3, [pc, #148]	; (800af7c <IIM42652_SetGyroScaleFactor+0x130>)
 800aee8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800aeea:	e033      	b.n	800af54 <IIM42652_SetGyroScaleFactor+0x108>
	case IIM42652_Gyroscope_125dps:
		imu->GyroScaleFactorRad = 262 / ((2 * M_PI)/360.0);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aef2:	461a      	mov	r2, r3
 800aef4:	4b22      	ldr	r3, [pc, #136]	; (800af80 <IIM42652_SetGyroScaleFactor+0x134>)
 800aef6:	6453      	str	r3, [r2, #68]	; 0x44
		imu->GyroScaleFactorDegree = 262;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aefe:	461a      	mov	r2, r3
 800af00:	4b20      	ldr	r3, [pc, #128]	; (800af84 <IIM42652_SetGyroScaleFactor+0x138>)
 800af02:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800af04:	e026      	b.n	800af54 <IIM42652_SetGyroScaleFactor+0x108>
	case IIM42652_Gyroscope_62_5dps:
		imu->GyroScaleFactorRad = 524.3 / ((2 * M_PI)/360.0);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af0c:	461a      	mov	r2, r3
 800af0e:	4b1e      	ldr	r3, [pc, #120]	; (800af88 <IIM42652_SetGyroScaleFactor+0x13c>)
 800af10:	6453      	str	r3, [r2, #68]	; 0x44
		imu->GyroScaleFactorDegree = 524.3;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af18:	461a      	mov	r2, r3
 800af1a:	4b1c      	ldr	r3, [pc, #112]	; (800af8c <IIM42652_SetGyroScaleFactor+0x140>)
 800af1c:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800af1e:	e019      	b.n	800af54 <IIM42652_SetGyroScaleFactor+0x108>
	case IIM42652_Gyroscope_31_25dps:
		imu->GyroScaleFactorRad = 1048.6 / ((2 * M_PI)/360.0);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af26:	461a      	mov	r2, r3
 800af28:	4b19      	ldr	r3, [pc, #100]	; (800af90 <IIM42652_SetGyroScaleFactor+0x144>)
 800af2a:	6453      	str	r3, [r2, #68]	; 0x44
		imu->GyroScaleFactorDegree = 1048.6;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af32:	461a      	mov	r2, r3
 800af34:	4b17      	ldr	r3, [pc, #92]	; (800af94 <IIM42652_SetGyroScaleFactor+0x148>)
 800af36:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800af38:	e00c      	b.n	800af54 <IIM42652_SetGyroScaleFactor+0x108>
	case IIM42652_Gyroscope_15_625dps:
		imu->GyroScaleFactorRad = 2097.2 / ((2 * M_PI)/360.0);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af40:	461a      	mov	r2, r3
 800af42:	4b15      	ldr	r3, [pc, #84]	; (800af98 <IIM42652_SetGyroScaleFactor+0x14c>)
 800af44:	6453      	str	r3, [r2, #68]	; 0x44
		imu->GyroScaleFactorDegree = 2097.2;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af4c:	461a      	mov	r2, r3
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <IIM42652_SetGyroScaleFactor+0x150>)
 800af50:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800af52:	bf00      	nop
	}
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr
 800af60:	446ae9a6 	.word	0x446ae9a6
 800af64:	41833333 	.word	0x41833333
 800af68:	44eae9a6 	.word	0x44eae9a6
 800af6c:	42033333 	.word	0x42033333
 800af70:	456a8dfa 	.word	0x456a8dfa
 800af74:	42830000 	.word	0x42830000
 800af78:	45ea8dfa 	.word	0x45ea8dfa
 800af7c:	43030000 	.word	0x43030000
 800af80:	466a8dfa 	.word	0x466a8dfa
 800af84:	43830000 	.word	0x43830000
 800af88:	46eab05b 	.word	0x46eab05b
 800af8c:	44031333 	.word	0x44031333
 800af90:	476ab05b 	.word	0x476ab05b
 800af94:	44831333 	.word	0x44831333
 800af98:	47eab05b 	.word	0x47eab05b
 800af9c:	45031333 	.word	0x45031333

0800afa0 <IIM42652_SetTMSFSyncEnable>:
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_TMST_CONFIG, IMU_RegBank_0, 0, 1, EnableState);
	osDelay(1);
	return status;
}
uint8_t IIM42652_SetTMSFSyncEnable(IIM42652_t *imu, uint8_t EnableState)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af02      	add	r7, sp, #8
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_TMST_CONFIG, IMU_RegBank_0, 1, 1, EnableState);
 800afac:	78fb      	ldrb	r3, [r7, #3]
 800afae:	9301      	str	r3, [sp, #4]
 800afb0:	2301      	movs	r3, #1
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	2301      	movs	r3, #1
 800afb6:	2200      	movs	r2, #0
 800afb8:	2154      	movs	r1, #84	; 0x54
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7fe fd3e 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800afc0:	4603      	mov	r3, r0
 800afc2:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800afc4:	2001      	movs	r0, #1
 800afc6:	f00e fe8c 	bl	8019ce2 <osDelay>
	return status;
 800afca:	7bfb      	ldrb	r3, [r7, #15]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <IIM42652_SetTMSDeltaMode>:
uint8_t IIM42652_SetTMSDeltaMode(IIM42652_t *imu, uint8_t EnableState)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b086      	sub	sp, #24
 800afd8:	af02      	add	r7, sp, #8
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_TMST_CONFIG, IMU_RegBank_0, 2, 1, EnableState);
 800afe0:	78fb      	ldrb	r3, [r7, #3]
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	2301      	movs	r3, #1
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	2302      	movs	r3, #2
 800afea:	2200      	movs	r2, #0
 800afec:	2154      	movs	r1, #84	; 0x54
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7fe fd24 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800aff4:	4603      	mov	r3, r0
 800aff6:	73fb      	strb	r3, [r7, #15]
	osDelay(1);
 800aff8:	2001      	movs	r0, #1
 800affa:	f00e fe72 	bl	8019ce2 <osDelay>
	return status;
 800affe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <IIM42652_SetDMPPowerSaveMode>:
 *	1=Enabled																								1=500Hz
 *																											2=50Hz (Default)
 *																											3=100Hz
 */
uint8_t IIM42652_SetDMPPowerSaveMode(IIM42652_t *imu, uint8_t EnableState)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af02      	add	r7, sp, #8
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_APEX_CONFIG0, IMU_RegBank_0, 7, 1, EnableState);
 800b014:	78fb      	ldrb	r3, [r7, #3]
 800b016:	9301      	str	r3, [sp, #4]
 800b018:	2301      	movs	r3, #1
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	2307      	movs	r3, #7
 800b01e:	2200      	movs	r2, #0
 800b020:	2156      	movs	r1, #86	; 0x56
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7fe fd0a 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800b028:	4603      	mov	r3, r0
 800b02a:	73fb      	strb	r3, [r7, #15]
	return status;
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <IIM42652_SetDMPodr>:
uint8_t IIM42652_SetDMPodr(IIM42652_t *imu, IIM42652_DMPODRValueS DmpODR)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b086      	sub	sp, #24
 800b03a:	af02      	add	r7, sp, #8
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	460b      	mov	r3, r1
 800b040:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_WriteRegisterBits(imu, REG_APEX_CONFIG0, IMU_RegBank_0, 1, 2, DmpODR);
 800b042:	78fb      	ldrb	r3, [r7, #3]
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	2302      	movs	r3, #2
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	2301      	movs	r3, #1
 800b04c:	2200      	movs	r2, #0
 800b04e:	2156      	movs	r1, #86	; 0x56
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7fe fcf3 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800b056:	4603      	mov	r3, r0
 800b058:	73fb      	strb	r3, [r7, #15]
	return status;
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <IIM42652_FIFO_Flush>:
{
	return IIM42652_ReadRegisterBits(imu, REG_APEX_DATA3, IMU_RegBank_0, 2, 1, state);
}

uint8_t IIM42652_FIFO_Flush(IIM42652_t *imu)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af02      	add	r7, sp, #8
 800b06a:	6078      	str	r0, [r7, #4]
	return IIM42652_WriteRegisterBits(imu, REG_SIGNAL_PATH_RESET, IMU_RegBank_0, 1, 1, 1);
 800b06c:	2301      	movs	r3, #1
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	2301      	movs	r3, #1
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	2301      	movs	r3, #1
 800b076:	2200      	movs	r2, #0
 800b078:	214b      	movs	r1, #75	; 0x4b
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7fe fcde 	bl	8009a3c <IIM42652_WriteRegisterBits>
 800b080:	4603      	mov	r3, r0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <IIM42652_GetFIFOCount_ISR>:

	return -1;
}

uint16_t IIM42652_GetFIFOCount_ISR(IIM42652_t *imu)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b086      	sub	sp, #24
 800b08e:	af02      	add	r7, sp, #8
 800b090:	6078      	str	r0, [r7, #4]
	uint8_t txBuf[3];
	uint8_t rxBuf[3];
	uint8_t status = HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	73fb      	strb	r3, [r7, #15]

	txBuf[0] = REG_FIFO_COUNTH | 0x80; //Read operation: set the 8th-bit to 1.
 800b096:	23ae      	movs	r3, #174	; 0xae
 800b098:	733b      	strb	r3, [r7, #12]

	if (osKernelRunning() == 1)
 800b09a:	f00e fdca 	bl	8019c32 <osKernelRunning>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d12a      	bne.n	800b0fa <IIM42652_GetFIFOCount_ISR+0x70>
	{
		osSemaphoreWait(imu->m_spiSemaphoreHandle, osWaitForever);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	f04f 31ff 	mov.w	r1, #4294967295
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f00e ff73 	bl	8019f98 <osSemaphoreWait>
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6858      	ldr	r0, [r3, #4]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	891b      	ldrh	r3, [r3, #8]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	4619      	mov	r1, r3
 800b0be:	f005 f961 	bl	8010384 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2+1, HAL_MAX_DELAY));
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6818      	ldr	r0, [r3, #0]
 800b0c6:	f107 0208 	add.w	r2, r7, #8
 800b0ca:	f107 010c 	add.w	r1, r7, #12
 800b0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	f009 fb58 	bl	801478a <HAL_SPI_TransmitReceive>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6858      	ldr	r0, [r3, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	891b      	ldrh	r3, [r3, #8]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	f005 f94b 	bl	8010384 <HAL_GPIO_WritePin>
		osSemaphoreRelease(imu->m_spiSemaphoreHandle);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f00e ff9e 	bl	801a034 <osSemaphoreRelease>
 800b0f8:	e01d      	b.n	800b136 <IIM42652_GetFIFOCount_ISR+0xac>
	}
	else
	{
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_RESET);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6858      	ldr	r0, [r3, #4]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	891b      	ldrh	r3, [r3, #8]
 800b102:	2200      	movs	r2, #0
 800b104:	4619      	mov	r1, r3
 800b106:	f005 f93d 	bl	8010384 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(imu->m_spiHandle, txBuf, rxBuf, 2+1, HAL_MAX_DELAY));
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6818      	ldr	r0, [r3, #0]
 800b10e:	f107 0208 	add.w	r2, r7, #8
 800b112:	f107 010c 	add.w	r1, r7, #12
 800b116:	f04f 33ff 	mov.w	r3, #4294967295
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	2303      	movs	r3, #3
 800b11e:	f009 fb34 	bl	801478a <HAL_SPI_TransmitReceive>
 800b122:	4603      	mov	r3, r0
 800b124:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6858      	ldr	r0, [r3, #4]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	891b      	ldrh	r3, [r3, #8]
 800b12e:	2201      	movs	r2, #1
 800b130:	4619      	mov	r1, r3
 800b132:	f005 f927 	bl	8010384 <HAL_GPIO_WritePin>
	}

	if (status == HAL_OK)
 800b136:	7bfb      	ldrb	r3, [r7, #15]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d108      	bne.n	800b14e <IIM42652_GetFIFOCount_ISR+0xc4>
	{
		return (int16_t) ((rxBuf[1] << 8) | rxBuf[2]);
 800b13c:	7a7b      	ldrb	r3, [r7, #9]
 800b13e:	021b      	lsls	r3, r3, #8
 800b140:	b21a      	sxth	r2, r3
 800b142:	7abb      	ldrb	r3, [r7, #10]
 800b144:	b21b      	sxth	r3, r3
 800b146:	4313      	orrs	r3, r2
 800b148:	b21b      	sxth	r3, r3
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	e000      	b.n	800b150 <IIM42652_GetFIFOCount_ISR+0xc6>
	}
	else
	{
		return 0;
 800b14e:	2300      	movs	r3, #0
	}
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <IIM42652_GetFIFOData_DMA>:
			}
		}
	}
}
uint8_t IIM42652_GetFIFOData_DMA(IIM42652_t *imu)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af02      	add	r7, sp, #8
 800b15e:	6078      	str	r0, [r7, #4]
	imu->m_FIFO_reading = 1;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
	uint16_t packetCount = IIM42652_GetFIFOCount_ISR(imu);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f7ff ff8e 	bl	800b08a <IIM42652_GetFIFOCount_ISR>
 800b16e:	4603      	mov	r3, r0
 800b170:	81fb      	strh	r3, [r7, #14]
//	uint16_t packetCount = IIM42652_GetFIFOCount(imu);
//	uint16_t packetCount = 128;
	imu->m_FIFO_Count = packetCount;
 800b172:	89fb      	ldrh	r3, [r7, #14]
 800b174:	b2da      	uxtb	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b17c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	RINGBUFFER_PUSH(&FIFOCount_buffer, &packetCount);
 800b180:	4b13      	ldr	r3, [pc, #76]	; (800b1d0 <IIM42652_GetFIFOData_DMA+0x78>)
 800b182:	885b      	ldrh	r3, [r3, #2]
 800b184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b188:	89f9      	ldrh	r1, [r7, #14]
 800b18a:	4a11      	ldr	r2, [pc, #68]	; (800b1d0 <IIM42652_GetFIFOData_DMA+0x78>)
 800b18c:	005b      	lsls	r3, r3, #1
 800b18e:	4413      	add	r3, r2
 800b190:	460a      	mov	r2, r1
 800b192:	809a      	strh	r2, [r3, #4]
 800b194:	4b0e      	ldr	r3, [pc, #56]	; (800b1d0 <IIM42652_GetFIFOData_DMA+0x78>)
 800b196:	885b      	ldrh	r3, [r3, #2]
 800b198:	3301      	adds	r3, #1
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	4b0c      	ldr	r3, [pc, #48]	; (800b1d0 <IIM42652_GetFIFOData_DMA+0x78>)
 800b19e:	805a      	strh	r2, [r3, #2]

	return (IIM42652_ReadMultiRegisters_DMA(imu, REG_FIFO_DATA, IMU_RegBank_0, imu->m_FIFOData, FIFO_16BYTES_PACKET_SIZE * packetCount) == HAL_OK);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f603 0225 	addw	r2, r3, #2085	; 0x825
 800b1a6:	89fb      	ldrh	r3, [r7, #14]
 800b1a8:	011b      	lsls	r3, r3, #4
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	2130      	movs	r1, #48	; 0x30
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7fe fe66 	bl	8009e86 <IIM42652_ReadMultiRegisters_DMA>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	bf0c      	ite	eq
 800b1c0:	2301      	moveq	r3, #1
 800b1c2:	2300      	movne	r3, #0
 800b1c4:	b2db      	uxtb	r3, r3
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20002b94 	.word	0x20002b94

0800b1d4 <IIM42652_GetFIFOData_DMA_Complete>:
void IIM42652_GetFIFOData_DMA_Complete(IIM42652_t *imu)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b096      	sub	sp, #88	; 0x58
 800b1d8:	af02      	add	r7, sp, #8
 800b1da:	6078      	str	r0, [r7, #4]
	fifo_header_t * header;
	uint16_t packet_count_i = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	volatile static uint16_t decimatorCounter = 0;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	647b      	str	r3, [r7, #68]	; 0x44

	HAL_GPIO_WritePin(imu->m_csImuPinBank, imu->m_csImuPin, GPIO_PIN_SET);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6858      	ldr	r0, [r3, #4]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	891b      	ldrh	r3, [r3, #8]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	f005 f8c7 	bl	8010384 <HAL_GPIO_WritePin>
//	imu->m_FIFOData[imu->m_FIFO_Count] = 0;

	/*
	 * Decrypt FIFO data and push them into ring buffer
	 */
	if (imu->m_FIFO_Count > 0)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b00      	cmp	r3, #0
 800b204:	f000 8215 	beq.w	800b632 <IIM42652_GetFIFOData_DMA_Complete+0x45e>
	{
		/* First byte is a dummy byte relative to the transmitted byte response: trash it */
		uint16_t fifo_idx = 1;
 800b208:	2301      	movs	r3, #1
 800b20a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

		for(packet_count_i = 0; packet_count_i < imu->m_FIFO_Count; packet_count_i++)
 800b20e:	2300      	movs	r3, #0
 800b210:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b214:	e201      	b.n	800b61a <IIM42652_GetFIFOData_DMA_Complete+0x446>
		{
			IIM42652_FIFO_Packet16_t event;

			header = (fifo_header_t *) &imu->m_FIFOData[fifo_idx];
 800b216:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b21a:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	4413      	add	r3, r2
 800b222:	3305      	adds	r3, #5
 800b224:	64bb      	str	r3, [r7, #72]	; 0x48
			event.m_FIFO_Header = imu->m_FIFOData[fifo_idx];
 800b226:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	4413      	add	r3, r2
 800b22e:	f893 3825 	ldrb.w	r3, [r3, #2085]	; 0x825
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			fifo_idx += FIFO_HEADER_SIZE;
 800b238:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b23c:	3301      	adds	r3, #1
 800b23e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			if (header->bits.msg_bit)
 800b242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d01f      	beq.n	800b290 <IIM42652_GetFIFOData_DMA_Complete+0xbc>
			{
				/* MSG BIT set in FIFO header, Resetting FIFO */
				IIM42652_FIFO_Flush(imu);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7ff ff07 	bl	800b064 <IIM42652_FIFO_Flush>

				imu->m_FIFO_reading = 0;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
				if (osKernelRunning() == 1)
 800b25e:	f00e fce8 	bl	8019c32 <osKernelRunning>
 800b262:	4603      	mov	r3, r0
 800b264:	2b01      	cmp	r3, #1
 800b266:	d104      	bne.n	800b272 <IIM42652_GetFIFOData_DMA_Complete+0x9e>
				{
					osSemaphoreRelease(imu->m_spiSemaphoreHandle);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f00e fee1 	bl	801a034 <osSemaphoreRelease>
				}

				portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800b272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 81ea 	beq.w	800b64e <IIM42652_GetFIFOData_DMA_Complete+0x47a>
 800b27a:	4b04      	ldr	r3, [pc, #16]	; (800b28c <IIM42652_GetFIFOData_DMA_Complete+0xb8>)
 800b27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b280:	601a      	str	r2, [r3, #0]
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	e1e0      	b.n	800b64e <IIM42652_GetFIFOData_DMA_Complete+0x47a>
 800b28c:	e000ed04 	.word	0xe000ed04
				return;
			}

			if(header->bits.accel_bit)
 800b290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d030      	beq.n	800b300 <IIM42652_GetFIFOData_DMA_Complete+0x12c>
			{
				IIM42652_Format_Data(BIG_ENDIAN_DATA, (uint8_t *)&imu->m_FIFOData[0+fifo_idx], (uint16_t *)&event.m_FIFO_Accel_X);
 800b29e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b2a2:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	1d59      	adds	r1, r3, #5
 800b2ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b2b0:	3302      	adds	r3, #2
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	2001      	movs	r0, #1
 800b2b6:	f000 fa17 	bl	800b6e8 <IIM42652_Format_Data>
				IIM42652_Format_Data(BIG_ENDIAN_DATA, (uint8_t *)&imu->m_FIFOData[2+fifo_idx], (uint16_t *)&event.m_FIFO_Accel_Y);
 800b2ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b2be:	3302      	adds	r3, #2
 800b2c0:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	1d59      	adds	r1, r3, #5
 800b2ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	2001      	movs	r0, #1
 800b2d4:	f000 fa08 	bl	800b6e8 <IIM42652_Format_Data>
				IIM42652_Format_Data(BIG_ENDIAN_DATA, (uint8_t *)&imu->m_FIFOData[4+fifo_idx], (uint16_t *)&event.m_FIFO_Accel_Z);
 800b2d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b2dc:	3304      	adds	r3, #4
 800b2de:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	1d59      	adds	r1, r3, #5
 800b2e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b2ec:	3306      	adds	r3, #6
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	2001      	movs	r0, #1
 800b2f2:	f000 f9f9 	bl	800b6e8 <IIM42652_Format_Data>

				fifo_idx += FIFO_ACCEL_DATA_SIZE;
 800b2f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b2fa:	3306      	adds	r3, #6
 800b2fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

			if (header->bits.gyro_bit)
 800b300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	f003 0320 	and.w	r3, r3, #32
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d030      	beq.n	800b370 <IIM42652_GetFIFOData_DMA_Complete+0x19c>
			{
				IIM42652_Format_Data(BIG_ENDIAN_DATA, (uint8_t *)&imu->m_FIFOData[0+fifo_idx], (uint16_t *)&event.m_FIFO_Gyro_X);
 800b30e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b312:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	4413      	add	r3, r2
 800b31a:	1d59      	adds	r1, r3, #5
 800b31c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b320:	3308      	adds	r3, #8
 800b322:	461a      	mov	r2, r3
 800b324:	2001      	movs	r0, #1
 800b326:	f000 f9df 	bl	800b6e8 <IIM42652_Format_Data>
				IIM42652_Format_Data(BIG_ENDIAN_DATA, (uint8_t *)&imu->m_FIFOData[2+fifo_idx], (uint16_t *)&event.m_FIFO_Gyro_Y);
 800b32a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b32e:	3302      	adds	r3, #2
 800b330:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	4413      	add	r3, r2
 800b338:	1d59      	adds	r1, r3, #5
 800b33a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b33e:	330a      	adds	r3, #10
 800b340:	461a      	mov	r2, r3
 800b342:	2001      	movs	r0, #1
 800b344:	f000 f9d0 	bl	800b6e8 <IIM42652_Format_Data>
				IIM42652_Format_Data(BIG_ENDIAN_DATA, (uint8_t *)&imu->m_FIFOData[4+fifo_idx], (uint16_t *)&event.m_FIFO_Gyro_Z);
 800b348:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b34c:	3304      	adds	r3, #4
 800b34e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	4413      	add	r3, r2
 800b356:	1d59      	adds	r1, r3, #5
 800b358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b35c:	330c      	adds	r3, #12
 800b35e:	461a      	mov	r2, r3
 800b360:	2001      	movs	r0, #1
 800b362:	f000 f9c1 	bl	800b6e8 <IIM42652_Format_Data>

				fifo_idx += FIFO_GYRO_DATA_SIZE;
 800b366:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b36a:	3306      	adds	r3, #6
 800b36c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

			if ((header->bits.accel_bit) || (header->bits.gyro_bit))
 800b370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d106      	bne.n	800b38c <IIM42652_GetFIFOData_DMA_Complete+0x1b8>
 800b37e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	f003 0320 	and.w	r3, r3, #32
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00e      	beq.n	800b3aa <IIM42652_GetFIFOData_DMA_Complete+0x1d6>
			{
				event.m_FIFO_Temp = (int8_t)imu->m_FIFOData[0+fifo_idx];
 800b38c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	4413      	add	r3, r2
 800b394:	f893 3825 	ldrb.w	r3, [r3, #2085]	; 0x825
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	b25b      	sxtb	r3, r3
 800b39c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

				fifo_idx += FIFO_TEMP_DATA_SIZE;
 800b3a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

			if ((header->bits.timestamp_bit) || (header->bits.fsync_bit))
 800b3aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	f003 0308 	and.w	r3, r3, #8
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d106      	bne.n	800b3c6 <IIM42652_GetFIFOData_DMA_Complete+0x1f2>
 800b3b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	f003 0304 	and.w	r3, r3, #4
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d012      	beq.n	800b3ec <IIM42652_GetFIFOData_DMA_Complete+0x218>
			{
				IIM42652_Format_Data(BIG_ENDIAN_DATA, (uint8_t *)&imu->m_FIFOData[0+fifo_idx], &event.m_FIFO_TimeStamp);
 800b3c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b3ca:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	1d59      	adds	r1, r3, #5
 800b3d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b3d8:	3310      	adds	r3, #16
 800b3da:	461a      	mov	r2, r3
 800b3dc:	2001      	movs	r0, #1
 800b3de:	f000 f983 	bl	800b6e8 <IIM42652_Format_Data>

				fifo_idx += FIFO_TS_FSYNC_SIZE;
 800b3e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b3e6:	3302      	adds	r3, #2
 800b3e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

			//Check valid value and add to fft buffer
			float32_t tempValue;
			if(event.m_FIFO_Accel_X != FIFO_INVALID_SAMPLE)
 800b3ec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800b3f0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b3f4:	d018      	beq.n	800b428 <IIM42652_GetFIFOData_DMA_Complete+0x254>
			{
				tempValue = IIM42652_GetAccelGravity(imu, event.m_FIFO_Accel_X);
 800b3f6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f93b 	bl	800b678 <IIM42652_GetAccelGravity>
 800b402:	eef0 7a40 	vmov.f32	s15, s0
 800b406:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				RINGBUFFER_PUSH(&AccXBuffer, (float32_t *)&tempValue);
 800b40a:	4b92      	ldr	r3, [pc, #584]	; (800b654 <IIM42652_GetFIFOData_DMA_Complete+0x480>)
 800b40c:	885b      	ldrh	r3, [r3, #2]
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b412:	4990      	ldr	r1, [pc, #576]	; (800b654 <IIM42652_GetFIFOData_DMA_Complete+0x480>)
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	440b      	add	r3, r1
 800b418:	3304      	adds	r3, #4
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	4b8d      	ldr	r3, [pc, #564]	; (800b654 <IIM42652_GetFIFOData_DMA_Complete+0x480>)
 800b41e:	885b      	ldrh	r3, [r3, #2]
 800b420:	3301      	adds	r3, #1
 800b422:	b29a      	uxth	r2, r3
 800b424:	4b8b      	ldr	r3, [pc, #556]	; (800b654 <IIM42652_GetFIFOData_DMA_Complete+0x480>)
 800b426:	805a      	strh	r2, [r3, #2]
			}
			if(event.m_FIFO_Accel_Y != FIFO_INVALID_SAMPLE)
 800b428:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b42c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b430:	d018      	beq.n	800b464 <IIM42652_GetFIFOData_DMA_Complete+0x290>
			{
				tempValue = IIM42652_GetAccelGravity(imu, event.m_FIFO_Accel_Y);
 800b432:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b436:	4619      	mov	r1, r3
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f91d 	bl	800b678 <IIM42652_GetAccelGravity>
 800b43e:	eef0 7a40 	vmov.f32	s15, s0
 800b442:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				RINGBUFFER_PUSH(&AccYBuffer, (float32_t *)&tempValue);
 800b446:	4b84      	ldr	r3, [pc, #528]	; (800b658 <IIM42652_GetFIFOData_DMA_Complete+0x484>)
 800b448:	885b      	ldrh	r3, [r3, #2]
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b44e:	4982      	ldr	r1, [pc, #520]	; (800b658 <IIM42652_GetFIFOData_DMA_Complete+0x484>)
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	440b      	add	r3, r1
 800b454:	3304      	adds	r3, #4
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	4b7f      	ldr	r3, [pc, #508]	; (800b658 <IIM42652_GetFIFOData_DMA_Complete+0x484>)
 800b45a:	885b      	ldrh	r3, [r3, #2]
 800b45c:	3301      	adds	r3, #1
 800b45e:	b29a      	uxth	r2, r3
 800b460:	4b7d      	ldr	r3, [pc, #500]	; (800b658 <IIM42652_GetFIFOData_DMA_Complete+0x484>)
 800b462:	805a      	strh	r2, [r3, #2]
			}
			if(event.m_FIFO_Accel_Z != FIFO_INVALID_SAMPLE)
 800b464:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800b468:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b46c:	d018      	beq.n	800b4a0 <IIM42652_GetFIFOData_DMA_Complete+0x2cc>
			{
				tempValue = IIM42652_GetAccelGravity(imu, event.m_FIFO_Accel_Z);
 800b46e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f8ff 	bl	800b678 <IIM42652_GetAccelGravity>
 800b47a:	eef0 7a40 	vmov.f32	s15, s0
 800b47e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				RINGBUFFER_PUSH(&AccZBuffer, (float32_t *)&tempValue);
 800b482:	4b76      	ldr	r3, [pc, #472]	; (800b65c <IIM42652_GetFIFOData_DMA_Complete+0x488>)
 800b484:	885b      	ldrh	r3, [r3, #2]
 800b486:	b2db      	uxtb	r3, r3
 800b488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b48a:	4974      	ldr	r1, [pc, #464]	; (800b65c <IIM42652_GetFIFOData_DMA_Complete+0x488>)
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	440b      	add	r3, r1
 800b490:	3304      	adds	r3, #4
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	4b71      	ldr	r3, [pc, #452]	; (800b65c <IIM42652_GetFIFOData_DMA_Complete+0x488>)
 800b496:	885b      	ldrh	r3, [r3, #2]
 800b498:	3301      	adds	r3, #1
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	4b6f      	ldr	r3, [pc, #444]	; (800b65c <IIM42652_GetFIFOData_DMA_Complete+0x488>)
 800b49e:	805a      	strh	r2, [r3, #2]
			}
			if(event.m_FIFO_Gyro_X != FIFO_INVALID_SAMPLE)
 800b4a0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800b4a4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b4a8:	d018      	beq.n	800b4dc <IIM42652_GetFIFOData_DMA_Complete+0x308>
			{
				tempValue = IIM42652_GetGyroRps(imu, event.m_FIFO_Gyro_X);
 800b4aa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f8fd 	bl	800b6b0 <IIM42652_GetGyroRps>
 800b4b6:	eef0 7a40 	vmov.f32	s15, s0
 800b4ba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				RINGBUFFER_PUSH(&GyroXBuffer, (float32_t *)&tempValue);
 800b4be:	4b68      	ldr	r3, [pc, #416]	; (800b660 <IIM42652_GetFIFOData_DMA_Complete+0x48c>)
 800b4c0:	885b      	ldrh	r3, [r3, #2]
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4c6:	4966      	ldr	r1, [pc, #408]	; (800b660 <IIM42652_GetFIFOData_DMA_Complete+0x48c>)
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	440b      	add	r3, r1
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	4b63      	ldr	r3, [pc, #396]	; (800b660 <IIM42652_GetFIFOData_DMA_Complete+0x48c>)
 800b4d2:	885b      	ldrh	r3, [r3, #2]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	4b61      	ldr	r3, [pc, #388]	; (800b660 <IIM42652_GetFIFOData_DMA_Complete+0x48c>)
 800b4da:	805a      	strh	r2, [r3, #2]
			}
			if(event.m_FIFO_Gyro_Y != FIFO_INVALID_SAMPLE)
 800b4dc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800b4e0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b4e4:	d018      	beq.n	800b518 <IIM42652_GetFIFOData_DMA_Complete+0x344>
			{
				tempValue = IIM42652_GetGyroRps(imu, event.m_FIFO_Gyro_Y);
 800b4e6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f8df 	bl	800b6b0 <IIM42652_GetGyroRps>
 800b4f2:	eef0 7a40 	vmov.f32	s15, s0
 800b4f6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				RINGBUFFER_PUSH(&GyroYBuffer, (float32_t *)&tempValue);
 800b4fa:	4b5a      	ldr	r3, [pc, #360]	; (800b664 <IIM42652_GetFIFOData_DMA_Complete+0x490>)
 800b4fc:	885b      	ldrh	r3, [r3, #2]
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b502:	4958      	ldr	r1, [pc, #352]	; (800b664 <IIM42652_GetFIFOData_DMA_Complete+0x490>)
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	440b      	add	r3, r1
 800b508:	3304      	adds	r3, #4
 800b50a:	601a      	str	r2, [r3, #0]
 800b50c:	4b55      	ldr	r3, [pc, #340]	; (800b664 <IIM42652_GetFIFOData_DMA_Complete+0x490>)
 800b50e:	885b      	ldrh	r3, [r3, #2]
 800b510:	3301      	adds	r3, #1
 800b512:	b29a      	uxth	r2, r3
 800b514:	4b53      	ldr	r3, [pc, #332]	; (800b664 <IIM42652_GetFIFOData_DMA_Complete+0x490>)
 800b516:	805a      	strh	r2, [r3, #2]
			}
			if(event.m_FIFO_Gyro_Z != FIFO_INVALID_SAMPLE)
 800b518:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800b51c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800b520:	d018      	beq.n	800b554 <IIM42652_GetFIFOData_DMA_Complete+0x380>
			{
				tempValue = IIM42652_GetGyroRps(imu, event.m_FIFO_Gyro_Z);
 800b522:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800b526:	4619      	mov	r1, r3
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f8c1 	bl	800b6b0 <IIM42652_GetGyroRps>
 800b52e:	eef0 7a40 	vmov.f32	s15, s0
 800b532:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				RINGBUFFER_PUSH(&GyroZBuffer, (float32_t *)&tempValue);
 800b536:	4b4c      	ldr	r3, [pc, #304]	; (800b668 <IIM42652_GetFIFOData_DMA_Complete+0x494>)
 800b538:	885b      	ldrh	r3, [r3, #2]
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b53e:	494a      	ldr	r1, [pc, #296]	; (800b668 <IIM42652_GetFIFOData_DMA_Complete+0x494>)
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	440b      	add	r3, r1
 800b544:	3304      	adds	r3, #4
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	4b47      	ldr	r3, [pc, #284]	; (800b668 <IIM42652_GetFIFOData_DMA_Complete+0x494>)
 800b54a:	885b      	ldrh	r3, [r3, #2]
 800b54c:	3301      	adds	r3, #1
 800b54e:	b29a      	uxth	r2, r3
 800b550:	4b45      	ldr	r3, [pc, #276]	; (800b668 <IIM42652_GetFIFOData_DMA_Complete+0x494>)
 800b552:	805a      	strh	r2, [r3, #2]
			}

			if (imu->TelemetryON == 1)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f893 3823 	ldrb.w	r3, [r3, #2083]	; 0x823
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d158      	bne.n	800b610 <IIM42652_GetFIFOData_DMA_Complete+0x43c>
			{

				if (decimatorCounter >= imu->decimationFactor)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b564:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b568:	b29a      	uxth	r2, r3
 800b56a:	4b40      	ldr	r3, [pc, #256]	; (800b66c <IIM42652_GetFIFOData_DMA_Complete+0x498>)
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	b29b      	uxth	r3, r3
 800b570:	429a      	cmp	r2, r3
 800b572:	d846      	bhi.n	800b602 <IIM42652_GetFIFOData_DMA_Complete+0x42e>
				{
					IMU_Data_Buf_t imuPacketBuf, dummyPacket;
					imu_TO_buffer(imu, 1, &event, imuPacketBuf.buffer);
 800b574:	f107 031c 	add.w	r3, r7, #28
 800b578:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b57c:	2101      	movs	r1, #1
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f8dd 	bl	800b73e <imu_TO_buffer>
					if (!xQueueIsQueueFullFromISR(IMUDataOutputQueue))
 800b584:	4b3a      	ldr	r3, [pc, #232]	; (800b670 <IIM42652_GetFIFOData_DMA_Complete+0x49c>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4618      	mov	r0, r3
 800b58a:	f00f fd7d 	bl	801b088 <xQueueIsQueueFullFromISR>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d116      	bne.n	800b5c2 <IIM42652_GetFIFOData_DMA_Complete+0x3ee>
//						{
//							xQueueSendFromISR(IMUDataOutputQueue, &imuPacketBuf.buffer, &xHigherPriorityTaskWoken);
//							xTaskNotifyFromISR(UsbTxTaskHandle, AC1_Notify_NewDataAvaiable, eSetBits, &xHigherPriorityTaskWoken);
//							decimatorCounter = 0;
//						}
						xQueueSendFromISR(IMUDataOutputQueue, &imuPacketBuf.buffer, &xHigherPriorityTaskWoken);
 800b594:	4b36      	ldr	r3, [pc, #216]	; (800b670 <IIM42652_GetFIFOData_DMA_Complete+0x49c>)
 800b596:	6818      	ldr	r0, [r3, #0]
 800b598:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b59c:	f107 011c 	add.w	r1, r7, #28
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f00f f8b5 	bl	801a710 <xQueueGenericSendFromISR>
						xTaskNotifyFromISR(UsbTxTaskHandle, AC1_Notify_NewDataAvaiable, eSetBits, &xHigherPriorityTaskWoken);
 800b5a6:	4b33      	ldr	r3, [pc, #204]	; (800b674 <IIM42652_GetFIFOData_DMA_Complete+0x4a0>)
 800b5a8:	6818      	ldr	r0, [r3, #0]
 800b5aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	2104      	movs	r1, #4
 800b5b6:	f010 ff19 	bl	801c3ec <xTaskGenericNotifyFromISR>
						decimatorCounter = 0;
 800b5ba:	4b2c      	ldr	r3, [pc, #176]	; (800b66c <IIM42652_GetFIFOData_DMA_Complete+0x498>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	801a      	strh	r2, [r3, #0]
 800b5c0:	e026      	b.n	800b610 <IIM42652_GetFIFOData_DMA_Complete+0x43c>
					}
					else
					{
						xQueueReceiveFromISR(IMUDataOutputQueue, &dummyPacket.buffer, &xHigherPriorityTaskWoken);
 800b5c2:	4b2b      	ldr	r3, [pc, #172]	; (800b670 <IIM42652_GetFIFOData_DMA_Complete+0x49c>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b5ca:	f107 010c 	add.w	r1, r7, #12
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f00f fbb2 	bl	801ad38 <xQueueReceiveFromISR>
						xQueueSendFromISR(IMUDataOutputQueue, &imuPacketBuf.buffer, &xHigherPriorityTaskWoken);
 800b5d4:	4b26      	ldr	r3, [pc, #152]	; (800b670 <IIM42652_GetFIFOData_DMA_Complete+0x49c>)
 800b5d6:	6818      	ldr	r0, [r3, #0]
 800b5d8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b5dc:	f107 011c 	add.w	r1, r7, #28
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f00f f895 	bl	801a710 <xQueueGenericSendFromISR>
						xTaskNotifyFromISR(UsbTxTaskHandle, AC1_Notify_NewDataAvaiable, eSetBits, &xHigherPriorityTaskWoken);
 800b5e6:	4b23      	ldr	r3, [pc, #140]	; (800b674 <IIM42652_GetFIFOData_DMA_Complete+0x4a0>)
 800b5e8:	6818      	ldr	r0, [r3, #0]
 800b5ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	2104      	movs	r1, #4
 800b5f6:	f010 fef9 	bl	801c3ec <xTaskGenericNotifyFromISR>
						decimatorCounter = 0;
 800b5fa:	4b1c      	ldr	r3, [pc, #112]	; (800b66c <IIM42652_GetFIFOData_DMA_Complete+0x498>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	801a      	strh	r2, [r3, #0]
 800b600:	e006      	b.n	800b610 <IIM42652_GetFIFOData_DMA_Complete+0x43c>
					}
				}
				else
				{
					decimatorCounter++;
 800b602:	4b1a      	ldr	r3, [pc, #104]	; (800b66c <IIM42652_GetFIFOData_DMA_Complete+0x498>)
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	b29b      	uxth	r3, r3
 800b608:	3301      	adds	r3, #1
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	4b17      	ldr	r3, [pc, #92]	; (800b66c <IIM42652_GetFIFOData_DMA_Complete+0x498>)
 800b60e:	801a      	strh	r2, [r3, #0]
		for(packet_count_i = 0; packet_count_i < imu->m_FIFO_Count; packet_count_i++)
 800b610:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b614:	3301      	adds	r3, #1
 800b616:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b624:	b2db      	uxtb	r3, r3
 800b626:	b29b      	uxth	r3, r3
 800b628:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b62c:	429a      	cmp	r2, r3
 800b62e:	f4ff adf2 	bcc.w	800b216 <IIM42652_GetFIFOData_DMA_Complete+0x42>
				}
			}
		}
	}
	imu->m_FIFO_reading = 0;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
	if (osKernelRunning() == 1)
 800b63a:	f00e fafa 	bl	8019c32 <osKernelRunning>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b01      	cmp	r3, #1
 800b642:	d104      	bne.n	800b64e <IIM42652_GetFIFOData_DMA_Complete+0x47a>
	{
		osSemaphoreRelease(imu->m_spiSemaphoreHandle);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	4618      	mov	r0, r3
 800b64a:	f00e fcf3 	bl	801a034 <osSemaphoreRelease>
	}
}
 800b64e:	3750      	adds	r7, #80	; 0x50
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	2000137c 	.word	0x2000137c
 800b658:	20001780 	.word	0x20001780
 800b65c:	20001b84 	.word	0x20001b84
 800b660:	20001f88 	.word	0x20001f88
 800b664:	2000238c 	.word	0x2000238c
 800b668:	20002790 	.word	0x20002790
 800b66c:	20002f98 	.word	0x20002f98
 800b670:	20009428 	.word	0x20009428
 800b674:	20005a80 	.word	0x20005a80

0800b678 <IIM42652_GetAccelGravity>:
float IIM42652_GetTempCelsius8(int8_t TemperatureByte)
{
	return (float)(TemperatureByte / 2.07) + 25;
}
float IIM42652_GetAccelGravity(IIM42652_t *imu, int16_t AccelerationByte)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	460b      	mov	r3, r1
 800b682:	807b      	strh	r3, [r7, #2]
	return (float) AccelerationByte / imu->AccelScaleFactor;
 800b684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b688:	ee07 3a90 	vmov	s15, r3
 800b68c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b696:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800b69a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b69e:	eef0 7a66 	vmov.f32	s15, s13
}
 800b6a2:	eeb0 0a67 	vmov.f32	s0, s15
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <IIM42652_GetGyroRps>:
float IIM42652_GetGyroRps(IIM42652_t *imu, int16_t RotationByte)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	807b      	strh	r3, [r7, #2]
	return (float) RotationByte / imu->GyroScaleFactorDegree;
 800b6bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6c0:	ee07 3a90 	vmov	s15, r3
 800b6c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6ce:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b6d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b6d6:	eef0 7a66 	vmov.f32	s15, s13
}
 800b6da:	eeb0 0a67 	vmov.f32	s0, s15
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <IIM42652_Format_Data>:
uint16_t IIM42652_GetTimestampUS(uint16_t FIFOTimestampHalfWord)
{
	return (uint16_t) FIFOTimestampHalfWord * 32/30;
}
void IIM42652_Format_Data(const uint8_t endian, const uint8_t *in, uint16_t *out)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
 800b6f4:	73fb      	strb	r3, [r7, #15]
	if(endian == BIG_ENDIAN_DATA)
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d10d      	bne.n	800b718 <IIM42652_Format_Data+0x30>
		*out = (in[0] << 8) | in[1];
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	021b      	lsls	r3, r3, #8
 800b702:	b21a      	sxth	r2, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	3301      	adds	r3, #1
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	b21b      	sxth	r3, r3
 800b70c:	4313      	orrs	r3, r2
 800b70e:	b21b      	sxth	r3, r3
 800b710:	b29a      	uxth	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	801a      	strh	r2, [r3, #0]
	else
		*out = (in[1] << 8) | in[0];
}
 800b716:	e00c      	b.n	800b732 <IIM42652_Format_Data+0x4a>
		*out = (in[1] << 8) | in[0];
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	3301      	adds	r3, #1
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	021b      	lsls	r3, r3, #8
 800b720:	b21a      	sxth	r2, r3
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	b21b      	sxth	r3, r3
 800b728:	4313      	orrs	r3, r2
 800b72a:	b21b      	sxth	r3, r3
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	801a      	strh	r2, [r3, #0]
}
 800b732:	bf00      	nop
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <imu_TO_buffer>:
uint16_t IIM42652_RegToAAFBW(uint8_t AAF_BS, uint8_t AAF_DELT, uint8_t AAF_DELTSQR)
{
	;
}
void imu_TO_buffer(IIM42652_t *imu, uint8_t decimationFactor, IIM42652_FIFO_Packet16_t* imuData, uint8_t* buffer)
{
 800b73e:	b4b0      	push	{r4, r5, r7}
 800b740:	b08b      	sub	sp, #44	; 0x2c
 800b742:	af00      	add	r7, sp, #0
 800b744:	60f8      	str	r0, [r7, #12]
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	603b      	str	r3, [r7, #0]
 800b74a:	460b      	mov	r3, r1
 800b74c:	72fb      	strb	r3, [r7, #11]
	uint16_t tempVal;
	uint8_t dataBuff[16];

	/* Accel X */
	dataBuff[0] = (imuData->m_FIFO_Accel_X >> 8) & 0x00ff;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b754:	121b      	asrs	r3, r3, #8
 800b756:	b21b      	sxth	r3, r3
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	753b      	strb	r3, [r7, #20]
	dataBuff[1] = imuData->m_FIFO_Accel_X & 0x00ff;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b762:	b2db      	uxtb	r3, r3
 800b764:	757b      	strb	r3, [r7, #21]
	/* Accel Y */
	dataBuff[2] = (imuData->m_FIFO_Accel_Y >> 8) & 0x00ff;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b76c:	121b      	asrs	r3, r3, #8
 800b76e:	b21b      	sxth	r3, r3
 800b770:	b2db      	uxtb	r3, r3
 800b772:	75bb      	strb	r3, [r7, #22]
	dataBuff[3] = imuData->m_FIFO_Accel_Y & 0x00ff;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	75fb      	strb	r3, [r7, #23]
	/* Accel Z */
	dataBuff[4] = (imuData->m_FIFO_Accel_Z >> 8) & 0x00ff;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b784:	121b      	asrs	r3, r3, #8
 800b786:	b21b      	sxth	r3, r3
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	763b      	strb	r3, [r7, #24]
	dataBuff[5] = imuData->m_FIFO_Accel_Z & 0x00ff;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b792:	b2db      	uxtb	r3, r3
 800b794:	767b      	strb	r3, [r7, #25]
	/* Gyro X */
	dataBuff[6] = (imuData->m_FIFO_Gyro_X >> 8) & 0x00ff;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b79c:	121b      	asrs	r3, r3, #8
 800b79e:	b21b      	sxth	r3, r3
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	76bb      	strb	r3, [r7, #26]
	dataBuff[7] = imuData->m_FIFO_Gyro_X & 0x00ff;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	76fb      	strb	r3, [r7, #27]
	/* Gyro Y */
	dataBuff[8] = (imuData->m_FIFO_Gyro_Y >> 8) & 0x00ff;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b7b4:	121b      	asrs	r3, r3, #8
 800b7b6:	b21b      	sxth	r3, r3
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	773b      	strb	r3, [r7, #28]
	dataBuff[9] = imuData->m_FIFO_Gyro_Y & 0x00ff;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	777b      	strb	r3, [r7, #29]
	/* Gyro Z */
	dataBuff[10] = (imuData->m_FIFO_Gyro_Z >> 8) & 0x00ff;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b7cc:	121b      	asrs	r3, r3, #8
 800b7ce:	b21b      	sxth	r3, r3
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	77bb      	strb	r3, [r7, #30]
	dataBuff[11] = imuData->m_FIFO_Gyro_Z & 0x00ff;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	77fb      	strb	r3, [r7, #31]
	/* Temperature */
	dataBuff[12] = imuData->m_FIFO_Temp;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	f887 3020 	strb.w	r3, [r7, #32]
	/* Timestamp */
	tempVal = imuData->m_FIFO_TimeStamp * decimationFactor;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	8a1a      	ldrh	r2, [r3, #16]
 800b7ee:	7afb      	ldrb	r3, [r7, #11]
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	fb12 f303 	smulbb	r3, r2, r3
 800b7f6:	84fb      	strh	r3, [r7, #38]	; 0x26
	dataBuff[13] = (tempVal >> 8) & 0x00ff;
 800b7f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7fa:	0a1b      	lsrs	r3, r3, #8
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	dataBuff[14] = tempVal & 0x00ff;
 800b804:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b806:	b2db      	uxtb	r3, r3
 800b808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	/* APEX Interrupt state */
	dataBuff[15] = imu->m_INT2State;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b812:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b816:	b2db      	uxtb	r3, r3
 800b818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	memcpy(buffer, dataBuff, sizeof(dataBuff));
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	461d      	mov	r5, r3
 800b820:	f107 0414 	add.w	r4, r7, #20
 800b824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b826:	6028      	str	r0, [r5, #0]
 800b828:	6069      	str	r1, [r5, #4]
 800b82a:	60aa      	str	r2, [r5, #8]
 800b82c:	60eb      	str	r3, [r5, #12]
}
 800b82e:	bf00      	nop
 800b830:	372c      	adds	r7, #44	; 0x2c
 800b832:	46bd      	mov	sp, r7
 800b834:	bcb0      	pop	{r4, r5, r7}
 800b836:	4770      	bx	lr

0800b838 <imuUsbPacketsCreator>:
	tempByte = imuData->m_FIFO_TimeStamp & 0x00ff;
	vc_vector_push_back(vector, &tempByte);
}

size_t imuUsbPacketsCreator(IIM42652_t *imu, IMU_Data_Buf_t* bufferIn, size_t bufferInLen, uint8_t* encBufferOut, size_t bufferOutLen)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b08e      	sub	sp, #56	; 0x38
 800b83c:	af02      	add	r7, sp, #8
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	603b      	str	r3, [r7, #0]
//	uint8_t imuBuffer[sizeof(IMU_Data_Buf_t) + COMMAND_DATA_SIZE + 2*sizeof(float)];
	uint8_t imuBuffer[sizeof(IMU_Data_Buf_t) + COMMAND_DATA_SIZE];
	cobs_encode_result res;

	if (bufferOutLen < (sizeof(imuBuffer) + ENCODEING_EXTRA_SIZE))
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	2b12      	cmp	r3, #18
 800b84a:	d801      	bhi.n	800b850 <imuUsbPacketsCreator+0x18>
	{
		/* Encoded data buff doesen't have enough space for START and END byte */
		return 0;
 800b84c:	2300      	movs	r3, #0
 800b84e:	e021      	b.n	800b894 <imuUsbPacketsCreator+0x5c>
	}

	memset(imuBuffer, 0x00, sizeof(imuBuffer));
 800b850:	f107 031c 	add.w	r3, r7, #28
 800b854:	2211      	movs	r2, #17
 800b856:	2100      	movs	r1, #0
 800b858:	4618      	mov	r0, r3
 800b85a:	f013 fdef 	bl	801f43c <memset>

	/* Add command type byte */
	imuBuffer[0] = commandIMUdata;
 800b85e:	23d0      	movs	r3, #208	; 0xd0
 800b860:	773b      	strb	r3, [r7, #28]
//	memcpy(&imuBuffer[1], &imu->AccelScaleFactor, sizeof(float));
//	memcpy(&imuBuffer[5], &imu->GyroScaleFactorDegree, sizeof(float));

	/* Add imu data */
//	memcpy(&imuBuffer[9], &bufferIn->buffer, bufferInLen);
	memcpy(&imuBuffer[1], &bufferIn->buffer, bufferInLen);
 800b862:	68b9      	ldr	r1, [r7, #8]
 800b864:	f107 031c 	add.w	r3, r7, #28
 800b868:	3301      	adds	r3, #1
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f013 fdbd 	bl	801f3ec <memcpy>

	/* Encode the packet */
	res = omdEncodeBuf(encBufferOut, bufferOutLen, imuBuffer, sizeof(imuBuffer));
 800b872:	f107 0014 	add.w	r0, r7, #20
 800b876:	f107 031c 	add.w	r3, r7, #28
 800b87a:	2211      	movs	r2, #17
 800b87c:	9200      	str	r2, [sp, #0]
 800b87e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	f001 f87f 	bl	800c984 <omdEncodeBuf>

	if (res.status == COBS_ENCODE_OK)
 800b886:	7e3b      	ldrb	r3, [r7, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <imuUsbPacketsCreator+0x5a>
	{
		return (res.out_len + 1);
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	3301      	adds	r3, #1
 800b890:	e000      	b.n	800b894 <imuUsbPacketsCreator+0x5c>
	}
	else
	{
		return 0;
 800b892:	2300      	movs	r3, #0
	}
}
 800b894:	4618      	mov	r0, r3
 800b896:	3730      	adds	r7, #48	; 0x30
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <RGB_Init>:
#include "RGB.h"

RGB_t RGB;

void RGB_Init(RGB_t *pRGBClass,TIM_HandleTypeDef *timerHandle)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
	/* Init class variables */
	pRGBClass->m_timerHandle = timerHandle;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	601a      	str	r2, [r3, #0]
	pRGBClass->blinkState = 0;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	729a      	strb	r2, [r3, #10]

	/* Start RGB LED Timer */
	HAL_TIM_Base_Start_IT(pRGBClass->m_timerHandle);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f009 fdae 	bl	8015418 <HAL_TIM_Base_Start_IT>

	/* Start RGB LED PWM channels */
	HAL_TIM_PWM_Start(pRGBClass->m_timerHandle, TIM_CHANNEL_1);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f009 fe64 	bl	8015590 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pRGBClass->m_timerHandle, TIM_CHANNEL_2);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2104      	movs	r1, #4
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f009 fe5e 	bl	8015590 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pRGBClass->m_timerHandle, TIM_CHANNEL_3);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2108      	movs	r1, #8
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f009 fe58 	bl	8015590 <HAL_TIM_PWM_Start>

	/* Create standard color */
	//BLACK
	pRGBClass->rgbBLACK.R = 0;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	819a      	strh	r2, [r3, #12]
	pRGBClass->rgbBLACK.G = 0;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	81da      	strh	r2, [r3, #14]
	pRGBClass->rgbBLACK.B = 0;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	821a      	strh	r2, [r3, #16]
	//BLUE
	pRGBClass->rgbBLUE.R = 0;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	825a      	strh	r2, [r3, #18]
	pRGBClass->rgbBLUE.G = 0;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	829a      	strh	r2, [r3, #20]
	pRGBClass->rgbBLUE.B = 1024;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b904:	82da      	strh	r2, [r3, #22]
	//RED
	pRGBClass->rgbRED.R = 512;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b90c:	831a      	strh	r2, [r3, #24]
	pRGBClass->rgbRED.G = 0;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	835a      	strh	r2, [r3, #26]
	pRGBClass->rgbRED.B = 0;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	839a      	strh	r2, [r3, #28]
	//GREEN
	pRGBClass->rgbGREEN.R = 0;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	83da      	strh	r2, [r3, #30]
	pRGBClass->rgbGREEN.G = 256;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b926:	841a      	strh	r2, [r3, #32]
	pRGBClass->rgbGREEN.B = 0;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	845a      	strh	r2, [r3, #34]	; 0x22
	//CYAN
	pRGBClass->rgbCYAN.R = 0;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	849a      	strh	r2, [r3, #36]	; 0x24
	pRGBClass->rgbCYAN.G = 256;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b93a:	84da      	strh	r2, [r3, #38]	; 0x26
	pRGBClass->rgbCYAN.B = 1024;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b942:	851a      	strh	r2, [r3, #40]	; 0x28
	//YELLOW
	pRGBClass->rgbYELLOW.R = 512;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b94a:	855a      	strh	r2, [r3, #42]	; 0x2a
	pRGBClass->rgbYELLOW.G = 256;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b952:	859a      	strh	r2, [r3, #44]	; 0x2c
	pRGBClass->rgbYELLOW.B = 0;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	85da      	strh	r2, [r3, #46]	; 0x2e
	//VIOLET
	pRGBClass->rgbVIOLET.R = 512;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b960:	861a      	strh	r2, [r3, #48]	; 0x30
	pRGBClass->rgbVIOLET.G = 0;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	865a      	strh	r2, [r3, #50]	; 0x32
	pRGBClass->rgbVIOLET.B = 1024;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b96e:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800b970:	bf00      	nop
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <RGB_SetActColor>:

void RGB_SetActColor(RGB_t *pRGBClass, Color colorValues, uint8_t EnableMemory)
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	1d38      	adds	r0, r7, #4
 800b982:	e880 0006 	stmia.w	r0, {r1, r2}
 800b986:	70fb      	strb	r3, [r7, #3]
	pRGBClass->m_timerHandle->Instance->CCR1 = 1024 - colorValues.B;
 800b988:	893b      	ldrh	r3, [r7, #8]
 800b98a:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	635a      	str	r2, [r3, #52]	; 0x34
	pRGBClass->m_timerHandle->Instance->CCR2 = 1024 - colorValues.R;
 800b996:	88bb      	ldrh	r3, [r7, #4]
 800b998:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	639a      	str	r2, [r3, #56]	; 0x38
	pRGBClass->m_timerHandle->Instance->CCR3 = 1024 - colorValues.G;
 800b9a4:	88fb      	ldrh	r3, [r7, #6]
 800b9a6:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	63da      	str	r2, [r3, #60]	; 0x3c

	if (EnableMemory)
 800b9b2:	78fb      	ldrb	r3, [r7, #3]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d007      	beq.n	800b9c8 <RGB_SetActColor+0x50>
	{
		pRGBClass->m_ActColor = colorValues;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	1d3a      	adds	r2, r7, #4
 800b9be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b9c2:	6018      	str	r0, [r3, #0]
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	8019      	strh	r1, [r3, #0]
	}
}
 800b9c8:	bf00      	nop
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <RGB_Blink>:
{
	return pRGBClass->m_ActColor;
}

void RGB_Blink(RGB_t *pRGBClass)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
	if (pRGBClass->blinkState)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	7a9b      	ldrb	r3, [r3, #10]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00a      	beq.n	800b9fa <RGB_Blink+0x26>
	{
		RGB_SetActColor(pRGBClass, pRGBClass->rgbBLACK, DISABLE);
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	320c      	adds	r2, #12
 800b9ea:	ca06      	ldmia	r2, {r1, r2}
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff ffc3 	bl	800b978 <RGB_SetActColor>
		pRGBClass->blinkState = 0;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	729a      	strb	r2, [r3, #10]
	else
	{
		RGB_SetActColor(pRGBClass, pRGBClass->m_ActColor, DISABLE);
		pRGBClass->blinkState = 1;
	}
}
 800b9f8:	e009      	b.n	800ba0e <RGB_Blink+0x3a>
		RGB_SetActColor(pRGBClass, pRGBClass->m_ActColor, DISABLE);
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	3204      	adds	r2, #4
 800ba00:	ca06      	ldmia	r2, {r1, r2}
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f7ff ffb8 	bl	800b978 <RGB_SetActColor>
		pRGBClass->blinkState = 1;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	729a      	strb	r2, [r3, #10]
}
 800ba0e:	bf00      	nop
 800ba10:	3708      	adds	r7, #8
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <OMDProtocolInit>:
extern AC1_StatusWord_t AC1_StatusWord;
//--------------------------------------
// ------------- METHODS ---------------
//--------------------------------------
void OMDProtocolInit(OMD_Protocol_t *ProtocolStruct)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b086      	sub	sp, #24
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
	osMutexDef(TxQueueMutex);
 800ba1e:	2300      	movs	r3, #0
 800ba20:	60fb      	str	r3, [r7, #12]
 800ba22:	2300      	movs	r3, #0
 800ba24:	613b      	str	r3, [r7, #16]
	ProtocolStruct->m_TxQueueMutexHandle = osMutexCreate(osMutex(TxQueueMutex));
 800ba26:	f107 030c 	add.w	r3, r7, #12
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f00e f9e6 	bl	8019dfc <osMutexCreate>
 800ba30:	4602      	mov	r2, r0
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	601a      	str	r2, [r3, #0]
	configASSERT(ProtocolStruct->m_TxQueueMutexHandle);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10a      	bne.n	800ba54 <OMDProtocolInit+0x3e>
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	617b      	str	r3, [r7, #20]
}
 800ba50:	bf00      	nop
 800ba52:	e7fe      	b.n	800ba52 <OMDProtocolInit+0x3c>

	memset(ProtocolStruct->m_encodedRxBuf,0x00,APP_RX_DATA_SIZE);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	3304      	adds	r3, #4
 800ba58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f013 fcec 	bl	801f43c <memset>
	memset(ProtocolStruct->m_encodedTxBuf,0x00,APP_TX_DATA_SIZE);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f603 0304 	addw	r3, r3, #2052	; 0x804
 800ba6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba6e:	2100      	movs	r1, #0
 800ba70:	4618      	mov	r0, r3
 800ba72:	f013 fce3 	bl	801f43c <memset>

	RINGBUFFER_CLEAR(&ProtocolStruct->m_rxBuffer);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	809a      	strh	r2, [r3, #4]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba86:	2200      	movs	r2, #0
 800ba88:	80da      	strh	r2, [r3, #6]
}
 800ba8a:	bf00      	nop
 800ba8c:	3718      	adds	r7, #24
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <GiveRxData>:

void GiveRxData(OMD_Protocol_t *ProtocolStruct, vc_vector* rxDataVector)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	6039      	str	r1, [r7, #0]
	vc_vector* packet = vc_vector_create(0, sizeof(uint8_t), NULL);
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	2101      	movs	r1, #1
 800baa0:	2000      	movs	r0, #0
 800baa2:	f001 faba 	bl	800d01a <vc_vector_create>
 800baa6:	60f8      	str	r0, [r7, #12]

	// Push new data into received buffer
	MoveRxDataInBuffer(ProtocolStruct, rxDataVector, packet);
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 f822 	bl	800baf6 <MoveRxDataInBuffer>

	// Packet found: decode and execute command
	while (!vc_vector_empty(packet)) {
 800bab2:	e012      	b.n	800bada <GiveRxData+0x48>
		vc_vector* decodedData = vc_vector_create(2, sizeof(uint8_t), NULL);
 800bab4:	2200      	movs	r2, #0
 800bab6:	2101      	movs	r1, #1
 800bab8:	2002      	movs	r0, #2
 800baba:	f001 faae 	bl	800d01a <vc_vector_create>
 800babe:	60b8      	str	r0, [r7, #8]

		omdDecode(packet, decodedData);
 800bac0:	68b9      	ldr	r1, [r7, #8]
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f001 f86e 	bl	800cba4 <omdDecode>

		executeCommand(ProtocolStruct, decodedData);
 800bac8:	68b9      	ldr	r1, [r7, #8]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f878 	bl	800bbc0 <executeCommand>

		MoveRxDataInBuffer(ProtocolStruct, rxDataVector, packet);
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f80e 	bl	800baf6 <MoveRxDataInBuffer>
	while (!vc_vector_empty(packet)) {
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f001 fb11 	bl	800d102 <vc_vector_empty>
 800bae0:	4603      	mov	r3, r0
 800bae2:	f083 0301 	eor.w	r3, r3, #1
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1e3      	bne.n	800bab4 <GiveRxData+0x22>
	}
}
 800baec:	bf00      	nop
 800baee:	bf00      	nop
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <MoveRxDataInBuffer>:

void MoveRxDataInBuffer(OMD_Protocol_t *ProtocolStruct, vc_vector* rxDataVector, vc_vector* packetVector)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b086      	sub	sp, #24
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	60b9      	str	r1, [r7, #8]
 800bb00:	607a      	str	r2, [r7, #4]
	// Clear any existing data from packet
	vc_vector_clear(packetVector);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f001 fb3a 	bl	800d17c <vc_vector_clear>

	// Pop bytes from front of received data vector
	while (!vc_vector_empty(rxDataVector)) {
 800bb08:	e04d      	b.n	800bba6 <MoveRxDataInBuffer+0xb0>
		uint8_t byteOfData = *((uint8_t *)vc_vector_front(rxDataVector));
 800bb0a:	68b8      	ldr	r0, [r7, #8]
 800bb0c:	f001 face 	bl	800d0ac <vc_vector_front>
 800bb10:	4603      	mov	r3, r0
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	74fb      	strb	r3, [r7, #19]

		vc_vector_erase(rxDataVector, 0);
 800bb16:	2100      	movs	r1, #0
 800bb18:	68b8      	ldr	r0, [r7, #8]
 800bb1a:	f001 fb41 	bl	800d1a0 <vc_vector_erase>

		RINGBUFFER_PUSH(&ProtocolStruct->m_rxBuffer, &byteOfData);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb24:	88db      	ldrh	r3, [r3, #6]
 800bb26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb2a:	7cf9      	ldrb	r1, [r7, #19]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb34:	3308      	adds	r3, #8
 800bb36:	460a      	mov	r2, r1
 800bb38:	701a      	strb	r2, [r3, #0]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb40:	88db      	ldrh	r3, [r3, #6]
 800bb42:	3301      	adds	r3, #1
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb4c:	80da      	strh	r2, [r3, #6]

		// Looking for 0x00 byte in received data
		if (byteOfData == 0x00)
 800bb4e:	7cfb      	ldrb	r3, [r7, #19]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d128      	bne.n	800bba6 <MoveRxDataInBuffer+0xb0>
			/*
			 * Found end-of-packet!
			 * Move everything from the start to byteOfData from rxData
			 * into a new packet
			 */
			uint16_t buffSize = RINGBUFFER_SIZE(&ProtocolStruct->m_rxBuffer);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb5a:	88da      	ldrh	r2, [r3, #6]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb62:	889b      	ldrh	r3, [r3, #4]
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	82bb      	strh	r3, [r7, #20]

			for (uint16_t it = 0; it < buffSize; ++it)
 800bb68:	2300      	movs	r3, #0
 800bb6a:	82fb      	strh	r3, [r7, #22]
 800bb6c:	e00c      	b.n	800bb88 <MoveRxDataInBuffer+0x92>
			{
				vc_vector_push_back(packetVector, &ProtocolStruct->m_rxBuffer.buffer[it]);
 800bb6e:	8afb      	ldrh	r3, [r7, #22]
 800bb70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	4413      	add	r3, r2
 800bb78:	3308      	adds	r3, #8
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f001 fbb3 	bl	800d2e8 <vc_vector_push_back>
			for (uint16_t it = 0; it < buffSize; ++it)
 800bb82:	8afb      	ldrh	r3, [r7, #22]
 800bb84:	3301      	adds	r3, #1
 800bb86:	82fb      	strh	r3, [r7, #22]
 800bb88:	8afa      	ldrh	r2, [r7, #22]
 800bb8a:	8abb      	ldrh	r3, [r7, #20]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d3ee      	bcc.n	800bb6e <MoveRxDataInBuffer+0x78>
			}

			RINGBUFFER_CLEAR(&ProtocolStruct->m_rxBuffer);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb96:	2200      	movs	r2, #0
 800bb98:	809a      	strh	r2, [r3, #4]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba0:	2200      	movs	r2, #0
 800bba2:	80da      	strh	r2, [r3, #6]
 800bba4:	e008      	b.n	800bbb8 <MoveRxDataInBuffer+0xc2>
	while (!vc_vector_empty(rxDataVector)) {
 800bba6:	68b8      	ldr	r0, [r7, #8]
 800bba8:	f001 faab 	bl	800d102 <vc_vector_empty>
 800bbac:	4603      	mov	r3, r0
 800bbae:	f083 0301 	eor.w	r3, r3, #1
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1a8      	bne.n	800bb0a <MoveRxDataInBuffer+0x14>
			return;
		}
	}
}
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <executeCommand>:

void executeCommand(OMD_Protocol_t *ProtocolStruct, vc_vector* command)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
	/* Extract command */
	uint8_t commandType;
	uint16_t value16;
	uint8_t value8;

	commandType = *(uint8_t *)vc_vector_front(command);
 800bbca:	6838      	ldr	r0, [r7, #0]
 800bbcc:	f001 fa6e 	bl	800d0ac <vc_vector_front>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	73fb      	strb	r3, [r7, #15]

	switch (commandType)
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
 800bbd8:	3b10      	subs	r3, #16
 800bbda:	2bee      	cmp	r3, #238	; 0xee
 800bbdc:	f200 83ee 	bhi.w	800c3bc <executeCommand+0x7fc>
 800bbe0:	a201      	add	r2, pc, #4	; (adr r2, 800bbe8 <executeCommand+0x28>)
 800bbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe6:	bf00      	nop
 800bbe8:	0800c077 	.word	0x0800c077
 800bbec:	0800c09b 	.word	0x0800c09b
 800bbf0:	0800c0bd 	.word	0x0800c0bd
 800bbf4:	0800c0e1 	.word	0x0800c0e1
 800bbf8:	0800c18f 	.word	0x0800c18f
 800bbfc:	0800c1b3 	.word	0x0800c1b3
 800bc00:	0800c3bd 	.word	0x0800c3bd
 800bc04:	0800c3bd 	.word	0x0800c3bd
 800bc08:	0800c3bd 	.word	0x0800c3bd
 800bc0c:	0800c3bd 	.word	0x0800c3bd
 800bc10:	0800c3bd 	.word	0x0800c3bd
 800bc14:	0800c3bd 	.word	0x0800c3bd
 800bc18:	0800c3bd 	.word	0x0800c3bd
 800bc1c:	0800c3bd 	.word	0x0800c3bd
 800bc20:	0800c3bd 	.word	0x0800c3bd
 800bc24:	0800c3bd 	.word	0x0800c3bd
 800bc28:	0800c103 	.word	0x0800c103
 800bc2c:	0800c127 	.word	0x0800c127
 800bc30:	0800c149 	.word	0x0800c149
 800bc34:	0800c16d 	.word	0x0800c16d
 800bc38:	0800c1d5 	.word	0x0800c1d5
 800bc3c:	0800c1f9 	.word	0x0800c1f9
 800bc40:	0800c3bd 	.word	0x0800c3bd
 800bc44:	0800c3bd 	.word	0x0800c3bd
 800bc48:	0800c3bd 	.word	0x0800c3bd
 800bc4c:	0800c3bd 	.word	0x0800c3bd
 800bc50:	0800c3bd 	.word	0x0800c3bd
 800bc54:	0800c3bd 	.word	0x0800c3bd
 800bc58:	0800c3bd 	.word	0x0800c3bd
 800bc5c:	0800c3bd 	.word	0x0800c3bd
 800bc60:	0800c3bd 	.word	0x0800c3bd
 800bc64:	0800c3bd 	.word	0x0800c3bd
 800bc68:	0800c21b 	.word	0x0800c21b
 800bc6c:	0800c23f 	.word	0x0800c23f
 800bc70:	0800c261 	.word	0x0800c261
 800bc74:	0800c285 	.word	0x0800c285
 800bc78:	0800c2ad 	.word	0x0800c2ad
 800bc7c:	0800c2d1 	.word	0x0800c2d1
 800bc80:	0800c2f1 	.word	0x0800c2f1
 800bc84:	0800c315 	.word	0x0800c315
 800bc88:	0800c335 	.word	0x0800c335
 800bc8c:	0800c359 	.word	0x0800c359
 800bc90:	0800c379 	.word	0x0800c379
 800bc94:	0800c39d 	.word	0x0800c39d
 800bc98:	0800c3bd 	.word	0x0800c3bd
 800bc9c:	0800c3bd 	.word	0x0800c3bd
 800bca0:	0800c3bd 	.word	0x0800c3bd
 800bca4:	0800c3bd 	.word	0x0800c3bd
 800bca8:	0800c3bd 	.word	0x0800c3bd
 800bcac:	0800c3bd 	.word	0x0800c3bd
 800bcb0:	0800c3bd 	.word	0x0800c3bd
 800bcb4:	0800c3bd 	.word	0x0800c3bd
 800bcb8:	0800c3bd 	.word	0x0800c3bd
 800bcbc:	0800c3bd 	.word	0x0800c3bd
 800bcc0:	0800c3bd 	.word	0x0800c3bd
 800bcc4:	0800c3bd 	.word	0x0800c3bd
 800bcc8:	0800c3bd 	.word	0x0800c3bd
 800bccc:	0800c3bd 	.word	0x0800c3bd
 800bcd0:	0800c3bd 	.word	0x0800c3bd
 800bcd4:	0800c3bd 	.word	0x0800c3bd
 800bcd8:	0800c3bd 	.word	0x0800c3bd
 800bcdc:	0800c3bd 	.word	0x0800c3bd
 800bce0:	0800c3bd 	.word	0x0800c3bd
 800bce4:	0800c3bd 	.word	0x0800c3bd
 800bce8:	0800c3bd 	.word	0x0800c3bd
 800bcec:	0800c3bd 	.word	0x0800c3bd
 800bcf0:	0800c3bd 	.word	0x0800c3bd
 800bcf4:	0800c3bd 	.word	0x0800c3bd
 800bcf8:	0800c3bd 	.word	0x0800c3bd
 800bcfc:	0800c3bd 	.word	0x0800c3bd
 800bd00:	0800c3bd 	.word	0x0800c3bd
 800bd04:	0800c3bd 	.word	0x0800c3bd
 800bd08:	0800c3bd 	.word	0x0800c3bd
 800bd0c:	0800c3bd 	.word	0x0800c3bd
 800bd10:	0800c3bd 	.word	0x0800c3bd
 800bd14:	0800c3bd 	.word	0x0800c3bd
 800bd18:	0800c3bd 	.word	0x0800c3bd
 800bd1c:	0800c3bd 	.word	0x0800c3bd
 800bd20:	0800c3bd 	.word	0x0800c3bd
 800bd24:	0800c3bd 	.word	0x0800c3bd
 800bd28:	0800c3bd 	.word	0x0800c3bd
 800bd2c:	0800c3bd 	.word	0x0800c3bd
 800bd30:	0800c3bd 	.word	0x0800c3bd
 800bd34:	0800c3bd 	.word	0x0800c3bd
 800bd38:	0800c3bd 	.word	0x0800c3bd
 800bd3c:	0800c3bd 	.word	0x0800c3bd
 800bd40:	0800c3bd 	.word	0x0800c3bd
 800bd44:	0800c3bd 	.word	0x0800c3bd
 800bd48:	0800c3bd 	.word	0x0800c3bd
 800bd4c:	0800c3bd 	.word	0x0800c3bd
 800bd50:	0800c3bd 	.word	0x0800c3bd
 800bd54:	0800c3bd 	.word	0x0800c3bd
 800bd58:	0800c3bd 	.word	0x0800c3bd
 800bd5c:	0800c3bd 	.word	0x0800c3bd
 800bd60:	0800c3bd 	.word	0x0800c3bd
 800bd64:	0800c3bd 	.word	0x0800c3bd
 800bd68:	0800c3bd 	.word	0x0800c3bd
 800bd6c:	0800c3bd 	.word	0x0800c3bd
 800bd70:	0800c3bd 	.word	0x0800c3bd
 800bd74:	0800c3bd 	.word	0x0800c3bd
 800bd78:	0800c3bd 	.word	0x0800c3bd
 800bd7c:	0800c3bd 	.word	0x0800c3bd
 800bd80:	0800c3bd 	.word	0x0800c3bd
 800bd84:	0800c3bd 	.word	0x0800c3bd
 800bd88:	0800c3bd 	.word	0x0800c3bd
 800bd8c:	0800c3bd 	.word	0x0800c3bd
 800bd90:	0800c3bd 	.word	0x0800c3bd
 800bd94:	0800c3bd 	.word	0x0800c3bd
 800bd98:	0800c3bd 	.word	0x0800c3bd
 800bd9c:	0800c3bd 	.word	0x0800c3bd
 800bda0:	0800c3bd 	.word	0x0800c3bd
 800bda4:	0800c3bd 	.word	0x0800c3bd
 800bda8:	0800c3bd 	.word	0x0800c3bd
 800bdac:	0800c3bd 	.word	0x0800c3bd
 800bdb0:	0800c3bd 	.word	0x0800c3bd
 800bdb4:	0800c3bd 	.word	0x0800c3bd
 800bdb8:	0800c3bd 	.word	0x0800c3bd
 800bdbc:	0800c3bd 	.word	0x0800c3bd
 800bdc0:	0800c3bd 	.word	0x0800c3bd
 800bdc4:	0800c3bd 	.word	0x0800c3bd
 800bdc8:	0800c3bd 	.word	0x0800c3bd
 800bdcc:	0800c3bd 	.word	0x0800c3bd
 800bdd0:	0800c3bd 	.word	0x0800c3bd
 800bdd4:	0800c3bd 	.word	0x0800c3bd
 800bdd8:	0800c3bd 	.word	0x0800c3bd
 800bddc:	0800c3bd 	.word	0x0800c3bd
 800bde0:	0800c3bd 	.word	0x0800c3bd
 800bde4:	0800c3bd 	.word	0x0800c3bd
 800bde8:	0800c3bd 	.word	0x0800c3bd
 800bdec:	0800c3bd 	.word	0x0800c3bd
 800bdf0:	0800c3bd 	.word	0x0800c3bd
 800bdf4:	0800c3bd 	.word	0x0800c3bd
 800bdf8:	0800c3bd 	.word	0x0800c3bd
 800bdfc:	0800c3bd 	.word	0x0800c3bd
 800be00:	0800c3bd 	.word	0x0800c3bd
 800be04:	0800c3bd 	.word	0x0800c3bd
 800be08:	0800c3bd 	.word	0x0800c3bd
 800be0c:	0800c3bd 	.word	0x0800c3bd
 800be10:	0800c3bd 	.word	0x0800c3bd
 800be14:	0800c3bd 	.word	0x0800c3bd
 800be18:	0800c3bd 	.word	0x0800c3bd
 800be1c:	0800c3bd 	.word	0x0800c3bd
 800be20:	0800c3bd 	.word	0x0800c3bd
 800be24:	0800c3bd 	.word	0x0800c3bd
 800be28:	0800c3bd 	.word	0x0800c3bd
 800be2c:	0800c3bd 	.word	0x0800c3bd
 800be30:	0800c3bd 	.word	0x0800c3bd
 800be34:	0800c3bd 	.word	0x0800c3bd
 800be38:	0800c3bd 	.word	0x0800c3bd
 800be3c:	0800c3bd 	.word	0x0800c3bd
 800be40:	0800c3bd 	.word	0x0800c3bd
 800be44:	0800c3bd 	.word	0x0800c3bd
 800be48:	0800c3bd 	.word	0x0800c3bd
 800be4c:	0800c3bd 	.word	0x0800c3bd
 800be50:	0800c3bd 	.word	0x0800c3bd
 800be54:	0800c3bd 	.word	0x0800c3bd
 800be58:	0800c3bd 	.word	0x0800c3bd
 800be5c:	0800c3bd 	.word	0x0800c3bd
 800be60:	0800c3bd 	.word	0x0800c3bd
 800be64:	0800c3bd 	.word	0x0800c3bd
 800be68:	0800c3bd 	.word	0x0800c3bd
 800be6c:	0800c3bd 	.word	0x0800c3bd
 800be70:	0800c3bd 	.word	0x0800c3bd
 800be74:	0800c3bd 	.word	0x0800c3bd
 800be78:	0800c3bd 	.word	0x0800c3bd
 800be7c:	0800c3bd 	.word	0x0800c3bd
 800be80:	0800c3bd 	.word	0x0800c3bd
 800be84:	0800c3bd 	.word	0x0800c3bd
 800be88:	0800c3bd 	.word	0x0800c3bd
 800be8c:	0800c3bd 	.word	0x0800c3bd
 800be90:	0800c3bd 	.word	0x0800c3bd
 800be94:	0800c3bd 	.word	0x0800c3bd
 800be98:	0800c3bd 	.word	0x0800c3bd
 800be9c:	0800c3bd 	.word	0x0800c3bd
 800bea0:	0800c3bd 	.word	0x0800c3bd
 800bea4:	0800c3bd 	.word	0x0800c3bd
 800bea8:	0800c3bd 	.word	0x0800c3bd
 800beac:	0800c3bd 	.word	0x0800c3bd
 800beb0:	0800c3bd 	.word	0x0800c3bd
 800beb4:	0800c3bd 	.word	0x0800c3bd
 800beb8:	0800c3bd 	.word	0x0800c3bd
 800bebc:	0800c3bd 	.word	0x0800c3bd
 800bec0:	0800c3bd 	.word	0x0800c3bd
 800bec4:	0800c3bd 	.word	0x0800c3bd
 800bec8:	0800c3bd 	.word	0x0800c3bd
 800becc:	0800c3bd 	.word	0x0800c3bd
 800bed0:	0800c3bd 	.word	0x0800c3bd
 800bed4:	0800c3bd 	.word	0x0800c3bd
 800bed8:	0800c3bd 	.word	0x0800c3bd
 800bedc:	0800c3bd 	.word	0x0800c3bd
 800bee0:	0800c3bd 	.word	0x0800c3bd
 800bee4:	0800c3bd 	.word	0x0800c3bd
 800bee8:	0800c3bd 	.word	0x0800c3bd
 800beec:	0800c3bd 	.word	0x0800c3bd
 800bef0:	0800c3bd 	.word	0x0800c3bd
 800bef4:	0800c3bd 	.word	0x0800c3bd
 800bef8:	0800c3bd 	.word	0x0800c3bd
 800befc:	0800c3bd 	.word	0x0800c3bd
 800bf00:	0800c3bd 	.word	0x0800c3bd
 800bf04:	0800c3bd 	.word	0x0800c3bd
 800bf08:	0800c3bd 	.word	0x0800c3bd
 800bf0c:	0800c3bd 	.word	0x0800c3bd
 800bf10:	0800c3bd 	.word	0x0800c3bd
 800bf14:	0800c3bd 	.word	0x0800c3bd
 800bf18:	0800c3bd 	.word	0x0800c3bd
 800bf1c:	0800c3bd 	.word	0x0800c3bd
 800bf20:	0800c3bd 	.word	0x0800c3bd
 800bf24:	0800c3bd 	.word	0x0800c3bd
 800bf28:	0800c3bd 	.word	0x0800c3bd
 800bf2c:	0800c3bd 	.word	0x0800c3bd
 800bf30:	0800c3bd 	.word	0x0800c3bd
 800bf34:	0800c3bd 	.word	0x0800c3bd
 800bf38:	0800c3bd 	.word	0x0800c3bd
 800bf3c:	0800c3bd 	.word	0x0800c3bd
 800bf40:	0800c3bd 	.word	0x0800c3bd
 800bf44:	0800c3bd 	.word	0x0800c3bd
 800bf48:	0800c3bd 	.word	0x0800c3bd
 800bf4c:	0800c3bd 	.word	0x0800c3bd
 800bf50:	0800c3bd 	.word	0x0800c3bd
 800bf54:	0800c3bd 	.word	0x0800c3bd
 800bf58:	0800c3bd 	.word	0x0800c3bd
 800bf5c:	0800c3bd 	.word	0x0800c3bd
 800bf60:	0800c3bd 	.word	0x0800c3bd
 800bf64:	0800c3bd 	.word	0x0800c3bd
 800bf68:	0800bfa5 	.word	0x0800bfa5
 800bf6c:	0800c3bd 	.word	0x0800c3bd
 800bf70:	0800c3bd 	.word	0x0800c3bd
 800bf74:	0800c3bd 	.word	0x0800c3bd
 800bf78:	0800c3bd 	.word	0x0800c3bd
 800bf7c:	0800c3bd 	.word	0x0800c3bd
 800bf80:	0800c3bd 	.word	0x0800c3bd
 800bf84:	0800c3bd 	.word	0x0800c3bd
 800bf88:	0800c3bd 	.word	0x0800c3bd
 800bf8c:	0800c3bd 	.word	0x0800c3bd
 800bf90:	0800c03f 	.word	0x0800c03f
 800bf94:	0800c061 	.word	0x0800c061
 800bf98:	0800bff3 	.word	0x0800bff3
 800bf9c:	0800c029 	.word	0x0800c029
 800bfa0:	0800bfcb 	.word	0x0800bfcb
	{
	case commandSaveUserData:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	6838      	ldr	r0, [r7, #0]
 800bfa8:	f001 f86d 	bl	800d086 <vc_vector_at>
 800bfac:	4603      	mov	r3, r0
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	73bb      	strb	r3, [r7, #14]

		if (value8 >= 1)
 800bfb2:	7bbb      	ldrb	r3, [r7, #14]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <executeCommand+0x3fe>
		{
			saveUserConfig();
 800bfb8:	f000 fa90 	bl	800c4dc <saveUserConfig>
		}
		else
		{
			ackCommand(ProtocolStruct, command, OMD_COMM_ACK_ERR);
		}
		break;
 800bfbc:	e217      	b.n	800c3ee <executeCommand+0x82e>
			ackCommand(ProtocolStruct, command, OMD_COMM_ACK_ERR);
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 fa1a 	bl	800c3fc <ackCommand>
		break;
 800bfc8:	e211      	b.n	800c3ee <executeCommand+0x82e>
	case commandDeviceReset:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800bfca:	2101      	movs	r1, #1
 800bfcc:	6838      	ldr	r0, [r7, #0]
 800bfce:	f001 f85a 	bl	800d086 <vc_vector_at>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	73bb      	strb	r3, [r7, #14]

		if (value8 >= 1)
 800bfd8:	7bbb      	ldrb	r3, [r7, #14]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d003      	beq.n	800bfe6 <executeCommand+0x426>
		{
			IIM42652_SoftReset(&IMU);
 800bfde:	48b2      	ldr	r0, [pc, #712]	; (800c2a8 <executeCommand+0x6e8>)
 800bfe0:	f7fd fff8 	bl	8009fd4 <IIM42652_SoftReset>
		else
		{
			ackCommand(ProtocolStruct, command, OMD_COMM_ACK_ERR);
		}

		break;
 800bfe4:	e203      	b.n	800c3ee <executeCommand+0x82e>
			ackCommand(ProtocolStruct, command, OMD_COMM_ACK_ERR);
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	6839      	ldr	r1, [r7, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 fa06 	bl	800c3fc <ackCommand>
		break;
 800bff0:	e1fd      	b.n	800c3ee <executeCommand+0x82e>
	case commandSetConfigMode:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800bff2:	2101      	movs	r1, #1
 800bff4:	6838      	ldr	r0, [r7, #0]
 800bff6:	f001 f846 	bl	800d086 <vc_vector_at>
 800bffa:	4603      	mov	r3, r0
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	73bb      	strb	r3, [r7, #14]

		if (value8 > 0)
 800c000:	7bbb      	ldrb	r3, [r7, #14]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <executeCommand+0x44e>
		{
			setConfigMode(ENABLE);
 800c006:	2001      	movs	r0, #1
 800c008:	f000 fa76 	bl	800c4f8 <setConfigMode>
		}
		else
		{
			ackCommand(ProtocolStruct, command, OMD_COMM_ACK_ERR);
		}
		break;
 800c00c:	e1ef      	b.n	800c3ee <executeCommand+0x82e>
		else if(value8 == 0)
 800c00e:	7bbb      	ldrb	r3, [r7, #14]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d103      	bne.n	800c01c <executeCommand+0x45c>
			setConfigMode(DISABLE);
 800c014:	2000      	movs	r0, #0
 800c016:	f000 fa6f 	bl	800c4f8 <setConfigMode>
		break;
 800c01a:	e1e8      	b.n	800c3ee <executeCommand+0x82e>
			ackCommand(ProtocolStruct, command, OMD_COMM_ACK_ERR);
 800c01c:	2201      	movs	r2, #1
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 f9eb 	bl	800c3fc <ackCommand>
		break;
 800c026:	e1e2      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetConfigMode:
		/* Get requested value */
		value8 = getConfigMode();
 800c028:	f000 fa8c 	bl	800c544 <getConfigMode>
 800c02c:	4603      	mov	r3, r0
 800c02e:	73bb      	strb	r3, [r7, #14]
		ackCommand(ProtocolStruct, command, value8);
 800c030:	7bbb      	ldrb	r3, [r7, #14]
 800c032:	461a      	mov	r2, r3
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f9e0 	bl	800c3fc <ackCommand>
		break;
 800c03c:	e1d7      	b.n	800c3ee <executeCommand+0x82e>
	case commandSetTelemetry:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c03e:	2101      	movs	r1, #1
 800c040:	6838      	ldr	r0, [r7, #0]
 800c042:	f001 f820 	bl	800d086 <vc_vector_at>
 800c046:	4603      	mov	r3, r0
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	73bb      	strb	r3, [r7, #14]
		setTelemetryEn(value8);
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 fa86 	bl	800c560 <setTelemetryEn>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c054:	2210      	movs	r2, #16
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f9cf 	bl	800c3fc <ackCommand>
		break;
 800c05e:	e1c6      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetTelemetry:
		/* Get requested value */
		value8 = getTelemetryEn();
 800c060:	f000 fa98 	bl	800c594 <getTelemetryEn>
 800c064:	4603      	mov	r3, r0
 800c066:	73bb      	strb	r3, [r7, #14]
		ackCommand(ProtocolStruct, command, value8);
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	461a      	mov	r2, r3
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f9c4 	bl	800c3fc <ackCommand>
		break;
 800c074:	e1bb      	b.n	800c3ee <executeCommand+0x82e>
	case commandSetAccODR:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c076:	2101      	movs	r1, #1
 800c078:	6838      	ldr	r0, [r7, #0]
 800c07a:	f001 f804 	bl	800d086 <vc_vector_at>
 800c07e:	4603      	mov	r3, r0
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	73bb      	strb	r3, [r7, #14]
		setAccelODR(&IMU, value8);
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	4619      	mov	r1, r3
 800c088:	4887      	ldr	r0, [pc, #540]	; (800c2a8 <executeCommand+0x6e8>)
 800c08a:	f000 fa8f 	bl	800c5ac <setAccelODR>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c08e:	2210      	movs	r2, #16
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f9b2 	bl	800c3fc <ackCommand>
		break;
 800c098:	e1a9      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetAccODR:
		/* Get requested value */
		if (getAccelODR(&IMU, &value8) == HAL_OK)
 800c09a:	f107 030e 	add.w	r3, r7, #14
 800c09e:	4619      	mov	r1, r3
 800c0a0:	4881      	ldr	r0, [pc, #516]	; (800c2a8 <executeCommand+0x6e8>)
 800c0a2:	f000 fa9e 	bl	800c5e2 <getAccelODR>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f040 8189 	bne.w	800c3c0 <executeCommand+0x800>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c0ae:	7bbb      	ldrb	r3, [r7, #14]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f9a1 	bl	800c3fc <ackCommand>
		}
		break;
 800c0ba:	e181      	b.n	800c3c0 <executeCommand+0x800>
	case commandSetAccFSR:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c0bc:	2101      	movs	r1, #1
 800c0be:	6838      	ldr	r0, [r7, #0]
 800c0c0:	f000 ffe1 	bl	800d086 <vc_vector_at>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	73bb      	strb	r3, [r7, #14]
		setAccelFSR(&IMU, value8);
 800c0ca:	7bbb      	ldrb	r3, [r7, #14]
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	4876      	ldr	r0, [pc, #472]	; (800c2a8 <executeCommand+0x6e8>)
 800c0d0:	f000 fabe 	bl	800c650 <setAccelFSR>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c0d4:	2210      	movs	r2, #16
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f98f 	bl	800c3fc <ackCommand>
		break;
 800c0de:	e186      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetAccFSR:
		/* Get requested value */
		if (getAccelFSR(&IMU, &value8) == HAL_OK)
 800c0e0:	f107 030e 	add.w	r3, r7, #14
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	4870      	ldr	r0, [pc, #448]	; (800c2a8 <executeCommand+0x6e8>)
 800c0e8:	f000 facd 	bl	800c686 <getAccelFSR>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f040 8168 	bne.w	800c3c4 <executeCommand+0x804>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c0f4:	7bbb      	ldrb	r3, [r7, #14]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	6839      	ldr	r1, [r7, #0]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f97e 	bl	800c3fc <ackCommand>
		}
		break;
 800c100:	e160      	b.n	800c3c4 <executeCommand+0x804>
	case commandSetGyroODR:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c102:	2101      	movs	r1, #1
 800c104:	6838      	ldr	r0, [r7, #0]
 800c106:	f000 ffbe 	bl	800d086 <vc_vector_at>
 800c10a:	4603      	mov	r3, r0
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	73bb      	strb	r3, [r7, #14]
		setGyroODR(&IMU, value8);
 800c110:	7bbb      	ldrb	r3, [r7, #14]
 800c112:	4619      	mov	r1, r3
 800c114:	4864      	ldr	r0, [pc, #400]	; (800c2a8 <executeCommand+0x6e8>)
 800c116:	f000 fa72 	bl	800c5fe <setGyroODR>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c11a:	2210      	movs	r2, #16
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f96c 	bl	800c3fc <ackCommand>
		break;
 800c124:	e163      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetGyroODR:
		/* Get requested value */
		if (getGyroODR(&IMU, &value8) == HAL_OK)
 800c126:	f107 030e 	add.w	r3, r7, #14
 800c12a:	4619      	mov	r1, r3
 800c12c:	485e      	ldr	r0, [pc, #376]	; (800c2a8 <executeCommand+0x6e8>)
 800c12e:	f000 fa81 	bl	800c634 <getGyroODR>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	f040 8147 	bne.w	800c3c8 <executeCommand+0x808>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	461a      	mov	r2, r3
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f95b 	bl	800c3fc <ackCommand>
		}
		break;
 800c146:	e13f      	b.n	800c3c8 <executeCommand+0x808>
	case commandSetGyroFSR:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c148:	2101      	movs	r1, #1
 800c14a:	6838      	ldr	r0, [r7, #0]
 800c14c:	f000 ff9b 	bl	800d086 <vc_vector_at>
 800c150:	4603      	mov	r3, r0
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	73bb      	strb	r3, [r7, #14]
		setGyroFSR(&IMU, value8);
 800c156:	7bbb      	ldrb	r3, [r7, #14]
 800c158:	4619      	mov	r1, r3
 800c15a:	4853      	ldr	r0, [pc, #332]	; (800c2a8 <executeCommand+0x6e8>)
 800c15c:	f000 faa1 	bl	800c6a2 <setGyroFSR>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c160:	2210      	movs	r2, #16
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f949 	bl	800c3fc <ackCommand>
		break;
 800c16a:	e140      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetGyroFSR:
		/* Get requested value */
		if (getGyroFSR(&IMU, &value8) == HAL_OK)
 800c16c:	f107 030e 	add.w	r3, r7, #14
 800c170:	4619      	mov	r1, r3
 800c172:	484d      	ldr	r0, [pc, #308]	; (800c2a8 <executeCommand+0x6e8>)
 800c174:	f000 fab0 	bl	800c6d8 <getGyroFSR>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f040 8126 	bne.w	800c3cc <executeCommand+0x80c>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	461a      	mov	r2, r3
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f938 	bl	800c3fc <ackCommand>
		}
		break;
 800c18c:	e11e      	b.n	800c3cc <executeCommand+0x80c>
	case commandSetAccBW:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c18e:	2101      	movs	r1, #1
 800c190:	6838      	ldr	r0, [r7, #0]
 800c192:	f000 ff78 	bl	800d086 <vc_vector_at>
 800c196:	4603      	mov	r3, r0
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	73bb      	strb	r3, [r7, #14]
		setAccelBW(&IMU, value8);
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	4841      	ldr	r0, [pc, #260]	; (800c2a8 <executeCommand+0x6e8>)
 800c1a2:	f000 faa7 	bl	800c6f4 <setAccelBW>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c1a6:	2210      	movs	r2, #16
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f926 	bl	800c3fc <ackCommand>
		break;
 800c1b0:	e11d      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetAccBW:
		/* Get requested value */
		if (getAccelBW(&IMU, &value8) == HAL_OK)
 800c1b2:	f107 030e 	add.w	r3, r7, #14
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	483b      	ldr	r0, [pc, #236]	; (800c2a8 <executeCommand+0x6e8>)
 800c1ba:	f000 fab6 	bl	800c72a <getAccelBW>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f040 8105 	bne.w	800c3d0 <executeCommand+0x810>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c1c6:	7bbb      	ldrb	r3, [r7, #14]
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	6839      	ldr	r1, [r7, #0]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f915 	bl	800c3fc <ackCommand>
		}
		break;
 800c1d2:	e0fd      	b.n	800c3d0 <executeCommand+0x810>
	case commandSetGyroBW:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c1d4:	2101      	movs	r1, #1
 800c1d6:	6838      	ldr	r0, [r7, #0]
 800c1d8:	f000 ff55 	bl	800d086 <vc_vector_at>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	73bb      	strb	r3, [r7, #14]
		setGyroBW(&IMU, value8);
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4830      	ldr	r0, [pc, #192]	; (800c2a8 <executeCommand+0x6e8>)
 800c1e8:	f000 faad 	bl	800c746 <setGyroBW>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c1ec:	2210      	movs	r2, #16
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f903 	bl	800c3fc <ackCommand>
		break;
 800c1f6:	e0fa      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetGyroBW:
		/* Get requested value */
		if (getGyroBW(&IMU, &value8) == HAL_OK)
 800c1f8:	f107 030e 	add.w	r3, r7, #14
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	482a      	ldr	r0, [pc, #168]	; (800c2a8 <executeCommand+0x6e8>)
 800c200:	f000 fabc 	bl	800c77c <getGyroBW>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	f040 80e4 	bne.w	800c3d4 <executeCommand+0x814>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c20c:	7bbb      	ldrb	r3, [r7, #14]
 800c20e:	461a      	mov	r2, r3
 800c210:	6839      	ldr	r1, [r7, #0]
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f8f2 	bl	800c3fc <ackCommand>
		}
		break;
 800c218:	e0dc      	b.n	800c3d4 <executeCommand+0x814>
	case commandSetWomXTh:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c21a:	2101      	movs	r1, #1
 800c21c:	6838      	ldr	r0, [r7, #0]
 800c21e:	f000 ff32 	bl	800d086 <vc_vector_at>
 800c222:	4603      	mov	r3, r0
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	73bb      	strb	r3, [r7, #14]
		setWomXth(&IMU, value8);
 800c228:	7bbb      	ldrb	r3, [r7, #14]
 800c22a:	4619      	mov	r1, r3
 800c22c:	481e      	ldr	r0, [pc, #120]	; (800c2a8 <executeCommand+0x6e8>)
 800c22e:	f000 fab3 	bl	800c798 <setWomXth>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c232:	2210      	movs	r2, #16
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f8e0 	bl	800c3fc <ackCommand>
		break;
 800c23c:	e0d7      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetWomXTh:
		/* Get requested value */
		if (getWomXth(&IMU, &value8) == HAL_OK)
 800c23e:	f107 030e 	add.w	r3, r7, #14
 800c242:	4619      	mov	r1, r3
 800c244:	4818      	ldr	r0, [pc, #96]	; (800c2a8 <executeCommand+0x6e8>)
 800c246:	f000 fac2 	bl	800c7ce <getWomXth>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f040 80c3 	bne.w	800c3d8 <executeCommand+0x818>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c252:	7bbb      	ldrb	r3, [r7, #14]
 800c254:	461a      	mov	r2, r3
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f8cf 	bl	800c3fc <ackCommand>
		}
		break;
 800c25e:	e0bb      	b.n	800c3d8 <executeCommand+0x818>
	case commandSetWomYTh:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c260:	2101      	movs	r1, #1
 800c262:	6838      	ldr	r0, [r7, #0]
 800c264:	f000 ff0f 	bl	800d086 <vc_vector_at>
 800c268:	4603      	mov	r3, r0
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	73bb      	strb	r3, [r7, #14]
		setWomYth(&IMU, value8);
 800c26e:	7bbb      	ldrb	r3, [r7, #14]
 800c270:	4619      	mov	r1, r3
 800c272:	480d      	ldr	r0, [pc, #52]	; (800c2a8 <executeCommand+0x6e8>)
 800c274:	f000 fab9 	bl	800c7ea <setWomYth>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c278:	2210      	movs	r2, #16
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f8bd 	bl	800c3fc <ackCommand>
		break;
 800c282:	e0b4      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetWomYTh:
		/* Get requested value */
		if (getWomYth(&IMU, &value8) == HAL_OK)
 800c284:	f107 030e 	add.w	r3, r7, #14
 800c288:	4619      	mov	r1, r3
 800c28a:	4807      	ldr	r0, [pc, #28]	; (800c2a8 <executeCommand+0x6e8>)
 800c28c:	f000 fac8 	bl	800c820 <getWomYth>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	f040 80a2 	bne.w	800c3dc <executeCommand+0x81c>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c298:	7bbb      	ldrb	r3, [r7, #14]
 800c29a:	461a      	mov	r2, r3
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 f8ac 	bl	800c3fc <ackCommand>
		}
		break;
 800c2a4:	e09a      	b.n	800c3dc <executeCommand+0x81c>
 800c2a6:	bf00      	nop
 800c2a8:	20000300 	.word	0x20000300
	case commandSetWomZTh:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	6838      	ldr	r0, [r7, #0]
 800c2b0:	f000 fee9 	bl	800d086 <vc_vector_at>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	73bb      	strb	r3, [r7, #14]
		setWomZth(&IMU, value8);
 800c2ba:	7bbb      	ldrb	r3, [r7, #14]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	484e      	ldr	r0, [pc, #312]	; (800c3f8 <executeCommand+0x838>)
 800c2c0:	f000 fabc 	bl	800c83c <setWomZth>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c2c4:	2210      	movs	r2, #16
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 f897 	bl	800c3fc <ackCommand>
		break;
 800c2ce:	e08e      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetWomZTh:
		/* Get requested value */
		if (getWomZth(&IMU, &value8) == HAL_OK)
 800c2d0:	f107 030e 	add.w	r3, r7, #14
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	4848      	ldr	r0, [pc, #288]	; (800c3f8 <executeCommand+0x838>)
 800c2d8:	f000 facb 	bl	800c872 <getWomZth>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d17e      	bne.n	800c3e0 <executeCommand+0x820>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c2e2:	7bbb      	ldrb	r3, [r7, #14]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	6839      	ldr	r1, [r7, #0]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f887 	bl	800c3fc <ackCommand>
		}
		break;
 800c2ee:	e077      	b.n	800c3e0 <executeCommand+0x820>
	case commandSetWomIntMode:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c2f0:	2101      	movs	r1, #1
 800c2f2:	6838      	ldr	r0, [r7, #0]
 800c2f4:	f000 fec7 	bl	800d086 <vc_vector_at>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	73bb      	strb	r3, [r7, #14]
		setWomIntMode(&IMU, value8);
 800c2fe:	7bbb      	ldrb	r3, [r7, #14]
 800c300:	4619      	mov	r1, r3
 800c302:	483d      	ldr	r0, [pc, #244]	; (800c3f8 <executeCommand+0x838>)
 800c304:	f000 fac3 	bl	800c88e <setWomIntMode>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c308:	2210      	movs	r2, #16
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f875 	bl	800c3fc <ackCommand>
		break;
 800c312:	e06c      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetWomIntMode:
		/* Get requested value */
		if (getWomIntMode(&IMU, &value8) == HAL_OK)
 800c314:	f107 030e 	add.w	r3, r7, #14
 800c318:	4619      	mov	r1, r3
 800c31a:	4837      	ldr	r0, [pc, #220]	; (800c3f8 <executeCommand+0x838>)
 800c31c:	f000 fad2 	bl	800c8c4 <getWomIntMode>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d15e      	bne.n	800c3e4 <executeCommand+0x824>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c326:	7bbb      	ldrb	r3, [r7, #14]
 800c328:	461a      	mov	r2, r3
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f865 	bl	800c3fc <ackCommand>
		}
		break;
 800c332:	e057      	b.n	800c3e4 <executeCommand+0x824>
	case commandSetWomMode:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c334:	2101      	movs	r1, #1
 800c336:	6838      	ldr	r0, [r7, #0]
 800c338:	f000 fea5 	bl	800d086 <vc_vector_at>
 800c33c:	4603      	mov	r3, r0
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	73bb      	strb	r3, [r7, #14]
		setWomMode(&IMU, value8);
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	4619      	mov	r1, r3
 800c346:	482c      	ldr	r0, [pc, #176]	; (800c3f8 <executeCommand+0x838>)
 800c348:	f000 faca 	bl	800c8e0 <setWomMode>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c34c:	2210      	movs	r2, #16
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 f853 	bl	800c3fc <ackCommand>
		break;
 800c356:	e04a      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetWomMode:
		/* Get requested value */
		if (getWomMode(&IMU, &value8) == HAL_OK)
 800c358:	f107 030e 	add.w	r3, r7, #14
 800c35c:	4619      	mov	r1, r3
 800c35e:	4826      	ldr	r0, [pc, #152]	; (800c3f8 <executeCommand+0x838>)
 800c360:	f000 fad9 	bl	800c916 <getWomMode>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d13e      	bne.n	800c3e8 <executeCommand+0x828>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c36a:	7bbb      	ldrb	r3, [r7, #14]
 800c36c:	461a      	mov	r2, r3
 800c36e:	6839      	ldr	r1, [r7, #0]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f843 	bl	800c3fc <ackCommand>
		}
		break;
 800c376:	e037      	b.n	800c3e8 <executeCommand+0x828>
	case commandSetSmdMode:
		/* Extract value */
		value8 = *(uint8_t *)vc_vector_at(command,1);
 800c378:	2101      	movs	r1, #1
 800c37a:	6838      	ldr	r0, [r7, #0]
 800c37c:	f000 fe83 	bl	800d086 <vc_vector_at>
 800c380:	4603      	mov	r3, r0
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	73bb      	strb	r3, [r7, #14]
		setSmdMode(&IMU, value8);
 800c386:	7bbb      	ldrb	r3, [r7, #14]
 800c388:	4619      	mov	r1, r3
 800c38a:	481b      	ldr	r0, [pc, #108]	; (800c3f8 <executeCommand+0x838>)
 800c38c:	f000 fad1 	bl	800c932 <setSmdMode>
		ackCommand(ProtocolStruct, command, OMD_COMM_ACK_OK);
 800c390:	2210      	movs	r2, #16
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f831 	bl	800c3fc <ackCommand>
		break;
 800c39a:	e028      	b.n	800c3ee <executeCommand+0x82e>
	case commandGetSmdMode:
		/* Get requested value */
		if (getSmdMode(&IMU, &value8) == HAL_OK)
 800c39c:	f107 030e 	add.w	r3, r7, #14
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	4815      	ldr	r0, [pc, #84]	; (800c3f8 <executeCommand+0x838>)
 800c3a4:	f000 fae0 	bl	800c968 <getSmdMode>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d11e      	bne.n	800c3ec <executeCommand+0x82c>
		{
			ackCommand(ProtocolStruct, command, value8);
 800c3ae:	7bbb      	ldrb	r3, [r7, #14]
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	6839      	ldr	r1, [r7, #0]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 f821 	bl	800c3fc <ackCommand>
		}
		break;
 800c3ba:	e017      	b.n	800c3ec <executeCommand+0x82c>
	default:

		break;
 800c3bc:	bf00      	nop
 800c3be:	e016      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3c0:	bf00      	nop
 800c3c2:	e014      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3c4:	bf00      	nop
 800c3c6:	e012      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3c8:	bf00      	nop
 800c3ca:	e010      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3cc:	bf00      	nop
 800c3ce:	e00e      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3d0:	bf00      	nop
 800c3d2:	e00c      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3d4:	bf00      	nop
 800c3d6:	e00a      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3d8:	bf00      	nop
 800c3da:	e008      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3dc:	bf00      	nop
 800c3de:	e006      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3e0:	bf00      	nop
 800c3e2:	e004      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3e4:	bf00      	nop
 800c3e6:	e002      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3e8:	bf00      	nop
 800c3ea:	e000      	b.n	800c3ee <executeCommand+0x82e>
		break;
 800c3ec:	bf00      	nop
	}
}
 800c3ee:	bf00      	nop
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	20000300 	.word	0x20000300

0800c3fc <ackCommand>:
	}
	osMutexRelease(ProtocolStruct->m_TxQueueMutexHandle);
}

void ackCommand(OMD_Protocol_t *ProtocolStruct, vc_vector* command, uint8_t result)
{
 800c3fc:	b590      	push	{r4, r7, lr}
 800c3fe:	b08d      	sub	sp, #52	; 0x34
 800c400:	af02      	add	r7, sp, #8
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	4613      	mov	r3, r2
 800c408:	71fb      	strb	r3, [r7, #7]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800c40a:	2300      	movs	r3, #0
 800c40c:	61bb      	str	r3, [r7, #24]
	vc_vector* transmitData = vc_vector_create(3, sizeof(uint8_t), NULL);
 800c40e:	2200      	movs	r2, #0
 800c410:	2101      	movs	r1, #1
 800c412:	2003      	movs	r0, #3
 800c414:	f000 fe01 	bl	800d01a <vc_vector_create>
 800c418:	6238      	str	r0, [r7, #32]
	vc_vector* encodedTransmitData = vc_vector_create(3, sizeof(uint8_t), NULL);
 800c41a:	2200      	movs	r2, #0
 800c41c:	2101      	movs	r1, #1
 800c41e:	2003      	movs	r0, #3
 800c420:	f000 fdfb 	bl	800d01a <vc_vector_create>
 800c424:	61f8      	str	r0, [r7, #28]
	uint8_t ackCommand = commandAck;
 800c426:	23ac      	movs	r3, #172	; 0xac
 800c428:	75fb      	strb	r3, [r7, #23]

	//Create ACK packet
	vc_vector_push_back(transmitData, &ackCommand);
 800c42a:	f107 0317 	add.w	r3, r7, #23
 800c42e:	4619      	mov	r1, r3
 800c430:	6a38      	ldr	r0, [r7, #32]
 800c432:	f000 ff59 	bl	800d2e8 <vc_vector_push_back>
	vc_vector_push_back(transmitData, (uint8_t *)vc_vector_front(command));
 800c436:	68b8      	ldr	r0, [r7, #8]
 800c438:	f000 fe38 	bl	800d0ac <vc_vector_front>
 800c43c:	4603      	mov	r3, r0
 800c43e:	4619      	mov	r1, r3
 800c440:	6a38      	ldr	r0, [r7, #32]
 800c442:	f000 ff51 	bl	800d2e8 <vc_vector_push_back>
	vc_vector_push_back(transmitData, &result);
 800c446:	1dfb      	adds	r3, r7, #7
 800c448:	4619      	mov	r1, r3
 800c44a:	6a38      	ldr	r0, [r7, #32]
 800c44c:	f000 ff4c 	bl	800d2e8 <vc_vector_push_back>

	//Clear command input vector so as to prevent bugs in case of multiple ackCommand call in the same variable scope.
	vc_vector_clear(command);
 800c450:	68b8      	ldr	r0, [r7, #8]
 800c452:	f000 fe93 	bl	800d17c <vc_vector_clear>

	omdEncode(transmitData, encodedTransmitData);
 800c456:	69f9      	ldr	r1, [r7, #28]
 800c458:	6a38      	ldr	r0, [r7, #32]
 800c45a:	f000 fb2b 	bl	800cab4 <omdEncode>

	//Send packet to usb tx task
	osMutexWait(ProtocolStruct->m_TxQueueMutexHandle, osWaitForever);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f04f 31ff 	mov.w	r1, #4294967295
 800c466:	4618      	mov	r0, r3
 800c468:	f00d fce0 	bl	8019e2c <osMutexWait>
	for ( uint8_t i = 0; i < vc_vector_count(encodedTransmitData); i++)
 800c46c:	2300      	movs	r3, #0
 800c46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c472:	e013      	b.n	800c49c <ackCommand+0xa0>
	{
		xQueueGenericSend(usb_TX_Queue, (uint8_t *)vc_vector_at(encodedTransmitData,i), osWaitForever, queueSEND_TO_BACK);
 800c474:	4b17      	ldr	r3, [pc, #92]	; (800c4d4 <ackCommand+0xd8>)
 800c476:	681c      	ldr	r4, [r3, #0]
 800c478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c47c:	4619      	mov	r1, r3
 800c47e:	69f8      	ldr	r0, [r7, #28]
 800c480:	f000 fe01 	bl	800d086 <vc_vector_at>
 800c484:	4601      	mov	r1, r0
 800c486:	2300      	movs	r3, #0
 800c488:	f04f 32ff 	mov.w	r2, #4294967295
 800c48c:	4620      	mov	r0, r4
 800c48e:	f00e f841 	bl	801a514 <xQueueGenericSend>
	for ( uint8_t i = 0; i < vc_vector_count(encodedTransmitData); i++)
 800c492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c496:	3301      	adds	r3, #1
 800c498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c49c:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800c4a0:	69f8      	ldr	r0, [r7, #28]
 800c4a2:	f000 fe3f 	bl	800d124 <vc_vector_count>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	429c      	cmp	r4, r3
 800c4aa:	d3e3      	bcc.n	800c474 <ackCommand+0x78>
	}
	osMutexRelease(ProtocolStruct->m_TxQueueMutexHandle);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f00d fd09 	bl	8019ec8 <osMutexRelease>


	//Notify usb tx task about new available packet
	xTaskNotifyFromISR(UsbTxTaskHandle, AC1_Notify_NewDataAvaiable, eSetBits, &xHigherPriorityTaskWoken);
 800c4b6:	4b08      	ldr	r3, [pc, #32]	; (800c4d8 <ackCommand+0xdc>)
 800c4b8:	6818      	ldr	r0, [r3, #0]
 800c4ba:	f107 0318 	add.w	r3, r7, #24
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	2104      	movs	r1, #4
 800c4c6:	f00f ff91 	bl	801c3ec <xTaskGenericNotifyFromISR>
}
 800c4ca:	bf00      	nop
 800c4cc:	372c      	adds	r7, #44	; 0x2c
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd90      	pop	{r4, r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20006bdc 	.word	0x20006bdc
 800c4d8:	20005a80 	.word	0x20005a80

0800c4dc <saveUserConfig>:
	//Notify usb tx task about new available packet
	xTaskGenericNotify(UsbTxTaskHandle, AC1_Notify_NewDataAvaiable, eSetBits, NULL);
}

void saveUserConfig(void)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	af00      	add	r7, sp, #0
	xTaskNotify(MainTaskHandle, AC1_Notify_SaveConfig, eSetBits);
 800c4e0:	4b04      	ldr	r3, [pc, #16]	; (800c4f4 <saveUserConfig+0x18>)
 800c4e2:	6818      	ldr	r0, [r3, #0]
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	2140      	movs	r1, #64	; 0x40
 800c4ea:	f00f fec1 	bl	801c270 <xTaskGenericNotify>
}
 800c4ee:	bf00      	nop
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	20005a78 	.word	0x20005a78

0800c4f8 <setConfigMode>:

void setConfigMode(uint8_t EnableState)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	71fb      	strb	r3, [r7, #7]
	if (EnableState == 0)
 800c502:	79fb      	ldrb	r3, [r7, #7]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10a      	bne.n	800c51e <setConfigMode+0x26>
	{
		__IMU_TURN_ON(&IMU);
 800c508:	480c      	ldr	r0, [pc, #48]	; (800c53c <setConfigMode+0x44>)
 800c50a:	f7fd fd29 	bl	8009f60 <__IMU_TURN_ON>
		xTaskNotify(MainTaskHandle, AC1_Notify_AnalysisON, eSetBits);
 800c50e:	4b0c      	ldr	r3, [pc, #48]	; (800c540 <setConfigMode+0x48>)
 800c510:	6818      	ldr	r0, [r3, #0]
 800c512:	2300      	movs	r3, #0
 800c514:	2201      	movs	r2, #1
 800c516:	2110      	movs	r1, #16
 800c518:	f00f feaa 	bl	801c270 <xTaskGenericNotify>
	else
	{
		__IMU_TURN_OFF(&IMU);
		xTaskNotify(MainTaskHandle, AC1_Notify_AnalysisOFF, eSetBits);
	}
}
 800c51c:	e009      	b.n	800c532 <setConfigMode+0x3a>
		__IMU_TURN_OFF(&IMU);
 800c51e:	4807      	ldr	r0, [pc, #28]	; (800c53c <setConfigMode+0x44>)
 800c520:	f7fd fd3b 	bl	8009f9a <__IMU_TURN_OFF>
		xTaskNotify(MainTaskHandle, AC1_Notify_AnalysisOFF, eSetBits);
 800c524:	4b06      	ldr	r3, [pc, #24]	; (800c540 <setConfigMode+0x48>)
 800c526:	6818      	ldr	r0, [r3, #0]
 800c528:	2300      	movs	r3, #0
 800c52a:	2201      	movs	r2, #1
 800c52c:	2120      	movs	r1, #32
 800c52e:	f00f fe9f 	bl	801c270 <xTaskGenericNotify>
}
 800c532:	bf00      	nop
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	20000300 	.word	0x20000300
 800c540:	20005a78 	.word	0x20005a78

0800c544 <getConfigMode>:
uint8_t getConfigMode()
{
 800c544:	b480      	push	{r7}
 800c546:	af00      	add	r7, sp, #0
	return !AC1_StatusWord.IMUAnalysisON;
 800c548:	4b04      	ldr	r3, [pc, #16]	; (800c55c <getConfigMode+0x18>)
 800c54a:	791b      	ldrb	r3, [r3, #4]
 800c54c:	f083 0301 	eor.w	r3, r3, #1
 800c550:	b2db      	uxtb	r3, r3
}
 800c552:	4618      	mov	r0, r3
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr
 800c55c:	200047dc 	.word	0x200047dc

0800c560 <setTelemetryEn>:
void setTelemetryEn(uint8_t EnableState)
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	71fb      	strb	r3, [r7, #7]
//	xTaskNotify(MainTaskHandle, AC1_Notify_TelemetryEnChange, eSetBits);
	if (EnableState)
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d004      	beq.n	800c57a <setTelemetryEn+0x1a>
	{
		IMU.TelemetryON = 1;
 800c570:	4b07      	ldr	r3, [pc, #28]	; (800c590 <setTelemetryEn+0x30>)
 800c572:	2201      	movs	r2, #1
 800c574:	f883 2823 	strb.w	r2, [r3, #2083]	; 0x823
	}
	else
	{
		IMU.TelemetryON = 0;
	}
}
 800c578:	e003      	b.n	800c582 <setTelemetryEn+0x22>
		IMU.TelemetryON = 0;
 800c57a:	4b05      	ldr	r3, [pc, #20]	; (800c590 <setTelemetryEn+0x30>)
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2823 	strb.w	r2, [r3, #2083]	; 0x823
}
 800c582:	bf00      	nop
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop
 800c590:	20000300 	.word	0x20000300

0800c594 <getTelemetryEn>:
uint8_t getTelemetryEn()
{
 800c594:	b480      	push	{r7}
 800c596:	af00      	add	r7, sp, #0
	return IMU.TelemetryON;
 800c598:	4b03      	ldr	r3, [pc, #12]	; (800c5a8 <getTelemetryEn+0x14>)
 800c59a:	f893 3823 	ldrb.w	r3, [r3, #2083]	; 0x823
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	20000300 	.word	0x20000300

0800c5ac <setAccelODR>:
 *
 * @return Status of operation (0 = success, 1 = error)
 */

uint8_t setAccelODR(IIM42652_t *imu, uint8_t AccelODR)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetAccelODR(imu, AccelODR);
 800c5b8:	78fb      	ldrb	r3, [r7, #3]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7fe fb23 	bl	800ac08 <IIM42652_SetAccelODR>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d105      	bne.n	800c5d8 <setAccelODR+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_ACC_ODR = AccelODR;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d4:	78fa      	ldrb	r2, [r7, #3]
 800c5d6:	705a      	strb	r2, [r3, #1]
	}
	return status;
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <getAccelODR>:
uint8_t getAccelODR(IIM42652_t *imu, uint8_t* value)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b082      	sub	sp, #8
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	6039      	str	r1, [r7, #0]
	return IIM42652_GetAccelODR(imu, value);
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7fe fb47 	bl	800ac82 <IIM42652_GetAccelODR>
 800c5f4:	4603      	mov	r3, r0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <setGyroODR>:
uint8_t setGyroODR(IIM42652_t *imu, uint8_t GyroODR)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	460b      	mov	r3, r1
 800c608:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetGyroODR(imu, GyroODR);
 800c60a:	78fb      	ldrb	r3, [r7, #3]
 800c60c:	4619      	mov	r1, r3
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f7fe faa9 	bl	800ab66 <IIM42652_SetGyroODR>
 800c614:	4603      	mov	r3, r0
 800c616:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c618:	7bfb      	ldrb	r3, [r7, #15]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d105      	bne.n	800c62a <setGyroODR+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_GYRO_ODR = GyroODR;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c626:	78fa      	ldrb	r2, [r7, #3]
 800c628:	711a      	strb	r2, [r3, #4]
	}
	return status;
 800c62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <getGyroODR>:
uint8_t getGyroODR(IIM42652_t *imu, uint8_t* value)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
	return IIM42652_GetGyroODR(imu, value);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7fe facd 	bl	800abe0 <IIM42652_GetGyroODR>
 800c646:	4603      	mov	r3, r0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <setAccelFSR>:
uint8_t setAccelFSR(IIM42652_t *imu, uint8_t AccelFSR)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	460b      	mov	r3, r1
 800c65a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetAccelFSR(imu, AccelFSR);
 800c65c:	78fb      	ldrb	r3, [r7, #3]
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7fe fa41 	bl	800aae8 <IIM42652_SetAccelFSR>
 800c666:	4603      	mov	r3, r0
 800c668:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c66a:	7bfb      	ldrb	r3, [r7, #15]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d105      	bne.n	800c67c <setAccelFSR+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_ACC_FSR = AccelFSR;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c678:	78fa      	ldrb	r2, [r7, #3]
 800c67a:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <getAccelFSR>:
uint8_t getAccelFSR(IIM42652_t *imu, uint8_t* value)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b082      	sub	sp, #8
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	6039      	str	r1, [r7, #0]
	return IIM42652_GetAccelFSR(imu, value);
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7fe fa53 	bl	800ab3e <IIM42652_GetAccelFSR>
 800c698:	4603      	mov	r3, r0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <setGyroFSR>:
uint8_t setGyroFSR(IIM42652_t *imu, uint8_t GyroFSR)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b084      	sub	sp, #16
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetGyroFSR(imu, GyroFSR);
 800c6ae:	78fb      	ldrb	r3, [r7, #3]
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7fe f9d9 	bl	800aa6a <IIM42652_SetGyroFSR>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d105      	bne.n	800c6ce <setGyroFSR+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_GYRO_FSR = GyroFSR;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ca:	78fa      	ldrb	r2, [r7, #3]
 800c6cc:	70da      	strb	r2, [r3, #3]
	}
	return status;
 800c6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <getGyroFSR>:
uint8_t getGyroFSR(IIM42652_t *imu, uint8_t* value)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
	return IIM42652_GetGyroFSR(imu, value);
 800c6e2:	6839      	ldr	r1, [r7, #0]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7fe f9eb 	bl	800aac0 <IIM42652_GetGyroFSR>
 800c6ea:	4603      	mov	r3, r0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <setAccelBW>:
uint8_t setAccelBW(IIM42652_t *imu, uint8_t AccelBW)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetAccelBW(imu, AccelBW);
 800c700:	78fb      	ldrb	r3, [r7, #3]
 800c702:	4619      	mov	r1, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7fe fad0 	bl	800acaa <IIM42652_SetAccelBW>
 800c70a:	4603      	mov	r3, r0
 800c70c:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d105      	bne.n	800c720 <setAccelBW+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_ACC_FILT_BW = AccelBW;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c71c:	78fa      	ldrb	r2, [r7, #3]
 800c71e:	709a      	strb	r2, [r3, #2]
	}
	return status;
 800c720:	7bfb      	ldrb	r3, [r7, #15]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <getAccelBW>:
uint8_t getAccelBW(IIM42652_t *imu, uint8_t* value)
{
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b082      	sub	sp, #8
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	6039      	str	r1, [r7, #0]
	return IIM42652_GetAccelBW(imu, value);
 800c734:	6839      	ldr	r1, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7fe fada 	bl	800acf0 <IIM42652_GetAccelBW>
 800c73c:	4603      	mov	r3, r0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <setGyroBW>:
uint8_t setGyroBW(IIM42652_t *imu, uint8_t GyroBW)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b084      	sub	sp, #16
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	460b      	mov	r3, r1
 800c750:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetGyroBW(imu, GyroBW);
 800c752:	78fb      	ldrb	r3, [r7, #3]
 800c754:	4619      	mov	r1, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f7fe fade 	bl	800ad18 <IIM42652_SetGyroBW>
 800c75c:	4603      	mov	r3, r0
 800c75e:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c760:	7bfb      	ldrb	r3, [r7, #15]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d105      	bne.n	800c772 <setGyroBW+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_GYRO_FILT_BW = GyroBW;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c76c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c76e:	78fa      	ldrb	r2, [r7, #3]
 800c770:	715a      	strb	r2, [r3, #5]
	}
	return status;
 800c772:	7bfb      	ldrb	r3, [r7, #15]
}
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <getGyroBW>:
uint8_t getGyroBW(IIM42652_t *imu, uint8_t* value)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
	return IIM42652_GetGyroBW(imu, value);
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7fe fae8 	bl	800ad5e <IIM42652_GetGyroBW>
 800c78e:	4603      	mov	r3, r0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <setWomXth>:
uint8_t setWomXth(IIM42652_t *imu, uint8_t threshold)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetWomXTh(imu, threshold);
 800c7a4:	78fb      	ldrb	r3, [r7, #3]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7fd ffb2 	bl	800a712 <IIM42652_SetWomXTh>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d105      	bne.n	800c7c4 <setWomXth+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_WOM_X_TH = threshold;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7c0:	78fa      	ldrb	r2, [r7, #3]
 800c7c2:	719a      	strb	r2, [r3, #6]
	}
	return status;
 800c7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <getWomXth>:
uint8_t getWomXth(IIM42652_t *imu, uint8_t* value)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b082      	sub	sp, #8
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
	return IIM42652_GetWomXTh(imu, value);
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7fd ffb5 	bl	800a74a <IIM42652_GetWomXTh>
 800c7e0:	4603      	mov	r3, r0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <setWomYth>:
uint8_t setWomYth(IIM42652_t *imu, uint8_t threshold)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b084      	sub	sp, #16
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetWomYTh(imu, threshold);
 800c7f6:	78fb      	ldrb	r3, [r7, #3]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7fd ffb5 	bl	800a76a <IIM42652_SetWomYTh>
 800c800:	4603      	mov	r3, r0
 800c802:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c804:	7bfb      	ldrb	r3, [r7, #15]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d105      	bne.n	800c816 <setWomYth+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_WOM_Y_TH = threshold;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c812:	78fa      	ldrb	r2, [r7, #3]
 800c814:	71da      	strb	r2, [r3, #7]
	}
	return status;
 800c816:	7bfb      	ldrb	r3, [r7, #15]
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <getWomYth>:
uint8_t getWomYth(IIM42652_t *imu, uint8_t* value)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
	return IIM42652_GetWomYTh(imu, value);
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7fd ffb8 	bl	800a7a2 <IIM42652_GetWomYTh>
 800c832:	4603      	mov	r3, r0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <setWomZth>:
uint8_t setWomZth(IIM42652_t *imu, uint8_t threshold)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetWomZTh(imu, threshold);
 800c848:	78fb      	ldrb	r3, [r7, #3]
 800c84a:	4619      	mov	r1, r3
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7fd ffb8 	bl	800a7c2 <IIM42652_SetWomZTh>
 800c852:	4603      	mov	r3, r0
 800c854:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c856:	7bfb      	ldrb	r3, [r7, #15]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d105      	bne.n	800c868 <setWomZth+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_WOM_Z_TH = threshold;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c864:	78fa      	ldrb	r2, [r7, #3]
 800c866:	721a      	strb	r2, [r3, #8]
	}
	return status;
 800c868:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <getWomZth>:
uint8_t getWomZth(IIM42652_t *imu, uint8_t* value)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b082      	sub	sp, #8
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	6039      	str	r1, [r7, #0]
	return IIM42652_GetWomZTh(imu, value);
 800c87c:	6839      	ldr	r1, [r7, #0]
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7fd ffbb 	bl	800a7fa <IIM42652_GetWomZTh>
 800c884:	4603      	mov	r3, r0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <setWomIntMode>:
uint8_t setWomIntMode(IIM42652_t *imu, uint8_t mode)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b084      	sub	sp, #16
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	460b      	mov	r3, r1
 800c898:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetWOMIntMode(imu, mode);
 800c89a:	78fb      	ldrb	r3, [r7, #3]
 800c89c:	4619      	mov	r1, r3
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f7fd ffbb 	bl	800a81a <IIM42652_SetWOMIntMode>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c8a8:	7bfb      	ldrb	r3, [r7, #15]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d105      	bne.n	800c8ba <setWomIntMode+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_WOM_INT_MODE = mode;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b6:	78fa      	ldrb	r2, [r7, #3]
 800c8b8:	725a      	strb	r2, [r3, #9]
	}
	return status;
 800c8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <getWomIntMode>:
uint8_t getWomIntMode(IIM42652_t *imu, uint8_t* value)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
	return IIM42652_GetWOMIntMode(imu, value);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f7fd ffb9 	bl	800a848 <IIM42652_GetWOMIntMode>
 800c8d6:	4603      	mov	r3, r0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <setWomMode>:
uint8_t setWomMode(IIM42652_t *imu, uint8_t mode)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetWOMMode(imu, mode);
 800c8ec:	78fb      	ldrb	r3, [r7, #3]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7fd ffbd 	bl	800a870 <IIM42652_SetWOMMode>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d105      	bne.n	800c90c <setWomMode+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_WOM_MODE = mode;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c908:	78fa      	ldrb	r2, [r7, #3]
 800c90a:	729a      	strb	r2, [r3, #10]
	}
	return status;
 800c90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <getWomMode>:
uint8_t getWomMode(IIM42652_t *imu, uint8_t* value)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b082      	sub	sp, #8
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	6039      	str	r1, [r7, #0]
	return IIM42652_GetWOMMode(imu, value);
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f7fd ffbb 	bl	800a89e <IIM42652_GetWOMMode>
 800c928:	4603      	mov	r3, r0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <setSmdMode>:
uint8_t setSmdMode(IIM42652_t *imu, uint8_t mode)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	460b      	mov	r3, r1
 800c93c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = IIM42652_SetSMDMode(imu, mode);
 800c93e:	78fb      	ldrb	r3, [r7, #3]
 800c940:	4619      	mov	r1, r3
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7fd ffbf 	bl	800a8c6 <IIM42652_SetSMDMode>
 800c948:	4603      	mov	r3, r0
 800c94a:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK)
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d105      	bne.n	800c95e <setSmdMode+0x2c>
	{
		imu->m_actUserConfig->OMD_CONFIG_SMD_MODE = mode;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c95a:	78fa      	ldrb	r2, [r7, #3]
 800c95c:	72da      	strb	r2, [r3, #11]
	}
	return status;
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <getSmdMode>:
uint8_t getSmdMode(IIM42652_t *imu, uint8_t* value)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
	return IIM42652_GetSMDMode(imu, value);
 800c972:	6839      	ldr	r1, [r7, #0]
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7fd ffbd 	bl	800a8f4 <IIM42652_GetSMDMode>
 800c97a:	4603      	mov	r3, r0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <omdEncodeBuf>:
 *                 operation and the length of the result (that was written to
 *                 dst_buf_ptr)
 */
cobs_encode_result omdEncodeBuf(void * dst_buf_ptr, size_t dst_buf_len,
                               const void * src_ptr, size_t src_len)
{
 800c984:	b480      	push	{r7}
 800c986:	b08f      	sub	sp, #60	; 0x3c
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	603b      	str	r3, [r7, #0]
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
 800c992:	2300      	movs	r3, #0
 800c994:	613b      	str	r3, [r7, #16]
 800c996:	2300      	movs	r3, #0
 800c998:	753b      	strb	r3, [r7, #20]
    const uint8_t *     src_read_ptr        = src_ptr;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	637b      	str	r3, [r7, #52]	; 0x34
    const uint8_t *     src_end_ptr         = src_read_ptr + src_len;
 800c99e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a2:	4413      	add	r3, r2
 800c9a4:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *           dst_buf_start_ptr   = dst_buf_ptr;
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	623b      	str	r3, [r7, #32]
    uint8_t *           dst_buf_end_ptr     = dst_buf_start_ptr + dst_buf_len;
 800c9aa:	6a3a      	ldr	r2, [r7, #32]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	61fb      	str	r3, [r7, #28]
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t             src_byte            = 0;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	76fb      	strb	r3, [r7, #27]
    uint8_t             search_len          = 1;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d002      	beq.n	800c9d2 <omdEncodeBuf+0x4e>
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d10a      	bne.n	800c9e8 <omdEncodeBuf+0x64>
    {
        result.status = COBS_ENCODE_NULL_POINTER;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	753b      	strb	r3, [r7, #20]
        return result;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	461a      	mov	r2, r3
 800c9da:	f107 0310 	add.w	r3, r7, #16
 800c9de:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c9e2:	e882 0003 	stmia.w	r2, {r0, r1}
 800c9e6:	e05f      	b.n	800caa8 <omdEncodeBuf+0x124>
    }

    if (src_len != 0)
 800c9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d040      	beq.n	800ca70 <omdEncodeBuf+0xec>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
 800c9ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d305      	bcc.n	800ca02 <omdEncodeBuf+0x7e>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 800c9f6:	7d3b      	ldrb	r3, [r7, #20]
 800c9f8:	f043 0302 	orr.w	r3, r3, #2
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	753b      	strb	r3, [r7, #20]
                break;
 800ca00:	e036      	b.n	800ca70 <omdEncodeBuf+0xec>
            }

            src_byte = *src_read_ptr++;
 800ca02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca04:	1c5a      	adds	r2, r3, #1
 800ca06:	637a      	str	r2, [r7, #52]	; 0x34
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	76fb      	strb	r3, [r7, #27]
            if (src_byte == 0)
 800ca0c:	7efb      	ldrb	r3, [r7, #27]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10f      	bne.n	800ca32 <omdEncodeBuf+0xae>
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
 800ca12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca14:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ca18:	701a      	strb	r2, [r3, #0]
                dst_code_write_ptr = dst_write_ptr++;
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	1c5a      	adds	r2, r3, #1
 800ca1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca20:	633b      	str	r3, [r7, #48]	; 0x30
                search_len = 1;
 800ca22:	2301      	movs	r3, #1
 800ca24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                if (src_read_ptr >= src_end_ptr)
 800ca28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d3de      	bcc.n	800c9ee <omdEncodeBuf+0x6a>
                {
                    break;
 800ca30:	e01e      	b.n	800ca70 <omdEncodeBuf+0xec>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca34:	1c5a      	adds	r2, r3, #1
 800ca36:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca38:	7efa      	ldrb	r2, [r7, #27]
 800ca3a:	701a      	strb	r2, [r3, #0]
                search_len++;
 800ca3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca40:	3301      	adds	r3, #1
 800ca42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                if (src_read_ptr >= src_end_ptr)
 800ca46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d20f      	bcs.n	800ca6e <omdEncodeBuf+0xea>
                {
                    break;
                }
                if (search_len == 0xFF)
 800ca4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca52:	2bff      	cmp	r3, #255	; 0xff
 800ca54:	d1cb      	bne.n	800c9ee <omdEncodeBuf+0x6a>
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
 800ca56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca58:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ca5c:	701a      	strb	r2, [r3, #0]
                    dst_code_write_ptr = dst_write_ptr++;
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	1c5a      	adds	r2, r3, #1
 800ca62:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca64:	633b      	str	r3, [r7, #48]	; 0x30
                    search_len = 1;
 800ca66:	2301      	movs	r3, #1
 800ca68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (dst_write_ptr >= dst_buf_end_ptr)
 800ca6c:	e7bf      	b.n	800c9ee <omdEncodeBuf+0x6a>
                    break;
 800ca6e:	bf00      	nop

    /* We've reached the end of the source data (or possibly run out of output buffer)
     * Finalise the remaining output. In particular, write the code (length) byte.
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
 800ca70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d307      	bcc.n	800ca88 <omdEncodeBuf+0x104>
    {
        /* We've run out of output buffer to write the code byte. */
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
 800ca78:	7d3b      	ldrb	r3, [r7, #20]
 800ca7a:	f043 0302 	orr.w	r3, r3, #2
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	753b      	strb	r3, [r7, #20]
        dst_write_ptr = dst_buf_end_ptr;
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca86:	e003      	b.n	800ca90 <omdEncodeBuf+0x10c>
    }
    else
    {
        /* Write the last code (length) byte. */
        *dst_code_write_ptr = search_len;
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ca8e:	701a      	strb	r2, [r3, #0]
    }

    /* Calculate the output length, from the value of dst_code_write_ptr */
    result.out_len = dst_write_ptr - dst_buf_start_ptr;
 800ca90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca92:	6a3b      	ldr	r3, [r7, #32]
 800ca94:	1ad3      	subs	r3, r2, r3
 800ca96:	613b      	str	r3, [r7, #16]

    return result;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	f107 0310 	add.w	r3, r7, #16
 800caa0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800caa4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	373c      	adds	r7, #60	; 0x3c
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <omdEncode>:
    return result;
}


void omdEncode(vc_vector* rawData, vc_vector* encodedData)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
    int32_t startOfCurrBlock = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	617b      	str	r3, [r7, #20]
    uint8_t numElementsInCurrBlock = 0;
 800cac2:	2300      	movs	r3, #0
 800cac4:	74fb      	strb	r3, [r7, #19]
    uint8_t tempVal = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	72fb      	strb	r3, [r7, #11]

    uint8_t* it = vc_vector_begin(rawData);
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fafa 	bl	800d0c4 <vc_vector_begin>
 800cad0:	60f8      	str	r0, [r7, #12]

    // Create space for first (this will be
    // overwritten once count to next 0x00 is known)
    char zeroVal = 0x00;
 800cad2:	2300      	movs	r3, #0
 800cad4:	72bb      	strb	r3, [r7, #10]
    vc_vector_push_back(encodedData, &zeroVal);
 800cad6:	f107 030a 	add.w	r3, r7, #10
 800cada:	4619      	mov	r1, r3
 800cadc:	6838      	ldr	r0, [r7, #0]
 800cade:	f000 fc03 	bl	800d2e8 <vc_vector_push_back>

    while (it != vc_vector_end(rawData))
 800cae2:	e043      	b.n	800cb6c <omdEncode+0xb8>
    {
        if (*it == 0x00)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d119      	bne.n	800cb20 <omdEncode+0x6c>
        {
            // Save the number of elements before the next 0x00 into
            // the output
        	tempVal = (numElementsInCurrBlock + 1);
 800caec:	7cfb      	ldrb	r3, [r7, #19]
 800caee:	3301      	adds	r3, #1
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	72fb      	strb	r3, [r7, #11]
        	vc_vector_replace(encodedData, startOfCurrBlock, &tempVal);
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f107 020b 	add.w	r2, r7, #11
 800cafa:	4619      	mov	r1, r3
 800cafc:	6838      	ldr	r0, [r7, #0]
 800cafe:	f000 fc0a 	bl	800d316 <vc_vector_replace>

            // Add placeholder at start of next block
            vc_vector_push_back(encodedData, &zeroVal);
 800cb02:	f107 030a 	add.w	r3, r7, #10
 800cb06:	4619      	mov	r1, r3
 800cb08:	6838      	ldr	r0, [r7, #0]
 800cb0a:	f000 fbed 	bl	800d2e8 <vc_vector_push_back>

            startOfCurrBlock = vc_vector_size(encodedData) - 1;
 800cb0e:	6838      	ldr	r0, [r7, #0]
 800cb10:	f000 fb14 	bl	800d13c <vc_vector_size>
 800cb14:	4603      	mov	r3, r0
 800cb16:	3b01      	subs	r3, #1
 800cb18:	617b      	str	r3, [r7, #20]

            // Reset count of num. elements in current block
            numElementsInCurrBlock = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	74fb      	strb	r3, [r7, #19]
 800cb1e:	e022      	b.n	800cb66 <omdEncode+0xb2>

        }
        else
        {
        	vc_vector_push_back(encodedData, it);
 800cb20:	68f9      	ldr	r1, [r7, #12]
 800cb22:	6838      	ldr	r0, [r7, #0]
 800cb24:	f000 fbe0 	bl	800d2e8 <vc_vector_push_back>
            numElementsInCurrBlock++;
 800cb28:	7cfb      	ldrb	r3, [r7, #19]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	74fb      	strb	r3, [r7, #19]

            if(numElementsInCurrBlock == 254) {
 800cb2e:	7cfb      	ldrb	r3, [r7, #19]
 800cb30:	2bfe      	cmp	r3, #254	; 0xfe
 800cb32:	d118      	bne.n	800cb66 <omdEncode+0xb2>
            	tempVal = (numElementsInCurrBlock + 1);
 800cb34:	7cfb      	ldrb	r3, [r7, #19]
 800cb36:	3301      	adds	r3, #1
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	72fb      	strb	r3, [r7, #11]
            	vc_vector_replace(encodedData, startOfCurrBlock, &tempVal);
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	f107 020b 	add.w	r2, r7, #11
 800cb42:	4619      	mov	r1, r3
 800cb44:	6838      	ldr	r0, [r7, #0]
 800cb46:	f000 fbe6 	bl	800d316 <vc_vector_replace>

                // Add placeholder at start of next block
            	vc_vector_push_back(encodedData, &zeroVal);
 800cb4a:	f107 030a 	add.w	r3, r7, #10
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6838      	ldr	r0, [r7, #0]
 800cb52:	f000 fbc9 	bl	800d2e8 <vc_vector_push_back>

            	startOfCurrBlock = vc_vector_size(encodedData) - 1;
 800cb56:	6838      	ldr	r0, [r7, #0]
 800cb58:	f000 faf0 	bl	800d13c <vc_vector_size>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	617b      	str	r3, [r7, #20]

                // Reset count of num. elements in current block
                numElementsInCurrBlock = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	74fb      	strb	r3, [r7, #19]
            }

        }
        it++;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	60fb      	str	r3, [r7, #12]
    while (it != vc_vector_end(rawData))
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fab5 	bl	800d0dc <vc_vector_end>
 800cb72:	4602      	mov	r2, r0
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d1b4      	bne.n	800cae4 <omdEncode+0x30>
    }

    // Finish the last block
    // Insert pointer to the terminating 0x00 character
    tempVal = (numElementsInCurrBlock + 1);
 800cb7a:	7cfb      	ldrb	r3, [r7, #19]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	72fb      	strb	r3, [r7, #11]
    vc_vector_replace(encodedData, startOfCurrBlock, &tempVal);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f107 020b 	add.w	r2, r7, #11
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6838      	ldr	r0, [r7, #0]
 800cb8c:	f000 fbc3 	bl	800d316 <vc_vector_replace>
    vc_vector_push_back(encodedData, &zeroVal);
 800cb90:	f107 030a 	add.w	r3, r7, #10
 800cb94:	4619      	mov	r1, r3
 800cb96:	6838      	ldr	r0, [r7, #0]
 800cb98:	f000 fba6 	bl	800d2e8 <vc_vector_push_back>
}
 800cb9c:	bf00      	nop
 800cb9e:	3718      	adds	r7, #24
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <omdDecode>:

DecodeStatus omdDecode(vc_vector* encodedData, vc_vector* decodedData)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
	vc_vector_clear(decodedData);
 800cbae:	6838      	ldr	r0, [r7, #0]
 800cbb0:	f000 fae4 	bl	800d17c <vc_vector_clear>

    size_t encodedDataPos = 0;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	60fb      	str	r3, [r7, #12]

    while (encodedDataPos < vc_vector_size(encodedData))
 800cbb8:	e047      	b.n	800cc4a <omdDecode+0xa6>
    {
    	int8_t numElementsInBlock = *((uint8_t *)vc_vector_at(encodedData,encodedDataPos)) - 1;
 800cbba:	68f9      	ldr	r1, [r7, #12]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 fa62 	bl	800d086 <vc_vector_at>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	72bb      	strb	r3, [r7, #10]
        encodedDataPos++;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	60fb      	str	r3, [r7, #12]

        // Copy across all bytes within block
        for (int8_t i = 0; i < numElementsInBlock; i++)
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	72fb      	strb	r3, [r7, #11]
 800cbd6:	e01d      	b.n	800cc14 <omdDecode+0x70>
        {
            uint8_t byteOfData = *((uint8_t *)vc_vector_at(encodedData,encodedDataPos));
 800cbd8:	68f9      	ldr	r1, [r7, #12]
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fa53 	bl	800d086 <vc_vector_at>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	727b      	strb	r3, [r7, #9]
            if (byteOfData == 0x00)
 800cbe6:	7a7b      	ldrb	r3, [r7, #9]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d104      	bne.n	800cbf6 <omdDecode+0x52>
            {
            	vc_vector_clear(decodedData);
 800cbec:	6838      	ldr	r0, [r7, #0]
 800cbee:	f000 fac5 	bl	800d17c <vc_vector_clear>
                return ERROR_ZERO_BYTE_NOT_EXPECTED;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e030      	b.n	800cc58 <omdDecode+0xb4>
            }
            vc_vector_push_back(decodedData, &byteOfData);
 800cbf6:	f107 0309 	add.w	r3, r7, #9
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	6838      	ldr	r0, [r7, #0]
 800cbfe:	f000 fb73 	bl	800d2e8 <vc_vector_push_back>
            encodedDataPos++;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3301      	adds	r3, #1
 800cc06:	60fb      	str	r3, [r7, #12]
        for (int8_t i = 0; i < numElementsInBlock; i++)
 800cc08:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	3301      	adds	r3, #1
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	72fb      	strb	r3, [r7, #11]
 800cc14:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800cc18:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	dbdb      	blt.n	800cbd8 <omdDecode+0x34>
        }

        if (*((uint8_t *)vc_vector_at(encodedData,encodedDataPos)) == 0x00)
 800cc20:	68f9      	ldr	r1, [r7, #12]
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fa2f 	bl	800d086 <vc_vector_at>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d101      	bne.n	800cc34 <omdDecode+0x90>
        {
            // End of packet found!
            return COBS_DECODE_SUCCESS;
 800cc30:	2300      	movs	r3, #0
 800cc32:	e011      	b.n	800cc58 <omdDecode+0xb4>
        // We only add a 0x00 byte to the decoded data
        // IF the num. of elements in block was less than 254.
        // If num. elements in block is max (254), then we know that
        // the block was created due to it reaching maximum size, not because
        // a 0x00 was found
        if((char)numElementsInBlock < 0xFE)
 800cc34:	7abb      	ldrb	r3, [r7, #10]
 800cc36:	2bfd      	cmp	r3, #253	; 0xfd
 800cc38:	d807      	bhi.n	800cc4a <omdDecode+0xa6>
        {
        	uint8_t nullData = 0x00;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	723b      	strb	r3, [r7, #8]
        	vc_vector_push_back(decodedData, &nullData);
 800cc3e:	f107 0308 	add.w	r3, r7, #8
 800cc42:	4619      	mov	r1, r3
 800cc44:	6838      	ldr	r0, [r7, #0]
 800cc46:	f000 fb4f 	bl	800d2e8 <vc_vector_push_back>
    while (encodedDataPos < vc_vector_size(encodedData))
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 fa76 	bl	800d13c <vc_vector_size>
 800cc50:	4602      	mov	r2, r0
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d3b0      	bcc.n	800cbba <omdDecode+0x16>
        }
    }
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <BitCheckW>:
		return 0;
	}
}

uint8_t BitCheckW(uint32_t Word, uint8_t bitPosition)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	70fb      	strb	r3, [r7, #3]
	if(bitPosition > 31)
 800cc6c:	78fb      	ldrb	r3, [r7, #3]
 800cc6e:	2b1f      	cmp	r3, #31
 800cc70:	d901      	bls.n	800cc76 <BitCheckW+0x16>
	{
		return -1;
 800cc72:	23ff      	movs	r3, #255	; 0xff
 800cc74:	e007      	b.n	800cc86 <BitCheckW+0x26>
	}
	return (Word >> bitPosition) & 1U;
 800cc76:	78fb      	ldrb	r3, [r7, #3]
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	f003 0301 	and.w	r3, r3, #1
 800cc84:	b2db      	uxtb	r3, r3
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
	...

0800cc94 <_SAVE_AC1_SETTINGS>:
	}
	return (Byte >> bitPosition) & 1U;
}

uint8_t _SAVE_AC1_SETTINGS(AC1_Config_t actConfig)
{
 800cc94:	b590      	push	{r4, r7, lr}
 800cc96:	b087      	sub	sp, #28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	463c      	mov	r4, r7
 800cc9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int numofwords = (sizeof(actConfig)/4)+((sizeof(actConfig)%4)!=0);
 800cca0:	2304      	movs	r3, #4
 800cca2:	617b      	str	r3, [r7, #20]

	return Flash_Write_Data(USER_DATA_SECTOR_START_ADDRESS, (uint32_t *)&actConfig, numofwords);
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	463b      	mov	r3, r7
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4804      	ldr	r0, [pc, #16]	; (800ccc0 <_SAVE_AC1_SETTINGS+0x2c>)
 800ccae:	f000 f8cb 	bl	800ce48 <Flash_Write_Data>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	b2db      	uxtb	r3, r3
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	371c      	adds	r7, #28
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd90      	pop	{r4, r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	08004000 	.word	0x08004000

0800ccc4 <_LOAD_AC1_SETTINGS>:
uint8_t _LOAD_AC1_SETTINGS(AC1_Config_t *actConfig)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b088      	sub	sp, #32
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
	AC1_Config_t dummyConfig; //Useful only for calculating the number of needed words

	int numofwords = (sizeof(dummyConfig)/4)+((sizeof(dummyConfig)%4)!=0);
 800cccc:	2304      	movs	r3, #4
 800ccce:	61fb      	str	r3, [r7, #28]

	Flash_Read_Data(USER_DATA_SECTOR_START_ADDRESS, (uint32_t *)actConfig, numofwords);
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	6879      	ldr	r1, [r7, #4]
 800ccd8:	4803      	ldr	r0, [pc, #12]	; (800cce8 <_LOAD_AC1_SETTINGS+0x24>)
 800ccda:	f000 f92f 	bl	800cf3c <Flash_Read_Data>
}
 800ccde:	bf00      	nop
 800cce0:	4618      	mov	r0, r3
 800cce2:	3720      	adds	r7, #32
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	08004000 	.word	0x08004000

0800ccec <_USB_SEND_OPT>:
//
//	HAL_FLASH_Lock();
//}

void _USB_SEND_OPT(uint8_t* byteBuf, size_t byteBufLen)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
	static size_t transmitBufSize = 0;

	if ((transmitBufSize + byteBufLen) < APP_TX_DATA_SIZE)
 800ccf6:	4b15      	ldr	r3, [pc, #84]	; (800cd4c <_USB_SEND_OPT+0x60>)
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd02:	d20f      	bcs.n	800cd24 <_USB_SEND_OPT+0x38>
	{
		memcpy(&transmitBuf[transmitBufSize], byteBuf, byteBufLen);
 800cd04:	4b11      	ldr	r3, [pc, #68]	; (800cd4c <_USB_SEND_OPT+0x60>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a11      	ldr	r2, [pc, #68]	; (800cd50 <_USB_SEND_OPT+0x64>)
 800cd0a:	4413      	add	r3, r2
 800cd0c:	683a      	ldr	r2, [r7, #0]
 800cd0e:	6879      	ldr	r1, [r7, #4]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f012 fb6b 	bl	801f3ec <memcpy>
		transmitBufSize += byteBufLen;
 800cd16:	4b0d      	ldr	r3, [pc, #52]	; (800cd4c <_USB_SEND_OPT+0x60>)
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	4a0b      	ldr	r2, [pc, #44]	; (800cd4c <_USB_SEND_OPT+0x60>)
 800cd20:	6013      	str	r3, [r2, #0]
	{
		CDC_Transmit_FS(transmitBuf, transmitBufSize);
		memcpy(&transmitBuf[0], byteBuf, byteBufLen);
		transmitBufSize = byteBufLen;
	}
}
 800cd22:	e00e      	b.n	800cd42 <_USB_SEND_OPT+0x56>
		CDC_Transmit_FS(transmitBuf, transmitBufSize);
 800cd24:	4b09      	ldr	r3, [pc, #36]	; (800cd4c <_USB_SEND_OPT+0x60>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4808      	ldr	r0, [pc, #32]	; (800cd50 <_USB_SEND_OPT+0x64>)
 800cd2e:	f010 fbcb 	bl	801d4c8 <CDC_Transmit_FS>
		memcpy(&transmitBuf[0], byteBuf, byteBufLen);
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	6879      	ldr	r1, [r7, #4]
 800cd36:	4806      	ldr	r0, [pc, #24]	; (800cd50 <_USB_SEND_OPT+0x64>)
 800cd38:	f012 fb58 	bl	801f3ec <memcpy>
		transmitBufSize = byteBufLen;
 800cd3c:	4a03      	ldr	r2, [pc, #12]	; (800cd4c <_USB_SEND_OPT+0x60>)
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	6013      	str	r3, [r2, #0]
}
 800cd42:	bf00      	nop
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	20004fe4 	.word	0x20004fe4
 800cd50:	200047e4 	.word	0x200047e4

0800cd54 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4a2e      	ldr	r2, [pc, #184]	; (800ce1c <GetSector+0xc8>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d806      	bhi.n	800cd76 <GetSector+0x22>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd6e:	d302      	bcc.n	800cd76 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60fb      	str	r3, [r7, #12]
 800cd74:	e04b      	b.n	800ce0e <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4a29      	ldr	r2, [pc, #164]	; (800ce20 <GetSector+0xcc>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d806      	bhi.n	800cd8c <GetSector+0x38>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4a28      	ldr	r2, [pc, #160]	; (800ce24 <GetSector+0xd0>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d302      	bcc.n	800cd8c <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800cd86:	2301      	movs	r3, #1
 800cd88:	60fb      	str	r3, [r7, #12]
 800cd8a:	e040      	b.n	800ce0e <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a26      	ldr	r2, [pc, #152]	; (800ce28 <GetSector+0xd4>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d806      	bhi.n	800cda2 <GetSector+0x4e>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a25      	ldr	r2, [pc, #148]	; (800ce2c <GetSector+0xd8>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d302      	bcc.n	800cda2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 800cd9c:	2302      	movs	r3, #2
 800cd9e:	60fb      	str	r3, [r7, #12]
 800cda0:	e035      	b.n	800ce0e <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a22      	ldr	r2, [pc, #136]	; (800ce30 <GetSector+0xdc>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d206      	bcs.n	800cdb8 <GetSector+0x64>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a21      	ldr	r2, [pc, #132]	; (800ce34 <GetSector+0xe0>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d302      	bcc.n	800cdb8 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	60fb      	str	r3, [r7, #12]
 800cdb6:	e02a      	b.n	800ce0e <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4a1f      	ldr	r2, [pc, #124]	; (800ce38 <GetSector+0xe4>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d206      	bcs.n	800cdce <GetSector+0x7a>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4a1b      	ldr	r2, [pc, #108]	; (800ce30 <GetSector+0xdc>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d902      	bls.n	800cdce <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800cdc8:	2304      	movs	r3, #4
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	e01f      	b.n	800ce0e <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4a1a      	ldr	r2, [pc, #104]	; (800ce3c <GetSector+0xe8>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d206      	bcs.n	800cde4 <GetSector+0x90>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4a17      	ldr	r2, [pc, #92]	; (800ce38 <GetSector+0xe4>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d902      	bls.n	800cde4 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800cdde:	2305      	movs	r3, #5
 800cde0:	60fb      	str	r3, [r7, #12]
 800cde2:	e014      	b.n	800ce0e <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	4a16      	ldr	r2, [pc, #88]	; (800ce40 <GetSector+0xec>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d206      	bcs.n	800cdfa <GetSector+0xa6>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	4a13      	ldr	r2, [pc, #76]	; (800ce3c <GetSector+0xe8>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d902      	bls.n	800cdfa <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 800cdf4:	2306      	movs	r3, #6
 800cdf6:	60fb      	str	r3, [r7, #12]
 800cdf8:	e009      	b.n	800ce0e <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a11      	ldr	r2, [pc, #68]	; (800ce44 <GetSector+0xf0>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d205      	bcs.n	800ce0e <GetSector+0xba>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a0e      	ldr	r2, [pc, #56]	; (800ce40 <GetSector+0xec>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d901      	bls.n	800ce0e <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 800ce0a:	2307      	movs	r3, #7
 800ce0c:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	08003ffe 	.word	0x08003ffe
 800ce20:	08007ffe 	.word	0x08007ffe
 800ce24:	08004000 	.word	0x08004000
 800ce28:	0800bffe 	.word	0x0800bffe
 800ce2c:	08008000 	.word	0x08008000
 800ce30:	0800ffff 	.word	0x0800ffff
 800ce34:	0800c000 	.word	0x0800c000
 800ce38:	0801ffff 	.word	0x0801ffff
 800ce3c:	0803ffff 	.word	0x0803ffff
 800ce40:	0805ffff 	.word	0x0805ffff
 800ce44:	0807ffff 	.word	0x0807ffff

0800ce48 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data(uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 800ce48:	b5b0      	push	{r4, r5, r7, lr}
 800ce4a:	b08a      	sub	sp, #40	; 0x28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	4613      	mov	r3, r2
 800ce54:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ce5a:	b672      	cpsid	i
}
 800ce5c:	bf00      	nop


	 /* Unlock the Flash to enable the flash control register access *************/
	  __disable_irq();            // disable all interrupts
	  vTaskSuspendAll();          // suspend all FreeRTOS tasks
 800ce5e:	f00e fbeb 	bl	801b638 <vTaskSuspendAll>
	  HAL_FLASH_Unlock();
 800ce62:	f002 fe6b 	bl	800fb3c <HAL_FLASH_Unlock>

	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ce66:	4b33      	ldr	r3, [pc, #204]	; (800cf34 <Flash_Write_Data+0xec>)
 800ce68:	2201      	movs	r2, #1
 800ce6a:	60da      	str	r2, [r3, #12]
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ce6c:	4b31      	ldr	r3, [pc, #196]	; (800cf34 <Flash_Write_Data+0xec>)
 800ce6e:	2202      	movs	r2, #2
 800ce70:	60da      	str	r2, [r3, #12]
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ce72:	4b30      	ldr	r3, [pc, #192]	; (800cf34 <Flash_Write_Data+0xec>)
 800ce74:	2210      	movs	r2, #16
 800ce76:	60da      	str	r2, [r3, #12]
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ce78:	4b2e      	ldr	r3, [pc, #184]	; (800cf34 <Flash_Write_Data+0xec>)
 800ce7a:	2220      	movs	r2, #32
 800ce7c:	60da      	str	r2, [r3, #12]
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ce7e:	4b2d      	ldr	r3, [pc, #180]	; (800cf34 <Flash_Write_Data+0xec>)
 800ce80:	2240      	movs	r2, #64	; 0x40
 800ce82:	60da      	str	r2, [r3, #12]
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ce84:	4b2b      	ldr	r3, [pc, #172]	; (800cf34 <Flash_Write_Data+0xec>)
 800ce86:	2280      	movs	r2, #128	; 0x80
 800ce88:	60da      	str	r2, [r3, #12]
	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f7ff ff62 	bl	800cd54 <GetSector>
 800ce90:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800ce92:	88fb      	ldrh	r3, [r7, #6]
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	461a      	mov	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 800ce9e:	69f8      	ldr	r0, [r7, #28]
 800cea0:	f7ff ff58 	bl	800cd54 <GetSector>
 800cea4:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800cea6:	4b24      	ldr	r3, [pc, #144]	; (800cf38 <Flash_Write_Data+0xf0>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800ceac:	4b22      	ldr	r3, [pc, #136]	; (800cf38 <Flash_Write_Data+0xf0>)
 800ceae:	2202      	movs	r2, #2
 800ceb0:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800ceb2:	4a21      	ldr	r2, [pc, #132]	; (800cf38 <Flash_Write_Data+0xf0>)
 800ceb4:	6a3b      	ldr	r3, [r7, #32]
 800ceb6:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 800ceb8:	69ba      	ldr	r2, [r7, #24]
 800ceba:	6a3b      	ldr	r3, [r7, #32]
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	3301      	adds	r3, #1
 800cec0:	4a1d      	ldr	r2, [pc, #116]	; (800cf38 <Flash_Write_Data+0xf0>)
 800cec2:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800cec4:	f107 0314 	add.w	r3, r7, #20
 800cec8:	4619      	mov	r1, r3
 800ceca:	481b      	ldr	r0, [pc, #108]	; (800cf38 <Flash_Write_Data+0xf0>)
 800cecc:	f002 ffb4 	bl	800fe38 <HAL_FLASHEx_Erase>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d01f      	beq.n	800cf16 <Flash_Write_Data+0xce>
	  {
		  return HAL_FLASH_GetError ();
 800ced6:	f002 fe63 	bl	800fba0 <HAL_FLASH_GetError>
 800ceda:	4603      	mov	r3, r0
 800cedc:	e026      	b.n	800cf2c <Flash_Write_Data+0xe4>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	4413      	add	r3, r2
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2200      	movs	r2, #0
 800ceea:	461c      	mov	r4, r3
 800ceec:	4615      	mov	r5, r2
 800ceee:	4622      	mov	r2, r4
 800cef0:	462b      	mov	r3, r5
 800cef2:	68f9      	ldr	r1, [r7, #12]
 800cef4:	2002      	movs	r0, #2
 800cef6:	f002 fdcd 	bl	800fa94 <HAL_FLASH_Program>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d106      	bne.n	800cf0e <Flash_Write_Data+0xc6>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	3304      	adds	r3, #4
 800cf04:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800cf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf08:	3301      	adds	r3, #1
 800cf0a:	627b      	str	r3, [r7, #36]	; 0x24
 800cf0c:	e003      	b.n	800cf16 <Flash_Write_Data+0xce>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800cf0e:	f002 fe47 	bl	800fba0 <HAL_FLASH_GetError>
 800cf12:	4603      	mov	r3, r0
 800cf14:	e00a      	b.n	800cf2c <Flash_Write_Data+0xe4>
	   while (sofar<numberofwords)
 800cf16:	88fb      	ldrh	r3, [r7, #6]
 800cf18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	dbdf      	blt.n	800cede <Flash_Write_Data+0x96>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800cf1e:	f002 fe2f 	bl	800fb80 <HAL_FLASH_Lock>
	  xTaskResumeAll();          // resume all FreeRTOS tasks
 800cf22:	f00e fb97 	bl	801b654 <xTaskResumeAll>
  __ASM volatile ("cpsie i" : : : "memory");
 800cf26:	b662      	cpsie	i
}
 800cf28:	bf00      	nop
	  __enable_irq();            // re-enable interrupts

	   return 0;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3728      	adds	r7, #40	; 0x28
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bdb0      	pop	{r4, r5, r7, pc}
 800cf34:	40023c00 	.word	0x40023c00
 800cf38:	20004fe8 	.word	0x20004fe8

0800cf3c <Flash_Read_Data>:


void Flash_Read_Data(uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	4613      	mov	r3, r2
 800cf48:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	3304      	adds	r3, #4
 800cf56:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	3304      	adds	r3, #4
 800cf5c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800cf5e:	88fb      	ldrh	r3, [r7, #6]
 800cf60:	1e5a      	subs	r2, r3, #1
 800cf62:	80fa      	strh	r2, [r7, #6]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d000      	beq.n	800cf6a <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 800cf68:	e7ef      	b.n	800cf4a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 800cf6a:	bf00      	nop
	}
}
 800cf6c:	bf00      	nop
 800cf6e:	3714      	adds	r7, #20
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <vc_vector_realloc>:

// ----------------------------------------------------------------------------

// Auxiliary methods

bool vc_vector_realloc(vc_vector* vector, size_t new_count) {
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  const size_t new_size = new_count * vector->element_size;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	685a      	ldr	r2, [r3, #4]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	fb02 f303 	mul.w	r3, r2, r3
 800cf8c:	60fb      	str	r3, [r7, #12]
  char* new_data = (char*)realloc(vector->data, new_size);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	68f9      	ldr	r1, [r7, #12]
 800cf94:	4618      	mov	r0, r3
 800cf96:	f012 ffa3 	bl	801fee0 <realloc>
 800cf9a:	60b8      	str	r0, [r7, #8]
  if (!new_data) {
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <vc_vector_realloc+0x2e>
    return false;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	e006      	b.n	800cfb4 <vc_vector_realloc+0x3c>
  }

  vector->reserved_size = new_size;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	609a      	str	r2, [r3, #8]
  vector->data = new_data;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	60da      	str	r2, [r3, #12]
  return true;
 800cfb2:	2301      	movs	r3, #1
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <vc_vector_call_deleter>:

// [first_index, last_index)
void vc_vector_call_deleter(vc_vector* vector, size_t first_index, size_t last_index) {
 800cfbc:	b590      	push	{r4, r7, lr}
 800cfbe:	b087      	sub	sp, #28
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	607a      	str	r2, [r7, #4]
  for (size_t i = first_index; i < last_index; ++i) {
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	617b      	str	r3, [r7, #20]
 800cfcc:	e00b      	b.n	800cfe6 <vc_vector_call_deleter+0x2a>
    vector->deleter(vc_vector_at(vector, i));
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	691c      	ldr	r4, [r3, #16]
 800cfd2:	6979      	ldr	r1, [r7, #20]
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f000 f856 	bl	800d086 <vc_vector_at>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	4618      	mov	r0, r3
 800cfde:	47a0      	blx	r4
  for (size_t i = first_index; i < last_index; ++i) {
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	617b      	str	r3, [r7, #20]
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d3ef      	bcc.n	800cfce <vc_vector_call_deleter+0x12>
  }
}
 800cfee:	bf00      	nop
 800cff0:	bf00      	nop
 800cff2:	371c      	adds	r7, #28
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd90      	pop	{r4, r7, pc}

0800cff8 <vc_vector_call_deleter_all>:

void vc_vector_call_deleter_all(vc_vector* vector) {
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  vc_vector_call_deleter(vector, 0, vc_vector_count(vector));
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 f88f 	bl	800d124 <vc_vector_count>
 800d006:	4603      	mov	r3, r0
 800d008:	461a      	mov	r2, r3
 800d00a:	2100      	movs	r1, #0
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f7ff ffd5 	bl	800cfbc <vc_vector_call_deleter>
}
 800d012:	bf00      	nop
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <vc_vector_create>:

// ----------------------------------------------------------------------------

// Control

vc_vector* vc_vector_create(size_t count_elements, size_t size_of_element, vc_vector_deleter* deleter) {
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b086      	sub	sp, #24
 800d01e:	af00      	add	r7, sp, #0
 800d020:	60f8      	str	r0, [r7, #12]
 800d022:	60b9      	str	r1, [r7, #8]
 800d024:	607a      	str	r2, [r7, #4]
  vc_vector* v = (vc_vector*)malloc(sizeof(vc_vector));
 800d026:	2014      	movs	r0, #20
 800d028:	f012 f9d0 	bl	801f3cc <malloc>
 800d02c:	4603      	mov	r3, r0
 800d02e:	617b      	str	r3, [r7, #20]
  if (v != NULL) {
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d022      	beq.n	800d07c <vc_vector_create+0x62>
    v->data = NULL;
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	2200      	movs	r2, #0
 800d03a:	60da      	str	r2, [r3, #12]
    v->count = 0;
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	2200      	movs	r2, #0
 800d040:	601a      	str	r2, [r3, #0]
    v->element_size = size_of_element;
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	605a      	str	r2, [r3, #4]
    v->deleter = deleter;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	611a      	str	r2, [r3, #16]

    if (count_elements < MINIMUM_COUNT_OF_ELEMENTS) {
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d801      	bhi.n	800d058 <vc_vector_create+0x3e>
      count_elements = DEFAULT_COUNT_OF_ELEMENTS;
 800d054:	2308      	movs	r3, #8
 800d056:	60fb      	str	r3, [r7, #12]
    }

    if (size_of_element < 1 ||
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d009      	beq.n	800d072 <vc_vector_create+0x58>
                 !vc_vector_realloc(v, count_elements)) {
 800d05e:	68f9      	ldr	r1, [r7, #12]
 800d060:	6978      	ldr	r0, [r7, #20]
 800d062:	f7ff ff89 	bl	800cf78 <vc_vector_realloc>
 800d066:	4603      	mov	r3, r0
 800d068:	f083 0301 	eor.w	r3, r3, #1
 800d06c:	b2db      	uxtb	r3, r3
    if (size_of_element < 1 ||
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d004      	beq.n	800d07c <vc_vector_create+0x62>
      free(v);
 800d072:	6978      	ldr	r0, [r7, #20]
 800d074:	f012 f9b2 	bl	801f3dc <free>
      v = NULL;
 800d078:	2300      	movs	r3, #0
 800d07a:	617b      	str	r3, [r7, #20]
    }
  }

  return v;
 800d07c:	697b      	ldr	r3, [r7, #20]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3718      	adds	r7, #24
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <vc_vector_at>:

// ----------------------------------------------------------------------------

// Element access

void* vc_vector_at(vc_vector* vector, size_t index) {
 800d086:	b480      	push	{r7}
 800d088:	b083      	sub	sp, #12
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	6039      	str	r1, [r7, #0]
  return vector->data + index * vector->element_size;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	68da      	ldr	r2, [r3, #12]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	6839      	ldr	r1, [r7, #0]
 800d09a:	fb01 f303 	mul.w	r3, r1, r3
 800d09e:	4413      	add	r3, r2
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <vc_vector_front>:

void* vc_vector_front(vc_vector* vector) {
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  return vector->data;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	68db      	ldr	r3, [r3, #12]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <vc_vector_begin>:

// ----------------------------------------------------------------------------

// Iterators

void* vc_vector_begin(vc_vector* vector) {
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  return vector->data;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68db      	ldr	r3, [r3, #12]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <vc_vector_end>:

void* vc_vector_end(vc_vector* vector) {
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  return vector->data + vector->element_size * vector->count;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	68da      	ldr	r2, [r3, #12]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	6879      	ldr	r1, [r7, #4]
 800d0ee:	6809      	ldr	r1, [r1, #0]
 800d0f0:	fb01 f303 	mul.w	r3, r1, r3
 800d0f4:	4413      	add	r3, r2
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	370c      	adds	r7, #12
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <vc_vector_empty>:

// ----------------------------------------------------------------------------

// Capacity

bool vc_vector_empty(vc_vector* vector) {
 800d102:	b480      	push	{r7}
 800d104:	b083      	sub	sp, #12
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
  return vector->count == 0;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	bf0c      	ite	eq
 800d112:	2301      	moveq	r3, #1
 800d114:	2300      	movne	r3, #0
 800d116:	b2db      	uxtb	r3, r3
}
 800d118:	4618      	mov	r0, r3
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <vc_vector_count>:

size_t vc_vector_count(const vc_vector* vector) {
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  return vector->count;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
}
 800d130:	4618      	mov	r0, r3
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <vc_vector_size>:

size_t vc_vector_size(const vc_vector* vector) {
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  return vector->count * vector->element_size;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	6852      	ldr	r2, [r2, #4]
 800d14c:	fb02 f303 	mul.w	r3, r2, r3
}
 800d150:	4618      	mov	r0, r3
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <vc_vector_max_count>:

size_t vc_vector_max_count(const vc_vector* vector) {
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  return vector->reserved_size / vector->element_size;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	689a      	ldr	r2, [r3, #8]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800d170:	4618      	mov	r0, r3
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <vc_vector_clear>:

// ----------------------------------------------------------------------------

// Modifiers

void vc_vector_clear(vc_vector* vector) {
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  if (vector->deleter != NULL) {
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	691b      	ldr	r3, [r3, #16]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d002      	beq.n	800d192 <vc_vector_clear+0x16>
    vc_vector_call_deleter_all(vector);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7ff ff33 	bl	800cff8 <vc_vector_call_deleter_all>
  }

  vector->count = 0;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	601a      	str	r2, [r3, #0]
}
 800d198:	bf00      	nop
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <vc_vector_erase>:

  ++vector->count;
  return true;
}

bool vc_vector_erase(vc_vector* vector, size_t index) {
 800d1a0:	b590      	push	{r4, r7, lr}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
  if (vector->deleter != NULL) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	691b      	ldr	r3, [r3, #16]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d008      	beq.n	800d1c4 <vc_vector_erase+0x24>
    vector->deleter(vc_vector_at(vector, index));
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	691c      	ldr	r4, [r3, #16]
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff ff64 	bl	800d086 <vc_vector_at>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	47a0      	blx	r4
  }

  if (!memmove(vc_vector_at(vector, index),
 800d1c4:	6839      	ldr	r1, [r7, #0]
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7ff ff5d 	bl	800d086 <vc_vector_at>
 800d1cc:	4604      	mov	r4, r0
                        vc_vector_at(vector, index + 1),
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7ff ff56 	bl	800d086 <vc_vector_at>
                        vector->element_size * (vector->count - index))) {
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	6811      	ldr	r1, [r2, #0]
 800d1e2:	683a      	ldr	r2, [r7, #0]
 800d1e4:	1a8a      	subs	r2, r1, r2
  if (!memmove(vc_vector_at(vector, index),
 800d1e6:	fb02 f303 	mul.w	r3, r2, r3
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	4601      	mov	r1, r0
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	f012 f90a 	bl	801f408 <memmove>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d101      	bne.n	800d1fe <vc_vector_erase+0x5e>
    return false;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e005      	b.n	800d20a <vc_vector_erase+0x6a>
  }

  vector->count--;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	1e5a      	subs	r2, r3, #1
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	601a      	str	r2, [r3, #0]
  return true;
 800d208:	2301      	movs	r3, #1
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	370c      	adds	r7, #12
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd90      	pop	{r4, r7, pc}
	...

0800d214 <vc_vector_append>:

  vector->count -= last_index - first_index;
  return true;
}

bool vc_vector_append(vc_vector* vector, const void* values, size_t count) {
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
  const size_t count_new = count + vc_vector_count(vector);
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f7ff ff7f 	bl	800d124 <vc_vector_count>
 800d226:	4602      	mov	r2, r0
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4413      	add	r3, r2
 800d22c:	613b      	str	r3, [r7, #16]

  if (vc_vector_max_count(vector) < count_new) {
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f7ff ff94 	bl	800d15c <vc_vector_max_count>
 800d234:	4602      	mov	r2, r0
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	4293      	cmp	r3, r2
 800d23a:	d934      	bls.n	800d2a6 <vc_vector_append+0x92>
    size_t max_count_to_reserved = vc_vector_max_count(vector) * GROWTH_FACTOR;
 800d23c:	68f8      	ldr	r0, [r7, #12]
 800d23e:	f7ff ff8d 	bl	800d15c <vc_vector_max_count>
 800d242:	4603      	mov	r3, r0
 800d244:	4618      	mov	r0, r3
 800d246:	f7fb f965 	bl	8008514 <__aeabi_ui2d>
 800d24a:	f04f 0200 	mov.w	r2, #0
 800d24e:	4b25      	ldr	r3, [pc, #148]	; (800d2e4 <vc_vector_append+0xd0>)
 800d250:	f7fb f9da 	bl	8008608 <__aeabi_dmul>
 800d254:	4602      	mov	r2, r0
 800d256:	460b      	mov	r3, r1
 800d258:	4610      	mov	r0, r2
 800d25a:	4619      	mov	r1, r3
 800d25c:	f7fb fcac 	bl	8008bb8 <__aeabi_d2uiz>
 800d260:	4603      	mov	r3, r0
 800d262:	617b      	str	r3, [r7, #20]
    while (count_new > max_count_to_reserved) {
 800d264:	e00f      	b.n	800d286 <vc_vector_append+0x72>
      max_count_to_reserved *= GROWTH_FACTOR;
 800d266:	6978      	ldr	r0, [r7, #20]
 800d268:	f7fb f954 	bl	8008514 <__aeabi_ui2d>
 800d26c:	f04f 0200 	mov.w	r2, #0
 800d270:	4b1c      	ldr	r3, [pc, #112]	; (800d2e4 <vc_vector_append+0xd0>)
 800d272:	f7fb f9c9 	bl	8008608 <__aeabi_dmul>
 800d276:	4602      	mov	r2, r0
 800d278:	460b      	mov	r3, r1
 800d27a:	4610      	mov	r0, r2
 800d27c:	4619      	mov	r1, r3
 800d27e:	f7fb fc9b 	bl	8008bb8 <__aeabi_d2uiz>
 800d282:	4603      	mov	r3, r0
 800d284:	617b      	str	r3, [r7, #20]
    while (count_new > max_count_to_reserved) {
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d8eb      	bhi.n	800d266 <vc_vector_append+0x52>
    }

    if (!vc_vector_realloc(vector, max_count_to_reserved)) {
 800d28e:	6979      	ldr	r1, [r7, #20]
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f7ff fe71 	bl	800cf78 <vc_vector_realloc>
 800d296:	4603      	mov	r3, r0
 800d298:	f083 0301 	eor.w	r3, r3, #1
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d001      	beq.n	800d2a6 <vc_vector_append+0x92>
      return false;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e01a      	b.n	800d2dc <vc_vector_append+0xc8>
    }
  }

  if (memcpy(vector->data + vector->count * vector->element_size,
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	68da      	ldr	r2, [r3, #12]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68f9      	ldr	r1, [r7, #12]
 800d2b0:	6849      	ldr	r1, [r1, #4]
 800d2b2:	fb01 f303 	mul.w	r3, r1, r3
 800d2b6:	18d0      	adds	r0, r2, r3
                      values,
                      vector->element_size * count) == NULL) {
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	685b      	ldr	r3, [r3, #4]
  if (memcpy(vector->data + vector->count * vector->element_size,
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	fb02 f303 	mul.w	r3, r2, r3
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	68b9      	ldr	r1, [r7, #8]
 800d2c6:	f012 f891 	bl	801f3ec <memcpy>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <vc_vector_append+0xc0>
    return false;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	e003      	b.n	800d2dc <vc_vector_append+0xc8>
  }

  vector->count = count_new;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	693a      	ldr	r2, [r7, #16]
 800d2d8:	601a      	str	r2, [r3, #0]
  return true;
 800d2da:	2301      	movs	r3, #1
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	3ff80000 	.word	0x3ff80000

0800d2e8 <vc_vector_push_back>:

bool vc_vector_push_back(vc_vector* vector, const void* value) {
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  if (!vc_vector_append(vector, value, 1)) {
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	6839      	ldr	r1, [r7, #0]
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f7ff ff8c 	bl	800d214 <vc_vector_append>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	f083 0301 	eor.w	r3, r3, #1
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <vc_vector_push_back+0x24>
    return false;
 800d308:	2300      	movs	r3, #0
 800d30a:	e000      	b.n	800d30e <vc_vector_push_back+0x26>
  }

  return true;
 800d30c:	2301      	movs	r3, #1
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <vc_vector_replace>:

  vector->count--;
  return true;
}

bool vc_vector_replace(vc_vector* vector, size_t index, const void* value) {
 800d316:	b590      	push	{r4, r7, lr}
 800d318:	b085      	sub	sp, #20
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	60f8      	str	r0, [r7, #12]
 800d31e:	60b9      	str	r1, [r7, #8]
 800d320:	607a      	str	r2, [r7, #4]
  if (vector->deleter != NULL) {
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d008      	beq.n	800d33c <vc_vector_replace+0x26>
    vector->deleter(vc_vector_at(vector, index));
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	691c      	ldr	r4, [r3, #16]
 800d32e:	68b9      	ldr	r1, [r7, #8]
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f7ff fea8 	bl	800d086 <vc_vector_at>
 800d336:	4603      	mov	r3, r0
 800d338:	4618      	mov	r0, r3
 800d33a:	47a0      	blx	r4
  }

  return memcpy(vc_vector_at(vector, index),
 800d33c:	68b9      	ldr	r1, [r7, #8]
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f7ff fea1 	bl	800d086 <vc_vector_at>
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	461a      	mov	r2, r3
 800d34a:	6879      	ldr	r1, [r7, #4]
 800d34c:	f012 f84e 	bl	801f3ec <memcpy>
 800d350:	4603      	mov	r3, r0
                value,
                vector->element_size) != NULL;
 800d352:	2b00      	cmp	r3, #0
 800d354:	bf14      	ite	ne
 800d356:	2301      	movne	r3, #1
 800d358:	2300      	moveq	r3, #0
 800d35a:	b2db      	uxtb	r3, r3
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	bd90      	pop	{r4, r7, pc}

0800d364 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800d364:	b480      	push	{r7}
 800d366:	af00      	add	r7, sp, #0

}
 800d368:	bf00      	nop
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
	...

0800d374 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800d374:	b480      	push	{r7}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	60b9      	str	r1, [r7, #8]
 800d37e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	4a07      	ldr	r2, [pc, #28]	; (800d3a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d384:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	4a06      	ldr	r2, [pc, #24]	; (800d3a4 <vApplicationGetIdleTaskMemory+0x30>)
 800d38a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2280      	movs	r2, #128	; 0x80
 800d390:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800d392:	bf00      	nop
 800d394:	3714      	adds	r7, #20
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	20004ffc 	.word	0x20004ffc
 800d3a4:	200050b4 	.word	0x200050b4

0800d3a8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	4a07      	ldr	r2, [pc, #28]	; (800d3d4 <vApplicationGetTimerTaskMemory+0x2c>)
 800d3b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	4a06      	ldr	r2, [pc, #24]	; (800d3d8 <vApplicationGetTimerTaskMemory+0x30>)
 800d3be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3c6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800d3c8:	bf00      	nop
 800d3ca:	3714      	adds	r7, #20
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr
 800d3d4:	200052b4 	.word	0x200052b4
 800d3d8:	2000536c 	.word	0x2000536c

0800d3dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d3e0:	f3bf 8f4f 	dsb	sy
}
 800d3e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d3e6:	4b06      	ldr	r3, [pc, #24]	; (800d400 <__NVIC_SystemReset+0x24>)
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d3ee:	4904      	ldr	r1, [pc, #16]	; (800d400 <__NVIC_SystemReset+0x24>)
 800d3f0:	4b04      	ldr	r3, [pc, #16]	; (800d404 <__NVIC_SystemReset+0x28>)
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d3f6:	f3bf 8f4f 	dsb	sy
}
 800d3fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d3fc:	bf00      	nop
 800d3fe:	e7fd      	b.n	800d3fc <__NVIC_SystemReset+0x20>
 800d400:	e000ed00 	.word	0xe000ed00
 800d404:	05fa0004 	.word	0x05fa0004

0800d408 <initAll>:
void DOTimerCallback(void const * argument);
void SPIReadTimoutTimerCallback(void const * argument);

/* USER CODE BEGIN PFP */
void initAll(void)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af02      	add	r7, sp, #8
	#ifdef USB_DEBUG
  	  HAL_Delay(2000);
	#endif

  	osTimerStart(BlinkTimerHandle, BLINK_DELAY_MS/portTICK_PERIOD_MS);
 800d40e:	4b57      	ldr	r3, [pc, #348]	; (800d56c <initAll+0x164>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	21fa      	movs	r1, #250	; 0xfa
 800d414:	4618      	mov	r0, r3
 800d416:	f00c fcad 	bl	8019d74 <osTimerStart>
  	arm_rfft_fast_init_f32(&S, IMU_FFT_SIZE);
 800d41a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d41e:	4854      	ldr	r0, [pc, #336]	; (800d570 <initAll+0x168>)
 800d420:	f010 fd6c 	bl	801defc <arm_rfft_fast_init_f32>

	//--------------------------------------
	// -------- INITIALIZATIONS ------------
	//--------------------------------------
	//USB
  	OMDProtocolInit(&OMDCommProtocol);
 800d424:	4853      	ldr	r0, [pc, #332]	; (800d574 <initAll+0x16c>)
 800d426:	f7fe faf6 	bl	800ba16 <OMDProtocolInit>
	  sprintf(logBuf, "\r\nStarting initialization of sensor and output devices...");
	  CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
	#endif

	//IMU
	if (IIM42652_InitBusGuard(&IMU, spiBinarySemHandle) != HAL_OK)
 800d42a:	4b53      	ldr	r3, [pc, #332]	; (800d578 <initAll+0x170>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4619      	mov	r1, r3
 800d430:	4852      	ldr	r0, [pc, #328]	; (800d57c <initAll+0x174>)
 800d432:	f7fb ff7b 	bl	800932c <IIM42652_InitBusGuard>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d005      	beq.n	800d448 <initAll+0x40>
	{
		AC1_StatusWord.IMUInit = false;
 800d43c:	4b50      	ldr	r3, [pc, #320]	; (800d580 <initAll+0x178>)
 800d43e:	2200      	movs	r2, #0
 800d440:	705a      	strb	r2, [r3, #1]
		AC1_StatusWord.IMUFault = true;
 800d442:	4b4f      	ldr	r3, [pc, #316]	; (800d580 <initAll+0x178>)
 800d444:	2201      	movs	r2, #1
 800d446:	715a      	strb	r2, [r3, #5]
	}
	if (IIM42652_Init(&IMU, &hspi1, IMU_CS_GPIO_Port, IMU_CS_Pin, &userConfig) == HAL_OK)
 800d448:	4b4e      	ldr	r3, [pc, #312]	; (800d584 <initAll+0x17c>)
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	2301      	movs	r3, #1
 800d44e:	4a4e      	ldr	r2, [pc, #312]	; (800d588 <initAll+0x180>)
 800d450:	494e      	ldr	r1, [pc, #312]	; (800d58c <initAll+0x184>)
 800d452:	484a      	ldr	r0, [pc, #296]	; (800d57c <initAll+0x174>)
 800d454:	f7fb fea2 	bl	800919c <IIM42652_Init>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10e      	bne.n	800d47c <initAll+0x74>
	{
	  AC1_StatusWord.IMUInit = true; //IMU initialized
 800d45e:	4b48      	ldr	r3, [pc, #288]	; (800d580 <initAll+0x178>)
 800d460:	2201      	movs	r2, #1
 800d462:	705a      	strb	r2, [r3, #1]
	  sprintf(logBuf, "\r\nIMU initialized...");
 800d464:	494a      	ldr	r1, [pc, #296]	; (800d590 <initAll+0x188>)
 800d466:	484b      	ldr	r0, [pc, #300]	; (800d594 <initAll+0x18c>)
 800d468:	f012 fdbc 	bl	801ffe4 <siprintf>
	  RGB_SetActColor(&RGB, RGB.rgbVIOLET, ENABLE);
 800d46c:	4a4a      	ldr	r2, [pc, #296]	; (800d598 <initAll+0x190>)
 800d46e:	2301      	movs	r3, #1
 800d470:	3230      	adds	r2, #48	; 0x30
 800d472:	ca06      	ldmia	r2, {r1, r2}
 800d474:	4848      	ldr	r0, [pc, #288]	; (800d598 <initAll+0x190>)
 800d476:	f7fe fa7f 	bl	800b978 <RGB_SetActColor>
 800d47a:	e003      	b.n	800d484 <initAll+0x7c>
	}
	else
	{
	  sprintf(logBuf, "\r\nIMU initialization failed");
 800d47c:	4947      	ldr	r1, [pc, #284]	; (800d59c <initAll+0x194>)
 800d47e:	4845      	ldr	r0, [pc, #276]	; (800d594 <initAll+0x18c>)
 800d480:	f012 fdb0 	bl	801ffe4 <siprintf>
		CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
		HAL_Delay(500);
	#endif

	//DAC
	DAC7571_Init(&DAC, &hi2c1, DAC_ALIM_VOLTAGE);
 800d484:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800d5a0 <initAll+0x198>
 800d488:	4946      	ldr	r1, [pc, #280]	; (800d5a4 <initAll+0x19c>)
 800d48a:	4847      	ldr	r0, [pc, #284]	; (800d5a8 <initAll+0x1a0>)
 800d48c:	f7fb fd86 	bl	8008f9c <DAC7571_Init>
	DAC7571_SetOutEnabling(&DAC, 1);
 800d490:	2101      	movs	r1, #1
 800d492:	4845      	ldr	r0, [pc, #276]	; (800d5a8 <initAll+0x1a0>)
 800d494:	f7fb fde8 	bl	8009068 <DAC7571_SetOutEnabling>
	DAC7571_SetOutVoltage(&DAC, DAC_ALIM_VOLTAGE);
 800d498:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800d5a0 <initAll+0x198>
 800d49c:	4842      	ldr	r0, [pc, #264]	; (800d5a8 <initAll+0x1a0>)
 800d49e:	f7fb fd93 	bl	8008fc8 <DAC7571_SetOutVoltage>
	if (DAC7571_WriteDMA(&DAC) == 0)
 800d4a2:	4841      	ldr	r0, [pc, #260]	; (800d5a8 <initAll+0x1a0>)
 800d4a4:	f7fb fdf8 	bl	8009098 <DAC7571_WriteDMA>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d113      	bne.n	800d4d6 <initAll+0xce>
	{
	  AC1_StatusWord.DACInit = true; //DAC initialized
 800d4ae:	4b34      	ldr	r3, [pc, #208]	; (800d580 <initAll+0x178>)
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	709a      	strb	r2, [r3, #2]
	  sprintf(logBuf, "\r\nDAC initialized...");
 800d4b4:	493d      	ldr	r1, [pc, #244]	; (800d5ac <initAll+0x1a4>)
 800d4b6:	4837      	ldr	r0, [pc, #220]	; (800d594 <initAll+0x18c>)
 800d4b8:	f012 fd94 	bl	801ffe4 <siprintf>
	  RGB_SetActColor(&RGB, RGB.rgbYELLOW, ENABLE);
 800d4bc:	4b36      	ldr	r3, [pc, #216]	; (800d598 <initAll+0x190>)
 800d4be:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f363 020f 	bfi	r2, r3, #0, #16
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	4832      	ldr	r0, [pc, #200]	; (800d598 <initAll+0x190>)
 800d4d0:	f7fe fa52 	bl	800b978 <RGB_SetActColor>
 800d4d4:	e003      	b.n	800d4de <initAll+0xd6>
	}
	else
	{
	  sprintf(logBuf, "\r\nDAC initialization failed");
 800d4d6:	4936      	ldr	r1, [pc, #216]	; (800d5b0 <initAll+0x1a8>)
 800d4d8:	482e      	ldr	r0, [pc, #184]	; (800d594 <initAll+0x18c>)
 800d4da:	f012 fd83 	bl	801ffe4 <siprintf>
	#ifdef USB_DEBUG
		CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
		HAL_Delay(500);
	#endif

	if (AC1_StatusWord.IMUInit == 1 && AC1_StatusWord.DACInit == 1)
 800d4de:	4b28      	ldr	r3, [pc, #160]	; (800d580 <initAll+0x178>)
 800d4e0:	785b      	ldrb	r3, [r3, #1]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d01f      	beq.n	800d526 <initAll+0x11e>
 800d4e6:	4b26      	ldr	r3, [pc, #152]	; (800d580 <initAll+0x178>)
 800d4e8:	789b      	ldrb	r3, [r3, #2]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d01b      	beq.n	800d526 <initAll+0x11e>
	{
		//All devices have been initialized
		RGB_SetActColor(&RGB, RGB.rgbCYAN, ENABLE);
 800d4ee:	4a2a      	ldr	r2, [pc, #168]	; (800d598 <initAll+0x190>)
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	3224      	adds	r2, #36	; 0x24
 800d4f4:	ca06      	ldmia	r2, {r1, r2}
 800d4f6:	4828      	ldr	r0, [pc, #160]	; (800d598 <initAll+0x190>)
 800d4f8:	f7fe fa3e 	bl	800b978 <RGB_SetActColor>
		HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_SET);
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d502:	4821      	ldr	r0, [pc, #132]	; (800d588 <initAll+0x180>)
 800d504:	f002 ff3e 	bl	8010384 <HAL_GPIO_WritePin>
		AC1_StatusWord.Booted = 1;
 800d508:	4b1d      	ldr	r3, [pc, #116]	; (800d580 <initAll+0x178>)
 800d50a:	2201      	movs	r2, #1
 800d50c:	70da      	strb	r2, [r3, #3]
		sprintf(logBuf, "\r\nAC1 Initializations completed!\r\n Starting FreeRTOS...");
 800d50e:	4929      	ldr	r1, [pc, #164]	; (800d5b4 <initAll+0x1ac>)
 800d510:	4820      	ldr	r0, [pc, #128]	; (800d594 <initAll+0x18c>)
 800d512:	f012 fd67 	bl	801ffe4 <siprintf>
		HAL_Delay(2000);
		__NVIC_SystemReset();
	}

	/* Start signals analysis */
	AC1_StatusWord.IMUAnalysisON = 1;
 800d516:	4b1a      	ldr	r3, [pc, #104]	; (800d580 <initAll+0x178>)
 800d518:	2201      	movs	r2, #1
 800d51a:	711a      	strb	r2, [r3, #4]

	/* Disable USB data output */
	IMU.TelemetryON = 0;
 800d51c:	4b17      	ldr	r3, [pc, #92]	; (800d57c <initAll+0x174>)
 800d51e:	2200      	movs	r2, #0
 800d520:	f883 2823 	strb.w	r2, [r3, #2083]	; 0x823
}
 800d524:	e01f      	b.n	800d566 <initAll+0x15e>
		RGB_SetActColor(&RGB, RGB.rgbRED, ENABLE);
 800d526:	4a1c      	ldr	r2, [pc, #112]	; (800d598 <initAll+0x190>)
 800d528:	2301      	movs	r3, #1
 800d52a:	3218      	adds	r2, #24
 800d52c:	ca06      	ldmia	r2, {r1, r2}
 800d52e:	481a      	ldr	r0, [pc, #104]	; (800d598 <initAll+0x190>)
 800d530:	f7fe fa22 	bl	800b978 <RGB_SetActColor>
		HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_RESET);
 800d534:	2200      	movs	r2, #0
 800d536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d53a:	4813      	ldr	r0, [pc, #76]	; (800d588 <initAll+0x180>)
 800d53c:	f002 ff22 	bl	8010384 <HAL_GPIO_WritePin>
		sprintf(logBuf, "\r\nAC1 Initializations procedure failed. Restarting...");
 800d540:	491d      	ldr	r1, [pc, #116]	; (800d5b8 <initAll+0x1b0>)
 800d542:	4814      	ldr	r0, [pc, #80]	; (800d594 <initAll+0x18c>)
 800d544:	f012 fd4e 	bl	801ffe4 <siprintf>
		CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 800d548:	4812      	ldr	r0, [pc, #72]	; (800d594 <initAll+0x18c>)
 800d54a:	f7fa fe49 	bl	80081e0 <strlen>
 800d54e:	4603      	mov	r3, r0
 800d550:	b29b      	uxth	r3, r3
 800d552:	4619      	mov	r1, r3
 800d554:	480f      	ldr	r0, [pc, #60]	; (800d594 <initAll+0x18c>)
 800d556:	f00f ffb7 	bl	801d4c8 <CDC_Transmit_FS>
		HAL_Delay(2000);
 800d55a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d55e:	f001 fde7 	bl	800f130 <HAL_Delay>
		__NVIC_SystemReset();
 800d562:	f7ff ff3b 	bl	800d3dc <__NVIC_SystemReset>
}
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	20005a8c 	.word	0x20005a8c
 800d570:	20009c2c 	.word	0x20009c2c
 800d574:	20002fd4 	.word	0x20002fd4
 800d578:	20005a9c 	.word	0x20005a9c
 800d57c:	20000300 	.word	0x20000300
 800d580:	200047dc 	.word	0x200047dc
 800d584:	20005b38 	.word	0x20005b38
 800d588:	40020400 	.word	0x40020400
 800d58c:	20005840 	.word	0x20005840
 800d590:	080220f4 	.word	0x080220f4
 800d594:	2000942c 	.word	0x2000942c
 800d598:	20002f9c 	.word	0x20002f9c
 800d59c:	0802210c 	.word	0x0802210c
 800d5a0:	405147ae 	.word	0x405147ae
 800d5a4:	2000576c 	.word	0x2000576c
 800d5a8:	200002ec 	.word	0x200002ec
 800d5ac:	08022128 	.word	0x08022128
 800d5b0:	08022140 	.word	0x08022140
 800d5b4:	0802215c 	.word	0x0802215c
 800d5b8:	08022194 	.word	0x08022194

0800d5bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d5bc:	b5b0      	push	{r4, r5, r7, lr}
 800d5be:	b0b4      	sub	sp, #208	; 0xd0
 800d5c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	_LOAD_AC1_SETTINGS(&userConfig); //TODO: work only at the top of application: why?!?!
 800d5c2:	4894      	ldr	r0, [pc, #592]	; (800d814 <main+0x258>)
 800d5c4:	f7ff fb7e 	bl	800ccc4 <_LOAD_AC1_SETTINGS>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d5c8:	f001 fd70 	bl	800f0ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d5cc:	f000 f96e 	bl	800d8ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d5d0:	f000 fc40 	bl	800de54 <MX_GPIO_Init>
  MX_DMA_Init();
 800d5d4:	f000 fc00 	bl	800ddd8 <MX_DMA_Init>
  MX_SPI1_Init();
 800d5d8:	f000 fa26 	bl	800da28 <MX_SPI1_Init>
  MX_I2C1_Init();
 800d5dc:	f000 f9d0 	bl	800d980 <MX_I2C1_Init>
  MX_TIM1_Init();
 800d5e0:	f000 fa58 	bl	800da94 <MX_TIM1_Init>
  MX_TIM3_Init();
 800d5e4:	f000 fb5c 	bl	800dca0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800d5e8:	f000 fba8 	bl	800dd3c <MX_TIM5_Init>
  MX_RTC_Init();
 800d5ec:	f000 f9f6 	bl	800d9dc <MX_RTC_Init>
  MX_TIM2_Init();
 800d5f0:	f000 fb08 	bl	800dc04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  AC1_StatusWord.Power = true; //MCU Powered
 800d5f4:	4b88      	ldr	r3, [pc, #544]	; (800d818 <main+0x25c>)
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	701a      	strb	r2, [r3, #0]

  //Power LED ON
  RGB_Init(&RGB, &htim1);
 800d5fa:	4988      	ldr	r1, [pc, #544]	; (800d81c <main+0x260>)
 800d5fc:	4888      	ldr	r0, [pc, #544]	; (800d820 <main+0x264>)
 800d5fe:	f7fe f94d 	bl	800b89c <RGB_Init>
  RGB_SetActColor(&RGB, RGB.rgbGREEN, ENABLE);
 800d602:	4b87      	ldr	r3, [pc, #540]	; (800d820 <main+0x264>)
 800d604:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800d608:	4611      	mov	r1, r2
 800d60a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d60c:	2200      	movs	r2, #0
 800d60e:	f363 020f 	bfi	r2, r3, #0, #16
 800d612:	2301      	movs	r3, #1
 800d614:	4882      	ldr	r0, [pc, #520]	; (800d820 <main+0x264>)
 800d616:	f7fe f9af 	bl	800b978 <RGB_SetActColor>
  HAL_Delay(500);
 800d61a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d61e:	f001 fd87 	bl	800f130 <HAL_Delay>

  //Start used timer
  HAL_TIM_Base_Start_IT(&htim2);
 800d622:	4880      	ldr	r0, [pc, #512]	; (800d824 <main+0x268>)
 800d624:	f007 fef8 	bl	8015418 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800d628:	487f      	ldr	r0, [pc, #508]	; (800d828 <main+0x26c>)
 800d62a:	f007 fef5 	bl	8015418 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800d62e:	487f      	ldr	r0, [pc, #508]	; (800d82c <main+0x270>)
 800d630:	f007 fef2 	bl	8015418 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of SPI1Mutex */
  osMutexDef(SPI1Mutex);
 800d634:	2300      	movs	r3, #0
 800d636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d63a:	2300      	movs	r3, #0
 800d63c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  SPI1MutexHandle = osMutexCreate(osMutex(SPI1Mutex));
 800d640:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d644:	4618      	mov	r0, r3
 800d646:	f00c fbd9 	bl	8019dfc <osMutexCreate>
 800d64a:	4603      	mov	r3, r0
 800d64c:	4a78      	ldr	r2, [pc, #480]	; (800d830 <main+0x274>)
 800d64e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of spiBinarySem */
  osSemaphoreStaticDef(spiBinarySem, &spiBinarySemControlBlock);
 800d650:	2300      	movs	r3, #0
 800d652:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d656:	4b77      	ldr	r3, [pc, #476]	; (800d834 <main+0x278>)
 800d658:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  spiBinarySemHandle = osSemaphoreCreate(osSemaphore(spiBinarySem), 1);
 800d65c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800d660:	2101      	movs	r1, #1
 800d662:	4618      	mov	r0, r3
 800d664:	f00c fc66 	bl	8019f34 <osSemaphoreCreate>
 800d668:	4603      	mov	r3, r0
 800d66a:	4a73      	ldr	r2, [pc, #460]	; (800d838 <main+0x27c>)
 800d66c:	6013      	str	r3, [r2, #0]

  /* definition and creation of usbBinarySem */
  osSemaphoreDef(usbBinarySem);
 800d66e:	2300      	movs	r3, #0
 800d670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d674:	2300      	movs	r3, #0
 800d676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  usbBinarySemHandle = osSemaphoreCreate(osSemaphore(usbBinarySem), 1);
 800d67a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d67e:	2101      	movs	r1, #1
 800d680:	4618      	mov	r0, r3
 800d682:	f00c fc57 	bl	8019f34 <osSemaphoreCreate>
 800d686:	4603      	mov	r3, r0
 800d688:	4a6c      	ldr	r2, [pc, #432]	; (800d83c <main+0x280>)
 800d68a:	6013      	str	r3, [r2, #0]

  /* definition and creation of fifoBinarySem */
  osSemaphoreStaticDef(fifoBinarySem, &fifoBinarySemControlBlock);
 800d68c:	2300      	movs	r3, #0
 800d68e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d692:	4b6b      	ldr	r3, [pc, #428]	; (800d840 <main+0x284>)
 800d694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  fifoBinarySemHandle = osSemaphoreCreate(osSemaphore(fifoBinarySem), 1);
 800d698:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d69c:	2101      	movs	r1, #1
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f00c fc48 	bl	8019f34 <osSemaphoreCreate>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	4a67      	ldr	r2, [pc, #412]	; (800d844 <main+0x288>)
 800d6a8:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of BlinkTimer */
  osTimerDef(BlinkTimer, BlinkTimerCallback);
 800d6aa:	4b67      	ldr	r3, [pc, #412]	; (800d848 <main+0x28c>)
 800d6ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 800d6b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	2101      	movs	r1, #1
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f00c fb24 	bl	8019d0c <osTimerCreate>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	4a61      	ldr	r2, [pc, #388]	; (800d84c <main+0x290>)
 800d6c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of DOTimer */
  osTimerDef(DOTimer, DOTimerCallback);
 800d6ca:	4b61      	ldr	r3, [pc, #388]	; (800d850 <main+0x294>)
 800d6cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  DOTimerHandle = osTimerCreate(osTimer(DOTimer), osTimerOnce, NULL);
 800d6d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800d6da:	2200      	movs	r2, #0
 800d6dc:	2100      	movs	r1, #0
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f00c fb14 	bl	8019d0c <osTimerCreate>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	4a5b      	ldr	r2, [pc, #364]	; (800d854 <main+0x298>)
 800d6e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of SPIReadTimoutTimer */
  osTimerDef(SPIReadTimoutTimer, SPIReadTimoutTimerCallback);
 800d6ea:	4b5b      	ldr	r3, [pc, #364]	; (800d858 <main+0x29c>)
 800d6ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  SPIReadTimoutTimerHandle = osTimerCreate(osTimer(SPIReadTimoutTimer), osTimerOnce, NULL);
 800d6f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	4618      	mov	r0, r3
 800d700:	f00c fb04 	bl	8019d0c <osTimerCreate>
 800d704:	4603      	mov	r3, r0
 800d706:	4a55      	ldr	r2, [pc, #340]	; (800d85c <main+0x2a0>)
 800d708:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  usb_RX_Queue = xQueueCreateStatic(APP_RX_DATA_SIZE, sizeof(uint8_t), usb_RX_QueueStorage, &usb_RX_QueueStruct);
 800d70a:	2300      	movs	r3, #0
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	4b54      	ldr	r3, [pc, #336]	; (800d860 <main+0x2a4>)
 800d710:	4a54      	ldr	r2, [pc, #336]	; (800d864 <main+0x2a8>)
 800d712:	2101      	movs	r1, #1
 800d714:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d718:	f00c fdde 	bl	801a2d8 <xQueueGenericCreateStatic>
 800d71c:	4603      	mov	r3, r0
 800d71e:	4a52      	ldr	r2, [pc, #328]	; (800d868 <main+0x2ac>)
 800d720:	6013      	str	r3, [r2, #0]
  usb_TX_Queue = xQueueCreateStatic(APP_TX_DATA_SIZE, sizeof(uint8_t), usb_TX_QueueStorage, &usb_TX_QueueStruct);
 800d722:	2300      	movs	r3, #0
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	4b51      	ldr	r3, [pc, #324]	; (800d86c <main+0x2b0>)
 800d728:	4a51      	ldr	r2, [pc, #324]	; (800d870 <main+0x2b4>)
 800d72a:	2101      	movs	r1, #1
 800d72c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d730:	f00c fdd2 	bl	801a2d8 <xQueueGenericCreateStatic>
 800d734:	4603      	mov	r3, r0
 800d736:	4a4f      	ldr	r2, [pc, #316]	; (800d874 <main+0x2b8>)
 800d738:	6013      	str	r3, [r2, #0]
  IMUDataOutputQueue = xQueueCreateStatic(IMU_OUTPUT_DATA_QUEUE_SIZE, sizeof(IMU_Data_Buf_t), IMUDataOutputQueueStorage, &IMUDataOutputQueueStruct);
 800d73a:	2300      	movs	r3, #0
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	4b4e      	ldr	r3, [pc, #312]	; (800d878 <main+0x2bc>)
 800d740:	4a4e      	ldr	r2, [pc, #312]	; (800d87c <main+0x2c0>)
 800d742:	2110      	movs	r1, #16
 800d744:	f44f 7020 	mov.w	r0, #640	; 0x280
 800d748:	f00c fdc6 	bl	801a2d8 <xQueueGenericCreateStatic>
 800d74c:	4603      	mov	r3, r0
 800d74e:	4a4c      	ldr	r2, [pc, #304]	; (800d880 <main+0x2c4>)
 800d750:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityHigh, 0, 256);
 800d752:	4b4c      	ldr	r3, [pc, #304]	; (800d884 <main+0x2c8>)
 800d754:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800d758:	461d      	mov	r5, r3
 800d75a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d75c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d75e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800d766:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d76a:	2100      	movs	r1, #0
 800d76c:	4618      	mov	r0, r3
 800d76e:	f00c fa6c 	bl	8019c4a <osThreadCreate>
 800d772:	4603      	mov	r3, r0
 800d774:	4a44      	ldr	r2, [pc, #272]	; (800d888 <main+0x2cc>)
 800d776:	6013      	str	r3, [r2, #0]

  /* definition and creation of SignalElabTask */
  osThreadDef(SignalElabTask, StartSignalElabTask, osPriorityNormal, 0, 2048);
 800d778:	4b44      	ldr	r3, [pc, #272]	; (800d88c <main+0x2d0>)
 800d77a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800d77e:	461d      	mov	r5, r3
 800d780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d784:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d788:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SignalElabTaskHandle = osThreadCreate(osThread(SignalElabTask), NULL);
 800d78c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d790:	2100      	movs	r1, #0
 800d792:	4618      	mov	r0, r3
 800d794:	f00c fa59 	bl	8019c4a <osThreadCreate>
 800d798:	4603      	mov	r3, r0
 800d79a:	4a3d      	ldr	r2, [pc, #244]	; (800d890 <main+0x2d4>)
 800d79c:	6013      	str	r3, [r2, #0]

  /* definition and creation of UsbTxTask */
  osThreadDef(UsbTxTask, StartUsbTxTask, osPriorityAboveNormal, 0, 512);
 800d79e:	4b3d      	ldr	r3, [pc, #244]	; (800d894 <main+0x2d8>)
 800d7a0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800d7a4:	461d      	mov	r5, r3
 800d7a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d7ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UsbTxTaskHandle = osThreadCreate(osThread(UsbTxTask), NULL);
 800d7b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f00c fa46 	bl	8019c4a <osThreadCreate>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	4a35      	ldr	r2, [pc, #212]	; (800d898 <main+0x2dc>)
 800d7c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UsbRxTask */
  osThreadDef(UsbRxTask, StartUsbRx, osPriorityIdle, 0, 256);
 800d7c4:	4b35      	ldr	r3, [pc, #212]	; (800d89c <main+0x2e0>)
 800d7c6:	f107 0420 	add.w	r4, r7, #32
 800d7ca:	461d      	mov	r5, r3
 800d7cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d7d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UsbRxTaskHandle = osThreadCreate(osThread(UsbRxTask), NULL);
 800d7d8:	f107 0320 	add.w	r3, r7, #32
 800d7dc:	2100      	movs	r1, #0
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f00c fa33 	bl	8019c4a <osThreadCreate>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	4a2e      	ldr	r2, [pc, #184]	; (800d8a0 <main+0x2e4>)
 800d7e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of ImuTask */
  osThreadDef(ImuTask, StartImuTask, osPriorityRealtime, 0, 128);
 800d7ea:	4b2e      	ldr	r3, [pc, #184]	; (800d8a4 <main+0x2e8>)
 800d7ec:	1d3c      	adds	r4, r7, #4
 800d7ee:	461d      	mov	r5, r3
 800d7f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d7f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ImuTaskHandle = osThreadCreate(osThread(ImuTask), NULL);
 800d7fc:	1d3b      	adds	r3, r7, #4
 800d7fe:	2100      	movs	r1, #0
 800d800:	4618      	mov	r0, r3
 800d802:	f00c fa22 	bl	8019c4a <osThreadCreate>
 800d806:	4603      	mov	r3, r0
 800d808:	4a27      	ldr	r2, [pc, #156]	; (800d8a8 <main+0x2ec>)
 800d80a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800d80c:	f00c fa0a 	bl	8019c24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800d810:	e7fe      	b.n	800d810 <main+0x254>
 800d812:	bf00      	nop
 800d814:	20005b38 	.word	0x20005b38
 800d818:	200047dc 	.word	0x200047dc
 800d81c:	20005958 	.word	0x20005958
 800d820:	20002f9c 	.word	0x20002f9c
 800d824:	200059a0 	.word	0x200059a0
 800d828:	200059e8 	.word	0x200059e8
 800d82c:	20005a30 	.word	0x20005a30
 800d830:	20005a98 	.word	0x20005a98
 800d834:	20005aa0 	.word	0x20005aa0
 800d838:	20005a9c 	.word	0x20005a9c
 800d83c:	20005ae8 	.word	0x20005ae8
 800d840:	20005af0 	.word	0x20005af0
 800d844:	20005aec 	.word	0x20005aec
 800d848:	0800e5f1 	.word	0x0800e5f1
 800d84c:	20005a8c 	.word	0x20005a8c
 800d850:	0800e60d 	.word	0x0800e60d
 800d854:	20005a90 	.word	0x20005a90
 800d858:	0800e63d 	.word	0x0800e63d
 800d85c:	20005a94 	.word	0x20005a94
 800d860:	20005b48 	.word	0x20005b48
 800d864:	20005b90 	.word	0x20005b90
 800d868:	20006390 	.word	0x20006390
 800d86c:	20006394 	.word	0x20006394
 800d870:	200063dc 	.word	0x200063dc
 800d874:	20006bdc 	.word	0x20006bdc
 800d878:	20006be0 	.word	0x20006be0
 800d87c:	20006c28 	.word	0x20006c28
 800d880:	20009428 	.word	0x20009428
 800d884:	080221cc 	.word	0x080221cc
 800d888:	20005a78 	.word	0x20005a78
 800d88c:	080221e8 	.word	0x080221e8
 800d890:	20005a7c 	.word	0x20005a7c
 800d894:	08022204 	.word	0x08022204
 800d898:	20005a80 	.word	0x20005a80
 800d89c:	08022220 	.word	0x08022220
 800d8a0:	20005a84 	.word	0x20005a84
 800d8a4:	0802223c 	.word	0x0802223c
 800d8a8:	20005a88 	.word	0x20005a88

0800d8ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b094      	sub	sp, #80	; 0x50
 800d8b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d8b2:	f107 0320 	add.w	r3, r7, #32
 800d8b6:	2230      	movs	r2, #48	; 0x30
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f011 fdbe 	bl	801f43c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d8c0:	f107 030c 	add.w	r3, r7, #12
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	605a      	str	r2, [r3, #4]
 800d8ca:	609a      	str	r2, [r3, #8]
 800d8cc:	60da      	str	r2, [r3, #12]
 800d8ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	60bb      	str	r3, [r7, #8]
 800d8d4:	4b28      	ldr	r3, [pc, #160]	; (800d978 <SystemClock_Config+0xcc>)
 800d8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d8:	4a27      	ldr	r2, [pc, #156]	; (800d978 <SystemClock_Config+0xcc>)
 800d8da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8de:	6413      	str	r3, [r2, #64]	; 0x40
 800d8e0:	4b25      	ldr	r3, [pc, #148]	; (800d978 <SystemClock_Config+0xcc>)
 800d8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8e8:	60bb      	str	r3, [r7, #8]
 800d8ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	607b      	str	r3, [r7, #4]
 800d8f0:	4b22      	ldr	r3, [pc, #136]	; (800d97c <SystemClock_Config+0xd0>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a21      	ldr	r2, [pc, #132]	; (800d97c <SystemClock_Config+0xd0>)
 800d8f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d8fa:	6013      	str	r3, [r2, #0]
 800d8fc:	4b1f      	ldr	r3, [pc, #124]	; (800d97c <SystemClock_Config+0xd0>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d904:	607b      	str	r3, [r7, #4]
 800d906:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800d908:	2309      	movs	r3, #9
 800d90a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d90c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d910:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800d912:	2301      	movs	r3, #1
 800d914:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d916:	2302      	movs	r3, #2
 800d918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d91a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d91e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800d920:	2319      	movs	r3, #25
 800d922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800d924:	23c0      	movs	r3, #192	; 0xc0
 800d926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d928:	2302      	movs	r3, #2
 800d92a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d92c:	2304      	movs	r3, #4
 800d92e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d930:	f107 0320 	add.w	r3, r7, #32
 800d934:	4618      	mov	r0, r3
 800d936:	f006 f82b 	bl	8013990 <HAL_RCC_OscConfig>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d001      	beq.n	800d944 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800d940:	f000 feb2 	bl	800e6a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d944:	230f      	movs	r3, #15
 800d946:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d948:	2302      	movs	r3, #2
 800d94a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d94c:	2300      	movs	r3, #0
 800d94e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d956:	2300      	movs	r3, #0
 800d958:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800d95a:	f107 030c 	add.w	r3, r7, #12
 800d95e:	2103      	movs	r1, #3
 800d960:	4618      	mov	r0, r3
 800d962:	f006 fa8d 	bl	8013e80 <HAL_RCC_ClockConfig>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d001      	beq.n	800d970 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800d96c:	f000 fe9c 	bl	800e6a8 <Error_Handler>
  }
}
 800d970:	bf00      	nop
 800d972:	3750      	adds	r7, #80	; 0x50
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	40023800 	.word	0x40023800
 800d97c:	40007000 	.word	0x40007000

0800d980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d984:	4b12      	ldr	r3, [pc, #72]	; (800d9d0 <MX_I2C1_Init+0x50>)
 800d986:	4a13      	ldr	r2, [pc, #76]	; (800d9d4 <MX_I2C1_Init+0x54>)
 800d988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800d98a:	4b11      	ldr	r3, [pc, #68]	; (800d9d0 <MX_I2C1_Init+0x50>)
 800d98c:	4a12      	ldr	r2, [pc, #72]	; (800d9d8 <MX_I2C1_Init+0x58>)
 800d98e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d990:	4b0f      	ldr	r3, [pc, #60]	; (800d9d0 <MX_I2C1_Init+0x50>)
 800d992:	2200      	movs	r2, #0
 800d994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d996:	4b0e      	ldr	r3, [pc, #56]	; (800d9d0 <MX_I2C1_Init+0x50>)
 800d998:	2200      	movs	r2, #0
 800d99a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d99c:	4b0c      	ldr	r3, [pc, #48]	; (800d9d0 <MX_I2C1_Init+0x50>)
 800d99e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d9a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d9a4:	4b0a      	ldr	r3, [pc, #40]	; (800d9d0 <MX_I2C1_Init+0x50>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d9aa:	4b09      	ldr	r3, [pc, #36]	; (800d9d0 <MX_I2C1_Init+0x50>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d9b0:	4b07      	ldr	r3, [pc, #28]	; (800d9d0 <MX_I2C1_Init+0x50>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d9b6:	4b06      	ldr	r3, [pc, #24]	; (800d9d0 <MX_I2C1_Init+0x50>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d9bc:	4804      	ldr	r0, [pc, #16]	; (800d9d0 <MX_I2C1_Init+0x50>)
 800d9be:	f002 fd13 	bl	80103e8 <HAL_I2C_Init>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d9c8:	f000 fe6e 	bl	800e6a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d9cc:	bf00      	nop
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	2000576c 	.word	0x2000576c
 800d9d4:	40005400 	.word	0x40005400
 800d9d8:	00061a80 	.word	0x00061a80

0800d9dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800d9e0:	4b0f      	ldr	r3, [pc, #60]	; (800da20 <MX_RTC_Init+0x44>)
 800d9e2:	4a10      	ldr	r2, [pc, #64]	; (800da24 <MX_RTC_Init+0x48>)
 800d9e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d9e6:	4b0e      	ldr	r3, [pc, #56]	; (800da20 <MX_RTC_Init+0x44>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800d9ec:	4b0c      	ldr	r3, [pc, #48]	; (800da20 <MX_RTC_Init+0x44>)
 800d9ee:	227f      	movs	r2, #127	; 0x7f
 800d9f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800d9f2:	4b0b      	ldr	r3, [pc, #44]	; (800da20 <MX_RTC_Init+0x44>)
 800d9f4:	22ff      	movs	r2, #255	; 0xff
 800d9f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d9f8:	4b09      	ldr	r3, [pc, #36]	; (800da20 <MX_RTC_Init+0x44>)
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d9fe:	4b08      	ldr	r3, [pc, #32]	; (800da20 <MX_RTC_Init+0x44>)
 800da00:	2200      	movs	r2, #0
 800da02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800da04:	4b06      	ldr	r3, [pc, #24]	; (800da20 <MX_RTC_Init+0x44>)
 800da06:	2200      	movs	r2, #0
 800da08:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800da0a:	4805      	ldr	r0, [pc, #20]	; (800da20 <MX_RTC_Init+0x44>)
 800da0c:	f006 fd3a 	bl	8014484 <HAL_RTC_Init>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d001      	beq.n	800da1a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800da16:	f000 fe47 	bl	800e6a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800da1a:	bf00      	nop
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20005820 	.word	0x20005820
 800da24:	40002800 	.word	0x40002800

0800da28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800da2c:	4b17      	ldr	r3, [pc, #92]	; (800da8c <MX_SPI1_Init+0x64>)
 800da2e:	4a18      	ldr	r2, [pc, #96]	; (800da90 <MX_SPI1_Init+0x68>)
 800da30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800da32:	4b16      	ldr	r3, [pc, #88]	; (800da8c <MX_SPI1_Init+0x64>)
 800da34:	f44f 7282 	mov.w	r2, #260	; 0x104
 800da38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800da3a:	4b14      	ldr	r3, [pc, #80]	; (800da8c <MX_SPI1_Init+0x64>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800da40:	4b12      	ldr	r3, [pc, #72]	; (800da8c <MX_SPI1_Init+0x64>)
 800da42:	2200      	movs	r2, #0
 800da44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800da46:	4b11      	ldr	r3, [pc, #68]	; (800da8c <MX_SPI1_Init+0x64>)
 800da48:	2200      	movs	r2, #0
 800da4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800da4c:	4b0f      	ldr	r3, [pc, #60]	; (800da8c <MX_SPI1_Init+0x64>)
 800da4e:	2200      	movs	r2, #0
 800da50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800da52:	4b0e      	ldr	r3, [pc, #56]	; (800da8c <MX_SPI1_Init+0x64>)
 800da54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800da5a:	4b0c      	ldr	r3, [pc, #48]	; (800da8c <MX_SPI1_Init+0x64>)
 800da5c:	2210      	movs	r2, #16
 800da5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800da60:	4b0a      	ldr	r3, [pc, #40]	; (800da8c <MX_SPI1_Init+0x64>)
 800da62:	2200      	movs	r2, #0
 800da64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800da66:	4b09      	ldr	r3, [pc, #36]	; (800da8c <MX_SPI1_Init+0x64>)
 800da68:	2200      	movs	r2, #0
 800da6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da6c:	4b07      	ldr	r3, [pc, #28]	; (800da8c <MX_SPI1_Init+0x64>)
 800da6e:	2200      	movs	r2, #0
 800da70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800da72:	4b06      	ldr	r3, [pc, #24]	; (800da8c <MX_SPI1_Init+0x64>)
 800da74:	220a      	movs	r2, #10
 800da76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800da78:	4804      	ldr	r0, [pc, #16]	; (800da8c <MX_SPI1_Init+0x64>)
 800da7a:	f006 fdfd 	bl	8014678 <HAL_SPI_Init>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d001      	beq.n	800da88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800da84:	f000 fe10 	bl	800e6a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800da88:	bf00      	nop
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	20005840 	.word	0x20005840
 800da90:	40013000 	.word	0x40013000

0800da94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b096      	sub	sp, #88	; 0x58
 800da98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800da9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800da9e:	2200      	movs	r2, #0
 800daa0:	601a      	str	r2, [r3, #0]
 800daa2:	605a      	str	r2, [r3, #4]
 800daa4:	609a      	str	r2, [r3, #8]
 800daa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800daa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800daac:	2200      	movs	r2, #0
 800daae:	601a      	str	r2, [r3, #0]
 800dab0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dab6:	2200      	movs	r2, #0
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	605a      	str	r2, [r3, #4]
 800dabc:	609a      	str	r2, [r3, #8]
 800dabe:	60da      	str	r2, [r3, #12]
 800dac0:	611a      	str	r2, [r3, #16]
 800dac2:	615a      	str	r2, [r3, #20]
 800dac4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800dac6:	1d3b      	adds	r3, r7, #4
 800dac8:	2220      	movs	r2, #32
 800daca:	2100      	movs	r1, #0
 800dacc:	4618      	mov	r0, r3
 800dace:	f011 fcb5 	bl	801f43c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800dad2:	4b4a      	ldr	r3, [pc, #296]	; (800dbfc <MX_TIM1_Init+0x168>)
 800dad4:	4a4a      	ldr	r2, [pc, #296]	; (800dc00 <MX_TIM1_Init+0x16c>)
 800dad6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800dad8:	4b48      	ldr	r3, [pc, #288]	; (800dbfc <MX_TIM1_Init+0x168>)
 800dada:	2200      	movs	r2, #0
 800dadc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dade:	4b47      	ldr	r3, [pc, #284]	; (800dbfc <MX_TIM1_Init+0x168>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 800dae4:	4b45      	ldr	r3, [pc, #276]	; (800dbfc <MX_TIM1_Init+0x168>)
 800dae6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800daea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800daec:	4b43      	ldr	r3, [pc, #268]	; (800dbfc <MX_TIM1_Init+0x168>)
 800daee:	2200      	movs	r2, #0
 800daf0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800daf2:	4b42      	ldr	r3, [pc, #264]	; (800dbfc <MX_TIM1_Init+0x168>)
 800daf4:	2200      	movs	r2, #0
 800daf6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800daf8:	4b40      	ldr	r3, [pc, #256]	; (800dbfc <MX_TIM1_Init+0x168>)
 800dafa:	2280      	movs	r2, #128	; 0x80
 800dafc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800dafe:	483f      	ldr	r0, [pc, #252]	; (800dbfc <MX_TIM1_Init+0x168>)
 800db00:	f007 fc3a 	bl	8015378 <HAL_TIM_Base_Init>
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800db0a:	f000 fdcd 	bl	800e6a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800db0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800db14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db18:	4619      	mov	r1, r3
 800db1a:	4838      	ldr	r0, [pc, #224]	; (800dbfc <MX_TIM1_Init+0x168>)
 800db1c:	f007 ffb2 	bl	8015a84 <HAL_TIM_ConfigClockSource>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d001      	beq.n	800db2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800db26:	f000 fdbf 	bl	800e6a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800db2a:	4834      	ldr	r0, [pc, #208]	; (800dbfc <MX_TIM1_Init+0x168>)
 800db2c:	f007 fcd6 	bl	80154dc <HAL_TIM_PWM_Init>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d001      	beq.n	800db3a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800db36:	f000 fdb7 	bl	800e6a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800db3a:	2300      	movs	r3, #0
 800db3c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800db3e:	2300      	movs	r3, #0
 800db40:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800db42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800db46:	4619      	mov	r1, r3
 800db48:	482c      	ldr	r0, [pc, #176]	; (800dbfc <MX_TIM1_Init+0x168>)
 800db4a:	f008 fb57 	bl	80161fc <HAL_TIMEx_MasterConfigSynchronization>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d001      	beq.n	800db58 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800db54:	f000 fda8 	bl	800e6a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800db58:	2360      	movs	r3, #96	; 0x60
 800db5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800db5c:	2300      	movs	r3, #0
 800db5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800db60:	2300      	movs	r3, #0
 800db62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800db64:	2300      	movs	r3, #0
 800db66:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800db68:	2300      	movs	r3, #0
 800db6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800db6c:	2300      	movs	r3, #0
 800db6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800db70:	2300      	movs	r3, #0
 800db72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800db74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db78:	2200      	movs	r2, #0
 800db7a:	4619      	mov	r1, r3
 800db7c:	481f      	ldr	r0, [pc, #124]	; (800dbfc <MX_TIM1_Init+0x168>)
 800db7e:	f007 febf 	bl	8015900 <HAL_TIM_PWM_ConfigChannel>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d001      	beq.n	800db8c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800db88:	f000 fd8e 	bl	800e6a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800db8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db90:	2204      	movs	r2, #4
 800db92:	4619      	mov	r1, r3
 800db94:	4819      	ldr	r0, [pc, #100]	; (800dbfc <MX_TIM1_Init+0x168>)
 800db96:	f007 feb3 	bl	8015900 <HAL_TIM_PWM_ConfigChannel>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800dba0:	f000 fd82 	bl	800e6a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dba8:	2208      	movs	r2, #8
 800dbaa:	4619      	mov	r1, r3
 800dbac:	4813      	ldr	r0, [pc, #76]	; (800dbfc <MX_TIM1_Init+0x168>)
 800dbae:	f007 fea7 	bl	8015900 <HAL_TIM_PWM_ConfigChannel>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800dbb8:	f000 fd76 	bl	800e6a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800dbd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800dbda:	1d3b      	adds	r3, r7, #4
 800dbdc:	4619      	mov	r1, r3
 800dbde:	4807      	ldr	r0, [pc, #28]	; (800dbfc <MX_TIM1_Init+0x168>)
 800dbe0:	f008 fb7a 	bl	80162d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800dbea:	f000 fd5d 	bl	800e6a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800dbee:	4803      	ldr	r0, [pc, #12]	; (800dbfc <MX_TIM1_Init+0x168>)
 800dbf0:	f000 ff70 	bl	800ead4 <HAL_TIM_MspPostInit>

}
 800dbf4:	bf00      	nop
 800dbf6:	3758      	adds	r7, #88	; 0x58
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	20005958 	.word	0x20005958
 800dc00:	40010000 	.word	0x40010000

0800dc04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dc0a:	f107 0308 	add.w	r3, r7, #8
 800dc0e:	2200      	movs	r2, #0
 800dc10:	601a      	str	r2, [r3, #0]
 800dc12:	605a      	str	r2, [r3, #4]
 800dc14:	609a      	str	r2, [r3, #8]
 800dc16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc18:	463b      	mov	r3, r7
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	601a      	str	r2, [r3, #0]
 800dc1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800dc20:	4b1e      	ldr	r3, [pc, #120]	; (800dc9c <MX_TIM2_Init+0x98>)
 800dc22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dc26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600;
 800dc28:	4b1c      	ldr	r3, [pc, #112]	; (800dc9c <MX_TIM2_Init+0x98>)
 800dc2a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800dc2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc30:	4b1a      	ldr	r3, [pc, #104]	; (800dc9c <MX_TIM2_Init+0x98>)
 800dc32:	2200      	movs	r2, #0
 800dc34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800dc36:	4b19      	ldr	r3, [pc, #100]	; (800dc9c <MX_TIM2_Init+0x98>)
 800dc38:	f04f 32ff 	mov.w	r2, #4294967295
 800dc3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc3e:	4b17      	ldr	r3, [pc, #92]	; (800dc9c <MX_TIM2_Init+0x98>)
 800dc40:	2200      	movs	r2, #0
 800dc42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800dc44:	4b15      	ldr	r3, [pc, #84]	; (800dc9c <MX_TIM2_Init+0x98>)
 800dc46:	2280      	movs	r2, #128	; 0x80
 800dc48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800dc4a:	4814      	ldr	r0, [pc, #80]	; (800dc9c <MX_TIM2_Init+0x98>)
 800dc4c:	f007 fb94 	bl	8015378 <HAL_TIM_Base_Init>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d001      	beq.n	800dc5a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800dc56:	f000 fd27 	bl	800e6a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dc5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800dc60:	f107 0308 	add.w	r3, r7, #8
 800dc64:	4619      	mov	r1, r3
 800dc66:	480d      	ldr	r0, [pc, #52]	; (800dc9c <MX_TIM2_Init+0x98>)
 800dc68:	f007 ff0c 	bl	8015a84 <HAL_TIM_ConfigClockSource>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d001      	beq.n	800dc76 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800dc72:	f000 fd19 	bl	800e6a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc76:	2300      	movs	r3, #0
 800dc78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dc7e:	463b      	mov	r3, r7
 800dc80:	4619      	mov	r1, r3
 800dc82:	4806      	ldr	r0, [pc, #24]	; (800dc9c <MX_TIM2_Init+0x98>)
 800dc84:	f008 faba 	bl	80161fc <HAL_TIMEx_MasterConfigSynchronization>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d001      	beq.n	800dc92 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800dc8e:	f000 fd0b 	bl	800e6a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800dc92:	bf00      	nop
 800dc94:	3718      	adds	r7, #24
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	200059a0 	.word	0x200059a0

0800dca0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dca6:	f107 0308 	add.w	r3, r7, #8
 800dcaa:	2200      	movs	r2, #0
 800dcac:	601a      	str	r2, [r3, #0]
 800dcae:	605a      	str	r2, [r3, #4]
 800dcb0:	609a      	str	r2, [r3, #8]
 800dcb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dcb4:	463b      	mov	r3, r7
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]
 800dcba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dcbc:	4b1d      	ldr	r3, [pc, #116]	; (800dd34 <MX_TIM3_Init+0x94>)
 800dcbe:	4a1e      	ldr	r2, [pc, #120]	; (800dd38 <MX_TIM3_Init+0x98>)
 800dcc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 800dcc2:	4b1c      	ldr	r3, [pc, #112]	; (800dd34 <MX_TIM3_Init+0x94>)
 800dcc4:	f242 7210 	movw	r2, #10000	; 0x2710
 800dcc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dcca:	4b1a      	ldr	r3, [pc, #104]	; (800dd34 <MX_TIM3_Init+0x94>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9600;
 800dcd0:	4b18      	ldr	r3, [pc, #96]	; (800dd34 <MX_TIM3_Init+0x94>)
 800dcd2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800dcd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dcd8:	4b16      	ldr	r3, [pc, #88]	; (800dd34 <MX_TIM3_Init+0x94>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800dcde:	4b15      	ldr	r3, [pc, #84]	; (800dd34 <MX_TIM3_Init+0x94>)
 800dce0:	2280      	movs	r2, #128	; 0x80
 800dce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800dce4:	4813      	ldr	r0, [pc, #76]	; (800dd34 <MX_TIM3_Init+0x94>)
 800dce6:	f007 fb47 	bl	8015378 <HAL_TIM_Base_Init>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d001      	beq.n	800dcf4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800dcf0:	f000 fcda 	bl	800e6a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dcf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800dcfa:	f107 0308 	add.w	r3, r7, #8
 800dcfe:	4619      	mov	r1, r3
 800dd00:	480c      	ldr	r0, [pc, #48]	; (800dd34 <MX_TIM3_Init+0x94>)
 800dd02:	f007 febf 	bl	8015a84 <HAL_TIM_ConfigClockSource>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800dd0c:	f000 fccc 	bl	800e6a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd10:	2300      	movs	r3, #0
 800dd12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd14:	2300      	movs	r3, #0
 800dd16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dd18:	463b      	mov	r3, r7
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4805      	ldr	r0, [pc, #20]	; (800dd34 <MX_TIM3_Init+0x94>)
 800dd1e:	f008 fa6d 	bl	80161fc <HAL_TIMEx_MasterConfigSynchronization>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d001      	beq.n	800dd2c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800dd28:	f000 fcbe 	bl	800e6a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800dd2c:	bf00      	nop
 800dd2e:	3718      	adds	r7, #24
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	200059e8 	.word	0x200059e8
 800dd38:	40000400 	.word	0x40000400

0800dd3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dd42:	f107 0308 	add.w	r3, r7, #8
 800dd46:	2200      	movs	r2, #0
 800dd48:	601a      	str	r2, [r3, #0]
 800dd4a:	605a      	str	r2, [r3, #4]
 800dd4c:	609a      	str	r2, [r3, #8]
 800dd4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd50:	463b      	mov	r3, r7
 800dd52:	2200      	movs	r2, #0
 800dd54:	601a      	str	r2, [r3, #0]
 800dd56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800dd58:	4b1d      	ldr	r3, [pc, #116]	; (800ddd0 <MX_TIM5_Init+0x94>)
 800dd5a:	4a1e      	ldr	r2, [pc, #120]	; (800ddd4 <MX_TIM5_Init+0x98>)
 800dd5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 800dd5e:	4b1c      	ldr	r3, [pc, #112]	; (800ddd0 <MX_TIM5_Init+0x94>)
 800dd60:	225f      	movs	r2, #95	; 0x5f
 800dd62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd64:	4b1a      	ldr	r3, [pc, #104]	; (800ddd0 <MX_TIM5_Init+0x94>)
 800dd66:	2200      	movs	r2, #0
 800dd68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800dd6a:	4b19      	ldr	r3, [pc, #100]	; (800ddd0 <MX_TIM5_Init+0x94>)
 800dd6c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dd72:	4b17      	ldr	r3, [pc, #92]	; (800ddd0 <MX_TIM5_Init+0x94>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd78:	4b15      	ldr	r3, [pc, #84]	; (800ddd0 <MX_TIM5_Init+0x94>)
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800dd7e:	4814      	ldr	r0, [pc, #80]	; (800ddd0 <MX_TIM5_Init+0x94>)
 800dd80:	f007 fafa 	bl	8015378 <HAL_TIM_Base_Init>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d001      	beq.n	800dd8e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800dd8a:	f000 fc8d 	bl	800e6a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dd8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800dd94:	f107 0308 	add.w	r3, r7, #8
 800dd98:	4619      	mov	r1, r3
 800dd9a:	480d      	ldr	r0, [pc, #52]	; (800ddd0 <MX_TIM5_Init+0x94>)
 800dd9c:	f007 fe72 	bl	8015a84 <HAL_TIM_ConfigClockSource>
 800dda0:	4603      	mov	r3, r0
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d001      	beq.n	800ddaa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800dda6:	f000 fc7f 	bl	800e6a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ddb2:	463b      	mov	r3, r7
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	4806      	ldr	r0, [pc, #24]	; (800ddd0 <MX_TIM5_Init+0x94>)
 800ddb8:	f008 fa20 	bl	80161fc <HAL_TIMEx_MasterConfigSynchronization>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d001      	beq.n	800ddc6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800ddc2:	f000 fc71 	bl	800e6a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800ddc6:	bf00      	nop
 800ddc8:	3718      	adds	r7, #24
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	20005a30 	.word	0x20005a30
 800ddd4:	40000c00 	.word	0x40000c00

0800ddd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ddde:	2300      	movs	r3, #0
 800dde0:	607b      	str	r3, [r7, #4]
 800dde2:	4b1b      	ldr	r3, [pc, #108]	; (800de50 <MX_DMA_Init+0x78>)
 800dde4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dde6:	4a1a      	ldr	r2, [pc, #104]	; (800de50 <MX_DMA_Init+0x78>)
 800dde8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ddec:	6313      	str	r3, [r2, #48]	; 0x30
 800ddee:	4b18      	ldr	r3, [pc, #96]	; (800de50 <MX_DMA_Init+0x78>)
 800ddf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ddf6:	607b      	str	r3, [r7, #4]
 800ddf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	603b      	str	r3, [r7, #0]
 800ddfe:	4b14      	ldr	r3, [pc, #80]	; (800de50 <MX_DMA_Init+0x78>)
 800de00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de02:	4a13      	ldr	r2, [pc, #76]	; (800de50 <MX_DMA_Init+0x78>)
 800de04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800de08:	6313      	str	r3, [r2, #48]	; 0x30
 800de0a:	4b11      	ldr	r3, [pc, #68]	; (800de50 <MX_DMA_Init+0x78>)
 800de0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800de12:	603b      	str	r3, [r7, #0]
 800de14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800de16:	2200      	movs	r2, #0
 800de18:	2105      	movs	r1, #5
 800de1a:	200c      	movs	r0, #12
 800de1c:	f001 fa64 	bl	800f2e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800de20:	200c      	movs	r0, #12
 800de22:	f001 fa7d 	bl	800f320 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800de26:	2200      	movs	r2, #0
 800de28:	2105      	movs	r1, #5
 800de2a:	2038      	movs	r0, #56	; 0x38
 800de2c:	f001 fa5c 	bl	800f2e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800de30:	2038      	movs	r0, #56	; 0x38
 800de32:	f001 fa75 	bl	800f320 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800de36:	2200      	movs	r2, #0
 800de38:	2105      	movs	r1, #5
 800de3a:	203a      	movs	r0, #58	; 0x3a
 800de3c:	f001 fa54 	bl	800f2e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800de40:	203a      	movs	r0, #58	; 0x3a
 800de42:	f001 fa6d 	bl	800f320 <HAL_NVIC_EnableIRQ>

}
 800de46:	bf00      	nop
 800de48:	3708      	adds	r7, #8
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	40023800 	.word	0x40023800

0800de54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b088      	sub	sp, #32
 800de58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de5a:	f107 030c 	add.w	r3, r7, #12
 800de5e:	2200      	movs	r2, #0
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	605a      	str	r2, [r3, #4]
 800de64:	609a      	str	r2, [r3, #8]
 800de66:	60da      	str	r2, [r3, #12]
 800de68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800de6a:	2300      	movs	r3, #0
 800de6c:	60bb      	str	r3, [r7, #8]
 800de6e:	4b36      	ldr	r3, [pc, #216]	; (800df48 <MX_GPIO_Init+0xf4>)
 800de70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de72:	4a35      	ldr	r2, [pc, #212]	; (800df48 <MX_GPIO_Init+0xf4>)
 800de74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de78:	6313      	str	r3, [r2, #48]	; 0x30
 800de7a:	4b33      	ldr	r3, [pc, #204]	; (800df48 <MX_GPIO_Init+0xf4>)
 800de7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de82:	60bb      	str	r3, [r7, #8]
 800de84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800de86:	2300      	movs	r3, #0
 800de88:	607b      	str	r3, [r7, #4]
 800de8a:	4b2f      	ldr	r3, [pc, #188]	; (800df48 <MX_GPIO_Init+0xf4>)
 800de8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de8e:	4a2e      	ldr	r2, [pc, #184]	; (800df48 <MX_GPIO_Init+0xf4>)
 800de90:	f043 0301 	orr.w	r3, r3, #1
 800de94:	6313      	str	r3, [r2, #48]	; 0x30
 800de96:	4b2c      	ldr	r3, [pc, #176]	; (800df48 <MX_GPIO_Init+0xf4>)
 800de98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de9a:	f003 0301 	and.w	r3, r3, #1
 800de9e:	607b      	str	r3, [r7, #4]
 800dea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800dea2:	2300      	movs	r3, #0
 800dea4:	603b      	str	r3, [r7, #0]
 800dea6:	4b28      	ldr	r3, [pc, #160]	; (800df48 <MX_GPIO_Init+0xf4>)
 800dea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deaa:	4a27      	ldr	r2, [pc, #156]	; (800df48 <MX_GPIO_Init+0xf4>)
 800deac:	f043 0302 	orr.w	r3, r3, #2
 800deb0:	6313      	str	r3, [r2, #48]	; 0x30
 800deb2:	4b25      	ldr	r3, [pc, #148]	; (800df48 <MX_GPIO_Init+0xf4>)
 800deb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deb6:	f003 0302 	and.w	r3, r3, #2
 800deba:	603b      	str	r3, [r7, #0]
 800debc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_CS_Pin|DO1_Pin, GPIO_PIN_RESET);
 800debe:	2200      	movs	r2, #0
 800dec0:	f240 2101 	movw	r1, #513	; 0x201
 800dec4:	4821      	ldr	r0, [pc, #132]	; (800df4c <MX_GPIO_Init+0xf8>)
 800dec6:	f002 fa5d 	bl	8010384 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_INT2_Pin ACC_INT1_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin|ACC_INT1_Pin;
 800deca:	2318      	movs	r3, #24
 800decc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800dece:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800ded2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ded4:	2300      	movs	r3, #0
 800ded6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ded8:	f107 030c 	add.w	r3, r7, #12
 800dedc:	4619      	mov	r1, r3
 800dede:	481c      	ldr	r0, [pc, #112]	; (800df50 <MX_GPIO_Init+0xfc>)
 800dee0:	f002 f8cc 	bl	801007c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800dee4:	2301      	movs	r3, #1
 800dee6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dee8:	2301      	movs	r3, #1
 800deea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800deec:	2301      	movs	r3, #1
 800deee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800def0:	2303      	movs	r3, #3
 800def2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800def4:	f107 030c 	add.w	r3, r7, #12
 800def8:	4619      	mov	r1, r3
 800defa:	4814      	ldr	r0, [pc, #80]	; (800df4c <MX_GPIO_Init+0xf8>)
 800defc:	f002 f8be 	bl	801007c <HAL_GPIO_Init>

  /*Configure GPIO pin : DO1_Pin */
  GPIO_InitStruct.Pin = DO1_Pin;
 800df00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800df06:	2301      	movs	r3, #1
 800df08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800df0a:	2302      	movs	r3, #2
 800df0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df0e:	2303      	movs	r3, #3
 800df10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DO1_GPIO_Port, &GPIO_InitStruct);
 800df12:	f107 030c 	add.w	r3, r7, #12
 800df16:	4619      	mov	r1, r3
 800df18:	480c      	ldr	r0, [pc, #48]	; (800df4c <MX_GPIO_Init+0xf8>)
 800df1a:	f002 f8af 	bl	801007c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800df1e:	2200      	movs	r2, #0
 800df20:	2105      	movs	r1, #5
 800df22:	2009      	movs	r0, #9
 800df24:	f001 f9e0 	bl	800f2e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800df28:	2009      	movs	r0, #9
 800df2a:	f001 f9f9 	bl	800f320 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800df2e:	2200      	movs	r2, #0
 800df30:	2105      	movs	r1, #5
 800df32:	200a      	movs	r0, #10
 800df34:	f001 f9d8 	bl	800f2e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800df38:	200a      	movs	r0, #10
 800df3a:	f001 f9f1 	bl	800f320 <HAL_NVIC_EnableIRQ>

}
 800df3e:	bf00      	nop
 800df40:	3720      	adds	r7, #32
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	40023800 	.word	0x40023800
 800df4c:	40020400 	.word	0x40020400
 800df50:	40020000 	.word	0x40020000

0800df54 <getRunTimeCounterValue>:

/* USER CODE BEGIN 4 */
unsigned long getRunTimeCounterValue(void)
{
 800df54:	b480      	push	{r7}
 800df56:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 800df58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800df5e:	4618      	mov	r0, r3
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af02      	add	r7, sp, #8
 800df6e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800df70:	2300      	movs	r3, #0
 800df72:	60fb      	str	r3, [r7, #12]

	if (hspi->Instance == SPI1)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a0f      	ldr	r2, [pc, #60]	; (800dfb8 <HAL_SPI_TxRxCpltCallback+0x50>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d117      	bne.n	800dfae <HAL_SPI_TxRxCpltCallback+0x46>
	{
		IIM42652_GetFIFOData_DMA_Complete(&IMU);
 800df7e:	480f      	ldr	r0, [pc, #60]	; (800dfbc <HAL_SPI_TxRxCpltCallback+0x54>)
 800df80:	f7fd f928 	bl	800b1d4 <IIM42652_GetFIFOData_DMA_Complete>
//		__IMU_INT1_ON();
//		xTaskNotifyFromISR(ImuTaskHandle, AC1_Notify_NewDataAvaiable, eSetBits, &xHigherPriorityTaskWoken);
		xTaskNotifyFromISR(SignalElabTaskHandle, AC1_Notify_NewDataAvaiable, eSetBits, &xHigherPriorityTaskWoken);
 800df84:	4b0e      	ldr	r3, [pc, #56]	; (800dfc0 <HAL_SPI_TxRxCpltCallback+0x58>)
 800df86:	6818      	ldr	r0, [r3, #0]
 800df88:	f107 030c 	add.w	r3, r7, #12
 800df8c:	9300      	str	r3, [sp, #0]
 800df8e:	2300      	movs	r3, #0
 800df90:	2201      	movs	r2, #1
 800df92:	2104      	movs	r1, #4
 800df94:	f00e fa2a 	bl	801c3ec <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d007      	beq.n	800dfae <HAL_SPI_TxRxCpltCallback+0x46>
 800df9e:	4b09      	ldr	r3, [pc, #36]	; (800dfc4 <HAL_SPI_TxRxCpltCallback+0x5c>)
 800dfa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	f3bf 8f4f 	dsb	sy
 800dfaa:	f3bf 8f6f 	isb	sy
	}
}
 800dfae:	bf00      	nop
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	40013000 	.word	0x40013000
 800dfbc:	20000300 	.word	0x20000300
 800dfc0:	20005a7c 	.word	0x20005a7c
 800dfc4:	e000ed04 	.word	0xe000ed04

0800dfc8 <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a06      	ldr	r2, [pc, #24]	; (800dff0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d105      	bne.n	800dfe6 <HAL_I2C_MasterTxCpltCallback+0x1e>
	{
		DAC7571_WriteDMA_Complete(&DAC);
 800dfda:	4806      	ldr	r0, [pc, #24]	; (800dff4 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 800dfdc:	f7fb f87b 	bl	80090d6 <DAC7571_WriteDMA_Complete>
		DAC7571_TestOutput(&DAC);
 800dfe0:	4804      	ldr	r0, [pc, #16]	; (800dff4 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 800dfe2:	f7fb f889 	bl	80090f8 <DAC7571_TestOutput>
	}
}
 800dfe6:	bf00      	nop
 800dfe8:	3708      	adds	r7, #8
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	40005400 	.word	0x40005400
 800dff4:	200002ec 	.word	0x200002ec

0800dff8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	4603      	mov	r3, r0
 800e000:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e002:	2300      	movs	r3, #0
 800e004:	60fb      	str	r3, [r7, #12]

	if (GPIO_Pin == ACC_INT1_Pin)
 800e006:	88fb      	ldrh	r3, [r7, #6]
 800e008:	2b10      	cmp	r3, #16
 800e00a:	d112      	bne.n	800e032 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		if (AC1_StatusWord.IMUAnalysisON == 1 && IMU.m_FIFO_reading == 0)
 800e00c:	4b17      	ldr	r3, [pc, #92]	; (800e06c <HAL_GPIO_EXTI_Callback+0x74>)
 800e00e:	791b      	ldrb	r3, [r3, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00e      	beq.n	800e032 <HAL_GPIO_EXTI_Callback+0x3a>
 800e014:	4b16      	ldr	r3, [pc, #88]	; (800e070 <HAL_GPIO_EXTI_Callback+0x78>)
 800e016:	f893 3824 	ldrb.w	r3, [r3, #2084]	; 0x824
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d108      	bne.n	800e032 <HAL_GPIO_EXTI_Callback+0x3a>
		{
//			__IMU_INT1_OFF();
			IIM42652_GetFIFOData_DMA(&IMU);
 800e020:	4813      	ldr	r0, [pc, #76]	; (800e070 <HAL_GPIO_EXTI_Callback+0x78>)
 800e022:	f7fd f899 	bl	800b158 <IIM42652_GetFIFOData_DMA>
			osTimerStart(SPIReadTimoutTimerHandle, SPI_READ_TIMEOUT_MS);
 800e026:	4b13      	ldr	r3, [pc, #76]	; (800e074 <HAL_GPIO_EXTI_Callback+0x7c>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2164      	movs	r1, #100	; 0x64
 800e02c:	4618      	mov	r0, r3
 800e02e:	f00b fea1 	bl	8019d74 <osTimerStart>
		}
	}
	if (GPIO_Pin == ACC_INT2_Pin)
 800e032:	88fb      	ldrh	r3, [r7, #6]
 800e034:	2b08      	cmp	r3, #8
 800e036:	d115      	bne.n	800e064 <HAL_GPIO_EXTI_Callback+0x6c>
	{
		if (AC1_StatusWord.IMUAnalysisON == 1)
 800e038:	4b0c      	ldr	r3, [pc, #48]	; (800e06c <HAL_GPIO_EXTI_Callback+0x74>)
 800e03a:	791b      	ldrb	r3, [r3, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d011      	beq.n	800e064 <HAL_GPIO_EXTI_Callback+0x6c>
		{
			IMU.m_INT2State = 1;
 800e040:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <HAL_GPIO_EXTI_Callback+0x78>)
 800e042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e046:	2201      	movs	r2, #1
 800e048:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_SET);
 800e04c:	2201      	movs	r2, #1
 800e04e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e052:	4809      	ldr	r0, [pc, #36]	; (800e078 <HAL_GPIO_EXTI_Callback+0x80>)
 800e054:	f002 f996 	bl	8010384 <HAL_GPIO_WritePin>
			osTimerStart(DOTimerHandle, DO_PULSE_DUR_MS/portTICK_PERIOD_MS);
 800e058:	4b08      	ldr	r3, [pc, #32]	; (800e07c <HAL_GPIO_EXTI_Callback+0x84>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2114      	movs	r1, #20
 800e05e:	4618      	mov	r0, r3
 800e060:	f00b fe88 	bl	8019d74 <osTimerStart>
		}
	}
}
 800e064:	bf00      	nop
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	200047dc 	.word	0x200047dc
 800e070:	20000300 	.word	0x20000300
 800e074:	20005a94 	.word	0x20005a94
 800e078:	40020400 	.word	0x40020400
 800e07c:	20005a90 	.word	0x20005a90

0800e080 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800e088:	f00f f93a 	bl	801d300 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  BaseType_t xResult;
  uint32_t ulNotifiedValue;
  vc_vector* sendData = vc_vector_create(3, sizeof(uint8_t), NULL);
 800e08c:	2200      	movs	r2, #0
 800e08e:	2101      	movs	r1, #1
 800e090:	2003      	movs	r0, #3
 800e092:	f7fe ffc2 	bl	800d01a <vc_vector_create>
 800e096:	6178      	str	r0, [r7, #20]
  uint8_t tempVal = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	72fb      	strb	r3, [r7, #11]

  if (!AC1_StatusWord.Booted)
 800e09c:	4b4b      	ldr	r3, [pc, #300]	; (800e1cc <StartMainTask+0x14c>)
 800e09e:	78db      	ldrb	r3, [r3, #3]
 800e0a0:	f083 0301 	eor.w	r3, r3, #1
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d019      	beq.n	800e0de <StartMainTask+0x5e>
  {
	  /* Semaphores has been created "taken" so we need to "give" them
	   * to be able to access to guarded bus used on the next initialization function calls
	   */
	  osSemaphoreRelease(spiBinarySemHandle);
 800e0aa:	4b49      	ldr	r3, [pc, #292]	; (800e1d0 <StartMainTask+0x150>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f00b ffc0 	bl	801a034 <osSemaphoreRelease>
	  osSemaphoreRelease(usbBinarySemHandle);
 800e0b4:	4b47      	ldr	r3, [pc, #284]	; (800e1d4 <StartMainTask+0x154>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f00b ffbb 	bl	801a034 <osSemaphoreRelease>
	  osSemaphoreRelease(fifoBinarySemHandle);
 800e0be:	4b46      	ldr	r3, [pc, #280]	; (800e1d8 <StartMainTask+0x158>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f00b ffb6 	bl	801a034 <osSemaphoreRelease>
	  initAll();
 800e0c8:	f7ff f99e 	bl	800d408 <initAll>

	  IIM42652_GetFIFOData_DMA(&IMU);
 800e0cc:	4843      	ldr	r0, [pc, #268]	; (800e1dc <StartMainTask+0x15c>)
 800e0ce:	f7fd f843 	bl	800b158 <IIM42652_GetFIFOData_DMA>
	  osTimerStart(SPIReadTimoutTimerHandle, SPI_READ_TIMEOUT_MS);
 800e0d2:	4b43      	ldr	r3, [pc, #268]	; (800e1e0 <StartMainTask+0x160>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2164      	movs	r1, #100	; 0x64
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f00b fe4b 	bl	8019d74 <osTimerStart>
  }
  /* Infinite loop */
  for(;;)
  {
	  xResult = xTaskNotifyWait( pdFALSE,		/* Don't clear bits on entry. */
 800e0de:	f107 020c 	add.w	r2, r7, #12
 800e0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e6:	f04f 31ff 	mov.w	r1, #4294967295
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	f00e f860 	bl	801c1b0 <xTaskNotifyWait>
 800e0f0:	6138      	str	r0, [r7, #16]
			  ULONG_MAX,			/* Clear all bits on exit. */
			  &ulNotifiedValue, 	/* Stores the notified value. */
			  portMAX_DELAY );

	  if( xResult == pdPASS )
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d164      	bne.n	800e1c2 <StartMainTask+0x142>
	  {
		  if(BitCheckW(ulNotifiedValue, AC1_Notify_AnalysisON_Bit) == 1)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2104      	movs	r1, #4
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fe fdaf 	bl	800cc60 <BitCheckW>
 800e102:	4603      	mov	r3, r0
 800e104:	2b01      	cmp	r3, #1
 800e106:	d119      	bne.n	800e13c <StartMainTask+0xbc>
		  {
			  RGB_SetActColor(&RGB, RGB.rgbCYAN, ENABLE);
 800e108:	4a36      	ldr	r2, [pc, #216]	; (800e1e4 <StartMainTask+0x164>)
 800e10a:	2301      	movs	r3, #1
 800e10c:	3224      	adds	r2, #36	; 0x24
 800e10e:	ca06      	ldmia	r2, {r1, r2}
 800e110:	4834      	ldr	r0, [pc, #208]	; (800e1e4 <StartMainTask+0x164>)
 800e112:	f7fd fc31 	bl	800b978 <RGB_SetActColor>
			  __IMU_TURN_ON(&IMU);
 800e116:	4831      	ldr	r0, [pc, #196]	; (800e1dc <StartMainTask+0x15c>)
 800e118:	f7fb ff22 	bl	8009f60 <__IMU_TURN_ON>
			  AC1_StatusWord.IMUAnalysisON = true;
 800e11c:	4b2b      	ldr	r3, [pc, #172]	; (800e1cc <StartMainTask+0x14c>)
 800e11e:	2201      	movs	r2, #1
 800e120:	711a      	strb	r2, [r3, #4]

			  //Send ack to configurator
			  tempVal = commandSetConfigMode;
 800e122:	23fc      	movs	r3, #252	; 0xfc
 800e124:	72fb      	strb	r3, [r7, #11]
			  vc_vector_push_back(sendData, &tempVal);
 800e126:	f107 030b 	add.w	r3, r7, #11
 800e12a:	4619      	mov	r1, r3
 800e12c:	6978      	ldr	r0, [r7, #20]
 800e12e:	f7ff f8db 	bl	800d2e8 <vc_vector_push_back>
			  ackCommand(&OMDCommProtocol, sendData, OMD_COMM_ACK_OK);
 800e132:	2210      	movs	r2, #16
 800e134:	6979      	ldr	r1, [r7, #20]
 800e136:	482c      	ldr	r0, [pc, #176]	; (800e1e8 <StartMainTask+0x168>)
 800e138:	f7fe f960 	bl	800c3fc <ackCommand>
		  }
		  if(BitCheckW(ulNotifiedValue, AC1_Notify_AnalysisOFF_Bit) == 1)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2105      	movs	r1, #5
 800e140:	4618      	mov	r0, r3
 800e142:	f7fe fd8d 	bl	800cc60 <BitCheckW>
 800e146:	4603      	mov	r3, r0
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d11e      	bne.n	800e18a <StartMainTask+0x10a>
		  {
			  RGB_SetActColor(&RGB, RGB.rgbYELLOW, ENABLE);
 800e14c:	4b25      	ldr	r3, [pc, #148]	; (800e1e4 <StartMainTask+0x164>)
 800e14e:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800e152:	4611      	mov	r1, r2
 800e154:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e156:	2200      	movs	r2, #0
 800e158:	f363 020f 	bfi	r2, r3, #0, #16
 800e15c:	2301      	movs	r3, #1
 800e15e:	4821      	ldr	r0, [pc, #132]	; (800e1e4 <StartMainTask+0x164>)
 800e160:	f7fd fc0a 	bl	800b978 <RGB_SetActColor>
			  AC1_StatusWord.IMUAnalysisON = false;
 800e164:	4b19      	ldr	r3, [pc, #100]	; (800e1cc <StartMainTask+0x14c>)
 800e166:	2200      	movs	r2, #0
 800e168:	711a      	strb	r2, [r3, #4]
			  __IMU_TURN_OFF(&IMU);
 800e16a:	481c      	ldr	r0, [pc, #112]	; (800e1dc <StartMainTask+0x15c>)
 800e16c:	f7fb ff15 	bl	8009f9a <__IMU_TURN_OFF>

			  //Send ack to configurator
			  tempVal = commandSetConfigMode;
 800e170:	23fc      	movs	r3, #252	; 0xfc
 800e172:	72fb      	strb	r3, [r7, #11]
			  vc_vector_push_back(sendData, &tempVal);
 800e174:	f107 030b 	add.w	r3, r7, #11
 800e178:	4619      	mov	r1, r3
 800e17a:	6978      	ldr	r0, [r7, #20]
 800e17c:	f7ff f8b4 	bl	800d2e8 <vc_vector_push_back>
			  ackCommand(&OMDCommProtocol, sendData, OMD_COMM_ACK_OK);
 800e180:	2210      	movs	r2, #16
 800e182:	6979      	ldr	r1, [r7, #20]
 800e184:	4818      	ldr	r0, [pc, #96]	; (800e1e8 <StartMainTask+0x168>)
 800e186:	f7fe f939 	bl	800c3fc <ackCommand>
		  }
		  if(BitCheckW(ulNotifiedValue, AC1_Notify_SaveConfig_Bit) == 1)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2106      	movs	r1, #6
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fe fd66 	bl	800cc60 <BitCheckW>
 800e194:	4603      	mov	r3, r0
 800e196:	2b01      	cmp	r3, #1
 800e198:	d113      	bne.n	800e1c2 <StartMainTask+0x142>
		  {
			  if (_SAVE_AC1_SETTINGS(userConfig) == HAL_OK)
 800e19a:	4b14      	ldr	r3, [pc, #80]	; (800e1ec <StartMainTask+0x16c>)
 800e19c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e19e:	f7fe fd79 	bl	800cc94 <_SAVE_AC1_SETTINGS>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d10c      	bne.n	800e1c2 <StartMainTask+0x142>
			  {
				  //Send ack to configurator
				  tempVal = commandSaveUserData;
 800e1a8:	23f0      	movs	r3, #240	; 0xf0
 800e1aa:	72fb      	strb	r3, [r7, #11]
				  vc_vector_push_back(sendData, &tempVal);
 800e1ac:	f107 030b 	add.w	r3, r7, #11
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	6978      	ldr	r0, [r7, #20]
 800e1b4:	f7ff f898 	bl	800d2e8 <vc_vector_push_back>
				  ackCommand(&OMDCommProtocol, sendData, OMD_COMM_ACK_OK);
 800e1b8:	2210      	movs	r2, #16
 800e1ba:	6979      	ldr	r1, [r7, #20]
 800e1bc:	480a      	ldr	r0, [pc, #40]	; (800e1e8 <StartMainTask+0x168>)
 800e1be:	f7fe f91d 	bl	800c3fc <ackCommand>
			  }
		  }
	  }
    osDelay(1);
 800e1c2:	2001      	movs	r0, #1
 800e1c4:	f00b fd8d 	bl	8019ce2 <osDelay>
	  xResult = xTaskNotifyWait( pdFALSE,		/* Don't clear bits on entry. */
 800e1c8:	e789      	b.n	800e0de <StartMainTask+0x5e>
 800e1ca:	bf00      	nop
 800e1cc:	200047dc 	.word	0x200047dc
 800e1d0:	20005a9c 	.word	0x20005a9c
 800e1d4:	20005ae8 	.word	0x20005ae8
 800e1d8:	20005aec 	.word	0x20005aec
 800e1dc:	20000300 	.word	0x20000300
 800e1e0:	20005a94 	.word	0x20005a94
 800e1e4:	20002f9c 	.word	0x20002f9c
 800e1e8:	20002fd4 	.word	0x20002fd4
 800e1ec:	20005b38 	.word	0x20005b38

0800e1f0 <StartSignalElabTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSignalElabTask */
void StartSignalElabTask(void const * argument)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
	  uint32_t ulNotifiedValue;
	  static uint8_t xFirst = 0;
	  static float32_t ImuFFTOut[6][IMU_FFT_SIZE];
	  static float32_t ImuFFTMagOut[6][IMU_FFT_SIZE];

	  xResult = xTaskNotifyWait( pdFALSE,    /* Don't clear bits on entry. */
 800e1f8:	f107 0208 	add.w	r2, r7, #8
 800e1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e200:	f04f 31ff 	mov.w	r1, #4294967295
 800e204:	2000      	movs	r0, #0
 800e206:	f00d ffd3 	bl	801c1b0 <xTaskNotifyWait>
 800e20a:	60f8      	str	r0, [r7, #12]
			  ULONG_MAX,        /* Clear all bits on exit. */
			  &ulNotifiedValue, /* Stores the notified value. */
			  portMAX_DELAY );

	  if( xResult == pdPASS )
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2b01      	cmp	r3, #1
 800e210:	f040 80c0 	bne.w	800e394 <StartSignalElabTask+0x1a4>
	  {
		  if (BitCheckW(ulNotifiedValue, AC1_Notify_NewDataAvaiable_Bit) == 1 )
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	2102      	movs	r1, #2
 800e218:	4618      	mov	r0, r3
 800e21a:	f7fe fd21 	bl	800cc60 <BitCheckW>
		  {
			  ;
		  }
		  if (RINGBUFFER_FULL(&AccXBuffer))
 800e21e:	4b5f      	ldr	r3, [pc, #380]	; (800e39c <StartSignalElabTask+0x1ac>)
 800e220:	885a      	ldrh	r2, [r3, #2]
 800e222:	4b5e      	ldr	r3, [pc, #376]	; (800e39c <StartSignalElabTask+0x1ac>)
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	1ad3      	subs	r3, r2, r3
 800e228:	b29b      	uxth	r3, r3
 800e22a:	2bff      	cmp	r3, #255	; 0xff
 800e22c:	d911      	bls.n	800e252 <StartSignalElabTask+0x62>
		  {
			  arm_rfft_fast_f32(&S, (float32_t *)AccXBuffer.buffer, (float32_t *)ImuFFTOut[0], 0);
 800e22e:	2300      	movs	r3, #0
 800e230:	4a5b      	ldr	r2, [pc, #364]	; (800e3a0 <StartSignalElabTask+0x1b0>)
 800e232:	495c      	ldr	r1, [pc, #368]	; (800e3a4 <StartSignalElabTask+0x1b4>)
 800e234:	485c      	ldr	r0, [pc, #368]	; (800e3a8 <StartSignalElabTask+0x1b8>)
 800e236:	f00f ff45 	bl	801e0c4 <arm_rfft_fast_f32>
			  arm_cmplx_mag_f32(ImuFFTOut[0], ImuFFTMagOut[0], IMU_FFT_SIZE);
 800e23a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e23e:	495b      	ldr	r1, [pc, #364]	; (800e3ac <StartSignalElabTask+0x1bc>)
 800e240:	4857      	ldr	r0, [pc, #348]	; (800e3a0 <StartSignalElabTask+0x1b0>)
 800e242:	f010 fb1d 	bl	801e880 <arm_cmplx_mag_f32>
			  RINGBUFFER_CLEAR(&AccXBuffer);
 800e246:	4b55      	ldr	r3, [pc, #340]	; (800e39c <StartSignalElabTask+0x1ac>)
 800e248:	2200      	movs	r2, #0
 800e24a:	801a      	strh	r2, [r3, #0]
 800e24c:	4b53      	ldr	r3, [pc, #332]	; (800e39c <StartSignalElabTask+0x1ac>)
 800e24e:	2200      	movs	r2, #0
 800e250:	805a      	strh	r2, [r3, #2]
		  }
		  if (RINGBUFFER_FULL(&AccYBuffer))
 800e252:	4b57      	ldr	r3, [pc, #348]	; (800e3b0 <StartSignalElabTask+0x1c0>)
 800e254:	885a      	ldrh	r2, [r3, #2]
 800e256:	4b56      	ldr	r3, [pc, #344]	; (800e3b0 <StartSignalElabTask+0x1c0>)
 800e258:	881b      	ldrh	r3, [r3, #0]
 800e25a:	1ad3      	subs	r3, r2, r3
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	2bff      	cmp	r3, #255	; 0xff
 800e260:	d911      	bls.n	800e286 <StartSignalElabTask+0x96>
		  {
			  arm_rfft_fast_f32(&S, (float32_t *)AccYBuffer.buffer, (float32_t *)ImuFFTOut[1], 0);
 800e262:	2300      	movs	r3, #0
 800e264:	4a53      	ldr	r2, [pc, #332]	; (800e3b4 <StartSignalElabTask+0x1c4>)
 800e266:	4954      	ldr	r1, [pc, #336]	; (800e3b8 <StartSignalElabTask+0x1c8>)
 800e268:	484f      	ldr	r0, [pc, #316]	; (800e3a8 <StartSignalElabTask+0x1b8>)
 800e26a:	f00f ff2b 	bl	801e0c4 <arm_rfft_fast_f32>
			  arm_cmplx_mag_f32(ImuFFTOut[1], ImuFFTMagOut[1], IMU_FFT_SIZE);
 800e26e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e272:	4952      	ldr	r1, [pc, #328]	; (800e3bc <StartSignalElabTask+0x1cc>)
 800e274:	484f      	ldr	r0, [pc, #316]	; (800e3b4 <StartSignalElabTask+0x1c4>)
 800e276:	f010 fb03 	bl	801e880 <arm_cmplx_mag_f32>
			  RINGBUFFER_CLEAR(&AccYBuffer);
 800e27a:	4b4d      	ldr	r3, [pc, #308]	; (800e3b0 <StartSignalElabTask+0x1c0>)
 800e27c:	2200      	movs	r2, #0
 800e27e:	801a      	strh	r2, [r3, #0]
 800e280:	4b4b      	ldr	r3, [pc, #300]	; (800e3b0 <StartSignalElabTask+0x1c0>)
 800e282:	2200      	movs	r2, #0
 800e284:	805a      	strh	r2, [r3, #2]
		  }
		  if (RINGBUFFER_FULL(&AccZBuffer))
 800e286:	4b4e      	ldr	r3, [pc, #312]	; (800e3c0 <StartSignalElabTask+0x1d0>)
 800e288:	885a      	ldrh	r2, [r3, #2]
 800e28a:	4b4d      	ldr	r3, [pc, #308]	; (800e3c0 <StartSignalElabTask+0x1d0>)
 800e28c:	881b      	ldrh	r3, [r3, #0]
 800e28e:	1ad3      	subs	r3, r2, r3
 800e290:	b29b      	uxth	r3, r3
 800e292:	2bff      	cmp	r3, #255	; 0xff
 800e294:	d911      	bls.n	800e2ba <StartSignalElabTask+0xca>
		  {
			  arm_rfft_fast_f32(&S, (float32_t *)AccZBuffer.buffer, (float32_t *)ImuFFTOut[2], 0);
 800e296:	2300      	movs	r3, #0
 800e298:	4a4a      	ldr	r2, [pc, #296]	; (800e3c4 <StartSignalElabTask+0x1d4>)
 800e29a:	494b      	ldr	r1, [pc, #300]	; (800e3c8 <StartSignalElabTask+0x1d8>)
 800e29c:	4842      	ldr	r0, [pc, #264]	; (800e3a8 <StartSignalElabTask+0x1b8>)
 800e29e:	f00f ff11 	bl	801e0c4 <arm_rfft_fast_f32>
			  arm_cmplx_mag_f32(ImuFFTOut[2], ImuFFTMagOut[2], IMU_FFT_SIZE);
 800e2a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2a6:	4949      	ldr	r1, [pc, #292]	; (800e3cc <StartSignalElabTask+0x1dc>)
 800e2a8:	4846      	ldr	r0, [pc, #280]	; (800e3c4 <StartSignalElabTask+0x1d4>)
 800e2aa:	f010 fae9 	bl	801e880 <arm_cmplx_mag_f32>
			  RINGBUFFER_CLEAR(&AccZBuffer);
 800e2ae:	4b44      	ldr	r3, [pc, #272]	; (800e3c0 <StartSignalElabTask+0x1d0>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	801a      	strh	r2, [r3, #0]
 800e2b4:	4b42      	ldr	r3, [pc, #264]	; (800e3c0 <StartSignalElabTask+0x1d0>)
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	805a      	strh	r2, [r3, #2]
		  }
		  if (RINGBUFFER_FULL(&GyroXBuffer))
 800e2ba:	4b45      	ldr	r3, [pc, #276]	; (800e3d0 <StartSignalElabTask+0x1e0>)
 800e2bc:	885a      	ldrh	r2, [r3, #2]
 800e2be:	4b44      	ldr	r3, [pc, #272]	; (800e3d0 <StartSignalElabTask+0x1e0>)
 800e2c0:	881b      	ldrh	r3, [r3, #0]
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	2bff      	cmp	r3, #255	; 0xff
 800e2c8:	d911      	bls.n	800e2ee <StartSignalElabTask+0xfe>
		  {
			  arm_rfft_fast_f32(&S, (float32_t *)GyroXBuffer.buffer, (float32_t *)ImuFFTOut[3], 0);
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	4a41      	ldr	r2, [pc, #260]	; (800e3d4 <StartSignalElabTask+0x1e4>)
 800e2ce:	4942      	ldr	r1, [pc, #264]	; (800e3d8 <StartSignalElabTask+0x1e8>)
 800e2d0:	4835      	ldr	r0, [pc, #212]	; (800e3a8 <StartSignalElabTask+0x1b8>)
 800e2d2:	f00f fef7 	bl	801e0c4 <arm_rfft_fast_f32>
			  arm_cmplx_mag_f32(ImuFFTOut[3], ImuFFTMagOut[3], IMU_FFT_SIZE);
 800e2d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2da:	4940      	ldr	r1, [pc, #256]	; (800e3dc <StartSignalElabTask+0x1ec>)
 800e2dc:	483d      	ldr	r0, [pc, #244]	; (800e3d4 <StartSignalElabTask+0x1e4>)
 800e2de:	f010 facf 	bl	801e880 <arm_cmplx_mag_f32>
			  RINGBUFFER_CLEAR(&GyroXBuffer);
 800e2e2:	4b3b      	ldr	r3, [pc, #236]	; (800e3d0 <StartSignalElabTask+0x1e0>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	801a      	strh	r2, [r3, #0]
 800e2e8:	4b39      	ldr	r3, [pc, #228]	; (800e3d0 <StartSignalElabTask+0x1e0>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	805a      	strh	r2, [r3, #2]
		  }
		  if (RINGBUFFER_FULL(&GyroYBuffer))
 800e2ee:	4b3c      	ldr	r3, [pc, #240]	; (800e3e0 <StartSignalElabTask+0x1f0>)
 800e2f0:	885a      	ldrh	r2, [r3, #2]
 800e2f2:	4b3b      	ldr	r3, [pc, #236]	; (800e3e0 <StartSignalElabTask+0x1f0>)
 800e2f4:	881b      	ldrh	r3, [r3, #0]
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	2bff      	cmp	r3, #255	; 0xff
 800e2fc:	d911      	bls.n	800e322 <StartSignalElabTask+0x132>
		  {
			  arm_rfft_fast_f32(&S, (float32_t *)GyroYBuffer.buffer, (float32_t *)ImuFFTOut[4], 0);
 800e2fe:	2300      	movs	r3, #0
 800e300:	4a38      	ldr	r2, [pc, #224]	; (800e3e4 <StartSignalElabTask+0x1f4>)
 800e302:	4939      	ldr	r1, [pc, #228]	; (800e3e8 <StartSignalElabTask+0x1f8>)
 800e304:	4828      	ldr	r0, [pc, #160]	; (800e3a8 <StartSignalElabTask+0x1b8>)
 800e306:	f00f fedd 	bl	801e0c4 <arm_rfft_fast_f32>
			  arm_cmplx_mag_f32(ImuFFTOut[4], ImuFFTMagOut[4], IMU_FFT_SIZE);
 800e30a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e30e:	4937      	ldr	r1, [pc, #220]	; (800e3ec <StartSignalElabTask+0x1fc>)
 800e310:	4834      	ldr	r0, [pc, #208]	; (800e3e4 <StartSignalElabTask+0x1f4>)
 800e312:	f010 fab5 	bl	801e880 <arm_cmplx_mag_f32>
			  RINGBUFFER_CLEAR(&GyroYBuffer);
 800e316:	4b32      	ldr	r3, [pc, #200]	; (800e3e0 <StartSignalElabTask+0x1f0>)
 800e318:	2200      	movs	r2, #0
 800e31a:	801a      	strh	r2, [r3, #0]
 800e31c:	4b30      	ldr	r3, [pc, #192]	; (800e3e0 <StartSignalElabTask+0x1f0>)
 800e31e:	2200      	movs	r2, #0
 800e320:	805a      	strh	r2, [r3, #2]
		  }
		  if (RINGBUFFER_FULL(&GyroZBuffer))
 800e322:	4b33      	ldr	r3, [pc, #204]	; (800e3f0 <StartSignalElabTask+0x200>)
 800e324:	885a      	ldrh	r2, [r3, #2]
 800e326:	4b32      	ldr	r3, [pc, #200]	; (800e3f0 <StartSignalElabTask+0x200>)
 800e328:	881b      	ldrh	r3, [r3, #0]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	2bff      	cmp	r3, #255	; 0xff
 800e330:	d911      	bls.n	800e356 <StartSignalElabTask+0x166>
		  {
			  arm_rfft_fast_f32(&S, (float32_t *)GyroZBuffer.buffer, (float32_t *)ImuFFTOut[5], 0);
 800e332:	2300      	movs	r3, #0
 800e334:	4a2f      	ldr	r2, [pc, #188]	; (800e3f4 <StartSignalElabTask+0x204>)
 800e336:	4930      	ldr	r1, [pc, #192]	; (800e3f8 <StartSignalElabTask+0x208>)
 800e338:	481b      	ldr	r0, [pc, #108]	; (800e3a8 <StartSignalElabTask+0x1b8>)
 800e33a:	f00f fec3 	bl	801e0c4 <arm_rfft_fast_f32>
			  arm_cmplx_mag_f32(ImuFFTOut[5], ImuFFTMagOut[5], IMU_FFT_SIZE);
 800e33e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e342:	492e      	ldr	r1, [pc, #184]	; (800e3fc <StartSignalElabTask+0x20c>)
 800e344:	482b      	ldr	r0, [pc, #172]	; (800e3f4 <StartSignalElabTask+0x204>)
 800e346:	f010 fa9b 	bl	801e880 <arm_cmplx_mag_f32>
			  RINGBUFFER_CLEAR(&GyroZBuffer);
 800e34a:	4b29      	ldr	r3, [pc, #164]	; (800e3f0 <StartSignalElabTask+0x200>)
 800e34c:	2200      	movs	r2, #0
 800e34e:	801a      	strh	r2, [r3, #0]
 800e350:	4b27      	ldr	r3, [pc, #156]	; (800e3f0 <StartSignalElabTask+0x200>)
 800e352:	2200      	movs	r2, #0
 800e354:	805a      	strh	r2, [r3, #2]
		  }
		  if ((ImuFFTMagOut[0][5] > 20) | (ImuFFTMagOut[1][5] > 20) | (ImuFFTMagOut[3][5] > 20))
 800e356:	4b15      	ldr	r3, [pc, #84]	; (800e3ac <StartSignalElabTask+0x1bc>)
 800e358:	edd3 7a05 	vldr	s15, [r3, #20]
 800e35c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800e360:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e368:	4b10      	ldr	r3, [pc, #64]	; (800e3ac <StartSignalElabTask+0x1bc>)
 800e36a:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800e36e:	edd3 7a00 	vldr	s15, [r3]
 800e372:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800e376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37e:	4b0b      	ldr	r3, [pc, #44]	; (800e3ac <StartSignalElabTask+0x1bc>)
 800e380:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 800e384:	edd3 7a00 	vldr	s15, [r3]
 800e388:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800e38c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		  {
//			  xTaskGenericNotify(MainTaskHandle, AC1_Notify_INT2Event, eSetBits, NULL);
		  }
	  }
    osDelay(1);
 800e394:	2001      	movs	r0, #1
 800e396:	f00b fca4 	bl	8019ce2 <osDelay>
  {
 800e39a:	e72d      	b.n	800e1f8 <StartSignalElabTask+0x8>
 800e39c:	2000137c 	.word	0x2000137c
 800e3a0:	20009c44 	.word	0x20009c44
 800e3a4:	20001380 	.word	0x20001380
 800e3a8:	20009c2c 	.word	0x20009c2c
 800e3ac:	2000b444 	.word	0x2000b444
 800e3b0:	20001780 	.word	0x20001780
 800e3b4:	2000a044 	.word	0x2000a044
 800e3b8:	20001784 	.word	0x20001784
 800e3bc:	2000b844 	.word	0x2000b844
 800e3c0:	20001b84 	.word	0x20001b84
 800e3c4:	2000a444 	.word	0x2000a444
 800e3c8:	20001b88 	.word	0x20001b88
 800e3cc:	2000bc44 	.word	0x2000bc44
 800e3d0:	20001f88 	.word	0x20001f88
 800e3d4:	2000a844 	.word	0x2000a844
 800e3d8:	20001f8c 	.word	0x20001f8c
 800e3dc:	2000c044 	.word	0x2000c044
 800e3e0:	2000238c 	.word	0x2000238c
 800e3e4:	2000ac44 	.word	0x2000ac44
 800e3e8:	20002390 	.word	0x20002390
 800e3ec:	2000c444 	.word	0x2000c444
 800e3f0:	20002790 	.word	0x20002790
 800e3f4:	2000b044 	.word	0x2000b044
 800e3f8:	20002794 	.word	0x20002794
 800e3fc:	2000c844 	.word	0x2000c844

0800e400 <StartUsbTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUsbTxTask */
void StartUsbTxTask(void const * argument)
{
 800e400:	b590      	push	{r4, r7, lr}
 800e402:	b093      	sub	sp, #76	; 0x4c
 800e404:	af02      	add	r7, sp, #8
 800e406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUsbTxTask */
	vc_vector* transmitData = vc_vector_create(2, sizeof(uint8_t), NULL);
 800e408:	2200      	movs	r2, #0
 800e40a:	2101      	movs	r1, #1
 800e40c:	2002      	movs	r0, #2
 800e40e:	f7fe fe04 	bl	800d01a <vc_vector_create>
 800e412:	63f8      	str	r0, [r7, #60]	; 0x3c
  for(;;)
  {
	  BaseType_t xResult;
	  uint32_t ulNotifiedValue;
	  IMU_Data_Buf_t imuPacketBuf;
	  size_t encBytes = 0;
 800e414:	2300      	movs	r3, #0
 800e416:	63bb      	str	r3, [r7, #56]	; 0x38
	  uint8_t tempByte = 0;
 800e418:	2300      	movs	r3, #0
 800e41a:	77fb      	strb	r3, [r7, #31]

	  xResult = xTaskNotifyWait( pdFALSE,    /* Don't clear bits on entry. */
 800e41c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e420:	f04f 33ff 	mov.w	r3, #4294967295
 800e424:	f04f 31ff 	mov.w	r1, #4294967295
 800e428:	2000      	movs	r0, #0
 800e42a:	f00d fec1 	bl	801c1b0 <xTaskNotifyWait>
 800e42e:	6378      	str	r0, [r7, #52]	; 0x34
			  ULONG_MAX,        /* Clear all bits on exit. */
			  &ulNotifiedValue, /* Stores the notified value. */
			  portMAX_DELAY );

	  if( xResult == pdPASS )
 800e430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e432:	2b01      	cmp	r3, #1
 800e434:	d151      	bne.n	800e4da <StartUsbTxTask+0xda>
	  {
		  while(xQueueReceive(IMUDataOutputQueue, imuPacketBuf.buffer, 0) == pdPASS )
 800e436:	e01a      	b.n	800e46e <StartUsbTxTask+0x6e>
		  {
			  uint8_t imuEncodedBuffer[sizeof(IMU_Data_Buf_t) + COMMAND_DATA_SIZE + ENCODEING_EXTRA_SIZE];
			  memset(imuEncodedBuffer, 0x00, sizeof(imuEncodedBuffer));
 800e438:	f107 030c 	add.w	r3, r7, #12
 800e43c:	2213      	movs	r2, #19
 800e43e:	2100      	movs	r1, #0
 800e440:	4618      	mov	r0, r3
 800e442:	f010 fffb 	bl	801f43c <memset>

			  encBytes = imuUsbPacketsCreator(&IMU, &imuPacketBuf, sizeof(imuPacketBuf.buffer),
 800e446:	f107 030c 	add.w	r3, r7, #12
 800e44a:	f107 0120 	add.w	r1, r7, #32
 800e44e:	2213      	movs	r2, #19
 800e450:	9200      	str	r2, [sp, #0]
 800e452:	2210      	movs	r2, #16
 800e454:	4823      	ldr	r0, [pc, #140]	; (800e4e4 <StartUsbTxTask+0xe4>)
 800e456:	f7fd f9ef 	bl	800b838 <imuUsbPacketsCreator>
 800e45a:	63b8      	str	r0, [r7, #56]	; 0x38
					  imuEncodedBuffer, sizeof(imuEncodedBuffer));

			  if (encBytes>0)
 800e45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d005      	beq.n	800e46e <StartUsbTxTask+0x6e>
			  {
//				  CDC_Transmit_FS(imuEncodedBuffer, encBytes);
				  _USB_SEND_OPT(imuEncodedBuffer, encBytes);
 800e462:	f107 030c 	add.w	r3, r7, #12
 800e466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fe fc3f 	bl	800ccec <_USB_SEND_OPT>
		  while(xQueueReceive(IMUDataOutputQueue, imuPacketBuf.buffer, 0) == pdPASS )
 800e46e:	4b1e      	ldr	r3, [pc, #120]	; (800e4e8 <StartUsbTxTask+0xe8>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f107 0120 	add.w	r1, r7, #32
 800e476:	2200      	movs	r2, #0
 800e478:	4618      	mov	r0, r3
 800e47a:	f00c fa71 	bl	801a960 <xQueueReceive>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b01      	cmp	r3, #1
 800e482:	d0d9      	beq.n	800e438 <StartUsbTxTask+0x38>
			  }
		  }

		  while(xQueueReceive(usb_TX_Queue, &tempByte, 0) == pdPASS )
 800e484:	e005      	b.n	800e492 <StartUsbTxTask+0x92>
		  {
			  vc_vector_push_back(transmitData, &tempByte);
 800e486:	f107 031f 	add.w	r3, r7, #31
 800e48a:	4619      	mov	r1, r3
 800e48c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e48e:	f7fe ff2b 	bl	800d2e8 <vc_vector_push_back>
		  while(xQueueReceive(usb_TX_Queue, &tempByte, 0) == pdPASS )
 800e492:	4b16      	ldr	r3, [pc, #88]	; (800e4ec <StartUsbTxTask+0xec>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f107 011f 	add.w	r1, r7, #31
 800e49a:	2200      	movs	r2, #0
 800e49c:	4618      	mov	r0, r3
 800e49e:	f00c fa5f 	bl	801a960 <xQueueReceive>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d0ee      	beq.n	800e486 <StartUsbTxTask+0x86>
		  }
		  if (!vc_vector_empty(transmitData))
 800e4a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e4aa:	f7fe fe2a 	bl	800d102 <vc_vector_empty>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	f083 0301 	eor.w	r3, r3, #1
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00f      	beq.n	800e4da <StartUsbTxTask+0xda>
		  {
			  CDC_Transmit_FS(vc_vector_begin(transmitData), vc_vector_count(transmitData));
 800e4ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e4bc:	f7fe fe02 	bl	800d0c4 <vc_vector_begin>
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e4c4:	f7fe fe2e 	bl	800d124 <vc_vector_count>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f00e fffa 	bl	801d4c8 <CDC_Transmit_FS>
//			  _USB_SEND_OPT(vc_vector_begin(transmitData), vc_vector_count(transmitData));
			  vc_vector_clear(transmitData);
 800e4d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e4d6:	f7fe fe51 	bl	800d17c <vc_vector_clear>
		  }
	  }
    osDelay(1);
 800e4da:	2001      	movs	r0, #1
 800e4dc:	f00b fc01 	bl	8019ce2 <osDelay>
  {
 800e4e0:	e798      	b.n	800e414 <StartUsbTxTask+0x14>
 800e4e2:	bf00      	nop
 800e4e4:	20000300 	.word	0x20000300
 800e4e8:	20009428 	.word	0x20009428
 800e4ec:	20006bdc 	.word	0x20006bdc

0800e4f0 <StartUsbRx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUsbRx */
void StartUsbRx(void const * argument)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b086      	sub	sp, #24
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUsbRx */
	uint8_t tempByte;
	uint8_t newReceivedData = 0;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	75fb      	strb	r3, [r7, #23]

	vc_vector* receivedData = vc_vector_create(3, sizeof(uint8_t), NULL);
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	2101      	movs	r1, #1
 800e500:	2003      	movs	r0, #3
 800e502:	f7fe fd8a 	bl	800d01a <vc_vector_create>
 800e506:	6138      	str	r0, [r7, #16]
//				newReceivedData = 0;
//				GiveRxData(&OMDCommProtocol, receivedData);
//			}
//		}

		while(xQueueReceive(usb_RX_Queue, &tempByte, portMAX_DELAY) == pdPASS )
 800e508:	e009      	b.n	800e51e <StartUsbRx+0x2e>
		{
			vc_vector_push_back(receivedData, &tempByte);
 800e50a:	f107 030f 	add.w	r3, r7, #15
 800e50e:	4619      	mov	r1, r3
 800e510:	6938      	ldr	r0, [r7, #16]
 800e512:	f7fe fee9 	bl	800d2e8 <vc_vector_push_back>
			GiveRxData(&OMDCommProtocol, receivedData);
 800e516:	6939      	ldr	r1, [r7, #16]
 800e518:	4809      	ldr	r0, [pc, #36]	; (800e540 <StartUsbRx+0x50>)
 800e51a:	f7fd faba 	bl	800ba92 <GiveRxData>
		while(xQueueReceive(usb_RX_Queue, &tempByte, portMAX_DELAY) == pdPASS )
 800e51e:	4b09      	ldr	r3, [pc, #36]	; (800e544 <StartUsbRx+0x54>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f107 010f 	add.w	r1, r7, #15
 800e526:	f04f 32ff 	mov.w	r2, #4294967295
 800e52a:	4618      	mov	r0, r3
 800e52c:	f00c fa18 	bl	801a960 <xQueueReceive>
 800e530:	4603      	mov	r3, r0
 800e532:	2b01      	cmp	r3, #1
 800e534:	d0e9      	beq.n	800e50a <StartUsbRx+0x1a>
		}
		osDelay(1);
 800e536:	2001      	movs	r0, #1
 800e538:	f00b fbd3 	bl	8019ce2 <osDelay>
	{
 800e53c:	e7e4      	b.n	800e508 <StartUsbRx+0x18>
 800e53e:	bf00      	nop
 800e540:	20002fd4 	.word	0x20002fd4
 800e544:	20006390 	.word	0x20006390

0800e548 <StartImuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartImuTask */
void StartImuTask(void const * argument)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b086      	sub	sp, #24
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  BaseType_t xResult;
	  uint32_t ulNotifiedValue;
	  static uint8_t FIFOFulled = 0;
	  uint8_t state = 0;
 800e550:	2300      	movs	r3, #0
 800e552:	75fb      	strb	r3, [r7, #23]

	  xResult = xTaskNotifyWait( pdFALSE,    /* Don't clear bits on entry. */
 800e554:	f107 020c 	add.w	r2, r7, #12
 800e558:	f04f 33ff 	mov.w	r3, #4294967295
 800e55c:	f04f 31ff 	mov.w	r1, #4294967295
 800e560:	2000      	movs	r0, #0
 800e562:	f00d fe25 	bl	801c1b0 <xTaskNotifyWait>
 800e566:	6138      	str	r0, [r7, #16]
			  ULONG_MAX,        /* Clear all bits on exit. */
			  &ulNotifiedValue, /* Stores the notified value. */
			  portMAX_DELAY );

	  if( xResult == pdPASS )
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d134      	bne.n	800e5d8 <StartImuTask+0x90>
	  {
		  if (BitCheckW(ulNotifiedValue, AC1_Notify_NewDataAvaiable_Bit) == 1 )
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2102      	movs	r1, #2
 800e572:	4618      	mov	r0, r3
 800e574:	f7fe fb74 	bl	800cc60 <BitCheckW>
 800e578:	4603      	mov	r3, r0
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d12c      	bne.n	800e5d8 <StartImuTask+0x90>
		  {
			  IIM42652_GetFIFOData_DMA(&IMU);
 800e57e:	4818      	ldr	r0, [pc, #96]	; (800e5e0 <StartImuTask+0x98>)
 800e580:	f7fc fdea 	bl	800b158 <IIM42652_GetFIFOData_DMA>
			  osTimerStart(SPIReadTimoutTimerHandle, SPI_READ_TIMEOUT_MS);
 800e584:	4b17      	ldr	r3, [pc, #92]	; (800e5e4 <StartImuTask+0x9c>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2164      	movs	r1, #100	; 0x64
 800e58a:	4618      	mov	r0, r3
 800e58c:	f00b fbf2 	bl	8019d74 <osTimerStart>

			  if (IMU.m_FIFO_Count >= 127)
 800e590:	4b13      	ldr	r3, [pc, #76]	; (800e5e0 <StartImuTask+0x98>)
 800e592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e596:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	2b7e      	cmp	r3, #126	; 0x7e
 800e59e:	d90d      	bls.n	800e5bc <StartImuTask+0x74>
			  {
				  RGB_SetActColor(&RGB, RGB.rgbRED, ENABLE);
 800e5a0:	4a11      	ldr	r2, [pc, #68]	; (800e5e8 <StartImuTask+0xa0>)
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	3218      	adds	r2, #24
 800e5a6:	ca06      	ldmia	r2, {r1, r2}
 800e5a8:	480f      	ldr	r0, [pc, #60]	; (800e5e8 <StartImuTask+0xa0>)
 800e5aa:	f7fd f9e5 	bl	800b978 <RGB_SetActColor>
				  FIFOFulled++;
 800e5ae:	4b0f      	ldr	r3, [pc, #60]	; (800e5ec <StartImuTask+0xa4>)
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	b2da      	uxtb	r2, r3
 800e5b6:	4b0d      	ldr	r3, [pc, #52]	; (800e5ec <StartImuTask+0xa4>)
 800e5b8:	701a      	strb	r2, [r3, #0]
 800e5ba:	e00d      	b.n	800e5d8 <StartImuTask+0x90>
			  }
			  else
			  {
				  if (FIFOFulled)
 800e5bc:	4b0b      	ldr	r3, [pc, #44]	; (800e5ec <StartImuTask+0xa4>)
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d009      	beq.n	800e5d8 <StartImuTask+0x90>
				  {
					  RGB_SetActColor(&RGB, RGB.rgbCYAN, ENABLE);
 800e5c4:	4a08      	ldr	r2, [pc, #32]	; (800e5e8 <StartImuTask+0xa0>)
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	3224      	adds	r2, #36	; 0x24
 800e5ca:	ca06      	ldmia	r2, {r1, r2}
 800e5cc:	4806      	ldr	r0, [pc, #24]	; (800e5e8 <StartImuTask+0xa0>)
 800e5ce:	f7fd f9d3 	bl	800b978 <RGB_SetActColor>
					  FIFOFulled = 0;
 800e5d2:	4b06      	ldr	r3, [pc, #24]	; (800e5ec <StartImuTask+0xa4>)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
	  }
    osDelay(1);
 800e5d8:	2001      	movs	r0, #1
 800e5da:	f00b fb82 	bl	8019ce2 <osDelay>
  {
 800e5de:	e7b7      	b.n	800e550 <StartImuTask+0x8>
 800e5e0:	20000300 	.word	0x20000300
 800e5e4:	20005a94 	.word	0x20005a94
 800e5e8:	20002f9c 	.word	0x20002f9c
 800e5ec:	2000cc44 	.word	0x2000cc44

0800e5f0 <BlinkTimerCallback>:
  /* USER CODE END StartImuTask */
}

/* BlinkTimerCallback function */
void BlinkTimerCallback(void const * argument)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlinkTimerCallback */
	RGB_Blink(&RGB);
 800e5f8:	4803      	ldr	r0, [pc, #12]	; (800e608 <BlinkTimerCallback+0x18>)
 800e5fa:	f7fd f9eb 	bl	800b9d4 <RGB_Blink>
  /* USER CODE END BlinkTimerCallback */
}
 800e5fe:	bf00      	nop
 800e600:	3708      	adds	r7, #8
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	20002f9c 	.word	0x20002f9c

0800e60c <DOTimerCallback>:

/* DOTimerCallback function */
void DOTimerCallback(void const * argument)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b082      	sub	sp, #8
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DOTimerCallback */
	HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_RESET);
 800e614:	2200      	movs	r2, #0
 800e616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e61a:	4806      	ldr	r0, [pc, #24]	; (800e634 <DOTimerCallback+0x28>)
 800e61c:	f001 feb2 	bl	8010384 <HAL_GPIO_WritePin>
	IMU.m_INT2State = 0;
 800e620:	4b05      	ldr	r3, [pc, #20]	; (800e638 <DOTimerCallback+0x2c>)
 800e622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e626:	2200      	movs	r2, #0
 800e628:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  /* USER CODE END DOTimerCallback */
}
 800e62c:	bf00      	nop
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}
 800e634:	40020400 	.word	0x40020400
 800e638:	20000300 	.word	0x20000300

0800e63c <SPIReadTimoutTimerCallback>:

/* SPIReadTimoutTimerCallback function */
void SPIReadTimoutTimerCallback(void const * argument)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPIReadTimoutTimerCallback */
	if (AC1_StatusWord.IMUAnalysisON)
 800e644:	4b0b      	ldr	r3, [pc, #44]	; (800e674 <SPIReadTimoutTimerCallback+0x38>)
 800e646:	791b      	ldrb	r3, [r3, #4]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00f      	beq.n	800e66c <SPIReadTimoutTimerCallback+0x30>
	{
		RGB_SetActColor(&RGB, RGB.rgbVIOLET, ENABLE);
 800e64c:	4a0a      	ldr	r2, [pc, #40]	; (800e678 <SPIReadTimoutTimerCallback+0x3c>)
 800e64e:	2301      	movs	r3, #1
 800e650:	3230      	adds	r2, #48	; 0x30
 800e652:	ca06      	ldmia	r2, {r1, r2}
 800e654:	4808      	ldr	r0, [pc, #32]	; (800e678 <SPIReadTimoutTimerCallback+0x3c>)
 800e656:	f7fd f98f 	bl	800b978 <RGB_SetActColor>
		IIM42652_GetFIFOData_DMA(&IMU);
 800e65a:	4808      	ldr	r0, [pc, #32]	; (800e67c <SPIReadTimoutTimerCallback+0x40>)
 800e65c:	f7fc fd7c 	bl	800b158 <IIM42652_GetFIFOData_DMA>
		osTimerStart(SPIReadTimoutTimerHandle, SPI_READ_TIMEOUT_MS);
 800e660:	4b07      	ldr	r3, [pc, #28]	; (800e680 <SPIReadTimoutTimerCallback+0x44>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2164      	movs	r1, #100	; 0x64
 800e666:	4618      	mov	r0, r3
 800e668:	f00b fb84 	bl	8019d74 <osTimerStart>
	}
  /* USER CODE END SPIReadTimoutTimerCallback */
}
 800e66c:	bf00      	nop
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	200047dc 	.word	0x200047dc
 800e678:	20002f9c 	.word	0x20002f9c
 800e67c:	20000300 	.word	0x20000300
 800e680:	20005a94 	.word	0x20005a94

0800e684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a04      	ldr	r2, [pc, #16]	; (800e6a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d101      	bne.n	800e69a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800e696:	f000 fd2b 	bl	800f0f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800e69a:	bf00      	nop
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	40014400 	.word	0x40014400

0800e6a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e6ac:	b672      	cpsid	i
}
 800e6ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e6b0:	e7fe      	b.n	800e6b0 <Error_Handler+0x8>
	...

0800e6b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	607b      	str	r3, [r7, #4]
 800e6be:	4b12      	ldr	r3, [pc, #72]	; (800e708 <HAL_MspInit+0x54>)
 800e6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6c2:	4a11      	ldr	r2, [pc, #68]	; (800e708 <HAL_MspInit+0x54>)
 800e6c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e6c8:	6453      	str	r3, [r2, #68]	; 0x44
 800e6ca:	4b0f      	ldr	r3, [pc, #60]	; (800e708 <HAL_MspInit+0x54>)
 800e6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6d2:	607b      	str	r3, [r7, #4]
 800e6d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	603b      	str	r3, [r7, #0]
 800e6da:	4b0b      	ldr	r3, [pc, #44]	; (800e708 <HAL_MspInit+0x54>)
 800e6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6de:	4a0a      	ldr	r2, [pc, #40]	; (800e708 <HAL_MspInit+0x54>)
 800e6e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6e4:	6413      	str	r3, [r2, #64]	; 0x40
 800e6e6:	4b08      	ldr	r3, [pc, #32]	; (800e708 <HAL_MspInit+0x54>)
 800e6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6ee:	603b      	str	r3, [r7, #0]
 800e6f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	210f      	movs	r1, #15
 800e6f6:	f06f 0001 	mvn.w	r0, #1
 800e6fa:	f000 fdf5 	bl	800f2e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e6fe:	bf00      	nop
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	40023800 	.word	0x40023800

0800e70c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b08a      	sub	sp, #40	; 0x28
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e714:	f107 0314 	add.w	r3, r7, #20
 800e718:	2200      	movs	r2, #0
 800e71a:	601a      	str	r2, [r3, #0]
 800e71c:	605a      	str	r2, [r3, #4]
 800e71e:	609a      	str	r2, [r3, #8]
 800e720:	60da      	str	r2, [r3, #12]
 800e722:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a38      	ldr	r2, [pc, #224]	; (800e80c <HAL_I2C_MspInit+0x100>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d169      	bne.n	800e802 <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e72e:	2300      	movs	r3, #0
 800e730:	613b      	str	r3, [r7, #16]
 800e732:	4b37      	ldr	r3, [pc, #220]	; (800e810 <HAL_I2C_MspInit+0x104>)
 800e734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e736:	4a36      	ldr	r2, [pc, #216]	; (800e810 <HAL_I2C_MspInit+0x104>)
 800e738:	f043 0302 	orr.w	r3, r3, #2
 800e73c:	6313      	str	r3, [r2, #48]	; 0x30
 800e73e:	4b34      	ldr	r3, [pc, #208]	; (800e810 <HAL_I2C_MspInit+0x104>)
 800e740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e742:	f003 0302 	and.w	r3, r3, #2
 800e746:	613b      	str	r3, [r7, #16]
 800e748:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e74a:	23c0      	movs	r3, #192	; 0xc0
 800e74c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e74e:	2312      	movs	r3, #18
 800e750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e752:	2301      	movs	r3, #1
 800e754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e756:	2303      	movs	r3, #3
 800e758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e75a:	2304      	movs	r3, #4
 800e75c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e75e:	f107 0314 	add.w	r3, r7, #20
 800e762:	4619      	mov	r1, r3
 800e764:	482b      	ldr	r0, [pc, #172]	; (800e814 <HAL_I2C_MspInit+0x108>)
 800e766:	f001 fc89 	bl	801007c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e76a:	2300      	movs	r3, #0
 800e76c:	60fb      	str	r3, [r7, #12]
 800e76e:	4b28      	ldr	r3, [pc, #160]	; (800e810 <HAL_I2C_MspInit+0x104>)
 800e770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e772:	4a27      	ldr	r2, [pc, #156]	; (800e810 <HAL_I2C_MspInit+0x104>)
 800e774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e778:	6413      	str	r3, [r2, #64]	; 0x40
 800e77a:	4b25      	ldr	r3, [pc, #148]	; (800e810 <HAL_I2C_MspInit+0x104>)
 800e77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e77e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e782:	60fb      	str	r3, [r7, #12]
 800e784:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800e786:	4b24      	ldr	r3, [pc, #144]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e788:	4a24      	ldr	r2, [pc, #144]	; (800e81c <HAL_I2C_MspInit+0x110>)
 800e78a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800e78c:	4b22      	ldr	r3, [pc, #136]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e78e:	2200      	movs	r2, #0
 800e790:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e792:	4b21      	ldr	r3, [pc, #132]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e794:	2240      	movs	r2, #64	; 0x40
 800e796:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e798:	4b1f      	ldr	r3, [pc, #124]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e79a:	2200      	movs	r2, #0
 800e79c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e79e:	4b1e      	ldr	r3, [pc, #120]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e7a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e7a4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e7a6:	4b1c      	ldr	r3, [pc, #112]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e7ac:	4b1a      	ldr	r3, [pc, #104]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800e7b2:	4b19      	ldr	r3, [pc, #100]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800e7b8:	4b17      	ldr	r3, [pc, #92]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e7ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e7be:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e7c0:	4b15      	ldr	r3, [pc, #84]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800e7c6:	4814      	ldr	r0, [pc, #80]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e7c8:	f000 fdb8 	bl	800f33c <HAL_DMA_Init>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800e7d2:	f7ff ff69 	bl	800e6a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a0f      	ldr	r2, [pc, #60]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e7da:	635a      	str	r2, [r3, #52]	; 0x34
 800e7dc:	4a0e      	ldr	r2, [pc, #56]	; (800e818 <HAL_I2C_MspInit+0x10c>)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	2105      	movs	r1, #5
 800e7e6:	201f      	movs	r0, #31
 800e7e8:	f000 fd7e 	bl	800f2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800e7ec:	201f      	movs	r0, #31
 800e7ee:	f000 fd97 	bl	800f320 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	2105      	movs	r1, #5
 800e7f6:	2020      	movs	r0, #32
 800e7f8:	f000 fd76 	bl	800f2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800e7fc:	2020      	movs	r0, #32
 800e7fe:	f000 fd8f 	bl	800f320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e802:	bf00      	nop
 800e804:	3728      	adds	r7, #40	; 0x28
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	40005400 	.word	0x40005400
 800e810:	40023800 	.word	0x40023800
 800e814:	40020400 	.word	0x40020400
 800e818:	200057c0 	.word	0x200057c0
 800e81c:	40026028 	.word	0x40026028

0800e820 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b088      	sub	sp, #32
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e828:	f107 0308 	add.w	r3, r7, #8
 800e82c:	2200      	movs	r2, #0
 800e82e:	601a      	str	r2, [r3, #0]
 800e830:	605a      	str	r2, [r3, #4]
 800e832:	609a      	str	r2, [r3, #8]
 800e834:	60da      	str	r2, [r3, #12]
 800e836:	611a      	str	r2, [r3, #16]
 800e838:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a0c      	ldr	r2, [pc, #48]	; (800e870 <HAL_RTC_MspInit+0x50>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d111      	bne.n	800e868 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800e844:	2302      	movs	r3, #2
 800e846:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800e848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e84c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e84e:	f107 0308 	add.w	r3, r7, #8
 800e852:	4618      	mov	r0, r3
 800e854:	f005 fd26 	bl	80142a4 <HAL_RCCEx_PeriphCLKConfig>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800e85e:	f7ff ff23 	bl	800e6a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e862:	4b04      	ldr	r3, [pc, #16]	; (800e874 <HAL_RTC_MspInit+0x54>)
 800e864:	2201      	movs	r2, #1
 800e866:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800e868:	bf00      	nop
 800e86a:	3720      	adds	r7, #32
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	40002800 	.word	0x40002800
 800e874:	42470e3c 	.word	0x42470e3c

0800e878 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b08a      	sub	sp, #40	; 0x28
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e880:	f107 0314 	add.w	r3, r7, #20
 800e884:	2200      	movs	r2, #0
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	605a      	str	r2, [r3, #4]
 800e88a:	609a      	str	r2, [r3, #8]
 800e88c:	60da      	str	r2, [r3, #12]
 800e88e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a4c      	ldr	r2, [pc, #304]	; (800e9c8 <HAL_SPI_MspInit+0x150>)
 800e896:	4293      	cmp	r3, r2
 800e898:	f040 8092 	bne.w	800e9c0 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e89c:	2300      	movs	r3, #0
 800e89e:	613b      	str	r3, [r7, #16]
 800e8a0:	4b4a      	ldr	r3, [pc, #296]	; (800e9cc <HAL_SPI_MspInit+0x154>)
 800e8a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8a4:	4a49      	ldr	r2, [pc, #292]	; (800e9cc <HAL_SPI_MspInit+0x154>)
 800e8a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e8aa:	6453      	str	r3, [r2, #68]	; 0x44
 800e8ac:	4b47      	ldr	r3, [pc, #284]	; (800e9cc <HAL_SPI_MspInit+0x154>)
 800e8ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e8b4:	613b      	str	r3, [r7, #16]
 800e8b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	60fb      	str	r3, [r7, #12]
 800e8bc:	4b43      	ldr	r3, [pc, #268]	; (800e9cc <HAL_SPI_MspInit+0x154>)
 800e8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c0:	4a42      	ldr	r2, [pc, #264]	; (800e9cc <HAL_SPI_MspInit+0x154>)
 800e8c2:	f043 0301 	orr.w	r3, r3, #1
 800e8c6:	6313      	str	r3, [r2, #48]	; 0x30
 800e8c8:	4b40      	ldr	r3, [pc, #256]	; (800e9cc <HAL_SPI_MspInit+0x154>)
 800e8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8cc:	f003 0301 	and.w	r3, r3, #1
 800e8d0:	60fb      	str	r3, [r7, #12]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800e8d4:	23e0      	movs	r3, #224	; 0xe0
 800e8d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8d8:	2302      	movs	r3, #2
 800e8da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8e0:	2303      	movs	r3, #3
 800e8e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e8e4:	2305      	movs	r3, #5
 800e8e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8e8:	f107 0314 	add.w	r3, r7, #20
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	4838      	ldr	r0, [pc, #224]	; (800e9d0 <HAL_SPI_MspInit+0x158>)
 800e8f0:	f001 fbc4 	bl	801007c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800e8f4:	4b37      	ldr	r3, [pc, #220]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e8f6:	4a38      	ldr	r2, [pc, #224]	; (800e9d8 <HAL_SPI_MspInit+0x160>)
 800e8f8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800e8fa:	4b36      	ldr	r3, [pc, #216]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e8fc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800e900:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e902:	4b34      	ldr	r3, [pc, #208]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e904:	2200      	movs	r2, #0
 800e906:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e908:	4b32      	ldr	r3, [pc, #200]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e90a:	2200      	movs	r2, #0
 800e90c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e90e:	4b31      	ldr	r3, [pc, #196]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e914:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e916:	4b2f      	ldr	r3, [pc, #188]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e918:	2200      	movs	r2, #0
 800e91a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e91c:	4b2d      	ldr	r3, [pc, #180]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e91e:	2200      	movs	r2, #0
 800e920:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800e922:	4b2c      	ldr	r3, [pc, #176]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e924:	2200      	movs	r2, #0
 800e926:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800e928:	4b2a      	ldr	r3, [pc, #168]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e92a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e92e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e930:	4b28      	ldr	r3, [pc, #160]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e932:	2200      	movs	r2, #0
 800e934:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800e936:	4827      	ldr	r0, [pc, #156]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e938:	f000 fd00 	bl	800f33c <HAL_DMA_Init>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800e942:	f7ff feb1 	bl	800e6a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a22      	ldr	r2, [pc, #136]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e94a:	64da      	str	r2, [r3, #76]	; 0x4c
 800e94c:	4a21      	ldr	r2, [pc, #132]	; (800e9d4 <HAL_SPI_MspInit+0x15c>)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 800e952:	4b22      	ldr	r3, [pc, #136]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e954:	4a22      	ldr	r2, [pc, #136]	; (800e9e0 <HAL_SPI_MspInit+0x168>)
 800e956:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800e958:	4b20      	ldr	r3, [pc, #128]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e95a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e95e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e960:	4b1e      	ldr	r3, [pc, #120]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e962:	2240      	movs	r2, #64	; 0x40
 800e964:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e966:	4b1d      	ldr	r3, [pc, #116]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e968:	2200      	movs	r2, #0
 800e96a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e96c:	4b1b      	ldr	r3, [pc, #108]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e96e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e972:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e974:	4b19      	ldr	r3, [pc, #100]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e976:	2200      	movs	r2, #0
 800e978:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e97a:	4b18      	ldr	r3, [pc, #96]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800e980:	4b16      	ldr	r3, [pc, #88]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e982:	2200      	movs	r2, #0
 800e984:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800e986:	4b15      	ldr	r3, [pc, #84]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e988:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e98c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e98e:	4b13      	ldr	r3, [pc, #76]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e990:	2200      	movs	r2, #0
 800e992:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800e994:	4811      	ldr	r0, [pc, #68]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e996:	f000 fcd1 	bl	800f33c <HAL_DMA_Init>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d001      	beq.n	800e9a4 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 800e9a0:	f7ff fe82 	bl	800e6a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	4a0d      	ldr	r2, [pc, #52]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e9a8:	649a      	str	r2, [r3, #72]	; 0x48
 800e9aa:	4a0c      	ldr	r2, [pc, #48]	; (800e9dc <HAL_SPI_MspInit+0x164>)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	2105      	movs	r1, #5
 800e9b4:	2023      	movs	r0, #35	; 0x23
 800e9b6:	f000 fc97 	bl	800f2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800e9ba:	2023      	movs	r0, #35	; 0x23
 800e9bc:	f000 fcb0 	bl	800f320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e9c0:	bf00      	nop
 800e9c2:	3728      	adds	r7, #40	; 0x28
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	40013000 	.word	0x40013000
 800e9cc:	40023800 	.word	0x40023800
 800e9d0:	40020000 	.word	0x40020000
 800e9d4:	20005898 	.word	0x20005898
 800e9d8:	40026410 	.word	0x40026410
 800e9dc:	200058f8 	.word	0x200058f8
 800e9e0:	40026440 	.word	0x40026440

0800e9e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b086      	sub	sp, #24
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a34      	ldr	r2, [pc, #208]	; (800eac4 <HAL_TIM_Base_MspInit+0xe0>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d126      	bne.n	800ea44 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	617b      	str	r3, [r7, #20]
 800e9fa:	4b33      	ldr	r3, [pc, #204]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800e9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9fe:	4a32      	ldr	r2, [pc, #200]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800ea00:	f043 0301 	orr.w	r3, r3, #1
 800ea04:	6453      	str	r3, [r2, #68]	; 0x44
 800ea06:	4b30      	ldr	r3, [pc, #192]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800ea08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea0a:	f003 0301 	and.w	r3, r3, #1
 800ea0e:	617b      	str	r3, [r7, #20]
 800ea10:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800ea12:	2200      	movs	r2, #0
 800ea14:	2105      	movs	r1, #5
 800ea16:	2018      	movs	r0, #24
 800ea18:	f000 fc66 	bl	800f2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800ea1c:	2018      	movs	r0, #24
 800ea1e:	f000 fc7f 	bl	800f320 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800ea22:	2200      	movs	r2, #0
 800ea24:	210f      	movs	r1, #15
 800ea26:	2019      	movs	r0, #25
 800ea28:	f000 fc5e 	bl	800f2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800ea2c:	2019      	movs	r0, #25
 800ea2e:	f000 fc77 	bl	800f320 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800ea32:	2200      	movs	r2, #0
 800ea34:	2105      	movs	r1, #5
 800ea36:	201a      	movs	r0, #26
 800ea38:	f000 fc56 	bl	800f2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800ea3c:	201a      	movs	r0, #26
 800ea3e:	f000 fc6f 	bl	800f320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800ea42:	e03a      	b.n	800eaba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea4c:	d10e      	bne.n	800ea6c <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ea4e:	2300      	movs	r3, #0
 800ea50:	613b      	str	r3, [r7, #16]
 800ea52:	4b1d      	ldr	r3, [pc, #116]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800ea54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea56:	4a1c      	ldr	r2, [pc, #112]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800ea58:	f043 0301 	orr.w	r3, r3, #1
 800ea5c:	6413      	str	r3, [r2, #64]	; 0x40
 800ea5e:	4b1a      	ldr	r3, [pc, #104]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800ea60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea62:	f003 0301 	and.w	r3, r3, #1
 800ea66:	613b      	str	r3, [r7, #16]
 800ea68:	693b      	ldr	r3, [r7, #16]
}
 800ea6a:	e026      	b.n	800eaba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a16      	ldr	r2, [pc, #88]	; (800eacc <HAL_TIM_Base_MspInit+0xe8>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d10e      	bne.n	800ea94 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ea76:	2300      	movs	r3, #0
 800ea78:	60fb      	str	r3, [r7, #12]
 800ea7a:	4b13      	ldr	r3, [pc, #76]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800ea7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea7e:	4a12      	ldr	r2, [pc, #72]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800ea80:	f043 0302 	orr.w	r3, r3, #2
 800ea84:	6413      	str	r3, [r2, #64]	; 0x40
 800ea86:	4b10      	ldr	r3, [pc, #64]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800ea88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea8a:	f003 0302 	and.w	r3, r3, #2
 800ea8e:	60fb      	str	r3, [r7, #12]
 800ea90:	68fb      	ldr	r3, [r7, #12]
}
 800ea92:	e012      	b.n	800eaba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a0d      	ldr	r2, [pc, #52]	; (800ead0 <HAL_TIM_Base_MspInit+0xec>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d10d      	bne.n	800eaba <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	60bb      	str	r3, [r7, #8]
 800eaa2:	4b09      	ldr	r3, [pc, #36]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800eaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaa6:	4a08      	ldr	r2, [pc, #32]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800eaa8:	f043 0308 	orr.w	r3, r3, #8
 800eaac:	6413      	str	r3, [r2, #64]	; 0x40
 800eaae:	4b06      	ldr	r3, [pc, #24]	; (800eac8 <HAL_TIM_Base_MspInit+0xe4>)
 800eab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eab2:	f003 0308 	and.w	r3, r3, #8
 800eab6:	60bb      	str	r3, [r7, #8]
 800eab8:	68bb      	ldr	r3, [r7, #8]
}
 800eaba:	bf00      	nop
 800eabc:	3718      	adds	r7, #24
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	40010000 	.word	0x40010000
 800eac8:	40023800 	.word	0x40023800
 800eacc:	40000400 	.word	0x40000400
 800ead0:	40000c00 	.word	0x40000c00

0800ead4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b088      	sub	sp, #32
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eadc:	f107 030c 	add.w	r3, r7, #12
 800eae0:	2200      	movs	r2, #0
 800eae2:	601a      	str	r2, [r3, #0]
 800eae4:	605a      	str	r2, [r3, #4]
 800eae6:	609a      	str	r2, [r3, #8]
 800eae8:	60da      	str	r2, [r3, #12]
 800eaea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	4a12      	ldr	r2, [pc, #72]	; (800eb3c <HAL_TIM_MspPostInit+0x68>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d11e      	bne.n	800eb34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	60bb      	str	r3, [r7, #8]
 800eafa:	4b11      	ldr	r3, [pc, #68]	; (800eb40 <HAL_TIM_MspPostInit+0x6c>)
 800eafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eafe:	4a10      	ldr	r2, [pc, #64]	; (800eb40 <HAL_TIM_MspPostInit+0x6c>)
 800eb00:	f043 0301 	orr.w	r3, r3, #1
 800eb04:	6313      	str	r3, [r2, #48]	; 0x30
 800eb06:	4b0e      	ldr	r3, [pc, #56]	; (800eb40 <HAL_TIM_MspPostInit+0x6c>)
 800eb08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb0a:	f003 0301 	and.w	r3, r3, #1
 800eb0e:	60bb      	str	r3, [r7, #8]
 800eb10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_B_Pin|LED_R_Pin|LED_G_Pin;
 800eb12:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800eb16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb18:	2302      	movs	r3, #2
 800eb1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb20:	2300      	movs	r3, #0
 800eb22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800eb24:	2301      	movs	r3, #1
 800eb26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb28:	f107 030c 	add.w	r3, r7, #12
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	4805      	ldr	r0, [pc, #20]	; (800eb44 <HAL_TIM_MspPostInit+0x70>)
 800eb30:	f001 faa4 	bl	801007c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800eb34:	bf00      	nop
 800eb36:	3720      	adds	r7, #32
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}
 800eb3c:	40010000 	.word	0x40010000
 800eb40:	40023800 	.word	0x40023800
 800eb44:	40020000 	.word	0x40020000

0800eb48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b08c      	sub	sp, #48	; 0x30
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800eb50:	2300      	movs	r3, #0
 800eb52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800eb54:	2300      	movs	r3, #0
 800eb56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800eb58:	2200      	movs	r2, #0
 800eb5a:	6879      	ldr	r1, [r7, #4]
 800eb5c:	2019      	movs	r0, #25
 800eb5e:	f000 fbc3 	bl	800f2e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800eb62:	2019      	movs	r0, #25
 800eb64:	f000 fbdc 	bl	800f320 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800eb68:	2300      	movs	r3, #0
 800eb6a:	60fb      	str	r3, [r7, #12]
 800eb6c:	4b1e      	ldr	r3, [pc, #120]	; (800ebe8 <HAL_InitTick+0xa0>)
 800eb6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb70:	4a1d      	ldr	r2, [pc, #116]	; (800ebe8 <HAL_InitTick+0xa0>)
 800eb72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb76:	6453      	str	r3, [r2, #68]	; 0x44
 800eb78:	4b1b      	ldr	r3, [pc, #108]	; (800ebe8 <HAL_InitTick+0xa0>)
 800eb7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb80:	60fb      	str	r3, [r7, #12]
 800eb82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800eb84:	f107 0210 	add.w	r2, r7, #16
 800eb88:	f107 0314 	add.w	r3, r7, #20
 800eb8c:	4611      	mov	r1, r2
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f005 fb56 	bl	8014240 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800eb94:	f005 fb40 	bl	8014218 <HAL_RCC_GetPCLK2Freq>
 800eb98:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800eb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9c:	4a13      	ldr	r2, [pc, #76]	; (800ebec <HAL_InitTick+0xa4>)
 800eb9e:	fba2 2303 	umull	r2, r3, r2, r3
 800eba2:	0c9b      	lsrs	r3, r3, #18
 800eba4:	3b01      	subs	r3, #1
 800eba6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800eba8:	4b11      	ldr	r3, [pc, #68]	; (800ebf0 <HAL_InitTick+0xa8>)
 800ebaa:	4a12      	ldr	r2, [pc, #72]	; (800ebf4 <HAL_InitTick+0xac>)
 800ebac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800ebae:	4b10      	ldr	r3, [pc, #64]	; (800ebf0 <HAL_InitTick+0xa8>)
 800ebb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ebb4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800ebb6:	4a0e      	ldr	r2, [pc, #56]	; (800ebf0 <HAL_InitTick+0xa8>)
 800ebb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebba:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800ebbc:	4b0c      	ldr	r3, [pc, #48]	; (800ebf0 <HAL_InitTick+0xa8>)
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ebc2:	4b0b      	ldr	r3, [pc, #44]	; (800ebf0 <HAL_InitTick+0xa8>)
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 800ebc8:	4809      	ldr	r0, [pc, #36]	; (800ebf0 <HAL_InitTick+0xa8>)
 800ebca:	f006 fbd5 	bl	8015378 <HAL_TIM_Base_Init>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d104      	bne.n	800ebde <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 800ebd4:	4806      	ldr	r0, [pc, #24]	; (800ebf0 <HAL_InitTick+0xa8>)
 800ebd6:	f006 fc1f 	bl	8015418 <HAL_TIM_Base_Start_IT>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	e000      	b.n	800ebe0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800ebde:	2301      	movs	r3, #1
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3730      	adds	r7, #48	; 0x30
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	40023800 	.word	0x40023800
 800ebec:	431bde83 	.word	0x431bde83
 800ebf0:	2000cc48 	.word	0x2000cc48
 800ebf4:	40014400 	.word	0x40014400

0800ebf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ebfc:	e7fe      	b.n	800ebfc <NMI_Handler+0x4>

0800ebfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ebfe:	b480      	push	{r7}
 800ec00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ec02:	e7fe      	b.n	800ec02 <HardFault_Handler+0x4>

0800ec04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ec04:	b480      	push	{r7}
 800ec06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ec08:	e7fe      	b.n	800ec08 <MemManage_Handler+0x4>

0800ec0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ec0a:	b480      	push	{r7}
 800ec0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ec0e:	e7fe      	b.n	800ec0e <BusFault_Handler+0x4>

0800ec10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ec10:	b480      	push	{r7}
 800ec12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ec14:	e7fe      	b.n	800ec14 <UsageFault_Handler+0x4>

0800ec16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ec16:	b480      	push	{r7}
 800ec18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ec1a:	bf00      	nop
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 800ec28:	2008      	movs	r0, #8
 800ec2a:	f001 fbc5 	bl	80103b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800ec2e:	bf00      	nop
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 800ec36:	2010      	movs	r0, #16
 800ec38:	f001 fbbe 	bl	80103b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800ec3c:	bf00      	nop
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800ec44:	4802      	ldr	r0, [pc, #8]	; (800ec50 <DMA1_Stream1_IRQHandler+0x10>)
 800ec46:	f000 fca1 	bl	800f58c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800ec4a:	bf00      	nop
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	200057c0 	.word	0x200057c0

0800ec54 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ec58:	4802      	ldr	r0, [pc, #8]	; (800ec64 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800ec5a:	f006 fd49 	bl	80156f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800ec5e:	bf00      	nop
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	20005958 	.word	0x20005958

0800ec68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ec6c:	4803      	ldr	r0, [pc, #12]	; (800ec7c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800ec6e:	f006 fd3f 	bl	80156f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800ec72:	4803      	ldr	r0, [pc, #12]	; (800ec80 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800ec74:	f006 fd3c 	bl	80156f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800ec78:	bf00      	nop
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	20005958 	.word	0x20005958
 800ec80:	2000cc48 	.word	0x2000cc48

0800ec84 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ec88:	4802      	ldr	r0, [pc, #8]	; (800ec94 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800ec8a:	f006 fd31 	bl	80156f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800ec8e:	bf00      	nop
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	20005958 	.word	0x20005958

0800ec98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800ec9c:	4802      	ldr	r0, [pc, #8]	; (800eca8 <I2C1_EV_IRQHandler+0x10>)
 800ec9e:	f001 fe17 	bl	80108d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800eca2:	bf00      	nop
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	2000576c 	.word	0x2000576c

0800ecac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800ecb0:	4802      	ldr	r0, [pc, #8]	; (800ecbc <I2C1_ER_IRQHandler+0x10>)
 800ecb2:	f001 ff7e 	bl	8010bb2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800ecb6:	bf00      	nop
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	2000576c 	.word	0x2000576c

0800ecc0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800ecc4:	4802      	ldr	r0, [pc, #8]	; (800ecd0 <SPI1_IRQHandler+0x10>)
 800ecc6:	f006 f805 	bl	8014cd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800ecca:	bf00      	nop
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	20005840 	.word	0x20005840

0800ecd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800ecd8:	4802      	ldr	r0, [pc, #8]	; (800ece4 <DMA2_Stream0_IRQHandler+0x10>)
 800ecda:	f000 fc57 	bl	800f58c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800ecde:	bf00      	nop
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	20005898 	.word	0x20005898

0800ece8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800ecec:	4802      	ldr	r0, [pc, #8]	; (800ecf8 <DMA2_Stream2_IRQHandler+0x10>)
 800ecee:	f000 fc4d 	bl	800f58c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800ecf2:	bf00      	nop
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	200058f8 	.word	0x200058f8

0800ecfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ed00:	4802      	ldr	r0, [pc, #8]	; (800ed0c <OTG_FS_IRQHandler+0x10>)
 800ed02:	f003 fd18 	bl	8012736 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ed06:	bf00      	nop
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	2000e434 	.word	0x2000e434

0800ed10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ed10:	b480      	push	{r7}
 800ed12:	af00      	add	r7, sp, #0
	return 1;
 800ed14:	2301      	movs	r3, #1
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <_kill>:

int _kill(int pid, int sig)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ed2a:	f010 fa2f 	bl	801f18c <__errno>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2216      	movs	r2, #22
 800ed32:	601a      	str	r2, [r3, #0]
	return -1;
 800ed34:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <_exit>:

void _exit (int status)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800ed48:	f04f 31ff 	mov.w	r1, #4294967295
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f7ff ffe7 	bl	800ed20 <_kill>
	while (1) {}		/* Make sure we hang here */
 800ed52:	e7fe      	b.n	800ed52 <_exit+0x12>

0800ed54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ed60:	2300      	movs	r3, #0
 800ed62:	617b      	str	r3, [r7, #20]
 800ed64:	e00a      	b.n	800ed7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ed66:	f3af 8000 	nop.w
 800ed6a:	4601      	mov	r1, r0
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	1c5a      	adds	r2, r3, #1
 800ed70:	60ba      	str	r2, [r7, #8]
 800ed72:	b2ca      	uxtb	r2, r1
 800ed74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	617b      	str	r3, [r7, #20]
 800ed7c:	697a      	ldr	r2, [r7, #20]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	dbf0      	blt.n	800ed66 <_read+0x12>
	}

return len;
 800ed84:	687b      	ldr	r3, [r7, #4]
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3718      	adds	r7, #24
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ed8e:	b580      	push	{r7, lr}
 800ed90:	b086      	sub	sp, #24
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	60f8      	str	r0, [r7, #12]
 800ed96:	60b9      	str	r1, [r7, #8]
 800ed98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	617b      	str	r3, [r7, #20]
 800ed9e:	e009      	b.n	800edb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	1c5a      	adds	r2, r3, #1
 800eda4:	60ba      	str	r2, [r7, #8]
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	3301      	adds	r3, #1
 800edb2:	617b      	str	r3, [r7, #20]
 800edb4:	697a      	ldr	r2, [r7, #20]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	429a      	cmp	r2, r3
 800edba:	dbf1      	blt.n	800eda0 <_write+0x12>
	}
	return len;
 800edbc:	687b      	ldr	r3, [r7, #4]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3718      	adds	r7, #24
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <_close>:

int _close(int file)
{
 800edc6:	b480      	push	{r7}
 800edc8:	b083      	sub	sp, #12
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
	return -1;
 800edce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	370c      	adds	r7, #12
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr

0800edde <_fstat>:


int _fstat(int file, struct stat *st)
{
 800edde:	b480      	push	{r7}
 800ede0:	b083      	sub	sp, #12
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
 800ede6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800edee:	605a      	str	r2, [r3, #4]
	return 0;
 800edf0:	2300      	movs	r3, #0
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	370c      	adds	r7, #12
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr

0800edfe <_isatty>:

int _isatty(int file)
{
 800edfe:	b480      	push	{r7}
 800ee00:	b083      	sub	sp, #12
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
	return 1;
 800ee06:	2301      	movs	r3, #1
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	370c      	adds	r7, #12
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr

0800ee14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b085      	sub	sp, #20
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	60b9      	str	r1, [r7, #8]
 800ee1e:	607a      	str	r2, [r7, #4]
	return 0;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3714      	adds	r7, #20
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr
	...

0800ee30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b086      	sub	sp, #24
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ee38:	4a14      	ldr	r2, [pc, #80]	; (800ee8c <_sbrk+0x5c>)
 800ee3a:	4b15      	ldr	r3, [pc, #84]	; (800ee90 <_sbrk+0x60>)
 800ee3c:	1ad3      	subs	r3, r2, r3
 800ee3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ee44:	4b13      	ldr	r3, [pc, #76]	; (800ee94 <_sbrk+0x64>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d102      	bne.n	800ee52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ee4c:	4b11      	ldr	r3, [pc, #68]	; (800ee94 <_sbrk+0x64>)
 800ee4e:	4a12      	ldr	r2, [pc, #72]	; (800ee98 <_sbrk+0x68>)
 800ee50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ee52:	4b10      	ldr	r3, [pc, #64]	; (800ee94 <_sbrk+0x64>)
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4413      	add	r3, r2
 800ee5a:	693a      	ldr	r2, [r7, #16]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d207      	bcs.n	800ee70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ee60:	f010 f994 	bl	801f18c <__errno>
 800ee64:	4603      	mov	r3, r0
 800ee66:	220c      	movs	r2, #12
 800ee68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ee6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee6e:	e009      	b.n	800ee84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ee70:	4b08      	ldr	r3, [pc, #32]	; (800ee94 <_sbrk+0x64>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ee76:	4b07      	ldr	r3, [pc, #28]	; (800ee94 <_sbrk+0x64>)
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	4a05      	ldr	r2, [pc, #20]	; (800ee94 <_sbrk+0x64>)
 800ee80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ee82:	68fb      	ldr	r3, [r7, #12]
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3718      	adds	r7, #24
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	20020000 	.word	0x20020000
 800ee90:	00000800 	.word	0x00000800
 800ee94:	2000cc90 	.word	0x2000cc90
 800ee98:	2000eb70 	.word	0x2000eb70

0800ee9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800eea0:	4b07      	ldr	r3, [pc, #28]	; (800eec0 <SystemInit+0x24>)
 800eea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eea6:	4a06      	ldr	r2, [pc, #24]	; (800eec0 <SystemInit+0x24>)
 800eea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eeac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800eeb0:	4b03      	ldr	r3, [pc, #12]	; (800eec0 <SystemInit+0x24>)
 800eeb2:	4a04      	ldr	r2, [pc, #16]	; (800eec4 <SystemInit+0x28>)
 800eeb4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800eeb6:	bf00      	nop
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	e000ed00 	.word	0xe000ed00
 800eec4:	08008000 	.word	0x08008000

0800eec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800eec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ef00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800eecc:	480d      	ldr	r0, [pc, #52]	; (800ef04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800eece:	490e      	ldr	r1, [pc, #56]	; (800ef08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800eed0:	4a0e      	ldr	r2, [pc, #56]	; (800ef0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800eed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800eed4:	e002      	b.n	800eedc <LoopCopyDataInit>

0800eed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800eed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800eed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800eeda:	3304      	adds	r3, #4

0800eedc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800eedc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800eede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800eee0:	d3f9      	bcc.n	800eed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800eee2:	4a0b      	ldr	r2, [pc, #44]	; (800ef10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800eee4:	4c0b      	ldr	r4, [pc, #44]	; (800ef14 <LoopFillZerobss+0x26>)
  movs r3, #0
 800eee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800eee8:	e001      	b.n	800eeee <LoopFillZerobss>

0800eeea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800eeea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800eeec:	3204      	adds	r2, #4

0800eeee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800eeee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800eef0:	d3fb      	bcc.n	800eeea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800eef2:	f7ff ffd3 	bl	800ee9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800eef6:	f010 fa45 	bl	801f384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800eefa:	f7fe fb5f 	bl	800d5bc <main>
  bx  lr    
 800eefe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800ef00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ef04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ef08:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 800ef0c:	080357ac 	.word	0x080357ac
  ldr r2, =_sbss
 800ef10:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800ef14:	2000eb6c 	.word	0x2000eb6c

0800ef18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ef18:	e7fe      	b.n	800ef18 <ADC_IRQHandler>

0800ef1a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b084      	sub	sp, #16
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d104      	bne.n	800ef32 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800ef28:	b672      	cpsid	i
}
 800ef2a:	bf00      	nop
 800ef2c:	f7ff fbbc 	bl	800e6a8 <Error_Handler>
 800ef30:	e7fe      	b.n	800ef30 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800ef32:	2300      	movs	r3, #0
 800ef34:	60fb      	str	r3, [r7, #12]
 800ef36:	e007      	b.n	800ef48 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	3301      	adds	r3, #1
 800ef46:	60fb      	str	r3, [r7, #12]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d9f4      	bls.n	800ef38 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	721a      	strb	r2, [r3, #8]
}
 800ef54:	bf00      	nop
 800ef56:	3710      	adds	r7, #16
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d104      	bne.n	800ef74 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800ef6a:	b672      	cpsid	i
}
 800ef6c:	bf00      	nop
 800ef6e:	f7ff fb9b 	bl	800e6a8 <Error_Handler>
 800ef72:	e7fe      	b.n	800ef72 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	7a1b      	ldrb	r3, [r3, #8]
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d904      	bls.n	800ef86 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800ef7c:	b672      	cpsid	i
}
 800ef7e:	bf00      	nop
 800ef80:	f7ff fb92 	bl	800e6a8 <Error_Handler>
 800ef84:	e7fe      	b.n	800ef84 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	7a1b      	ldrb	r3, [r3, #8]
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	b2d1      	uxtb	r1, r2
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	7211      	strb	r1, [r2, #8]
 800ef92:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ef94:	f3ef 8211 	mrs	r2, BASEPRI
 800ef98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef9c:	f383 8811 	msr	BASEPRI, r3
 800efa0:	f3bf 8f6f 	isb	sy
 800efa4:	f3bf 8f4f 	dsb	sy
 800efa8:	60fa      	str	r2, [r7, #12]
 800efaa:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800efb4:	bf00      	nop
 800efb6:	3710      	adds	r7, #16
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d104      	bne.n	800efd4 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800efca:	b672      	cpsid	i
}
 800efcc:	bf00      	nop
 800efce:	f7ff fb6b 	bl	800e6a8 <Error_Handler>
 800efd2:	e7fe      	b.n	800efd2 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	7a1b      	ldrb	r3, [r3, #8]
 800efd8:	3b01      	subs	r3, #1
 800efda:	b2da      	uxtb	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	7a1b      	ldrb	r3, [r3, #8]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d904      	bls.n	800eff2 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800efe8:	b672      	cpsid	i
}
 800efea:	bf00      	nop
 800efec:	f7ff fb5c 	bl	800e6a8 <Error_Handler>
 800eff0:	e7fe      	b.n	800eff0 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	7a1b      	ldrb	r3, [r3, #8]
 800eff6:	461a      	mov	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800effe:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f006:	bf00      	nop
}
 800f008:	bf00      	nop
 800f00a:	3710      	adds	r7, #16
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d105      	bne.n	800f02a <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 800f01e:	f010 f8b5 	bl	801f18c <__errno>
 800f022:	4603      	mov	r3, r0
 800f024:	2216      	movs	r2, #22
 800f026:	601a      	str	r2, [r3, #0]
    return;
 800f028:	e015      	b.n	800f056 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 800f02a:	200c      	movs	r0, #12
 800f02c:	f010 f9ce 	bl	801f3cc <malloc>
 800f030:	4603      	mov	r3, r0
 800f032:	461a      	mov	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d005      	beq.n	800f04c <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4618      	mov	r0, r3
 800f046:	f7ff ff68 	bl	800ef1a <stm32_lock_init>
    return;
 800f04a:	e004      	b.n	800f056 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 800f04c:	b672      	cpsid	i
}
 800f04e:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800f050:	f7ff fb2a 	bl	800e6a8 <Error_Handler>
 800f054:	e7fe      	b.n	800f054 <__retarget_lock_init_recursive+0x44>
}
 800f056:	3708      	adds	r7, #8
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d104      	bne.n	800f074 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800f06a:	b672      	cpsid	i
}
 800f06c:	bf00      	nop
 800f06e:	f7ff fb1b 	bl	800e6a8 <Error_Handler>
 800f072:	e7fe      	b.n	800f072 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff ff70 	bl	800ef5c <stm32_lock_acquire>
}
 800f07c:	bf00      	nop
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d104      	bne.n	800f09c <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800f092:	b672      	cpsid	i
}
 800f094:	bf00      	nop
 800f096:	f7ff fb07 	bl	800e6a8 <Error_Handler>
 800f09a:	e7fe      	b.n	800f09a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff ff8c 	bl	800efbc <stm32_lock_release>
}
 800f0a4:	bf00      	nop
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f0b0:	4b0e      	ldr	r3, [pc, #56]	; (800f0ec <HAL_Init+0x40>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4a0d      	ldr	r2, [pc, #52]	; (800f0ec <HAL_Init+0x40>)
 800f0b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f0ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f0bc:	4b0b      	ldr	r3, [pc, #44]	; (800f0ec <HAL_Init+0x40>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4a0a      	ldr	r2, [pc, #40]	; (800f0ec <HAL_Init+0x40>)
 800f0c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f0c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f0c8:	4b08      	ldr	r3, [pc, #32]	; (800f0ec <HAL_Init+0x40>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a07      	ldr	r2, [pc, #28]	; (800f0ec <HAL_Init+0x40>)
 800f0ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f0d4:	2003      	movs	r0, #3
 800f0d6:	f000 f8fc 	bl	800f2d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f0da:	200f      	movs	r0, #15
 800f0dc:	f7ff fd34 	bl	800eb48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f0e0:	f7ff fae8 	bl	800e6b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f0e4:	2300      	movs	r3, #0
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	40023c00 	.word	0x40023c00

0800f0f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f0f4:	4b06      	ldr	r3, [pc, #24]	; (800f110 <HAL_IncTick+0x20>)
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	4b06      	ldr	r3, [pc, #24]	; (800f114 <HAL_IncTick+0x24>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4413      	add	r3, r2
 800f100:	4a04      	ldr	r2, [pc, #16]	; (800f114 <HAL_IncTick+0x24>)
 800f102:	6013      	str	r3, [r2, #0]
}
 800f104:	bf00      	nop
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop
 800f110:	20000008 	.word	0x20000008
 800f114:	2000ccb8 	.word	0x2000ccb8

0800f118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f118:	b480      	push	{r7}
 800f11a:	af00      	add	r7, sp, #0
  return uwTick;
 800f11c:	4b03      	ldr	r3, [pc, #12]	; (800f12c <HAL_GetTick+0x14>)
 800f11e:	681b      	ldr	r3, [r3, #0]
}
 800f120:	4618      	mov	r0, r3
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop
 800f12c:	2000ccb8 	.word	0x2000ccb8

0800f130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f138:	f7ff ffee 	bl	800f118 <HAL_GetTick>
 800f13c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f148:	d005      	beq.n	800f156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f14a:	4b0a      	ldr	r3, [pc, #40]	; (800f174 <HAL_Delay+0x44>)
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	461a      	mov	r2, r3
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	4413      	add	r3, r2
 800f154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f156:	bf00      	nop
 800f158:	f7ff ffde 	bl	800f118 <HAL_GetTick>
 800f15c:	4602      	mov	r2, r0
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	68fa      	ldr	r2, [r7, #12]
 800f164:	429a      	cmp	r2, r3
 800f166:	d8f7      	bhi.n	800f158 <HAL_Delay+0x28>
  {
  }
}
 800f168:	bf00      	nop
 800f16a:	bf00      	nop
 800f16c:	3710      	adds	r7, #16
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop
 800f174:	20000008 	.word	0x20000008

0800f178 <__NVIC_SetPriorityGrouping>:
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f003 0307 	and.w	r3, r3, #7
 800f186:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f188:	4b0c      	ldr	r3, [pc, #48]	; (800f1bc <__NVIC_SetPriorityGrouping+0x44>)
 800f18a:	68db      	ldr	r3, [r3, #12]
 800f18c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f18e:	68ba      	ldr	r2, [r7, #8]
 800f190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f194:	4013      	ands	r3, r2
 800f196:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f1a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f1a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f1a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f1aa:	4a04      	ldr	r2, [pc, #16]	; (800f1bc <__NVIC_SetPriorityGrouping+0x44>)
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	60d3      	str	r3, [r2, #12]
}
 800f1b0:	bf00      	nop
 800f1b2:	3714      	adds	r7, #20
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr
 800f1bc:	e000ed00 	.word	0xe000ed00

0800f1c0 <__NVIC_GetPriorityGrouping>:
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f1c4:	4b04      	ldr	r3, [pc, #16]	; (800f1d8 <__NVIC_GetPriorityGrouping+0x18>)
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	0a1b      	lsrs	r3, r3, #8
 800f1ca:	f003 0307 	and.w	r3, r3, #7
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr
 800f1d8:	e000ed00 	.word	0xe000ed00

0800f1dc <__NVIC_EnableIRQ>:
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f1e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	db0b      	blt.n	800f206 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f1ee:	79fb      	ldrb	r3, [r7, #7]
 800f1f0:	f003 021f 	and.w	r2, r3, #31
 800f1f4:	4907      	ldr	r1, [pc, #28]	; (800f214 <__NVIC_EnableIRQ+0x38>)
 800f1f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1fa:	095b      	lsrs	r3, r3, #5
 800f1fc:	2001      	movs	r0, #1
 800f1fe:	fa00 f202 	lsl.w	r2, r0, r2
 800f202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f206:	bf00      	nop
 800f208:	370c      	adds	r7, #12
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr
 800f212:	bf00      	nop
 800f214:	e000e100 	.word	0xe000e100

0800f218 <__NVIC_SetPriority>:
{
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	4603      	mov	r3, r0
 800f220:	6039      	str	r1, [r7, #0]
 800f222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	db0a      	blt.n	800f242 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	b2da      	uxtb	r2, r3
 800f230:	490c      	ldr	r1, [pc, #48]	; (800f264 <__NVIC_SetPriority+0x4c>)
 800f232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f236:	0112      	lsls	r2, r2, #4
 800f238:	b2d2      	uxtb	r2, r2
 800f23a:	440b      	add	r3, r1
 800f23c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f240:	e00a      	b.n	800f258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	b2da      	uxtb	r2, r3
 800f246:	4908      	ldr	r1, [pc, #32]	; (800f268 <__NVIC_SetPriority+0x50>)
 800f248:	79fb      	ldrb	r3, [r7, #7]
 800f24a:	f003 030f 	and.w	r3, r3, #15
 800f24e:	3b04      	subs	r3, #4
 800f250:	0112      	lsls	r2, r2, #4
 800f252:	b2d2      	uxtb	r2, r2
 800f254:	440b      	add	r3, r1
 800f256:	761a      	strb	r2, [r3, #24]
}
 800f258:	bf00      	nop
 800f25a:	370c      	adds	r7, #12
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr
 800f264:	e000e100 	.word	0xe000e100
 800f268:	e000ed00 	.word	0xe000ed00

0800f26c <NVIC_EncodePriority>:
{
 800f26c:	b480      	push	{r7}
 800f26e:	b089      	sub	sp, #36	; 0x24
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f003 0307 	and.w	r3, r3, #7
 800f27e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	f1c3 0307 	rsb	r3, r3, #7
 800f286:	2b04      	cmp	r3, #4
 800f288:	bf28      	it	cs
 800f28a:	2304      	movcs	r3, #4
 800f28c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	3304      	adds	r3, #4
 800f292:	2b06      	cmp	r3, #6
 800f294:	d902      	bls.n	800f29c <NVIC_EncodePriority+0x30>
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	3b03      	subs	r3, #3
 800f29a:	e000      	b.n	800f29e <NVIC_EncodePriority+0x32>
 800f29c:	2300      	movs	r3, #0
 800f29e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800f2aa:	43da      	mvns	r2, r3
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	401a      	ands	r2, r3
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f2b4:	f04f 31ff 	mov.w	r1, #4294967295
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	fa01 f303 	lsl.w	r3, r1, r3
 800f2be:	43d9      	mvns	r1, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f2c4:	4313      	orrs	r3, r2
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3724      	adds	r7, #36	; 0x24
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr

0800f2d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f2d2:	b580      	push	{r7, lr}
 800f2d4:	b082      	sub	sp, #8
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f7ff ff4c 	bl	800f178 <__NVIC_SetPriorityGrouping>
}
 800f2e0:	bf00      	nop
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b086      	sub	sp, #24
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	60b9      	str	r1, [r7, #8]
 800f2f2:	607a      	str	r2, [r7, #4]
 800f2f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f2fa:	f7ff ff61 	bl	800f1c0 <__NVIC_GetPriorityGrouping>
 800f2fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	68b9      	ldr	r1, [r7, #8]
 800f304:	6978      	ldr	r0, [r7, #20]
 800f306:	f7ff ffb1 	bl	800f26c <NVIC_EncodePriority>
 800f30a:	4602      	mov	r2, r0
 800f30c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f310:	4611      	mov	r1, r2
 800f312:	4618      	mov	r0, r3
 800f314:	f7ff ff80 	bl	800f218 <__NVIC_SetPriority>
}
 800f318:	bf00      	nop
 800f31a:	3718      	adds	r7, #24
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	4603      	mov	r3, r0
 800f328:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f32a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f32e:	4618      	mov	r0, r3
 800f330:	f7ff ff54 	bl	800f1dc <__NVIC_EnableIRQ>
}
 800f334:	bf00      	nop
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b086      	sub	sp, #24
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f344:	2300      	movs	r3, #0
 800f346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f348:	f7ff fee6 	bl	800f118 <HAL_GetTick>
 800f34c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d101      	bne.n	800f358 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f354:	2301      	movs	r3, #1
 800f356:	e099      	b.n	800f48c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2202      	movs	r2, #2
 800f35c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2200      	movs	r2, #0
 800f364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	681a      	ldr	r2, [r3, #0]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f022 0201 	bic.w	r2, r2, #1
 800f376:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f378:	e00f      	b.n	800f39a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f37a:	f7ff fecd 	bl	800f118 <HAL_GetTick>
 800f37e:	4602      	mov	r2, r0
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	1ad3      	subs	r3, r2, r3
 800f384:	2b05      	cmp	r3, #5
 800f386:	d908      	bls.n	800f39a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2220      	movs	r2, #32
 800f38c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2203      	movs	r2, #3
 800f392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f396:	2303      	movs	r3, #3
 800f398:	e078      	b.n	800f48c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f003 0301 	and.w	r3, r3, #1
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d1e8      	bne.n	800f37a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f3b0:	697a      	ldr	r2, [r7, #20]
 800f3b2:	4b38      	ldr	r3, [pc, #224]	; (800f494 <HAL_DMA_Init+0x158>)
 800f3b4:	4013      	ands	r3, r2
 800f3b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	685a      	ldr	r2, [r3, #4]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	689b      	ldr	r3, [r3, #8]
 800f3c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f3c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	691b      	ldr	r3, [r3, #16]
 800f3cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f3d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	699b      	ldr	r3, [r3, #24]
 800f3d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f3de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6a1b      	ldr	r3, [r3, #32]
 800f3e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f3e6:	697a      	ldr	r2, [r7, #20]
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f0:	2b04      	cmp	r3, #4
 800f3f2:	d107      	bne.n	800f404 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	697a      	ldr	r2, [r7, #20]
 800f400:	4313      	orrs	r3, r2
 800f402:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	697a      	ldr	r2, [r7, #20]
 800f40a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	695b      	ldr	r3, [r3, #20]
 800f412:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	f023 0307 	bic.w	r3, r3, #7
 800f41a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f420:	697a      	ldr	r2, [r7, #20]
 800f422:	4313      	orrs	r3, r2
 800f424:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42a:	2b04      	cmp	r3, #4
 800f42c:	d117      	bne.n	800f45e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f432:	697a      	ldr	r2, [r7, #20]
 800f434:	4313      	orrs	r3, r2
 800f436:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00e      	beq.n	800f45e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 faab 	bl	800f99c <DMA_CheckFifoParam>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d008      	beq.n	800f45e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2240      	movs	r2, #64	; 0x40
 800f450:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2201      	movs	r2, #1
 800f456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f45a:	2301      	movs	r3, #1
 800f45c:	e016      	b.n	800f48c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	697a      	ldr	r2, [r7, #20]
 800f464:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 fa62 	bl	800f930 <DMA_CalcBaseAndBitshift>
 800f46c:	4603      	mov	r3, r0
 800f46e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f474:	223f      	movs	r2, #63	; 0x3f
 800f476:	409a      	lsls	r2, r3
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2200      	movs	r2, #0
 800f480:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2201      	movs	r2, #1
 800f486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f48a:	2300      	movs	r3, #0
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3718      	adds	r7, #24
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}
 800f494:	f010803f 	.word	0xf010803f

0800f498 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b086      	sub	sp, #24
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	60b9      	str	r1, [r7, #8]
 800f4a2:	607a      	str	r2, [r7, #4]
 800f4a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	d101      	bne.n	800f4be <HAL_DMA_Start_IT+0x26>
 800f4ba:	2302      	movs	r3, #2
 800f4bc:	e040      	b.n	800f540 <HAL_DMA_Start_IT+0xa8>
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f4cc:	b2db      	uxtb	r3, r3
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d12f      	bne.n	800f532 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2202      	movs	r2, #2
 800f4d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	68b9      	ldr	r1, [r7, #8]
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f000 f9f4 	bl	800f8d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4f0:	223f      	movs	r2, #63	; 0x3f
 800f4f2:	409a      	lsls	r2, r3
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f042 0216 	orr.w	r2, r2, #22
 800f506:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d007      	beq.n	800f520 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	681a      	ldr	r2, [r3, #0]
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f042 0208 	orr.w	r2, r2, #8
 800f51e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f042 0201 	orr.w	r2, r2, #1
 800f52e:	601a      	str	r2, [r3, #0]
 800f530:	e005      	b.n	800f53e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f53a:	2302      	movs	r3, #2
 800f53c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f53e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3718      	adds	r7, #24
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f556:	b2db      	uxtb	r3, r3
 800f558:	2b02      	cmp	r3, #2
 800f55a:	d004      	beq.n	800f566 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2280      	movs	r2, #128	; 0x80
 800f560:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800f562:	2301      	movs	r3, #1
 800f564:	e00c      	b.n	800f580 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2205      	movs	r2, #5
 800f56a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f022 0201 	bic.w	r2, r2, #1
 800f57c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f57e:	2300      	movs	r3, #0
}
 800f580:	4618      	mov	r0, r3
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b086      	sub	sp, #24
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800f594:	2300      	movs	r3, #0
 800f596:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f598:	4b8e      	ldr	r3, [pc, #568]	; (800f7d4 <HAL_DMA_IRQHandler+0x248>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a8e      	ldr	r2, [pc, #568]	; (800f7d8 <HAL_DMA_IRQHandler+0x24c>)
 800f59e:	fba2 2303 	umull	r2, r3, r2, r3
 800f5a2:	0a9b      	lsrs	r3, r3, #10
 800f5a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5b6:	2208      	movs	r2, #8
 800f5b8:	409a      	lsls	r2, r3
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	4013      	ands	r3, r2
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d01a      	beq.n	800f5f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f003 0304 	and.w	r3, r3, #4
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d013      	beq.n	800f5f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f022 0204 	bic.w	r2, r2, #4
 800f5de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5e4:	2208      	movs	r2, #8
 800f5e6:	409a      	lsls	r2, r3
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5f0:	f043 0201 	orr.w	r2, r3, #1
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5fc:	2201      	movs	r2, #1
 800f5fe:	409a      	lsls	r2, r3
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	4013      	ands	r3, r2
 800f604:	2b00      	cmp	r3, #0
 800f606:	d012      	beq.n	800f62e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	695b      	ldr	r3, [r3, #20]
 800f60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f612:	2b00      	cmp	r3, #0
 800f614:	d00b      	beq.n	800f62e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f61a:	2201      	movs	r2, #1
 800f61c:	409a      	lsls	r2, r3
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f626:	f043 0202 	orr.w	r2, r3, #2
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f632:	2204      	movs	r2, #4
 800f634:	409a      	lsls	r2, r3
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	4013      	ands	r3, r2
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d012      	beq.n	800f664 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f003 0302 	and.w	r3, r3, #2
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d00b      	beq.n	800f664 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f650:	2204      	movs	r2, #4
 800f652:	409a      	lsls	r2, r3
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f65c:	f043 0204 	orr.w	r2, r3, #4
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f668:	2210      	movs	r2, #16
 800f66a:	409a      	lsls	r2, r3
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	4013      	ands	r3, r2
 800f670:	2b00      	cmp	r3, #0
 800f672:	d043      	beq.n	800f6fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f003 0308 	and.w	r3, r3, #8
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d03c      	beq.n	800f6fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f686:	2210      	movs	r2, #16
 800f688:	409a      	lsls	r2, r3
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d018      	beq.n	800f6ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d108      	bne.n	800f6bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d024      	beq.n	800f6fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	4798      	blx	r3
 800f6ba:	e01f      	b.n	800f6fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d01b      	beq.n	800f6fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	4798      	blx	r3
 800f6cc:	e016      	b.n	800f6fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d107      	bne.n	800f6ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f022 0208 	bic.w	r2, r2, #8
 800f6ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d003      	beq.n	800f6fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f700:	2220      	movs	r2, #32
 800f702:	409a      	lsls	r2, r3
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	4013      	ands	r3, r2
 800f708:	2b00      	cmp	r3, #0
 800f70a:	f000 808f 	beq.w	800f82c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f003 0310 	and.w	r3, r3, #16
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f000 8087 	beq.w	800f82c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f722:	2220      	movs	r2, #32
 800f724:	409a      	lsls	r2, r3
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f730:	b2db      	uxtb	r3, r3
 800f732:	2b05      	cmp	r3, #5
 800f734:	d136      	bne.n	800f7a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f022 0216 	bic.w	r2, r2, #22
 800f744:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	695a      	ldr	r2, [r3, #20]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f754:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d103      	bne.n	800f766 <HAL_DMA_IRQHandler+0x1da>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f762:	2b00      	cmp	r3, #0
 800f764:	d007      	beq.n	800f776 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f022 0208 	bic.w	r2, r2, #8
 800f774:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f77a:	223f      	movs	r2, #63	; 0x3f
 800f77c:	409a      	lsls	r2, r3
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2201      	movs	r2, #1
 800f786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f796:	2b00      	cmp	r3, #0
 800f798:	d07e      	beq.n	800f898 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	4798      	blx	r3
        }
        return;
 800f7a2:	e079      	b.n	800f898 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d01d      	beq.n	800f7ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d10d      	bne.n	800f7dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d031      	beq.n	800f82c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	4798      	blx	r3
 800f7d0:	e02c      	b.n	800f82c <HAL_DMA_IRQHandler+0x2a0>
 800f7d2:	bf00      	nop
 800f7d4:	20000000 	.word	0x20000000
 800f7d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d023      	beq.n	800f82c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	4798      	blx	r3
 800f7ec:	e01e      	b.n	800f82c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d10f      	bne.n	800f81c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f022 0210 	bic.w	r2, r2, #16
 800f80a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2201      	movs	r2, #1
 800f810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2200      	movs	r2, #0
 800f818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f820:	2b00      	cmp	r3, #0
 800f822:	d003      	beq.n	800f82c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f830:	2b00      	cmp	r3, #0
 800f832:	d032      	beq.n	800f89a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f838:	f003 0301 	and.w	r3, r3, #1
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d022      	beq.n	800f886 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2205      	movs	r2, #5
 800f844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f022 0201 	bic.w	r2, r2, #1
 800f856:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	3301      	adds	r3, #1
 800f85c:	60bb      	str	r3, [r7, #8]
 800f85e:	697a      	ldr	r2, [r7, #20]
 800f860:	429a      	cmp	r2, r3
 800f862:	d307      	bcc.n	800f874 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f003 0301 	and.w	r3, r3, #1
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d1f2      	bne.n	800f858 <HAL_DMA_IRQHandler+0x2cc>
 800f872:	e000      	b.n	800f876 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800f874:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2201      	movs	r2, #1
 800f87a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2200      	movs	r2, #0
 800f882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d005      	beq.n	800f89a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	4798      	blx	r3
 800f896:	e000      	b.n	800f89a <HAL_DMA_IRQHandler+0x30e>
        return;
 800f898:	bf00      	nop
    }
  }
}
 800f89a:	3718      	adds	r7, #24
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f8ae:	b2db      	uxtb	r3, r3
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr

0800f8bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	607a      	str	r2, [r7, #4]
 800f8e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f8f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	683a      	ldr	r2, [r7, #0]
 800f8f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	689b      	ldr	r3, [r3, #8]
 800f8fe:	2b40      	cmp	r3, #64	; 0x40
 800f900:	d108      	bne.n	800f914 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	687a      	ldr	r2, [r7, #4]
 800f908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	68ba      	ldr	r2, [r7, #8]
 800f910:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800f912:	e007      	b.n	800f924 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	60da      	str	r2, [r3, #12]
}
 800f924:	bf00      	nop
 800f926:	3714      	adds	r7, #20
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr

0800f930 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f930:	b480      	push	{r7}
 800f932:	b085      	sub	sp, #20
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	3b10      	subs	r3, #16
 800f940:	4a14      	ldr	r2, [pc, #80]	; (800f994 <DMA_CalcBaseAndBitshift+0x64>)
 800f942:	fba2 2303 	umull	r2, r3, r2, r3
 800f946:	091b      	lsrs	r3, r3, #4
 800f948:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f94a:	4a13      	ldr	r2, [pc, #76]	; (800f998 <DMA_CalcBaseAndBitshift+0x68>)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	4413      	add	r3, r2
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	461a      	mov	r2, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2b03      	cmp	r3, #3
 800f95c:	d909      	bls.n	800f972 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f966:	f023 0303 	bic.w	r3, r3, #3
 800f96a:	1d1a      	adds	r2, r3, #4
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	659a      	str	r2, [r3, #88]	; 0x58
 800f970:	e007      	b.n	800f982 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800f97a:	f023 0303 	bic.w	r3, r3, #3
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800f986:	4618      	mov	r0, r3
 800f988:	3714      	adds	r7, #20
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	aaaaaaab 	.word	0xaaaaaaab
 800f998:	080223d4 	.word	0x080223d4

0800f99c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b085      	sub	sp, #20
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	699b      	ldr	r3, [r3, #24]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d11f      	bne.n	800f9f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	2b03      	cmp	r3, #3
 800f9ba:	d856      	bhi.n	800fa6a <DMA_CheckFifoParam+0xce>
 800f9bc:	a201      	add	r2, pc, #4	; (adr r2, 800f9c4 <DMA_CheckFifoParam+0x28>)
 800f9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c2:	bf00      	nop
 800f9c4:	0800f9d5 	.word	0x0800f9d5
 800f9c8:	0800f9e7 	.word	0x0800f9e7
 800f9cc:	0800f9d5 	.word	0x0800f9d5
 800f9d0:	0800fa6b 	.word	0x0800fa6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d046      	beq.n	800fa6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f9e4:	e043      	b.n	800fa6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800f9ee:	d140      	bne.n	800fa72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f9f4:	e03d      	b.n	800fa72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	699b      	ldr	r3, [r3, #24]
 800f9fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9fe:	d121      	bne.n	800fa44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	2b03      	cmp	r3, #3
 800fa04:	d837      	bhi.n	800fa76 <DMA_CheckFifoParam+0xda>
 800fa06:	a201      	add	r2, pc, #4	; (adr r2, 800fa0c <DMA_CheckFifoParam+0x70>)
 800fa08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa0c:	0800fa1d 	.word	0x0800fa1d
 800fa10:	0800fa23 	.word	0x0800fa23
 800fa14:	0800fa1d 	.word	0x0800fa1d
 800fa18:	0800fa35 	.word	0x0800fa35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	73fb      	strb	r3, [r7, #15]
      break;
 800fa20:	e030      	b.n	800fa84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d025      	beq.n	800fa7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fa32:	e022      	b.n	800fa7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fa3c:	d11f      	bne.n	800fa7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800fa42:	e01c      	b.n	800fa7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	d903      	bls.n	800fa52 <DMA_CheckFifoParam+0xb6>
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	2b03      	cmp	r3, #3
 800fa4e:	d003      	beq.n	800fa58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fa50:	e018      	b.n	800fa84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800fa52:	2301      	movs	r3, #1
 800fa54:	73fb      	strb	r3, [r7, #15]
      break;
 800fa56:	e015      	b.n	800fa84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d00e      	beq.n	800fa82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800fa64:	2301      	movs	r3, #1
 800fa66:	73fb      	strb	r3, [r7, #15]
      break;
 800fa68:	e00b      	b.n	800fa82 <DMA_CheckFifoParam+0xe6>
      break;
 800fa6a:	bf00      	nop
 800fa6c:	e00a      	b.n	800fa84 <DMA_CheckFifoParam+0xe8>
      break;
 800fa6e:	bf00      	nop
 800fa70:	e008      	b.n	800fa84 <DMA_CheckFifoParam+0xe8>
      break;
 800fa72:	bf00      	nop
 800fa74:	e006      	b.n	800fa84 <DMA_CheckFifoParam+0xe8>
      break;
 800fa76:	bf00      	nop
 800fa78:	e004      	b.n	800fa84 <DMA_CheckFifoParam+0xe8>
      break;
 800fa7a:	bf00      	nop
 800fa7c:	e002      	b.n	800fa84 <DMA_CheckFifoParam+0xe8>
      break;   
 800fa7e:	bf00      	nop
 800fa80:	e000      	b.n	800fa84 <DMA_CheckFifoParam+0xe8>
      break;
 800fa82:	bf00      	nop
    }
  } 
  
  return status; 
 800fa84:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3714      	adds	r7, #20
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr
 800fa92:	bf00      	nop

0800fa94 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b086      	sub	sp, #24
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800faa2:	2301      	movs	r3, #1
 800faa4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800faa6:	4b23      	ldr	r3, [pc, #140]	; (800fb34 <HAL_FLASH_Program+0xa0>)
 800faa8:	7e1b      	ldrb	r3, [r3, #24]
 800faaa:	2b01      	cmp	r3, #1
 800faac:	d101      	bne.n	800fab2 <HAL_FLASH_Program+0x1e>
 800faae:	2302      	movs	r3, #2
 800fab0:	e03b      	b.n	800fb2a <HAL_FLASH_Program+0x96>
 800fab2:	4b20      	ldr	r3, [pc, #128]	; (800fb34 <HAL_FLASH_Program+0xa0>)
 800fab4:	2201      	movs	r2, #1
 800fab6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fab8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fabc:	f000 f87c 	bl	800fbb8 <FLASH_WaitForLastOperation>
 800fac0:	4603      	mov	r3, r0
 800fac2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800fac4:	7dfb      	ldrb	r3, [r7, #23]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d12b      	bne.n	800fb22 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2b00      	cmp	r3, #0
 800face:	d105      	bne.n	800fadc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800fad0:	783b      	ldrb	r3, [r7, #0]
 800fad2:	4619      	mov	r1, r3
 800fad4:	68b8      	ldr	r0, [r7, #8]
 800fad6:	f000 f927 	bl	800fd28 <FLASH_Program_Byte>
 800fada:	e016      	b.n	800fb0a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d105      	bne.n	800faee <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800fae2:	883b      	ldrh	r3, [r7, #0]
 800fae4:	4619      	mov	r1, r3
 800fae6:	68b8      	ldr	r0, [r7, #8]
 800fae8:	f000 f8fa 	bl	800fce0 <FLASH_Program_HalfWord>
 800faec:	e00d      	b.n	800fb0a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2b02      	cmp	r3, #2
 800faf2:	d105      	bne.n	800fb00 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	4619      	mov	r1, r3
 800faf8:	68b8      	ldr	r0, [r7, #8]
 800fafa:	f000 f8cf 	bl	800fc9c <FLASH_Program_Word>
 800fafe:	e004      	b.n	800fb0a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800fb00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb04:	68b8      	ldr	r0, [r7, #8]
 800fb06:	f000 f897 	bl	800fc38 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fb0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fb0e:	f000 f853 	bl	800fbb8 <FLASH_WaitForLastOperation>
 800fb12:	4603      	mov	r3, r0
 800fb14:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800fb16:	4b08      	ldr	r3, [pc, #32]	; (800fb38 <HAL_FLASH_Program+0xa4>)
 800fb18:	691b      	ldr	r3, [r3, #16]
 800fb1a:	4a07      	ldr	r2, [pc, #28]	; (800fb38 <HAL_FLASH_Program+0xa4>)
 800fb1c:	f023 0301 	bic.w	r3, r3, #1
 800fb20:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800fb22:	4b04      	ldr	r3, [pc, #16]	; (800fb34 <HAL_FLASH_Program+0xa0>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	761a      	strb	r2, [r3, #24]
  
  return status;
 800fb28:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3718      	adds	r7, #24
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	2000ccbc 	.word	0x2000ccbc
 800fb38:	40023c00 	.word	0x40023c00

0800fb3c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800fb42:	2300      	movs	r3, #0
 800fb44:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fb46:	4b0b      	ldr	r3, [pc, #44]	; (800fb74 <HAL_FLASH_Unlock+0x38>)
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	da0b      	bge.n	800fb66 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800fb4e:	4b09      	ldr	r3, [pc, #36]	; (800fb74 <HAL_FLASH_Unlock+0x38>)
 800fb50:	4a09      	ldr	r2, [pc, #36]	; (800fb78 <HAL_FLASH_Unlock+0x3c>)
 800fb52:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800fb54:	4b07      	ldr	r3, [pc, #28]	; (800fb74 <HAL_FLASH_Unlock+0x38>)
 800fb56:	4a09      	ldr	r2, [pc, #36]	; (800fb7c <HAL_FLASH_Unlock+0x40>)
 800fb58:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800fb5a:	4b06      	ldr	r3, [pc, #24]	; (800fb74 <HAL_FLASH_Unlock+0x38>)
 800fb5c:	691b      	ldr	r3, [r3, #16]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	da01      	bge.n	800fb66 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800fb62:	2301      	movs	r3, #1
 800fb64:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800fb66:	79fb      	ldrb	r3, [r7, #7]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr
 800fb74:	40023c00 	.word	0x40023c00
 800fb78:	45670123 	.word	0x45670123
 800fb7c:	cdef89ab 	.word	0xcdef89ab

0800fb80 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800fb80:	b480      	push	{r7}
 800fb82:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800fb84:	4b05      	ldr	r3, [pc, #20]	; (800fb9c <HAL_FLASH_Lock+0x1c>)
 800fb86:	691b      	ldr	r3, [r3, #16]
 800fb88:	4a04      	ldr	r2, [pc, #16]	; (800fb9c <HAL_FLASH_Lock+0x1c>)
 800fb8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fb8e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr
 800fb9c:	40023c00 	.word	0x40023c00

0800fba0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800fba0:	b480      	push	{r7}
 800fba2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800fba4:	4b03      	ldr	r3, [pc, #12]	; (800fbb4 <HAL_FLASH_GetError+0x14>)
 800fba6:	69db      	ldr	r3, [r3, #28]
}  
 800fba8:	4618      	mov	r0, r3
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	2000ccbc 	.word	0x2000ccbc

0800fbb8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fbc4:	4b1a      	ldr	r3, [pc, #104]	; (800fc30 <FLASH_WaitForLastOperation+0x78>)
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800fbca:	f7ff faa5 	bl	800f118 <HAL_GetTick>
 800fbce:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800fbd0:	e010      	b.n	800fbf4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd8:	d00c      	beq.n	800fbf4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d007      	beq.n	800fbf0 <FLASH_WaitForLastOperation+0x38>
 800fbe0:	f7ff fa9a 	bl	800f118 <HAL_GetTick>
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	1ad3      	subs	r3, r2, r3
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d201      	bcs.n	800fbf4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800fbf0:	2303      	movs	r3, #3
 800fbf2:	e019      	b.n	800fc28 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800fbf4:	4b0f      	ldr	r3, [pc, #60]	; (800fc34 <FLASH_WaitForLastOperation+0x7c>)
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d1e8      	bne.n	800fbd2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800fc00:	4b0c      	ldr	r3, [pc, #48]	; (800fc34 <FLASH_WaitForLastOperation+0x7c>)
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	f003 0301 	and.w	r3, r3, #1
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d002      	beq.n	800fc12 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fc0c:	4b09      	ldr	r3, [pc, #36]	; (800fc34 <FLASH_WaitForLastOperation+0x7c>)
 800fc0e:	2201      	movs	r2, #1
 800fc10:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800fc12:	4b08      	ldr	r3, [pc, #32]	; (800fc34 <FLASH_WaitForLastOperation+0x7c>)
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d003      	beq.n	800fc26 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800fc1e:	f000 f8a5 	bl	800fd6c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fc22:	2301      	movs	r3, #1
 800fc24:	e000      	b.n	800fc28 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800fc26:	2300      	movs	r3, #0
  
}  
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3710      	adds	r7, #16
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	2000ccbc 	.word	0x2000ccbc
 800fc34:	40023c00 	.word	0x40023c00

0800fc38 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fc44:	4b14      	ldr	r3, [pc, #80]	; (800fc98 <FLASH_Program_DoubleWord+0x60>)
 800fc46:	691b      	ldr	r3, [r3, #16]
 800fc48:	4a13      	ldr	r2, [pc, #76]	; (800fc98 <FLASH_Program_DoubleWord+0x60>)
 800fc4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800fc50:	4b11      	ldr	r3, [pc, #68]	; (800fc98 <FLASH_Program_DoubleWord+0x60>)
 800fc52:	691b      	ldr	r3, [r3, #16]
 800fc54:	4a10      	ldr	r2, [pc, #64]	; (800fc98 <FLASH_Program_DoubleWord+0x60>)
 800fc56:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800fc5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800fc5c:	4b0e      	ldr	r3, [pc, #56]	; (800fc98 <FLASH_Program_DoubleWord+0x60>)
 800fc5e:	691b      	ldr	r3, [r3, #16]
 800fc60:	4a0d      	ldr	r2, [pc, #52]	; (800fc98 <FLASH_Program_DoubleWord+0x60>)
 800fc62:	f043 0301 	orr.w	r3, r3, #1
 800fc66:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800fc6e:	f3bf 8f6f 	isb	sy
}
 800fc72:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800fc74:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fc78:	f04f 0200 	mov.w	r2, #0
 800fc7c:	f04f 0300 	mov.w	r3, #0
 800fc80:	000a      	movs	r2, r1
 800fc82:	2300      	movs	r3, #0
 800fc84:	68f9      	ldr	r1, [r7, #12]
 800fc86:	3104      	adds	r1, #4
 800fc88:	4613      	mov	r3, r2
 800fc8a:	600b      	str	r3, [r1, #0]
}
 800fc8c:	bf00      	nop
 800fc8e:	3714      	adds	r7, #20
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr
 800fc98:	40023c00 	.word	0x40023c00

0800fc9c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fca6:	4b0d      	ldr	r3, [pc, #52]	; (800fcdc <FLASH_Program_Word+0x40>)
 800fca8:	691b      	ldr	r3, [r3, #16]
 800fcaa:	4a0c      	ldr	r2, [pc, #48]	; (800fcdc <FLASH_Program_Word+0x40>)
 800fcac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800fcb2:	4b0a      	ldr	r3, [pc, #40]	; (800fcdc <FLASH_Program_Word+0x40>)
 800fcb4:	691b      	ldr	r3, [r3, #16]
 800fcb6:	4a09      	ldr	r2, [pc, #36]	; (800fcdc <FLASH_Program_Word+0x40>)
 800fcb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fcbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800fcbe:	4b07      	ldr	r3, [pc, #28]	; (800fcdc <FLASH_Program_Word+0x40>)
 800fcc0:	691b      	ldr	r3, [r3, #16]
 800fcc2:	4a06      	ldr	r2, [pc, #24]	; (800fcdc <FLASH_Program_Word+0x40>)
 800fcc4:	f043 0301 	orr.w	r3, r3, #1
 800fcc8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	683a      	ldr	r2, [r7, #0]
 800fcce:	601a      	str	r2, [r3, #0]
}
 800fcd0:	bf00      	nop
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr
 800fcdc:	40023c00 	.word	0x40023c00

0800fce0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	460b      	mov	r3, r1
 800fcea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fcec:	4b0d      	ldr	r3, [pc, #52]	; (800fd24 <FLASH_Program_HalfWord+0x44>)
 800fcee:	691b      	ldr	r3, [r3, #16]
 800fcf0:	4a0c      	ldr	r2, [pc, #48]	; (800fd24 <FLASH_Program_HalfWord+0x44>)
 800fcf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800fcf8:	4b0a      	ldr	r3, [pc, #40]	; (800fd24 <FLASH_Program_HalfWord+0x44>)
 800fcfa:	691b      	ldr	r3, [r3, #16]
 800fcfc:	4a09      	ldr	r2, [pc, #36]	; (800fd24 <FLASH_Program_HalfWord+0x44>)
 800fcfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800fd04:	4b07      	ldr	r3, [pc, #28]	; (800fd24 <FLASH_Program_HalfWord+0x44>)
 800fd06:	691b      	ldr	r3, [r3, #16]
 800fd08:	4a06      	ldr	r2, [pc, #24]	; (800fd24 <FLASH_Program_HalfWord+0x44>)
 800fd0a:	f043 0301 	orr.w	r3, r3, #1
 800fd0e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	887a      	ldrh	r2, [r7, #2]
 800fd14:	801a      	strh	r2, [r3, #0]
}
 800fd16:	bf00      	nop
 800fd18:	370c      	adds	r7, #12
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop
 800fd24:	40023c00 	.word	0x40023c00

0800fd28 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	460b      	mov	r3, r1
 800fd32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800fd34:	4b0c      	ldr	r3, [pc, #48]	; (800fd68 <FLASH_Program_Byte+0x40>)
 800fd36:	691b      	ldr	r3, [r3, #16]
 800fd38:	4a0b      	ldr	r2, [pc, #44]	; (800fd68 <FLASH_Program_Byte+0x40>)
 800fd3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800fd40:	4b09      	ldr	r3, [pc, #36]	; (800fd68 <FLASH_Program_Byte+0x40>)
 800fd42:	4a09      	ldr	r2, [pc, #36]	; (800fd68 <FLASH_Program_Byte+0x40>)
 800fd44:	691b      	ldr	r3, [r3, #16]
 800fd46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800fd48:	4b07      	ldr	r3, [pc, #28]	; (800fd68 <FLASH_Program_Byte+0x40>)
 800fd4a:	691b      	ldr	r3, [r3, #16]
 800fd4c:	4a06      	ldr	r2, [pc, #24]	; (800fd68 <FLASH_Program_Byte+0x40>)
 800fd4e:	f043 0301 	orr.w	r3, r3, #1
 800fd52:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	78fa      	ldrb	r2, [r7, #3]
 800fd58:	701a      	strb	r2, [r3, #0]
}
 800fd5a:	bf00      	nop
 800fd5c:	370c      	adds	r7, #12
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	40023c00 	.word	0x40023c00

0800fd6c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800fd6c:	b480      	push	{r7}
 800fd6e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800fd70:	4b2f      	ldr	r3, [pc, #188]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	f003 0310 	and.w	r3, r3, #16
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d008      	beq.n	800fd8e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fd7c:	4b2d      	ldr	r3, [pc, #180]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fd7e:	69db      	ldr	r3, [r3, #28]
 800fd80:	f043 0310 	orr.w	r3, r3, #16
 800fd84:	4a2b      	ldr	r2, [pc, #172]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fd86:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800fd88:	4b29      	ldr	r3, [pc, #164]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fd8a:	2210      	movs	r2, #16
 800fd8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800fd8e:	4b28      	ldr	r3, [pc, #160]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	f003 0320 	and.w	r3, r3, #32
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d008      	beq.n	800fdac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fd9a:	4b26      	ldr	r3, [pc, #152]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fd9c:	69db      	ldr	r3, [r3, #28]
 800fd9e:	f043 0308 	orr.w	r3, r3, #8
 800fda2:	4a24      	ldr	r2, [pc, #144]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fda4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800fda6:	4b22      	ldr	r3, [pc, #136]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fda8:	2220      	movs	r2, #32
 800fdaa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800fdac:	4b20      	ldr	r3, [pc, #128]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d008      	beq.n	800fdca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800fdb8:	4b1e      	ldr	r3, [pc, #120]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fdba:	69db      	ldr	r3, [r3, #28]
 800fdbc:	f043 0304 	orr.w	r3, r3, #4
 800fdc0:	4a1c      	ldr	r2, [pc, #112]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fdc2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800fdc4:	4b1a      	ldr	r3, [pc, #104]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fdc6:	2240      	movs	r2, #64	; 0x40
 800fdc8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800fdca:	4b19      	ldr	r3, [pc, #100]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d008      	beq.n	800fde8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800fdd6:	4b17      	ldr	r3, [pc, #92]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fdd8:	69db      	ldr	r3, [r3, #28]
 800fdda:	f043 0302 	orr.w	r3, r3, #2
 800fdde:	4a15      	ldr	r2, [pc, #84]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fde0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800fde2:	4b13      	ldr	r3, [pc, #76]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fde4:	2280      	movs	r2, #128	; 0x80
 800fde6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800fde8:	4b11      	ldr	r3, [pc, #68]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d009      	beq.n	800fe08 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800fdf4:	4b0f      	ldr	r3, [pc, #60]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fdf6:	69db      	ldr	r3, [r3, #28]
 800fdf8:	f043 0301 	orr.w	r3, r3, #1
 800fdfc:	4a0d      	ldr	r2, [pc, #52]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fdfe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800fe00:	4b0b      	ldr	r3, [pc, #44]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fe02:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fe06:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800fe08:	4b09      	ldr	r3, [pc, #36]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	f003 0302 	and.w	r3, r3, #2
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d008      	beq.n	800fe26 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800fe14:	4b07      	ldr	r3, [pc, #28]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fe16:	69db      	ldr	r3, [r3, #28]
 800fe18:	f043 0320 	orr.w	r3, r3, #32
 800fe1c:	4a05      	ldr	r2, [pc, #20]	; (800fe34 <FLASH_SetErrorCode+0xc8>)
 800fe1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800fe20:	4b03      	ldr	r3, [pc, #12]	; (800fe30 <FLASH_SetErrorCode+0xc4>)
 800fe22:	2202      	movs	r2, #2
 800fe24:	60da      	str	r2, [r3, #12]
  }
}
 800fe26:	bf00      	nop
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr
 800fe30:	40023c00 	.word	0x40023c00
 800fe34:	2000ccbc 	.word	0x2000ccbc

0800fe38 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fe42:	2301      	movs	r3, #1
 800fe44:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800fe46:	2300      	movs	r3, #0
 800fe48:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fe4a:	4b31      	ldr	r3, [pc, #196]	; (800ff10 <HAL_FLASHEx_Erase+0xd8>)
 800fe4c:	7e1b      	ldrb	r3, [r3, #24]
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d101      	bne.n	800fe56 <HAL_FLASHEx_Erase+0x1e>
 800fe52:	2302      	movs	r3, #2
 800fe54:	e058      	b.n	800ff08 <HAL_FLASHEx_Erase+0xd0>
 800fe56:	4b2e      	ldr	r3, [pc, #184]	; (800ff10 <HAL_FLASHEx_Erase+0xd8>)
 800fe58:	2201      	movs	r2, #1
 800fe5a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fe5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fe60:	f7ff feaa 	bl	800fbb8 <FLASH_WaitForLastOperation>
 800fe64:	4603      	mov	r3, r0
 800fe66:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800fe68:	7bfb      	ldrb	r3, [r7, #15]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d148      	bne.n	800ff00 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	f04f 32ff 	mov.w	r2, #4294967295
 800fe74:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d115      	bne.n	800feaa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	691b      	ldr	r3, [r3, #16]
 800fe82:	b2da      	uxtb	r2, r3
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	685b      	ldr	r3, [r3, #4]
 800fe88:	4619      	mov	r1, r3
 800fe8a:	4610      	mov	r0, r2
 800fe8c:	f000 f844 	bl	800ff18 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fe90:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fe94:	f7ff fe90 	bl	800fbb8 <FLASH_WaitForLastOperation>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800fe9c:	4b1d      	ldr	r3, [pc, #116]	; (800ff14 <HAL_FLASHEx_Erase+0xdc>)
 800fe9e:	691b      	ldr	r3, [r3, #16]
 800fea0:	4a1c      	ldr	r2, [pc, #112]	; (800ff14 <HAL_FLASHEx_Erase+0xdc>)
 800fea2:	f023 0304 	bic.w	r3, r3, #4
 800fea6:	6113      	str	r3, [r2, #16]
 800fea8:	e028      	b.n	800fefc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	689b      	ldr	r3, [r3, #8]
 800feae:	60bb      	str	r3, [r7, #8]
 800feb0:	e01c      	b.n	800feec <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	691b      	ldr	r3, [r3, #16]
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	4619      	mov	r1, r3
 800feba:	68b8      	ldr	r0, [r7, #8]
 800febc:	f000 f850 	bl	800ff60 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800fec0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800fec4:	f7ff fe78 	bl	800fbb8 <FLASH_WaitForLastOperation>
 800fec8:	4603      	mov	r3, r0
 800feca:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800fecc:	4b11      	ldr	r3, [pc, #68]	; (800ff14 <HAL_FLASHEx_Erase+0xdc>)
 800fece:	691b      	ldr	r3, [r3, #16]
 800fed0:	4a10      	ldr	r2, [pc, #64]	; (800ff14 <HAL_FLASHEx_Erase+0xdc>)
 800fed2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800fed6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800fed8:	7bfb      	ldrb	r3, [r7, #15]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d003      	beq.n	800fee6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	68ba      	ldr	r2, [r7, #8]
 800fee2:	601a      	str	r2, [r3, #0]
          break;
 800fee4:	e00a      	b.n	800fefc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	3301      	adds	r3, #1
 800feea:	60bb      	str	r3, [r7, #8]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	68da      	ldr	r2, [r3, #12]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	4413      	add	r3, r2
 800fef6:	68ba      	ldr	r2, [r7, #8]
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d3da      	bcc.n	800feb2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800fefc:	f000 f878 	bl	800fff0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ff00:	4b03      	ldr	r3, [pc, #12]	; (800ff10 <HAL_FLASHEx_Erase+0xd8>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	761a      	strb	r2, [r3, #24]

  return status;
 800ff06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3710      	adds	r7, #16
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}
 800ff10:	2000ccbc 	.word	0x2000ccbc
 800ff14:	40023c00 	.word	0x40023c00

0800ff18 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	4603      	mov	r3, r0
 800ff20:	6039      	str	r1, [r7, #0]
 800ff22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ff24:	4b0d      	ldr	r3, [pc, #52]	; (800ff5c <FLASH_MassErase+0x44>)
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	4a0c      	ldr	r2, [pc, #48]	; (800ff5c <FLASH_MassErase+0x44>)
 800ff2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800ff30:	4b0a      	ldr	r3, [pc, #40]	; (800ff5c <FLASH_MassErase+0x44>)
 800ff32:	691b      	ldr	r3, [r3, #16]
 800ff34:	4a09      	ldr	r2, [pc, #36]	; (800ff5c <FLASH_MassErase+0x44>)
 800ff36:	f043 0304 	orr.w	r3, r3, #4
 800ff3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800ff3c:	4b07      	ldr	r3, [pc, #28]	; (800ff5c <FLASH_MassErase+0x44>)
 800ff3e:	691a      	ldr	r2, [r3, #16]
 800ff40:	79fb      	ldrb	r3, [r7, #7]
 800ff42:	021b      	lsls	r3, r3, #8
 800ff44:	4313      	orrs	r3, r2
 800ff46:	4a05      	ldr	r2, [pc, #20]	; (800ff5c <FLASH_MassErase+0x44>)
 800ff48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ff4c:	6113      	str	r3, [r2, #16]
}
 800ff4e:	bf00      	nop
 800ff50:	370c      	adds	r7, #12
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr
 800ff5a:	bf00      	nop
 800ff5c:	40023c00 	.word	0x40023c00

0800ff60 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b085      	sub	sp, #20
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	460b      	mov	r3, r1
 800ff6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800ff70:	78fb      	ldrb	r3, [r7, #3]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d102      	bne.n	800ff7c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800ff76:	2300      	movs	r3, #0
 800ff78:	60fb      	str	r3, [r7, #12]
 800ff7a:	e010      	b.n	800ff9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800ff7c:	78fb      	ldrb	r3, [r7, #3]
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	d103      	bne.n	800ff8a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800ff82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff86:	60fb      	str	r3, [r7, #12]
 800ff88:	e009      	b.n	800ff9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800ff8a:	78fb      	ldrb	r3, [r7, #3]
 800ff8c:	2b02      	cmp	r3, #2
 800ff8e:	d103      	bne.n	800ff98 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800ff90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff94:	60fb      	str	r3, [r7, #12]
 800ff96:	e002      	b.n	800ff9e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800ff98:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ff9c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ff9e:	4b13      	ldr	r3, [pc, #76]	; (800ffec <FLASH_Erase_Sector+0x8c>)
 800ffa0:	691b      	ldr	r3, [r3, #16]
 800ffa2:	4a12      	ldr	r2, [pc, #72]	; (800ffec <FLASH_Erase_Sector+0x8c>)
 800ffa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ffa8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800ffaa:	4b10      	ldr	r3, [pc, #64]	; (800ffec <FLASH_Erase_Sector+0x8c>)
 800ffac:	691a      	ldr	r2, [r3, #16]
 800ffae:	490f      	ldr	r1, [pc, #60]	; (800ffec <FLASH_Erase_Sector+0x8c>)
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	4313      	orrs	r3, r2
 800ffb4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800ffb6:	4b0d      	ldr	r3, [pc, #52]	; (800ffec <FLASH_Erase_Sector+0x8c>)
 800ffb8:	691b      	ldr	r3, [r3, #16]
 800ffba:	4a0c      	ldr	r2, [pc, #48]	; (800ffec <FLASH_Erase_Sector+0x8c>)
 800ffbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ffc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800ffc2:	4b0a      	ldr	r3, [pc, #40]	; (800ffec <FLASH_Erase_Sector+0x8c>)
 800ffc4:	691a      	ldr	r2, [r3, #16]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	00db      	lsls	r3, r3, #3
 800ffca:	4313      	orrs	r3, r2
 800ffcc:	4a07      	ldr	r2, [pc, #28]	; (800ffec <FLASH_Erase_Sector+0x8c>)
 800ffce:	f043 0302 	orr.w	r3, r3, #2
 800ffd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800ffd4:	4b05      	ldr	r3, [pc, #20]	; (800ffec <FLASH_Erase_Sector+0x8c>)
 800ffd6:	691b      	ldr	r3, [r3, #16]
 800ffd8:	4a04      	ldr	r2, [pc, #16]	; (800ffec <FLASH_Erase_Sector+0x8c>)
 800ffda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ffde:	6113      	str	r3, [r2, #16]
}
 800ffe0:	bf00      	nop
 800ffe2:	3714      	adds	r7, #20
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr
 800ffec:	40023c00 	.word	0x40023c00

0800fff0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800fff0:	b480      	push	{r7}
 800fff2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800fff4:	4b20      	ldr	r3, [pc, #128]	; (8010078 <FLASH_FlushCaches+0x88>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d017      	beq.n	8010030 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8010000:	4b1d      	ldr	r3, [pc, #116]	; (8010078 <FLASH_FlushCaches+0x88>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4a1c      	ldr	r2, [pc, #112]	; (8010078 <FLASH_FlushCaches+0x88>)
 8010006:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801000a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801000c:	4b1a      	ldr	r3, [pc, #104]	; (8010078 <FLASH_FlushCaches+0x88>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4a19      	ldr	r2, [pc, #100]	; (8010078 <FLASH_FlushCaches+0x88>)
 8010012:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010016:	6013      	str	r3, [r2, #0]
 8010018:	4b17      	ldr	r3, [pc, #92]	; (8010078 <FLASH_FlushCaches+0x88>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	4a16      	ldr	r2, [pc, #88]	; (8010078 <FLASH_FlushCaches+0x88>)
 801001e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010022:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010024:	4b14      	ldr	r3, [pc, #80]	; (8010078 <FLASH_FlushCaches+0x88>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	4a13      	ldr	r2, [pc, #76]	; (8010078 <FLASH_FlushCaches+0x88>)
 801002a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801002e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8010030:	4b11      	ldr	r3, [pc, #68]	; (8010078 <FLASH_FlushCaches+0x88>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010038:	2b00      	cmp	r3, #0
 801003a:	d017      	beq.n	801006c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 801003c:	4b0e      	ldr	r3, [pc, #56]	; (8010078 <FLASH_FlushCaches+0x88>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	4a0d      	ldr	r2, [pc, #52]	; (8010078 <FLASH_FlushCaches+0x88>)
 8010042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010046:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8010048:	4b0b      	ldr	r3, [pc, #44]	; (8010078 <FLASH_FlushCaches+0x88>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4a0a      	ldr	r2, [pc, #40]	; (8010078 <FLASH_FlushCaches+0x88>)
 801004e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010052:	6013      	str	r3, [r2, #0]
 8010054:	4b08      	ldr	r3, [pc, #32]	; (8010078 <FLASH_FlushCaches+0x88>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a07      	ldr	r2, [pc, #28]	; (8010078 <FLASH_FlushCaches+0x88>)
 801005a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801005e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8010060:	4b05      	ldr	r3, [pc, #20]	; (8010078 <FLASH_FlushCaches+0x88>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4a04      	ldr	r2, [pc, #16]	; (8010078 <FLASH_FlushCaches+0x88>)
 8010066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801006a:	6013      	str	r3, [r2, #0]
  }
}
 801006c:	bf00      	nop
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr
 8010076:	bf00      	nop
 8010078:	40023c00 	.word	0x40023c00

0801007c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801007c:	b480      	push	{r7}
 801007e:	b089      	sub	sp, #36	; 0x24
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010086:	2300      	movs	r3, #0
 8010088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801008a:	2300      	movs	r3, #0
 801008c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801008e:	2300      	movs	r3, #0
 8010090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010092:	2300      	movs	r3, #0
 8010094:	61fb      	str	r3, [r7, #28]
 8010096:	e159      	b.n	801034c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010098:	2201      	movs	r2, #1
 801009a:	69fb      	ldr	r3, [r7, #28]
 801009c:	fa02 f303 	lsl.w	r3, r2, r3
 80100a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	697a      	ldr	r2, [r7, #20]
 80100a8:	4013      	ands	r3, r2
 80100aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80100ac:	693a      	ldr	r2, [r7, #16]
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	429a      	cmp	r2, r3
 80100b2:	f040 8148 	bne.w	8010346 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	f003 0303 	and.w	r3, r3, #3
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d005      	beq.n	80100ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80100ca:	2b02      	cmp	r3, #2
 80100cc:	d130      	bne.n	8010130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	689b      	ldr	r3, [r3, #8]
 80100d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	005b      	lsls	r3, r3, #1
 80100d8:	2203      	movs	r2, #3
 80100da:	fa02 f303 	lsl.w	r3, r2, r3
 80100de:	43db      	mvns	r3, r3
 80100e0:	69ba      	ldr	r2, [r7, #24]
 80100e2:	4013      	ands	r3, r2
 80100e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	68da      	ldr	r2, [r3, #12]
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	005b      	lsls	r3, r3, #1
 80100ee:	fa02 f303 	lsl.w	r3, r2, r3
 80100f2:	69ba      	ldr	r2, [r7, #24]
 80100f4:	4313      	orrs	r3, r2
 80100f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	69ba      	ldr	r2, [r7, #24]
 80100fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010104:	2201      	movs	r2, #1
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	fa02 f303 	lsl.w	r3, r2, r3
 801010c:	43db      	mvns	r3, r3
 801010e:	69ba      	ldr	r2, [r7, #24]
 8010110:	4013      	ands	r3, r2
 8010112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	091b      	lsrs	r3, r3, #4
 801011a:	f003 0201 	and.w	r2, r3, #1
 801011e:	69fb      	ldr	r3, [r7, #28]
 8010120:	fa02 f303 	lsl.w	r3, r2, r3
 8010124:	69ba      	ldr	r2, [r7, #24]
 8010126:	4313      	orrs	r3, r2
 8010128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	69ba      	ldr	r2, [r7, #24]
 801012e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	f003 0303 	and.w	r3, r3, #3
 8010138:	2b03      	cmp	r3, #3
 801013a:	d017      	beq.n	801016c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	005b      	lsls	r3, r3, #1
 8010146:	2203      	movs	r2, #3
 8010148:	fa02 f303 	lsl.w	r3, r2, r3
 801014c:	43db      	mvns	r3, r3
 801014e:	69ba      	ldr	r2, [r7, #24]
 8010150:	4013      	ands	r3, r2
 8010152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	689a      	ldr	r2, [r3, #8]
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	005b      	lsls	r3, r3, #1
 801015c:	fa02 f303 	lsl.w	r3, r2, r3
 8010160:	69ba      	ldr	r2, [r7, #24]
 8010162:	4313      	orrs	r3, r2
 8010164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	69ba      	ldr	r2, [r7, #24]
 801016a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	f003 0303 	and.w	r3, r3, #3
 8010174:	2b02      	cmp	r3, #2
 8010176:	d123      	bne.n	80101c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010178:	69fb      	ldr	r3, [r7, #28]
 801017a:	08da      	lsrs	r2, r3, #3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	3208      	adds	r2, #8
 8010180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010186:	69fb      	ldr	r3, [r7, #28]
 8010188:	f003 0307 	and.w	r3, r3, #7
 801018c:	009b      	lsls	r3, r3, #2
 801018e:	220f      	movs	r2, #15
 8010190:	fa02 f303 	lsl.w	r3, r2, r3
 8010194:	43db      	mvns	r3, r3
 8010196:	69ba      	ldr	r2, [r7, #24]
 8010198:	4013      	ands	r3, r2
 801019a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	691a      	ldr	r2, [r3, #16]
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	f003 0307 	and.w	r3, r3, #7
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	fa02 f303 	lsl.w	r3, r2, r3
 80101ac:	69ba      	ldr	r2, [r7, #24]
 80101ae:	4313      	orrs	r3, r2
 80101b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80101b2:	69fb      	ldr	r3, [r7, #28]
 80101b4:	08da      	lsrs	r2, r3, #3
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	3208      	adds	r2, #8
 80101ba:	69b9      	ldr	r1, [r7, #24]
 80101bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	005b      	lsls	r3, r3, #1
 80101ca:	2203      	movs	r2, #3
 80101cc:	fa02 f303 	lsl.w	r3, r2, r3
 80101d0:	43db      	mvns	r3, r3
 80101d2:	69ba      	ldr	r2, [r7, #24]
 80101d4:	4013      	ands	r3, r2
 80101d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	f003 0203 	and.w	r2, r3, #3
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	005b      	lsls	r3, r3, #1
 80101e4:	fa02 f303 	lsl.w	r3, r2, r3
 80101e8:	69ba      	ldr	r2, [r7, #24]
 80101ea:	4313      	orrs	r3, r2
 80101ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	69ba      	ldr	r2, [r7, #24]
 80101f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	f000 80a2 	beq.w	8010346 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010202:	2300      	movs	r3, #0
 8010204:	60fb      	str	r3, [r7, #12]
 8010206:	4b57      	ldr	r3, [pc, #348]	; (8010364 <HAL_GPIO_Init+0x2e8>)
 8010208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801020a:	4a56      	ldr	r2, [pc, #344]	; (8010364 <HAL_GPIO_Init+0x2e8>)
 801020c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010210:	6453      	str	r3, [r2, #68]	; 0x44
 8010212:	4b54      	ldr	r3, [pc, #336]	; (8010364 <HAL_GPIO_Init+0x2e8>)
 8010214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801021a:	60fb      	str	r3, [r7, #12]
 801021c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801021e:	4a52      	ldr	r2, [pc, #328]	; (8010368 <HAL_GPIO_Init+0x2ec>)
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	089b      	lsrs	r3, r3, #2
 8010224:	3302      	adds	r3, #2
 8010226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801022a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	f003 0303 	and.w	r3, r3, #3
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	220f      	movs	r2, #15
 8010236:	fa02 f303 	lsl.w	r3, r2, r3
 801023a:	43db      	mvns	r3, r3
 801023c:	69ba      	ldr	r2, [r7, #24]
 801023e:	4013      	ands	r3, r2
 8010240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	4a49      	ldr	r2, [pc, #292]	; (801036c <HAL_GPIO_Init+0x2f0>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d019      	beq.n	801027e <HAL_GPIO_Init+0x202>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4a48      	ldr	r2, [pc, #288]	; (8010370 <HAL_GPIO_Init+0x2f4>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d013      	beq.n	801027a <HAL_GPIO_Init+0x1fe>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	4a47      	ldr	r2, [pc, #284]	; (8010374 <HAL_GPIO_Init+0x2f8>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d00d      	beq.n	8010276 <HAL_GPIO_Init+0x1fa>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	4a46      	ldr	r2, [pc, #280]	; (8010378 <HAL_GPIO_Init+0x2fc>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d007      	beq.n	8010272 <HAL_GPIO_Init+0x1f6>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4a45      	ldr	r2, [pc, #276]	; (801037c <HAL_GPIO_Init+0x300>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d101      	bne.n	801026e <HAL_GPIO_Init+0x1f2>
 801026a:	2304      	movs	r3, #4
 801026c:	e008      	b.n	8010280 <HAL_GPIO_Init+0x204>
 801026e:	2307      	movs	r3, #7
 8010270:	e006      	b.n	8010280 <HAL_GPIO_Init+0x204>
 8010272:	2303      	movs	r3, #3
 8010274:	e004      	b.n	8010280 <HAL_GPIO_Init+0x204>
 8010276:	2302      	movs	r3, #2
 8010278:	e002      	b.n	8010280 <HAL_GPIO_Init+0x204>
 801027a:	2301      	movs	r3, #1
 801027c:	e000      	b.n	8010280 <HAL_GPIO_Init+0x204>
 801027e:	2300      	movs	r3, #0
 8010280:	69fa      	ldr	r2, [r7, #28]
 8010282:	f002 0203 	and.w	r2, r2, #3
 8010286:	0092      	lsls	r2, r2, #2
 8010288:	4093      	lsls	r3, r2
 801028a:	69ba      	ldr	r2, [r7, #24]
 801028c:	4313      	orrs	r3, r2
 801028e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010290:	4935      	ldr	r1, [pc, #212]	; (8010368 <HAL_GPIO_Init+0x2ec>)
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	089b      	lsrs	r3, r3, #2
 8010296:	3302      	adds	r3, #2
 8010298:	69ba      	ldr	r2, [r7, #24]
 801029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801029e:	4b38      	ldr	r3, [pc, #224]	; (8010380 <HAL_GPIO_Init+0x304>)
 80102a0:	689b      	ldr	r3, [r3, #8]
 80102a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	43db      	mvns	r3, r3
 80102a8:	69ba      	ldr	r2, [r7, #24]
 80102aa:	4013      	ands	r3, r2
 80102ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d003      	beq.n	80102c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80102ba:	69ba      	ldr	r2, [r7, #24]
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	4313      	orrs	r3, r2
 80102c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80102c2:	4a2f      	ldr	r2, [pc, #188]	; (8010380 <HAL_GPIO_Init+0x304>)
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80102c8:	4b2d      	ldr	r3, [pc, #180]	; (8010380 <HAL_GPIO_Init+0x304>)
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	43db      	mvns	r3, r3
 80102d2:	69ba      	ldr	r2, [r7, #24]
 80102d4:	4013      	ands	r3, r2
 80102d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d003      	beq.n	80102ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80102e4:	69ba      	ldr	r2, [r7, #24]
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	4313      	orrs	r3, r2
 80102ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80102ec:	4a24      	ldr	r2, [pc, #144]	; (8010380 <HAL_GPIO_Init+0x304>)
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80102f2:	4b23      	ldr	r3, [pc, #140]	; (8010380 <HAL_GPIO_Init+0x304>)
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	43db      	mvns	r3, r3
 80102fc:	69ba      	ldr	r2, [r7, #24]
 80102fe:	4013      	ands	r3, r2
 8010300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801030a:	2b00      	cmp	r3, #0
 801030c:	d003      	beq.n	8010316 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801030e:	69ba      	ldr	r2, [r7, #24]
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	4313      	orrs	r3, r2
 8010314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010316:	4a1a      	ldr	r2, [pc, #104]	; (8010380 <HAL_GPIO_Init+0x304>)
 8010318:	69bb      	ldr	r3, [r7, #24]
 801031a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801031c:	4b18      	ldr	r3, [pc, #96]	; (8010380 <HAL_GPIO_Init+0x304>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	43db      	mvns	r3, r3
 8010326:	69ba      	ldr	r2, [r7, #24]
 8010328:	4013      	ands	r3, r2
 801032a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010334:	2b00      	cmp	r3, #0
 8010336:	d003      	beq.n	8010340 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8010338:	69ba      	ldr	r2, [r7, #24]
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	4313      	orrs	r3, r2
 801033e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010340:	4a0f      	ldr	r2, [pc, #60]	; (8010380 <HAL_GPIO_Init+0x304>)
 8010342:	69bb      	ldr	r3, [r7, #24]
 8010344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	3301      	adds	r3, #1
 801034a:	61fb      	str	r3, [r7, #28]
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	2b0f      	cmp	r3, #15
 8010350:	f67f aea2 	bls.w	8010098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8010354:	bf00      	nop
 8010356:	bf00      	nop
 8010358:	3724      	adds	r7, #36	; 0x24
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop
 8010364:	40023800 	.word	0x40023800
 8010368:	40013800 	.word	0x40013800
 801036c:	40020000 	.word	0x40020000
 8010370:	40020400 	.word	0x40020400
 8010374:	40020800 	.word	0x40020800
 8010378:	40020c00 	.word	0x40020c00
 801037c:	40021000 	.word	0x40021000
 8010380:	40013c00 	.word	0x40013c00

08010384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	460b      	mov	r3, r1
 801038e:	807b      	strh	r3, [r7, #2]
 8010390:	4613      	mov	r3, r2
 8010392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010394:	787b      	ldrb	r3, [r7, #1]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d003      	beq.n	80103a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801039a:	887a      	ldrh	r2, [r7, #2]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80103a0:	e003      	b.n	80103aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80103a2:	887b      	ldrh	r3, [r7, #2]
 80103a4:	041a      	lsls	r2, r3, #16
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	619a      	str	r2, [r3, #24]
}
 80103aa:	bf00      	nop
 80103ac:	370c      	adds	r7, #12
 80103ae:	46bd      	mov	sp, r7
 80103b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b4:	4770      	bx	lr
	...

080103b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	4603      	mov	r3, r0
 80103c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80103c2:	4b08      	ldr	r3, [pc, #32]	; (80103e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80103c4:	695a      	ldr	r2, [r3, #20]
 80103c6:	88fb      	ldrh	r3, [r7, #6]
 80103c8:	4013      	ands	r3, r2
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d006      	beq.n	80103dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80103ce:	4a05      	ldr	r2, [pc, #20]	; (80103e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80103d0:	88fb      	ldrh	r3, [r7, #6]
 80103d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80103d4:	88fb      	ldrh	r3, [r7, #6]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fd fe0e 	bl	800dff8 <HAL_GPIO_EXTI_Callback>
  }
}
 80103dc:	bf00      	nop
 80103de:	3708      	adds	r7, #8
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	40013c00 	.word	0x40013c00

080103e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b084      	sub	sp, #16
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d101      	bne.n	80103fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80103f6:	2301      	movs	r3, #1
 80103f8:	e12b      	b.n	8010652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010400:	b2db      	uxtb	r3, r3
 8010402:	2b00      	cmp	r3, #0
 8010404:	d106      	bne.n	8010414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7fe f97c 	bl	800e70c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2224      	movs	r2, #36	; 0x24
 8010418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f022 0201 	bic.w	r2, r2, #1
 801042a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801043a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	681a      	ldr	r2, [r3, #0]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801044a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801044c:	f003 fed0 	bl	80141f0 <HAL_RCC_GetPCLK1Freq>
 8010450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	4a81      	ldr	r2, [pc, #516]	; (801065c <HAL_I2C_Init+0x274>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d807      	bhi.n	801046c <HAL_I2C_Init+0x84>
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	4a80      	ldr	r2, [pc, #512]	; (8010660 <HAL_I2C_Init+0x278>)
 8010460:	4293      	cmp	r3, r2
 8010462:	bf94      	ite	ls
 8010464:	2301      	movls	r3, #1
 8010466:	2300      	movhi	r3, #0
 8010468:	b2db      	uxtb	r3, r3
 801046a:	e006      	b.n	801047a <HAL_I2C_Init+0x92>
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	4a7d      	ldr	r2, [pc, #500]	; (8010664 <HAL_I2C_Init+0x27c>)
 8010470:	4293      	cmp	r3, r2
 8010472:	bf94      	ite	ls
 8010474:	2301      	movls	r3, #1
 8010476:	2300      	movhi	r3, #0
 8010478:	b2db      	uxtb	r3, r3
 801047a:	2b00      	cmp	r3, #0
 801047c:	d001      	beq.n	8010482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801047e:	2301      	movs	r3, #1
 8010480:	e0e7      	b.n	8010652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	4a78      	ldr	r2, [pc, #480]	; (8010668 <HAL_I2C_Init+0x280>)
 8010486:	fba2 2303 	umull	r2, r3, r2, r3
 801048a:	0c9b      	lsrs	r3, r3, #18
 801048c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	68ba      	ldr	r2, [r7, #8]
 801049e:	430a      	orrs	r2, r1
 80104a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	6a1b      	ldr	r3, [r3, #32]
 80104a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	4a6a      	ldr	r2, [pc, #424]	; (801065c <HAL_I2C_Init+0x274>)
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d802      	bhi.n	80104bc <HAL_I2C_Init+0xd4>
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	3301      	adds	r3, #1
 80104ba:	e009      	b.n	80104d0 <HAL_I2C_Init+0xe8>
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80104c2:	fb02 f303 	mul.w	r3, r2, r3
 80104c6:	4a69      	ldr	r2, [pc, #420]	; (801066c <HAL_I2C_Init+0x284>)
 80104c8:	fba2 2303 	umull	r2, r3, r2, r3
 80104cc:	099b      	lsrs	r3, r3, #6
 80104ce:	3301      	adds	r3, #1
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	6812      	ldr	r2, [r2, #0]
 80104d4:	430b      	orrs	r3, r1
 80104d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	69db      	ldr	r3, [r3, #28]
 80104de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80104e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	495c      	ldr	r1, [pc, #368]	; (801065c <HAL_I2C_Init+0x274>)
 80104ec:	428b      	cmp	r3, r1
 80104ee:	d819      	bhi.n	8010524 <HAL_I2C_Init+0x13c>
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	1e59      	subs	r1, r3, #1
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	005b      	lsls	r3, r3, #1
 80104fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80104fe:	1c59      	adds	r1, r3, #1
 8010500:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010504:	400b      	ands	r3, r1
 8010506:	2b00      	cmp	r3, #0
 8010508:	d00a      	beq.n	8010520 <HAL_I2C_Init+0x138>
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	1e59      	subs	r1, r3, #1
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	005b      	lsls	r3, r3, #1
 8010514:	fbb1 f3f3 	udiv	r3, r1, r3
 8010518:	3301      	adds	r3, #1
 801051a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801051e:	e051      	b.n	80105c4 <HAL_I2C_Init+0x1dc>
 8010520:	2304      	movs	r3, #4
 8010522:	e04f      	b.n	80105c4 <HAL_I2C_Init+0x1dc>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d111      	bne.n	8010550 <HAL_I2C_Init+0x168>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	1e58      	subs	r0, r3, #1
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6859      	ldr	r1, [r3, #4]
 8010534:	460b      	mov	r3, r1
 8010536:	005b      	lsls	r3, r3, #1
 8010538:	440b      	add	r3, r1
 801053a:	fbb0 f3f3 	udiv	r3, r0, r3
 801053e:	3301      	adds	r3, #1
 8010540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010544:	2b00      	cmp	r3, #0
 8010546:	bf0c      	ite	eq
 8010548:	2301      	moveq	r3, #1
 801054a:	2300      	movne	r3, #0
 801054c:	b2db      	uxtb	r3, r3
 801054e:	e012      	b.n	8010576 <HAL_I2C_Init+0x18e>
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	1e58      	subs	r0, r3, #1
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6859      	ldr	r1, [r3, #4]
 8010558:	460b      	mov	r3, r1
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	440b      	add	r3, r1
 801055e:	0099      	lsls	r1, r3, #2
 8010560:	440b      	add	r3, r1
 8010562:	fbb0 f3f3 	udiv	r3, r0, r3
 8010566:	3301      	adds	r3, #1
 8010568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801056c:	2b00      	cmp	r3, #0
 801056e:	bf0c      	ite	eq
 8010570:	2301      	moveq	r3, #1
 8010572:	2300      	movne	r3, #0
 8010574:	b2db      	uxtb	r3, r3
 8010576:	2b00      	cmp	r3, #0
 8010578:	d001      	beq.n	801057e <HAL_I2C_Init+0x196>
 801057a:	2301      	movs	r3, #1
 801057c:	e022      	b.n	80105c4 <HAL_I2C_Init+0x1dc>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d10e      	bne.n	80105a4 <HAL_I2C_Init+0x1bc>
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	1e58      	subs	r0, r3, #1
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6859      	ldr	r1, [r3, #4]
 801058e:	460b      	mov	r3, r1
 8010590:	005b      	lsls	r3, r3, #1
 8010592:	440b      	add	r3, r1
 8010594:	fbb0 f3f3 	udiv	r3, r0, r3
 8010598:	3301      	adds	r3, #1
 801059a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801059e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105a2:	e00f      	b.n	80105c4 <HAL_I2C_Init+0x1dc>
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	1e58      	subs	r0, r3, #1
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6859      	ldr	r1, [r3, #4]
 80105ac:	460b      	mov	r3, r1
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	440b      	add	r3, r1
 80105b2:	0099      	lsls	r1, r3, #2
 80105b4:	440b      	add	r3, r1
 80105b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80105ba:	3301      	adds	r3, #1
 80105bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80105c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80105c4:	6879      	ldr	r1, [r7, #4]
 80105c6:	6809      	ldr	r1, [r1, #0]
 80105c8:	4313      	orrs	r3, r2
 80105ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	69da      	ldr	r2, [r3, #28]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6a1b      	ldr	r3, [r3, #32]
 80105de:	431a      	orrs	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	430a      	orrs	r2, r1
 80105e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	689b      	ldr	r3, [r3, #8]
 80105ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80105f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	6911      	ldr	r1, [r2, #16]
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	68d2      	ldr	r2, [r2, #12]
 80105fe:	4311      	orrs	r1, r2
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	6812      	ldr	r2, [r2, #0]
 8010604:	430b      	orrs	r3, r1
 8010606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	695a      	ldr	r2, [r3, #20]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	699b      	ldr	r3, [r3, #24]
 801061a:	431a      	orrs	r2, r3
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	430a      	orrs	r2, r1
 8010622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f042 0201 	orr.w	r2, r2, #1
 8010632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2200      	movs	r2, #0
 8010638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2220      	movs	r2, #32
 801063e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2200      	movs	r2, #0
 8010646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010650:	2300      	movs	r3, #0
}
 8010652:	4618      	mov	r0, r3
 8010654:	3710      	adds	r7, #16
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	000186a0 	.word	0x000186a0
 8010660:	001e847f 	.word	0x001e847f
 8010664:	003d08ff 	.word	0x003d08ff
 8010668:	431bde83 	.word	0x431bde83
 801066c:	10624dd3 	.word	0x10624dd3

08010670 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b086      	sub	sp, #24
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	607a      	str	r2, [r7, #4]
 801067a:	461a      	mov	r2, r3
 801067c:	460b      	mov	r3, r1
 801067e:	817b      	strh	r3, [r7, #10]
 8010680:	4613      	mov	r3, r2
 8010682:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8010684:	2300      	movs	r3, #0
 8010686:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801068e:	b2db      	uxtb	r3, r3
 8010690:	2b20      	cmp	r3, #32
 8010692:	f040 810d 	bne.w	80108b0 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8010696:	4b89      	ldr	r3, [pc, #548]	; (80108bc <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	08db      	lsrs	r3, r3, #3
 801069c:	4a88      	ldr	r2, [pc, #544]	; (80108c0 <HAL_I2C_Master_Transmit_DMA+0x250>)
 801069e:	fba2 2303 	umull	r2, r3, r2, r3
 80106a2:	0a1a      	lsrs	r2, r3, #8
 80106a4:	4613      	mov	r3, r2
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	4413      	add	r3, r2
 80106aa:	009a      	lsls	r2, r3, #2
 80106ac:	4413      	add	r3, r2
 80106ae:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	3b01      	subs	r3, #1
 80106b4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d116      	bne.n	80106ea <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2200      	movs	r2, #0
 80106c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2220      	movs	r2, #32
 80106c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2200      	movs	r2, #0
 80106ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106d6:	f043 0220 	orr.w	r2, r3, #32
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2200      	movs	r2, #0
 80106e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80106e6:	2301      	movs	r3, #1
 80106e8:	e0e3      	b.n	80108b2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	699b      	ldr	r3, [r3, #24]
 80106f0:	f003 0302 	and.w	r3, r3, #2
 80106f4:	2b02      	cmp	r3, #2
 80106f6:	d0db      	beq.n	80106b0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80106fe:	2b01      	cmp	r3, #1
 8010700:	d101      	bne.n	8010706 <HAL_I2C_Master_Transmit_DMA+0x96>
 8010702:	2302      	movs	r3, #2
 8010704:	e0d5      	b.n	80108b2 <HAL_I2C_Master_Transmit_DMA+0x242>
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2201      	movs	r2, #1
 801070a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f003 0301 	and.w	r3, r3, #1
 8010718:	2b01      	cmp	r3, #1
 801071a:	d007      	beq.n	801072c <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f042 0201 	orr.w	r2, r2, #1
 801072a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801073a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2221      	movs	r2, #33	; 0x21
 8010740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2210      	movs	r2, #16
 8010748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	2200      	movs	r2, #0
 8010750:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	687a      	ldr	r2, [r7, #4]
 8010756:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	893a      	ldrh	r2, [r7, #8]
 801075c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010762:	b29a      	uxth	r2, r3
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	4a56      	ldr	r2, [pc, #344]	; (80108c4 <HAL_I2C_Master_Transmit_DMA+0x254>)
 801076c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801076e:	897a      	ldrh	r2, [r7, #10]
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010778:	2b00      	cmp	r3, #0
 801077a:	d07b      	beq.n	8010874 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010780:	2b00      	cmp	r3, #0
 8010782:	d02a      	beq.n	80107da <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010788:	4a4f      	ldr	r2, [pc, #316]	; (80108c8 <HAL_I2C_Master_Transmit_DMA+0x258>)
 801078a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010790:	4a4e      	ldr	r2, [pc, #312]	; (80108cc <HAL_I2C_Master_Transmit_DMA+0x25c>)
 8010792:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010798:	2200      	movs	r2, #0
 801079a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107a0:	2200      	movs	r2, #0
 80107a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107a8:	2200      	movs	r2, #0
 80107aa:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107b0:	2200      	movs	r2, #0
 80107b2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107bc:	4619      	mov	r1, r3
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	3310      	adds	r3, #16
 80107c4:	461a      	mov	r2, r3
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107ca:	f7fe fe65 	bl	800f498 <HAL_DMA_Start_IT>
 80107ce:	4603      	mov	r3, r0
 80107d0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80107d2:	7dfb      	ldrb	r3, [r7, #23]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d139      	bne.n	801084c <HAL_I2C_Master_Transmit_DMA+0x1dc>
 80107d8:	e013      	b.n	8010802 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2220      	movs	r2, #32
 80107de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2200      	movs	r2, #0
 80107e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2200      	movs	r2, #0
 80107fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80107fe:	2301      	movs	r3, #1
 8010800:	e057      	b.n	80108b2 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2200      	movs	r2, #0
 8010806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	685a      	ldr	r2, [r3, #4]
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8010818:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	685a      	ldr	r2, [r3, #4]
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010828:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010838:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010848:	601a      	str	r2, [r3, #0]
 801084a:	e02f      	b.n	80108ac <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2220      	movs	r2, #32
 8010850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2200      	movs	r2, #0
 8010858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010860:	f043 0210 	orr.w	r2, r3, #16
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2200      	movs	r2, #0
 801086c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010870:	2301      	movs	r3, #1
 8010872:	e01e      	b.n	80108b2 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010882:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010892:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2200      	movs	r2, #0
 8010898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	685a      	ldr	r2, [r3, #4]
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80108aa:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80108ac:	2300      	movs	r3, #0
 80108ae:	e000      	b.n	80108b2 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 80108b0:	2302      	movs	r3, #2
  }
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3718      	adds	r7, #24
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	20000000 	.word	0x20000000
 80108c0:	14f8b589 	.word	0x14f8b589
 80108c4:	ffff0000 	.word	0xffff0000
 80108c8:	08012089 	.word	0x08012089
 80108cc:	08012233 	.word	0x08012233

080108d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b088      	sub	sp, #32
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80108d8:	2300      	movs	r3, #0
 80108da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80108f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80108fa:	7bfb      	ldrb	r3, [r7, #15]
 80108fc:	2b10      	cmp	r3, #16
 80108fe:	d003      	beq.n	8010908 <HAL_I2C_EV_IRQHandler+0x38>
 8010900:	7bfb      	ldrb	r3, [r7, #15]
 8010902:	2b40      	cmp	r3, #64	; 0x40
 8010904:	f040 80c1 	bne.w	8010a8a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	699b      	ldr	r3, [r3, #24]
 801090e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	695b      	ldr	r3, [r3, #20]
 8010916:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8010918:	69fb      	ldr	r3, [r7, #28]
 801091a:	f003 0301 	and.w	r3, r3, #1
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10d      	bne.n	801093e <HAL_I2C_EV_IRQHandler+0x6e>
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8010928:	d003      	beq.n	8010932 <HAL_I2C_EV_IRQHandler+0x62>
 801092a:	693b      	ldr	r3, [r7, #16]
 801092c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010930:	d101      	bne.n	8010936 <HAL_I2C_EV_IRQHandler+0x66>
 8010932:	2301      	movs	r3, #1
 8010934:	e000      	b.n	8010938 <HAL_I2C_EV_IRQHandler+0x68>
 8010936:	2300      	movs	r3, #0
 8010938:	2b01      	cmp	r3, #1
 801093a:	f000 8132 	beq.w	8010ba2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801093e:	69fb      	ldr	r3, [r7, #28]
 8010940:	f003 0301 	and.w	r3, r3, #1
 8010944:	2b00      	cmp	r3, #0
 8010946:	d00c      	beq.n	8010962 <HAL_I2C_EV_IRQHandler+0x92>
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	0a5b      	lsrs	r3, r3, #9
 801094c:	f003 0301 	and.w	r3, r3, #1
 8010950:	2b00      	cmp	r3, #0
 8010952:	d006      	beq.n	8010962 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f001 fd83 	bl	8012460 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f000 fd79 	bl	8011452 <I2C_Master_SB>
 8010960:	e092      	b.n	8010a88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010962:	69fb      	ldr	r3, [r7, #28]
 8010964:	08db      	lsrs	r3, r3, #3
 8010966:	f003 0301 	and.w	r3, r3, #1
 801096a:	2b00      	cmp	r3, #0
 801096c:	d009      	beq.n	8010982 <HAL_I2C_EV_IRQHandler+0xb2>
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	0a5b      	lsrs	r3, r3, #9
 8010972:	f003 0301 	and.w	r3, r3, #1
 8010976:	2b00      	cmp	r3, #0
 8010978:	d003      	beq.n	8010982 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f000 fdef 	bl	801155e <I2C_Master_ADD10>
 8010980:	e082      	b.n	8010a88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010982:	69fb      	ldr	r3, [r7, #28]
 8010984:	085b      	lsrs	r3, r3, #1
 8010986:	f003 0301 	and.w	r3, r3, #1
 801098a:	2b00      	cmp	r3, #0
 801098c:	d009      	beq.n	80109a2 <HAL_I2C_EV_IRQHandler+0xd2>
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	0a5b      	lsrs	r3, r3, #9
 8010992:	f003 0301 	and.w	r3, r3, #1
 8010996:	2b00      	cmp	r3, #0
 8010998:	d003      	beq.n	80109a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f000 fe09 	bl	80115b2 <I2C_Master_ADDR>
 80109a0:	e072      	b.n	8010a88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80109a2:	69bb      	ldr	r3, [r7, #24]
 80109a4:	089b      	lsrs	r3, r3, #2
 80109a6:	f003 0301 	and.w	r3, r3, #1
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d03b      	beq.n	8010a26 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80109b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80109bc:	f000 80f3 	beq.w	8010ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80109c0:	69fb      	ldr	r3, [r7, #28]
 80109c2:	09db      	lsrs	r3, r3, #7
 80109c4:	f003 0301 	and.w	r3, r3, #1
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00f      	beq.n	80109ec <HAL_I2C_EV_IRQHandler+0x11c>
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	0a9b      	lsrs	r3, r3, #10
 80109d0:	f003 0301 	and.w	r3, r3, #1
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d009      	beq.n	80109ec <HAL_I2C_EV_IRQHandler+0x11c>
 80109d8:	69fb      	ldr	r3, [r7, #28]
 80109da:	089b      	lsrs	r3, r3, #2
 80109dc:	f003 0301 	and.w	r3, r3, #1
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d103      	bne.n	80109ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f000 f9e9 	bl	8010dbc <I2C_MasterTransmit_TXE>
 80109ea:	e04d      	b.n	8010a88 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80109ec:	69fb      	ldr	r3, [r7, #28]
 80109ee:	089b      	lsrs	r3, r3, #2
 80109f0:	f003 0301 	and.w	r3, r3, #1
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	f000 80d6 	beq.w	8010ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	0a5b      	lsrs	r3, r3, #9
 80109fe:	f003 0301 	and.w	r3, r3, #1
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	f000 80cf 	beq.w	8010ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8010a08:	7bbb      	ldrb	r3, [r7, #14]
 8010a0a:	2b21      	cmp	r3, #33	; 0x21
 8010a0c:	d103      	bne.n	8010a16 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f000 fa70 	bl	8010ef4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010a14:	e0c7      	b.n	8010ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8010a16:	7bfb      	ldrb	r3, [r7, #15]
 8010a18:	2b40      	cmp	r3, #64	; 0x40
 8010a1a:	f040 80c4 	bne.w	8010ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 fade 	bl	8010fe0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010a24:	e0bf      	b.n	8010ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a34:	f000 80b7 	beq.w	8010ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010a38:	69fb      	ldr	r3, [r7, #28]
 8010a3a:	099b      	lsrs	r3, r3, #6
 8010a3c:	f003 0301 	and.w	r3, r3, #1
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d00f      	beq.n	8010a64 <HAL_I2C_EV_IRQHandler+0x194>
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	0a9b      	lsrs	r3, r3, #10
 8010a48:	f003 0301 	and.w	r3, r3, #1
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d009      	beq.n	8010a64 <HAL_I2C_EV_IRQHandler+0x194>
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	089b      	lsrs	r3, r3, #2
 8010a54:	f003 0301 	and.w	r3, r3, #1
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d103      	bne.n	8010a64 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f000 fb53 	bl	8011108 <I2C_MasterReceive_RXNE>
 8010a62:	e011      	b.n	8010a88 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010a64:	69fb      	ldr	r3, [r7, #28]
 8010a66:	089b      	lsrs	r3, r3, #2
 8010a68:	f003 0301 	and.w	r3, r3, #1
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	f000 809a 	beq.w	8010ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	0a5b      	lsrs	r3, r3, #9
 8010a76:	f003 0301 	and.w	r3, r3, #1
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	f000 8093 	beq.w	8010ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 fbfc 	bl	801127e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010a86:	e08e      	b.n	8010ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8010a88:	e08d      	b.n	8010ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d004      	beq.n	8010a9c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	695b      	ldr	r3, [r3, #20]
 8010a98:	61fb      	str	r3, [r7, #28]
 8010a9a:	e007      	b.n	8010aac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	699b      	ldr	r3, [r3, #24]
 8010aa2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	695b      	ldr	r3, [r3, #20]
 8010aaa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	085b      	lsrs	r3, r3, #1
 8010ab0:	f003 0301 	and.w	r3, r3, #1
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d012      	beq.n	8010ade <HAL_I2C_EV_IRQHandler+0x20e>
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	0a5b      	lsrs	r3, r3, #9
 8010abc:	f003 0301 	and.w	r3, r3, #1
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d00c      	beq.n	8010ade <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d003      	beq.n	8010ad4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	699b      	ldr	r3, [r3, #24]
 8010ad2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8010ad4:	69b9      	ldr	r1, [r7, #24]
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 ffba 	bl	8011a50 <I2C_Slave_ADDR>
 8010adc:	e066      	b.n	8010bac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010ade:	69fb      	ldr	r3, [r7, #28]
 8010ae0:	091b      	lsrs	r3, r3, #4
 8010ae2:	f003 0301 	and.w	r3, r3, #1
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d009      	beq.n	8010afe <HAL_I2C_EV_IRQHandler+0x22e>
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	0a5b      	lsrs	r3, r3, #9
 8010aee:	f003 0301 	and.w	r3, r3, #1
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d003      	beq.n	8010afe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 fff4 	bl	8011ae4 <I2C_Slave_STOPF>
 8010afc:	e056      	b.n	8010bac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010afe:	7bbb      	ldrb	r3, [r7, #14]
 8010b00:	2b21      	cmp	r3, #33	; 0x21
 8010b02:	d002      	beq.n	8010b0a <HAL_I2C_EV_IRQHandler+0x23a>
 8010b04:	7bbb      	ldrb	r3, [r7, #14]
 8010b06:	2b29      	cmp	r3, #41	; 0x29
 8010b08:	d125      	bne.n	8010b56 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010b0a:	69fb      	ldr	r3, [r7, #28]
 8010b0c:	09db      	lsrs	r3, r3, #7
 8010b0e:	f003 0301 	and.w	r3, r3, #1
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d00f      	beq.n	8010b36 <HAL_I2C_EV_IRQHandler+0x266>
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	0a9b      	lsrs	r3, r3, #10
 8010b1a:	f003 0301 	and.w	r3, r3, #1
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d009      	beq.n	8010b36 <HAL_I2C_EV_IRQHandler+0x266>
 8010b22:	69fb      	ldr	r3, [r7, #28]
 8010b24:	089b      	lsrs	r3, r3, #2
 8010b26:	f003 0301 	and.w	r3, r3, #1
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d103      	bne.n	8010b36 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 fed0 	bl	80118d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010b34:	e039      	b.n	8010baa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	089b      	lsrs	r3, r3, #2
 8010b3a:	f003 0301 	and.w	r3, r3, #1
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d033      	beq.n	8010baa <HAL_I2C_EV_IRQHandler+0x2da>
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	0a5b      	lsrs	r3, r3, #9
 8010b46:	f003 0301 	and.w	r3, r3, #1
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d02d      	beq.n	8010baa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 fefd 	bl	801194e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010b54:	e029      	b.n	8010baa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010b56:	69fb      	ldr	r3, [r7, #28]
 8010b58:	099b      	lsrs	r3, r3, #6
 8010b5a:	f003 0301 	and.w	r3, r3, #1
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d00f      	beq.n	8010b82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	0a9b      	lsrs	r3, r3, #10
 8010b66:	f003 0301 	and.w	r3, r3, #1
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d009      	beq.n	8010b82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	089b      	lsrs	r3, r3, #2
 8010b72:	f003 0301 	and.w	r3, r3, #1
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d103      	bne.n	8010b82 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f000 ff08 	bl	8011990 <I2C_SlaveReceive_RXNE>
 8010b80:	e014      	b.n	8010bac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010b82:	69fb      	ldr	r3, [r7, #28]
 8010b84:	089b      	lsrs	r3, r3, #2
 8010b86:	f003 0301 	and.w	r3, r3, #1
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d00e      	beq.n	8010bac <HAL_I2C_EV_IRQHandler+0x2dc>
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	0a5b      	lsrs	r3, r3, #9
 8010b92:	f003 0301 	and.w	r3, r3, #1
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d008      	beq.n	8010bac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f000 ff36 	bl	8011a0c <I2C_SlaveReceive_BTF>
 8010ba0:	e004      	b.n	8010bac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8010ba2:	bf00      	nop
 8010ba4:	e002      	b.n	8010bac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010ba6:	bf00      	nop
 8010ba8:	e000      	b.n	8010bac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010baa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8010bac:	3720      	adds	r7, #32
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b08a      	sub	sp, #40	; 0x28
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	695b      	ldr	r3, [r3, #20]
 8010bc0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010bd4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010bd6:	6a3b      	ldr	r3, [r7, #32]
 8010bd8:	0a1b      	lsrs	r3, r3, #8
 8010bda:	f003 0301 	and.w	r3, r3, #1
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d00e      	beq.n	8010c00 <HAL_I2C_ER_IRQHandler+0x4e>
 8010be2:	69fb      	ldr	r3, [r7, #28]
 8010be4:	0a1b      	lsrs	r3, r3, #8
 8010be6:	f003 0301 	and.w	r3, r3, #1
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d008      	beq.n	8010c00 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8010bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf0:	f043 0301 	orr.w	r3, r3, #1
 8010bf4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010bfe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010c00:	6a3b      	ldr	r3, [r7, #32]
 8010c02:	0a5b      	lsrs	r3, r3, #9
 8010c04:	f003 0301 	and.w	r3, r3, #1
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d00e      	beq.n	8010c2a <HAL_I2C_ER_IRQHandler+0x78>
 8010c0c:	69fb      	ldr	r3, [r7, #28]
 8010c0e:	0a1b      	lsrs	r3, r3, #8
 8010c10:	f003 0301 	and.w	r3, r3, #1
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d008      	beq.n	8010c2a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8010c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1a:	f043 0302 	orr.w	r3, r3, #2
 8010c1e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8010c28:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010c2a:	6a3b      	ldr	r3, [r7, #32]
 8010c2c:	0a9b      	lsrs	r3, r3, #10
 8010c2e:	f003 0301 	and.w	r3, r3, #1
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d03f      	beq.n	8010cb6 <HAL_I2C_ER_IRQHandler+0x104>
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	0a1b      	lsrs	r3, r3, #8
 8010c3a:	f003 0301 	and.w	r3, r3, #1
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d039      	beq.n	8010cb6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8010c42:	7efb      	ldrb	r3, [r7, #27]
 8010c44:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c54:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c5a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8010c5c:	7ebb      	ldrb	r3, [r7, #26]
 8010c5e:	2b20      	cmp	r3, #32
 8010c60:	d112      	bne.n	8010c88 <HAL_I2C_ER_IRQHandler+0xd6>
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d10f      	bne.n	8010c88 <HAL_I2C_ER_IRQHandler+0xd6>
 8010c68:	7cfb      	ldrb	r3, [r7, #19]
 8010c6a:	2b21      	cmp	r3, #33	; 0x21
 8010c6c:	d008      	beq.n	8010c80 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8010c6e:	7cfb      	ldrb	r3, [r7, #19]
 8010c70:	2b29      	cmp	r3, #41	; 0x29
 8010c72:	d005      	beq.n	8010c80 <HAL_I2C_ER_IRQHandler+0xce>
 8010c74:	7cfb      	ldrb	r3, [r7, #19]
 8010c76:	2b28      	cmp	r3, #40	; 0x28
 8010c78:	d106      	bne.n	8010c88 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	2b21      	cmp	r3, #33	; 0x21
 8010c7e:	d103      	bne.n	8010c88 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f001 f85f 	bl	8011d44 <I2C_Slave_AF>
 8010c86:	e016      	b.n	8010cb6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010c90:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8010c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c94:	f043 0304 	orr.w	r3, r3, #4
 8010c98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8010c9a:	7efb      	ldrb	r3, [r7, #27]
 8010c9c:	2b10      	cmp	r3, #16
 8010c9e:	d002      	beq.n	8010ca6 <HAL_I2C_ER_IRQHandler+0xf4>
 8010ca0:	7efb      	ldrb	r3, [r7, #27]
 8010ca2:	2b40      	cmp	r3, #64	; 0x40
 8010ca4:	d107      	bne.n	8010cb6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	681a      	ldr	r2, [r3, #0]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010cb4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8010cb6:	6a3b      	ldr	r3, [r7, #32]
 8010cb8:	0adb      	lsrs	r3, r3, #11
 8010cba:	f003 0301 	and.w	r3, r3, #1
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d00e      	beq.n	8010ce0 <HAL_I2C_ER_IRQHandler+0x12e>
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	0a1b      	lsrs	r3, r3, #8
 8010cc6:	f003 0301 	and.w	r3, r3, #1
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d008      	beq.n	8010ce0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8010cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd0:	f043 0308 	orr.w	r3, r3, #8
 8010cd4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8010cde:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d008      	beq.n	8010cf8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cec:	431a      	orrs	r2, r3
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f001 f896 	bl	8011e24 <I2C_ITError>
  }
}
 8010cf8:	bf00      	nop
 8010cfa:	3728      	adds	r7, #40	; 0x28
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010d08:	bf00      	nop
 8010d0a:	370c      	adds	r7, #12
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010d1c:	bf00      	nop
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010d30:	bf00      	nop
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr

08010d3c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	b083      	sub	sp, #12
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	460b      	mov	r3, r1
 8010d46:	70fb      	strb	r3, [r7, #3]
 8010d48:	4613      	mov	r3, r2
 8010d4a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010d4c:	bf00      	nop
 8010d4e:	370c      	adds	r7, #12
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8010d60:	bf00      	nop
 8010d62:	370c      	adds	r7, #12
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010d74:	bf00      	nop
 8010d76:	370c      	adds	r7, #12
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr

08010d80 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d80:	b480      	push	{r7}
 8010d82:	b083      	sub	sp, #12
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010d88:	bf00      	nop
 8010d8a:	370c      	adds	r7, #12
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr

08010d94 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010d94:	b480      	push	{r7}
 8010d96:	b083      	sub	sp, #12
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010d9c:	bf00      	nop
 8010d9e:	370c      	adds	r7, #12
 8010da0:	46bd      	mov	sp, r7
 8010da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da6:	4770      	bx	lr

08010da8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010da8:	b480      	push	{r7}
 8010daa:	b083      	sub	sp, #12
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010db0:	bf00      	nop
 8010db2:	370c      	adds	r7, #12
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr

08010dbc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010dca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010dd2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d150      	bne.n	8010e84 <I2C_MasterTransmit_TXE+0xc8>
 8010de2:	7bfb      	ldrb	r3, [r7, #15]
 8010de4:	2b21      	cmp	r3, #33	; 0x21
 8010de6:	d14d      	bne.n	8010e84 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	2b08      	cmp	r3, #8
 8010dec:	d01d      	beq.n	8010e2a <I2C_MasterTransmit_TXE+0x6e>
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	2b20      	cmp	r3, #32
 8010df2:	d01a      	beq.n	8010e2a <I2C_MasterTransmit_TXE+0x6e>
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010dfa:	d016      	beq.n	8010e2a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	685a      	ldr	r2, [r3, #4]
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010e0a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2211      	movs	r2, #17
 8010e10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2200      	movs	r2, #0
 8010e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2220      	movs	r2, #32
 8010e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f7fd f8d0 	bl	800dfc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010e28:	e060      	b.n	8010eec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	685a      	ldr	r2, [r3, #4]
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010e38:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010e48:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2220      	movs	r2, #32
 8010e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	2b40      	cmp	r3, #64	; 0x40
 8010e62:	d107      	bne.n	8010e74 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f7ff ff7d 	bl	8010d6c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010e72:	e03b      	b.n	8010eec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2200      	movs	r2, #0
 8010e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7fd f8a3 	bl	800dfc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010e82:	e033      	b.n	8010eec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8010e84:	7bfb      	ldrb	r3, [r7, #15]
 8010e86:	2b21      	cmp	r3, #33	; 0x21
 8010e88:	d005      	beq.n	8010e96 <I2C_MasterTransmit_TXE+0xda>
 8010e8a:	7bbb      	ldrb	r3, [r7, #14]
 8010e8c:	2b40      	cmp	r3, #64	; 0x40
 8010e8e:	d12d      	bne.n	8010eec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8010e90:	7bfb      	ldrb	r3, [r7, #15]
 8010e92:	2b22      	cmp	r3, #34	; 0x22
 8010e94:	d12a      	bne.n	8010eec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d108      	bne.n	8010eb2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	685a      	ldr	r2, [r3, #4]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010eae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8010eb0:	e01c      	b.n	8010eec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010eb8:	b2db      	uxtb	r3, r3
 8010eba:	2b40      	cmp	r3, #64	; 0x40
 8010ebc:	d103      	bne.n	8010ec6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 f88e 	bl	8010fe0 <I2C_MemoryTransmit_TXE_BTF>
}
 8010ec4:	e012      	b.n	8010eec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eca:	781a      	ldrb	r2, [r3, #0]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ed6:	1c5a      	adds	r2, r3, #1
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	b29a      	uxth	r2, r3
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8010eea:	e7ff      	b.n	8010eec <I2C_MasterTransmit_TXE+0x130>
 8010eec:	bf00      	nop
 8010eee:	3710      	adds	r7, #16
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}

08010ef4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b084      	sub	sp, #16
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f00:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	2b21      	cmp	r3, #33	; 0x21
 8010f0c:	d164      	bne.n	8010fd8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d012      	beq.n	8010f3e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f1c:	781a      	ldrb	r2, [r3, #0]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f28:	1c5a      	adds	r2, r3, #1
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	3b01      	subs	r3, #1
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8010f3c:	e04c      	b.n	8010fd8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	2b08      	cmp	r3, #8
 8010f42:	d01d      	beq.n	8010f80 <I2C_MasterTransmit_BTF+0x8c>
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	2b20      	cmp	r3, #32
 8010f48:	d01a      	beq.n	8010f80 <I2C_MasterTransmit_BTF+0x8c>
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010f50:	d016      	beq.n	8010f80 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	685a      	ldr	r2, [r3, #4]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010f60:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2211      	movs	r2, #17
 8010f66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2220      	movs	r2, #32
 8010f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f7fd f825 	bl	800dfc8 <HAL_I2C_MasterTxCpltCallback>
}
 8010f7e:	e02b      	b.n	8010fd8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	685a      	ldr	r2, [r3, #4]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010f8e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	681a      	ldr	r2, [r3, #0]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010f9e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2220      	movs	r2, #32
 8010faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	2b40      	cmp	r3, #64	; 0x40
 8010fb8:	d107      	bne.n	8010fca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f7ff fed2 	bl	8010d6c <HAL_I2C_MemTxCpltCallback>
}
 8010fc8:	e006      	b.n	8010fd8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7fc fff8 	bl	800dfc8 <HAL_I2C_MasterTxCpltCallback>
}
 8010fd8:	bf00      	nop
 8010fda:	3710      	adds	r7, #16
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010fee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d11d      	bne.n	8011034 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d10b      	bne.n	8011018 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011004:	b2da      	uxtb	r2, r3
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011010:	1c9a      	adds	r2, r3, #2
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8011016:	e073      	b.n	8011100 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801101c:	b29b      	uxth	r3, r3
 801101e:	121b      	asrs	r3, r3, #8
 8011020:	b2da      	uxtb	r2, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801102c:	1c5a      	adds	r2, r3, #1
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	651a      	str	r2, [r3, #80]	; 0x50
}
 8011032:	e065      	b.n	8011100 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011038:	2b01      	cmp	r3, #1
 801103a:	d10b      	bne.n	8011054 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011040:	b2da      	uxtb	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801104c:	1c5a      	adds	r2, r3, #1
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	651a      	str	r2, [r3, #80]	; 0x50
}
 8011052:	e055      	b.n	8011100 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011058:	2b02      	cmp	r3, #2
 801105a:	d151      	bne.n	8011100 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801105c:	7bfb      	ldrb	r3, [r7, #15]
 801105e:	2b22      	cmp	r3, #34	; 0x22
 8011060:	d10d      	bne.n	801107e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011070:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011076:	1c5a      	adds	r2, r3, #1
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	651a      	str	r2, [r3, #80]	; 0x50
}
 801107c:	e040      	b.n	8011100 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011082:	b29b      	uxth	r3, r3
 8011084:	2b00      	cmp	r3, #0
 8011086:	d015      	beq.n	80110b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8011088:	7bfb      	ldrb	r3, [r7, #15]
 801108a:	2b21      	cmp	r3, #33	; 0x21
 801108c:	d112      	bne.n	80110b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011092:	781a      	ldrb	r2, [r3, #0]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801109e:	1c5a      	adds	r2, r3, #1
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	3b01      	subs	r3, #1
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80110b2:	e025      	b.n	8011100 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d120      	bne.n	8011100 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80110be:	7bfb      	ldrb	r3, [r7, #15]
 80110c0:	2b21      	cmp	r3, #33	; 0x21
 80110c2:	d11d      	bne.n	8011100 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	685a      	ldr	r2, [r3, #4]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80110d2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80110e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2200      	movs	r2, #0
 80110e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2220      	movs	r2, #32
 80110ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2200      	movs	r2, #0
 80110f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f7ff fe36 	bl	8010d6c <HAL_I2C_MemTxCpltCallback>
}
 8011100:	bf00      	nop
 8011102:	3710      	adds	r7, #16
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011116:	b2db      	uxtb	r3, r3
 8011118:	2b22      	cmp	r3, #34	; 0x22
 801111a:	f040 80ac 	bne.w	8011276 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011122:	b29b      	uxth	r3, r3
 8011124:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2b03      	cmp	r3, #3
 801112a:	d921      	bls.n	8011170 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	691a      	ldr	r2, [r3, #16]
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011136:	b2d2      	uxtb	r2, r2
 8011138:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113e:	1c5a      	adds	r2, r3, #1
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011148:	b29b      	uxth	r3, r3
 801114a:	3b01      	subs	r3, #1
 801114c:	b29a      	uxth	r2, r3
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011156:	b29b      	uxth	r3, r3
 8011158:	2b03      	cmp	r3, #3
 801115a:	f040 808c 	bne.w	8011276 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	685a      	ldr	r2, [r3, #4]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801116c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801116e:	e082      	b.n	8011276 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011174:	2b02      	cmp	r3, #2
 8011176:	d075      	beq.n	8011264 <I2C_MasterReceive_RXNE+0x15c>
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	2b01      	cmp	r3, #1
 801117c:	d002      	beq.n	8011184 <I2C_MasterReceive_RXNE+0x7c>
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d16f      	bne.n	8011264 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f001 f939 	bl	80123fc <I2C_WaitOnSTOPRequestThroughIT>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d142      	bne.n	8011216 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	681a      	ldr	r2, [r3, #0]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801119e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	685a      	ldr	r2, [r3, #4]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80111ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	691a      	ldr	r2, [r3, #16]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ba:	b2d2      	uxtb	r2, r2
 80111bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111c2:	1c5a      	adds	r2, r3, #1
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	3b01      	subs	r3, #1
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2220      	movs	r2, #32
 80111da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	2b40      	cmp	r3, #64	; 0x40
 80111e8:	d10a      	bne.n	8011200 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2200      	movs	r2, #0
 80111ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2200      	movs	r2, #0
 80111f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f7ff fdc1 	bl	8010d80 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80111fe:	e03a      	b.n	8011276 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2200      	movs	r2, #0
 8011204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2212      	movs	r2, #18
 801120c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f7ff fd76 	bl	8010d00 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011214:	e02f      	b.n	8011276 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	685a      	ldr	r2, [r3, #4]
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011224:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	691a      	ldr	r2, [r3, #16]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011230:	b2d2      	uxtb	r2, r2
 8011232:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011238:	1c5a      	adds	r2, r3, #1
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011242:	b29b      	uxth	r3, r3
 8011244:	3b01      	subs	r3, #1
 8011246:	b29a      	uxth	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2220      	movs	r2, #32
 8011250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f7ff fd99 	bl	8010d94 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011262:	e008      	b.n	8011276 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	685a      	ldr	r2, [r3, #4]
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011272:	605a      	str	r2, [r3, #4]
}
 8011274:	e7ff      	b.n	8011276 <I2C_MasterReceive_RXNE+0x16e>
 8011276:	bf00      	nop
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b084      	sub	sp, #16
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801128a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011290:	b29b      	uxth	r3, r3
 8011292:	2b04      	cmp	r3, #4
 8011294:	d11b      	bne.n	80112ce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	685a      	ldr	r2, [r3, #4]
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80112a4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	691a      	ldr	r2, [r3, #16]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112b0:	b2d2      	uxtb	r2, r2
 80112b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112b8:	1c5a      	adds	r2, r3, #1
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	3b01      	subs	r3, #1
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80112cc:	e0bd      	b.n	801144a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	2b03      	cmp	r3, #3
 80112d6:	d129      	bne.n	801132c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	685a      	ldr	r2, [r3, #4]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80112e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2b04      	cmp	r3, #4
 80112ec:	d00a      	beq.n	8011304 <I2C_MasterReceive_BTF+0x86>
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	2b02      	cmp	r3, #2
 80112f2:	d007      	beq.n	8011304 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011302:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	691a      	ldr	r2, [r3, #16]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801130e:	b2d2      	uxtb	r2, r2
 8011310:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011316:	1c5a      	adds	r2, r3, #1
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011320:	b29b      	uxth	r3, r3
 8011322:	3b01      	subs	r3, #1
 8011324:	b29a      	uxth	r2, r3
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801132a:	e08e      	b.n	801144a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011330:	b29b      	uxth	r3, r3
 8011332:	2b02      	cmp	r3, #2
 8011334:	d176      	bne.n	8011424 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2b01      	cmp	r3, #1
 801133a:	d002      	beq.n	8011342 <I2C_MasterReceive_BTF+0xc4>
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2b10      	cmp	r3, #16
 8011340:	d108      	bne.n	8011354 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	681a      	ldr	r2, [r3, #0]
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011350:	601a      	str	r2, [r3, #0]
 8011352:	e019      	b.n	8011388 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2b04      	cmp	r3, #4
 8011358:	d002      	beq.n	8011360 <I2C_MasterReceive_BTF+0xe2>
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2b02      	cmp	r3, #2
 801135e:	d108      	bne.n	8011372 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	681a      	ldr	r2, [r3, #0]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801136e:	601a      	str	r2, [r3, #0]
 8011370:	e00a      	b.n	8011388 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	2b10      	cmp	r3, #16
 8011376:	d007      	beq.n	8011388 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	681a      	ldr	r2, [r3, #0]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011386:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	691a      	ldr	r2, [r3, #16]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011392:	b2d2      	uxtb	r2, r2
 8011394:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801139a:	1c5a      	adds	r2, r3, #1
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	3b01      	subs	r3, #1
 80113a8:	b29a      	uxth	r2, r3
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	691a      	ldr	r2, [r3, #16]
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b8:	b2d2      	uxtb	r2, r2
 80113ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113c0:	1c5a      	adds	r2, r3, #1
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	3b01      	subs	r3, #1
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	685a      	ldr	r2, [r3, #4]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80113e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2220      	movs	r2, #32
 80113e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	2b40      	cmp	r3, #64	; 0x40
 80113f6:	d10a      	bne.n	801140e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2200      	movs	r2, #0
 80113fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2200      	movs	r2, #0
 8011404:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7ff fcba 	bl	8010d80 <HAL_I2C_MemRxCpltCallback>
}
 801140c:	e01d      	b.n	801144a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2200      	movs	r2, #0
 8011412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2212      	movs	r2, #18
 801141a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f7ff fc6f 	bl	8010d00 <HAL_I2C_MasterRxCpltCallback>
}
 8011422:	e012      	b.n	801144a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	691a      	ldr	r2, [r3, #16]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801142e:	b2d2      	uxtb	r2, r2
 8011430:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011436:	1c5a      	adds	r2, r3, #1
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011440:	b29b      	uxth	r3, r3
 8011442:	3b01      	subs	r3, #1
 8011444:	b29a      	uxth	r2, r3
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801144a:	bf00      	nop
 801144c:	3710      	adds	r7, #16
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}

08011452 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8011452:	b480      	push	{r7}
 8011454:	b083      	sub	sp, #12
 8011456:	af00      	add	r7, sp, #0
 8011458:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011460:	b2db      	uxtb	r3, r3
 8011462:	2b40      	cmp	r3, #64	; 0x40
 8011464:	d117      	bne.n	8011496 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801146a:	2b00      	cmp	r3, #0
 801146c:	d109      	bne.n	8011482 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011472:	b2db      	uxtb	r3, r3
 8011474:	461a      	mov	r2, r3
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801147e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8011480:	e067      	b.n	8011552 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011486:	b2db      	uxtb	r3, r3
 8011488:	f043 0301 	orr.w	r3, r3, #1
 801148c:	b2da      	uxtb	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	611a      	str	r2, [r3, #16]
}
 8011494:	e05d      	b.n	8011552 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	691b      	ldr	r3, [r3, #16]
 801149a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801149e:	d133      	bne.n	8011508 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80114a6:	b2db      	uxtb	r3, r3
 80114a8:	2b21      	cmp	r3, #33	; 0x21
 80114aa:	d109      	bne.n	80114c0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114b0:	b2db      	uxtb	r3, r3
 80114b2:	461a      	mov	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80114bc:	611a      	str	r2, [r3, #16]
 80114be:	e008      	b.n	80114d2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	f043 0301 	orr.w	r3, r3, #1
 80114ca:	b2da      	uxtb	r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d004      	beq.n	80114e4 <I2C_Master_SB+0x92>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d108      	bne.n	80114f6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d032      	beq.n	8011552 <I2C_Master_SB+0x100>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d02d      	beq.n	8011552 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	685a      	ldr	r2, [r3, #4]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011504:	605a      	str	r2, [r3, #4]
}
 8011506:	e024      	b.n	8011552 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801150c:	2b00      	cmp	r3, #0
 801150e:	d10e      	bne.n	801152e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011514:	b29b      	uxth	r3, r3
 8011516:	11db      	asrs	r3, r3, #7
 8011518:	b2db      	uxtb	r3, r3
 801151a:	f003 0306 	and.w	r3, r3, #6
 801151e:	b2db      	uxtb	r3, r3
 8011520:	f063 030f 	orn	r3, r3, #15
 8011524:	b2da      	uxtb	r2, r3
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	611a      	str	r2, [r3, #16]
}
 801152c:	e011      	b.n	8011552 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011532:	2b01      	cmp	r3, #1
 8011534:	d10d      	bne.n	8011552 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801153a:	b29b      	uxth	r3, r3
 801153c:	11db      	asrs	r3, r3, #7
 801153e:	b2db      	uxtb	r3, r3
 8011540:	f003 0306 	and.w	r3, r3, #6
 8011544:	b2db      	uxtb	r3, r3
 8011546:	f063 030e 	orn	r3, r3, #14
 801154a:	b2da      	uxtb	r2, r3
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	611a      	str	r2, [r3, #16]
}
 8011552:	bf00      	nop
 8011554:	370c      	adds	r7, #12
 8011556:	46bd      	mov	sp, r7
 8011558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155c:	4770      	bx	lr

0801155e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801155e:	b480      	push	{r7}
 8011560:	b083      	sub	sp, #12
 8011562:	af00      	add	r7, sp, #0
 8011564:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801156a:	b2da      	uxtb	r2, r3
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011576:	2b00      	cmp	r3, #0
 8011578:	d004      	beq.n	8011584 <I2C_Master_ADD10+0x26>
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801157e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011580:	2b00      	cmp	r3, #0
 8011582:	d108      	bne.n	8011596 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011588:	2b00      	cmp	r3, #0
 801158a:	d00c      	beq.n	80115a6 <I2C_Master_ADD10+0x48>
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011592:	2b00      	cmp	r3, #0
 8011594:	d007      	beq.n	80115a6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	685a      	ldr	r2, [r3, #4]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80115a4:	605a      	str	r2, [r3, #4]
  }
}
 80115a6:	bf00      	nop
 80115a8:	370c      	adds	r7, #12
 80115aa:	46bd      	mov	sp, r7
 80115ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b0:	4770      	bx	lr

080115b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80115b2:	b480      	push	{r7}
 80115b4:	b091      	sub	sp, #68	; 0x44
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80115c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	2b22      	cmp	r3, #34	; 0x22
 80115da:	f040 8169 	bne.w	80118b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d10f      	bne.n	8011606 <I2C_Master_ADDR+0x54>
 80115e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80115ea:	2b40      	cmp	r3, #64	; 0x40
 80115ec:	d10b      	bne.n	8011606 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80115ee:	2300      	movs	r3, #0
 80115f0:	633b      	str	r3, [r7, #48]	; 0x30
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	695b      	ldr	r3, [r3, #20]
 80115f8:	633b      	str	r3, [r7, #48]	; 0x30
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	699b      	ldr	r3, [r3, #24]
 8011600:	633b      	str	r3, [r7, #48]	; 0x30
 8011602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011604:	e160      	b.n	80118c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801160a:	2b00      	cmp	r3, #0
 801160c:	d11d      	bne.n	801164a <I2C_Master_ADDR+0x98>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	691b      	ldr	r3, [r3, #16]
 8011612:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011616:	d118      	bne.n	801164a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011618:	2300      	movs	r3, #0
 801161a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	695b      	ldr	r3, [r3, #20]
 8011622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	699b      	ldr	r3, [r3, #24]
 801162a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801163c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011642:	1c5a      	adds	r2, r3, #1
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	651a      	str	r2, [r3, #80]	; 0x50
 8011648:	e13e      	b.n	80118c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801164e:	b29b      	uxth	r3, r3
 8011650:	2b00      	cmp	r3, #0
 8011652:	d113      	bne.n	801167c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011654:	2300      	movs	r3, #0
 8011656:	62bb      	str	r3, [r7, #40]	; 0x28
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	695b      	ldr	r3, [r3, #20]
 801165e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	699b      	ldr	r3, [r3, #24]
 8011666:	62bb      	str	r3, [r7, #40]	; 0x28
 8011668:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011678:	601a      	str	r2, [r3, #0]
 801167a:	e115      	b.n	80118a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011680:	b29b      	uxth	r3, r3
 8011682:	2b01      	cmp	r3, #1
 8011684:	f040 808a 	bne.w	801179c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8011688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801168e:	d137      	bne.n	8011700 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801169e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80116aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80116ae:	d113      	bne.n	80116d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80116be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80116c0:	2300      	movs	r3, #0
 80116c2:	627b      	str	r3, [r7, #36]	; 0x24
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	695b      	ldr	r3, [r3, #20]
 80116ca:	627b      	str	r3, [r7, #36]	; 0x24
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	699b      	ldr	r3, [r3, #24]
 80116d2:	627b      	str	r3, [r7, #36]	; 0x24
 80116d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d6:	e0e7      	b.n	80118a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80116d8:	2300      	movs	r3, #0
 80116da:	623b      	str	r3, [r7, #32]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	695b      	ldr	r3, [r3, #20]
 80116e2:	623b      	str	r3, [r7, #32]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	699b      	ldr	r3, [r3, #24]
 80116ea:	623b      	str	r3, [r7, #32]
 80116ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80116fc:	601a      	str	r2, [r3, #0]
 80116fe:	e0d3      	b.n	80118a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8011700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011702:	2b08      	cmp	r3, #8
 8011704:	d02e      	beq.n	8011764 <I2C_Master_ADDR+0x1b2>
 8011706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011708:	2b20      	cmp	r3, #32
 801170a:	d02b      	beq.n	8011764 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801170c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801170e:	2b12      	cmp	r3, #18
 8011710:	d102      	bne.n	8011718 <I2C_Master_ADDR+0x166>
 8011712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011714:	2b01      	cmp	r3, #1
 8011716:	d125      	bne.n	8011764 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8011718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171a:	2b04      	cmp	r3, #4
 801171c:	d00e      	beq.n	801173c <I2C_Master_ADDR+0x18a>
 801171e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011720:	2b02      	cmp	r3, #2
 8011722:	d00b      	beq.n	801173c <I2C_Master_ADDR+0x18a>
 8011724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011726:	2b10      	cmp	r3, #16
 8011728:	d008      	beq.n	801173c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	681a      	ldr	r2, [r3, #0]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011738:	601a      	str	r2, [r3, #0]
 801173a:	e007      	b.n	801174c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801174a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801174c:	2300      	movs	r3, #0
 801174e:	61fb      	str	r3, [r7, #28]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	695b      	ldr	r3, [r3, #20]
 8011756:	61fb      	str	r3, [r7, #28]
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	699b      	ldr	r3, [r3, #24]
 801175e:	61fb      	str	r3, [r7, #28]
 8011760:	69fb      	ldr	r3, [r7, #28]
 8011762:	e0a1      	b.n	80118a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	681a      	ldr	r2, [r3, #0]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011772:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011774:	2300      	movs	r3, #0
 8011776:	61bb      	str	r3, [r7, #24]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	695b      	ldr	r3, [r3, #20]
 801177e:	61bb      	str	r3, [r7, #24]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	699b      	ldr	r3, [r3, #24]
 8011786:	61bb      	str	r3, [r7, #24]
 8011788:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	681a      	ldr	r2, [r3, #0]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011798:	601a      	str	r2, [r3, #0]
 801179a:	e085      	b.n	80118a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	2b02      	cmp	r3, #2
 80117a4:	d14d      	bne.n	8011842 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80117a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a8:	2b04      	cmp	r3, #4
 80117aa:	d016      	beq.n	80117da <I2C_Master_ADDR+0x228>
 80117ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ae:	2b02      	cmp	r3, #2
 80117b0:	d013      	beq.n	80117da <I2C_Master_ADDR+0x228>
 80117b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b4:	2b10      	cmp	r3, #16
 80117b6:	d010      	beq.n	80117da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80117c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80117d6:	601a      	str	r2, [r3, #0]
 80117d8:	e007      	b.n	80117ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80117e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80117f8:	d117      	bne.n	801182a <I2C_Master_ADDR+0x278>
 80117fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011800:	d00b      	beq.n	801181a <I2C_Master_ADDR+0x268>
 8011802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011804:	2b01      	cmp	r3, #1
 8011806:	d008      	beq.n	801181a <I2C_Master_ADDR+0x268>
 8011808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180a:	2b08      	cmp	r3, #8
 801180c:	d005      	beq.n	801181a <I2C_Master_ADDR+0x268>
 801180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011810:	2b10      	cmp	r3, #16
 8011812:	d002      	beq.n	801181a <I2C_Master_ADDR+0x268>
 8011814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011816:	2b20      	cmp	r3, #32
 8011818:	d107      	bne.n	801182a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	685a      	ldr	r2, [r3, #4]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011828:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801182a:	2300      	movs	r3, #0
 801182c:	617b      	str	r3, [r7, #20]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	695b      	ldr	r3, [r3, #20]
 8011834:	617b      	str	r3, [r7, #20]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	699b      	ldr	r3, [r3, #24]
 801183c:	617b      	str	r3, [r7, #20]
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	e032      	b.n	80118a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011850:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801185c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011860:	d117      	bne.n	8011892 <I2C_Master_ADDR+0x2e0>
 8011862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011864:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011868:	d00b      	beq.n	8011882 <I2C_Master_ADDR+0x2d0>
 801186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186c:	2b01      	cmp	r3, #1
 801186e:	d008      	beq.n	8011882 <I2C_Master_ADDR+0x2d0>
 8011870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011872:	2b08      	cmp	r3, #8
 8011874:	d005      	beq.n	8011882 <I2C_Master_ADDR+0x2d0>
 8011876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011878:	2b10      	cmp	r3, #16
 801187a:	d002      	beq.n	8011882 <I2C_Master_ADDR+0x2d0>
 801187c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801187e:	2b20      	cmp	r3, #32
 8011880:	d107      	bne.n	8011892 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	685a      	ldr	r2, [r3, #4]
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011890:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011892:	2300      	movs	r3, #0
 8011894:	613b      	str	r3, [r7, #16]
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	695b      	ldr	r3, [r3, #20]
 801189c:	613b      	str	r3, [r7, #16]
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	699b      	ldr	r3, [r3, #24]
 80118a4:	613b      	str	r3, [r7, #16]
 80118a6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2200      	movs	r2, #0
 80118ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80118ae:	e00b      	b.n	80118c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80118b0:	2300      	movs	r3, #0
 80118b2:	60fb      	str	r3, [r7, #12]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	695b      	ldr	r3, [r3, #20]
 80118ba:	60fb      	str	r3, [r7, #12]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	699b      	ldr	r3, [r3, #24]
 80118c2:	60fb      	str	r3, [r7, #12]
 80118c4:	68fb      	ldr	r3, [r7, #12]
}
 80118c6:	e7ff      	b.n	80118c8 <I2C_Master_ADDR+0x316>
 80118c8:	bf00      	nop
 80118ca:	3744      	adds	r7, #68	; 0x44
 80118cc:	46bd      	mov	sp, r7
 80118ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d2:	4770      	bx	lr

080118d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80118e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d02b      	beq.n	8011946 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f2:	781a      	ldrb	r2, [r3, #0]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118fe:	1c5a      	adds	r2, r3, #1
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011908:	b29b      	uxth	r3, r3
 801190a:	3b01      	subs	r3, #1
 801190c:	b29a      	uxth	r2, r3
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011916:	b29b      	uxth	r3, r3
 8011918:	2b00      	cmp	r3, #0
 801191a:	d114      	bne.n	8011946 <I2C_SlaveTransmit_TXE+0x72>
 801191c:	7bfb      	ldrb	r3, [r7, #15]
 801191e:	2b29      	cmp	r3, #41	; 0x29
 8011920:	d111      	bne.n	8011946 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	685a      	ldr	r2, [r3, #4]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011930:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2221      	movs	r2, #33	; 0x21
 8011936:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2228      	movs	r2, #40	; 0x28
 801193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f7ff f9e7 	bl	8010d14 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8011946:	bf00      	nop
 8011948:	3710      	adds	r7, #16
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}

0801194e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801194e:	b480      	push	{r7}
 8011950:	b083      	sub	sp, #12
 8011952:	af00      	add	r7, sp, #0
 8011954:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801195a:	b29b      	uxth	r3, r3
 801195c:	2b00      	cmp	r3, #0
 801195e:	d011      	beq.n	8011984 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011964:	781a      	ldrb	r2, [r3, #0]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011970:	1c5a      	adds	r2, r3, #1
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801197a:	b29b      	uxth	r3, r3
 801197c:	3b01      	subs	r3, #1
 801197e:	b29a      	uxth	r2, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8011984:	bf00      	nop
 8011986:	370c      	adds	r7, #12
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr

08011990 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b084      	sub	sp, #16
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801199e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d02c      	beq.n	8011a04 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	691a      	ldr	r2, [r3, #16]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119b4:	b2d2      	uxtb	r2, r2
 80119b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119bc:	1c5a      	adds	r2, r3, #1
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	3b01      	subs	r3, #1
 80119ca:	b29a      	uxth	r2, r3
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d114      	bne.n	8011a04 <I2C_SlaveReceive_RXNE+0x74>
 80119da:	7bfb      	ldrb	r3, [r7, #15]
 80119dc:	2b2a      	cmp	r3, #42	; 0x2a
 80119de:	d111      	bne.n	8011a04 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	685a      	ldr	r2, [r3, #4]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80119ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2222      	movs	r2, #34	; 0x22
 80119f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2228      	movs	r2, #40	; 0x28
 80119fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f7ff f992 	bl	8010d28 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8011a04:	bf00      	nop
 8011a06:	3710      	adds	r7, #16
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}

08011a0c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d012      	beq.n	8011a44 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	691a      	ldr	r2, [r3, #16]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a28:	b2d2      	uxtb	r2, r2
 8011a2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a30:	1c5a      	adds	r2, r3, #1
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011a3a:	b29b      	uxth	r3, r3
 8011a3c:	3b01      	subs	r3, #1
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8011a44:	bf00      	nop
 8011a46:	370c      	adds	r7, #12
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011a6a:	2b28      	cmp	r3, #40	; 0x28
 8011a6c:	d127      	bne.n	8011abe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	685a      	ldr	r2, [r3, #4]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011a7c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	089b      	lsrs	r3, r3, #2
 8011a82:	f003 0301 	and.w	r3, r3, #1
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d101      	bne.n	8011a8e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	09db      	lsrs	r3, r3, #7
 8011a92:	f003 0301 	and.w	r3, r3, #1
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d103      	bne.n	8011aa2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	81bb      	strh	r3, [r7, #12]
 8011aa0:	e002      	b.n	8011aa8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	699b      	ldr	r3, [r3, #24]
 8011aa6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8011ab0:	89ba      	ldrh	r2, [r7, #12]
 8011ab2:	7bfb      	ldrb	r3, [r7, #15]
 8011ab4:	4619      	mov	r1, r3
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f7ff f940 	bl	8010d3c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011abc:	e00e      	b.n	8011adc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011abe:	2300      	movs	r3, #0
 8011ac0:	60bb      	str	r3, [r7, #8]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	695b      	ldr	r3, [r3, #20]
 8011ac8:	60bb      	str	r3, [r7, #8]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	699b      	ldr	r3, [r3, #24]
 8011ad0:	60bb      	str	r3, [r7, #8]
 8011ad2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8011adc:	bf00      	nop
 8011ade:	3710      	adds	r7, #16
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}

08011ae4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011af2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	685a      	ldr	r2, [r3, #4]
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011b02:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8011b04:	2300      	movs	r3, #0
 8011b06:	60bb      	str	r3, [r7, #8]
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	695b      	ldr	r3, [r3, #20]
 8011b0e:	60bb      	str	r3, [r7, #8]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	681a      	ldr	r2, [r3, #0]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	f042 0201 	orr.w	r2, r2, #1
 8011b1e:	601a      	str	r2, [r3, #0]
 8011b20:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	681a      	ldr	r2, [r3, #0]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011b30:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b40:	d172      	bne.n	8011c28 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011b42:	7bfb      	ldrb	r3, [r7, #15]
 8011b44:	2b22      	cmp	r3, #34	; 0x22
 8011b46:	d002      	beq.n	8011b4e <I2C_Slave_STOPF+0x6a>
 8011b48:	7bfb      	ldrb	r3, [r7, #15]
 8011b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8011b4c:	d135      	bne.n	8011bba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	b29a      	uxth	r2, r3
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d005      	beq.n	8011b72 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b6a:	f043 0204 	orr.w	r2, r3, #4
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	685a      	ldr	r2, [r3, #4]
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011b80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7fd fe8a 	bl	800f8a0 <HAL_DMA_GetState>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b01      	cmp	r3, #1
 8011b90:	d049      	beq.n	8011c26 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b96:	4a69      	ldr	r2, [pc, #420]	; (8011d3c <I2C_Slave_STOPF+0x258>)
 8011b98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7fd fcd2 	bl	800f548 <HAL_DMA_Abort_IT>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d03d      	beq.n	8011c26 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bb0:	687a      	ldr	r2, [r7, #4]
 8011bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011bb4:	4610      	mov	r0, r2
 8011bb6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011bb8:	e035      	b.n	8011c26 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	b29a      	uxth	r2, r3
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d005      	beq.n	8011bde <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bd6:	f043 0204 	orr.w	r2, r3, #4
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	685a      	ldr	r2, [r3, #4]
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011bec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fd fe54 	bl	800f8a0 <HAL_DMA_GetState>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b01      	cmp	r3, #1
 8011bfc:	d014      	beq.n	8011c28 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c02:	4a4e      	ldr	r2, [pc, #312]	; (8011d3c <I2C_Slave_STOPF+0x258>)
 8011c04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fd fc9c 	bl	800f548 <HAL_DMA_Abort_IT>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d008      	beq.n	8011c28 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c1c:	687a      	ldr	r2, [r7, #4]
 8011c1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011c20:	4610      	mov	r0, r2
 8011c22:	4798      	blx	r3
 8011c24:	e000      	b.n	8011c28 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011c26:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d03e      	beq.n	8011cb0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	695b      	ldr	r3, [r3, #20]
 8011c38:	f003 0304 	and.w	r3, r3, #4
 8011c3c:	2b04      	cmp	r3, #4
 8011c3e:	d112      	bne.n	8011c66 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	691a      	ldr	r2, [r3, #16]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c4a:	b2d2      	uxtb	r2, r2
 8011c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c52:	1c5a      	adds	r2, r3, #1
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	3b01      	subs	r3, #1
 8011c60:	b29a      	uxth	r2, r3
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	695b      	ldr	r3, [r3, #20]
 8011c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c70:	2b40      	cmp	r3, #64	; 0x40
 8011c72:	d112      	bne.n	8011c9a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	691a      	ldr	r2, [r3, #16]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c7e:	b2d2      	uxtb	r2, r2
 8011c80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c86:	1c5a      	adds	r2, r3, #1
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	3b01      	subs	r3, #1
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d005      	beq.n	8011cb0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ca8:	f043 0204 	orr.w	r2, r3, #4
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d003      	beq.n	8011cc0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f000 f8b3 	bl	8011e24 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8011cbe:	e039      	b.n	8011d34 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011cc0:	7bfb      	ldrb	r3, [r7, #15]
 8011cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8011cc4:	d109      	bne.n	8011cda <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2228      	movs	r2, #40	; 0x28
 8011cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f7ff f827 	bl	8010d28 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	2b28      	cmp	r3, #40	; 0x28
 8011ce4:	d111      	bne.n	8011d0a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	4a15      	ldr	r2, [pc, #84]	; (8011d40 <I2C_Slave_STOPF+0x25c>)
 8011cea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2220      	movs	r2, #32
 8011cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f7ff f828 	bl	8010d58 <HAL_I2C_ListenCpltCallback>
}
 8011d08:	e014      	b.n	8011d34 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d0e:	2b22      	cmp	r3, #34	; 0x22
 8011d10:	d002      	beq.n	8011d18 <I2C_Slave_STOPF+0x234>
 8011d12:	7bfb      	ldrb	r3, [r7, #15]
 8011d14:	2b22      	cmp	r3, #34	; 0x22
 8011d16:	d10d      	bne.n	8011d34 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2220      	movs	r2, #32
 8011d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f7fe fffa 	bl	8010d28 <HAL_I2C_SlaveRxCpltCallback>
}
 8011d34:	bf00      	nop
 8011d36:	3710      	adds	r7, #16
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}
 8011d3c:	080122ad 	.word	0x080122ad
 8011d40:	ffff0000 	.word	0xffff0000

08011d44 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d52:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d58:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	2b08      	cmp	r3, #8
 8011d5e:	d002      	beq.n	8011d66 <I2C_Slave_AF+0x22>
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	2b20      	cmp	r3, #32
 8011d64:	d129      	bne.n	8011dba <I2C_Slave_AF+0x76>
 8011d66:	7bfb      	ldrb	r3, [r7, #15]
 8011d68:	2b28      	cmp	r3, #40	; 0x28
 8011d6a:	d126      	bne.n	8011dba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	4a2c      	ldr	r2, [pc, #176]	; (8011e20 <I2C_Slave_AF+0xdc>)
 8011d70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	685a      	ldr	r2, [r3, #4]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011d80:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011d8a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	681a      	ldr	r2, [r3, #0]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011d9a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2220      	movs	r2, #32
 8011da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2200      	movs	r2, #0
 8011dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7fe ffd0 	bl	8010d58 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8011db8:	e02e      	b.n	8011e18 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8011dba:	7bfb      	ldrb	r3, [r7, #15]
 8011dbc:	2b21      	cmp	r3, #33	; 0x21
 8011dbe:	d126      	bne.n	8011e0e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	4a17      	ldr	r2, [pc, #92]	; (8011e20 <I2C_Slave_AF+0xdc>)
 8011dc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2221      	movs	r2, #33	; 0x21
 8011dca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2220      	movs	r2, #32
 8011dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	685a      	ldr	r2, [r3, #4]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011dea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011df4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	681a      	ldr	r2, [r3, #0]
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011e04:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f7fe ff84 	bl	8010d14 <HAL_I2C_SlaveTxCpltCallback>
}
 8011e0c:	e004      	b.n	8011e18 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011e16:	615a      	str	r2, [r3, #20]
}
 8011e18:	bf00      	nop
 8011e1a:	3710      	adds	r7, #16
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	ffff0000 	.word	0xffff0000

08011e24 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b084      	sub	sp, #16
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011e3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8011e3c:	7bbb      	ldrb	r3, [r7, #14]
 8011e3e:	2b10      	cmp	r3, #16
 8011e40:	d002      	beq.n	8011e48 <I2C_ITError+0x24>
 8011e42:	7bbb      	ldrb	r3, [r7, #14]
 8011e44:	2b40      	cmp	r3, #64	; 0x40
 8011e46:	d10a      	bne.n	8011e5e <I2C_ITError+0x3a>
 8011e48:	7bfb      	ldrb	r3, [r7, #15]
 8011e4a:	2b22      	cmp	r3, #34	; 0x22
 8011e4c:	d107      	bne.n	8011e5e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	681a      	ldr	r2, [r3, #0]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011e5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011e5e:	7bfb      	ldrb	r3, [r7, #15]
 8011e60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011e64:	2b28      	cmp	r3, #40	; 0x28
 8011e66:	d107      	bne.n	8011e78 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2228      	movs	r2, #40	; 0x28
 8011e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8011e76:	e015      	b.n	8011ea4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e86:	d00a      	beq.n	8011e9e <I2C_ITError+0x7a>
 8011e88:	7bfb      	ldrb	r3, [r7, #15]
 8011e8a:	2b60      	cmp	r3, #96	; 0x60
 8011e8c:	d007      	beq.n	8011e9e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2220      	movs	r2, #32
 8011e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	685b      	ldr	r3, [r3, #4]
 8011eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011eb2:	d162      	bne.n	8011f7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	685a      	ldr	r2, [r3, #4]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011ec2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011ecc:	b2db      	uxtb	r3, r3
 8011ece:	2b01      	cmp	r3, #1
 8011ed0:	d020      	beq.n	8011f14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ed6:	4a6a      	ldr	r2, [pc, #424]	; (8012080 <I2C_ITError+0x25c>)
 8011ed8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7fd fb32 	bl	800f548 <HAL_DMA_Abort_IT>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	f000 8089 	beq.w	8011ffe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	681a      	ldr	r2, [r3, #0]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f022 0201 	bic.w	r2, r2, #1
 8011efa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2220      	movs	r2, #32
 8011f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011f0e:	4610      	mov	r0, r2
 8011f10:	4798      	blx	r3
 8011f12:	e074      	b.n	8011ffe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f18:	4a59      	ldr	r2, [pc, #356]	; (8012080 <I2C_ITError+0x25c>)
 8011f1a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f20:	4618      	mov	r0, r3
 8011f22:	f7fd fb11 	bl	800f548 <HAL_DMA_Abort_IT>
 8011f26:	4603      	mov	r3, r0
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d068      	beq.n	8011ffe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	695b      	ldr	r3, [r3, #20]
 8011f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f36:	2b40      	cmp	r3, #64	; 0x40
 8011f38:	d10b      	bne.n	8011f52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	691a      	ldr	r2, [r3, #16]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f44:	b2d2      	uxtb	r2, r2
 8011f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f4c:	1c5a      	adds	r2, r3, #1
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	f022 0201 	bic.w	r2, r2, #1
 8011f60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2220      	movs	r2, #32
 8011f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011f74:	4610      	mov	r0, r2
 8011f76:	4798      	blx	r3
 8011f78:	e041      	b.n	8011ffe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	2b60      	cmp	r3, #96	; 0x60
 8011f84:	d125      	bne.n	8011fd2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2220      	movs	r2, #32
 8011f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2200      	movs	r2, #0
 8011f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	695b      	ldr	r3, [r3, #20]
 8011f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f9e:	2b40      	cmp	r3, #64	; 0x40
 8011fa0:	d10b      	bne.n	8011fba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	691a      	ldr	r2, [r3, #16]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fac:	b2d2      	uxtb	r2, r2
 8011fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fb4:	1c5a      	adds	r2, r3, #1
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f022 0201 	bic.w	r2, r2, #1
 8011fc8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7fe feec 	bl	8010da8 <HAL_I2C_AbortCpltCallback>
 8011fd0:	e015      	b.n	8011ffe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	695b      	ldr	r3, [r3, #20]
 8011fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fdc:	2b40      	cmp	r3, #64	; 0x40
 8011fde:	d10b      	bne.n	8011ff8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	691a      	ldr	r2, [r3, #16]
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fea:	b2d2      	uxtb	r2, r2
 8011fec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ff2:	1c5a      	adds	r2, r3, #1
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f7fe fecb 	bl	8010d94 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012002:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	f003 0301 	and.w	r3, r3, #1
 801200a:	2b00      	cmp	r3, #0
 801200c:	d10e      	bne.n	801202c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8012014:	2b00      	cmp	r3, #0
 8012016:	d109      	bne.n	801202c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801201e:	2b00      	cmp	r3, #0
 8012020:	d104      	bne.n	801202c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8012028:	2b00      	cmp	r3, #0
 801202a:	d007      	beq.n	801203c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	685a      	ldr	r2, [r3, #4]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801203a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012042:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012048:	f003 0304 	and.w	r3, r3, #4
 801204c:	2b04      	cmp	r3, #4
 801204e:	d113      	bne.n	8012078 <I2C_ITError+0x254>
 8012050:	7bfb      	ldrb	r3, [r7, #15]
 8012052:	2b28      	cmp	r3, #40	; 0x28
 8012054:	d110      	bne.n	8012078 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	4a0a      	ldr	r2, [pc, #40]	; (8012084 <I2C_ITError+0x260>)
 801205a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2200      	movs	r2, #0
 8012060:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2220      	movs	r2, #32
 8012066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2200      	movs	r2, #0
 801206e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f7fe fe70 	bl	8010d58 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012078:	bf00      	nop
 801207a:	3710      	adds	r7, #16
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}
 8012080:	080122ad 	.word	0x080122ad
 8012084:	ffff0000 	.word	0xffff0000

08012088 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b086      	sub	sp, #24
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012094:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801209c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80120a4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120aa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	685a      	ldr	r2, [r3, #4]
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80120ba:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d003      	beq.n	80120cc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120c8:	2200      	movs	r2, #0
 80120ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d003      	beq.n	80120dc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120d8:	2200      	movs	r2, #0
 80120da:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80120dc:	7cfb      	ldrb	r3, [r7, #19]
 80120de:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80120e2:	2b21      	cmp	r3, #33	; 0x21
 80120e4:	d007      	beq.n	80120f6 <I2C_DMAXferCplt+0x6e>
 80120e6:	7cfb      	ldrb	r3, [r7, #19]
 80120e8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80120ec:	2b22      	cmp	r3, #34	; 0x22
 80120ee:	d131      	bne.n	8012154 <I2C_DMAXferCplt+0xcc>
 80120f0:	7cbb      	ldrb	r3, [r7, #18]
 80120f2:	2b20      	cmp	r3, #32
 80120f4:	d12e      	bne.n	8012154 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	685a      	ldr	r2, [r3, #4]
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012104:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	2200      	movs	r2, #0
 801210a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801210c:	7cfb      	ldrb	r3, [r7, #19]
 801210e:	2b29      	cmp	r3, #41	; 0x29
 8012110:	d10a      	bne.n	8012128 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	2221      	movs	r2, #33	; 0x21
 8012116:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	2228      	movs	r2, #40	; 0x28
 801211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8012120:	6978      	ldr	r0, [r7, #20]
 8012122:	f7fe fdf7 	bl	8010d14 <HAL_I2C_SlaveTxCpltCallback>
 8012126:	e00c      	b.n	8012142 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8012128:	7cfb      	ldrb	r3, [r7, #19]
 801212a:	2b2a      	cmp	r3, #42	; 0x2a
 801212c:	d109      	bne.n	8012142 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	2222      	movs	r2, #34	; 0x22
 8012132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	2228      	movs	r2, #40	; 0x28
 8012138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801213c:	6978      	ldr	r0, [r7, #20]
 801213e:	f7fe fdf3 	bl	8010d28 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	685a      	ldr	r2, [r3, #4]
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8012150:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8012152:	e06a      	b.n	801222a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8012154:	697b      	ldr	r3, [r7, #20]
 8012156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801215a:	b2db      	uxtb	r3, r3
 801215c:	2b00      	cmp	r3, #0
 801215e:	d064      	beq.n	801222a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012164:	b29b      	uxth	r3, r3
 8012166:	2b01      	cmp	r3, #1
 8012168:	d107      	bne.n	801217a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	681a      	ldr	r2, [r3, #0]
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012178:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	685a      	ldr	r2, [r3, #4]
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8012188:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012190:	d009      	beq.n	80121a6 <I2C_DMAXferCplt+0x11e>
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2b08      	cmp	r3, #8
 8012196:	d006      	beq.n	80121a6 <I2C_DMAXferCplt+0x11e>
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801219e:	d002      	beq.n	80121a6 <I2C_DMAXferCplt+0x11e>
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	2b20      	cmp	r3, #32
 80121a4:	d107      	bne.n	80121b6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80121b4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	685a      	ldr	r2, [r3, #4]
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80121c4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	685a      	ldr	r2, [r3, #4]
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80121d4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	2200      	movs	r2, #0
 80121da:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d003      	beq.n	80121ec <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80121e4:	6978      	ldr	r0, [r7, #20]
 80121e6:	f7fe fdd5 	bl	8010d94 <HAL_I2C_ErrorCallback>
}
 80121ea:	e01e      	b.n	801222a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	2220      	movs	r2, #32
 80121f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	2b40      	cmp	r3, #64	; 0x40
 80121fe:	d10a      	bne.n	8012216 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	2200      	movs	r2, #0
 8012204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	2200      	movs	r2, #0
 801220c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801220e:	6978      	ldr	r0, [r7, #20]
 8012210:	f7fe fdb6 	bl	8010d80 <HAL_I2C_MemRxCpltCallback>
}
 8012214:	e009      	b.n	801222a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	2200      	movs	r2, #0
 801221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	2212      	movs	r2, #18
 8012222:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8012224:	6978      	ldr	r0, [r7, #20]
 8012226:	f7fe fd6b 	bl	8010d00 <HAL_I2C_MasterRxCpltCallback>
}
 801222a:	bf00      	nop
 801222c:	3718      	adds	r7, #24
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}

08012232 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012232:	b580      	push	{r7, lr}
 8012234:	b084      	sub	sp, #16
 8012236:	af00      	add	r7, sp, #0
 8012238:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801223e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012244:	2b00      	cmp	r3, #0
 8012246:	d003      	beq.n	8012250 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801224c:	2200      	movs	r2, #0
 801224e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012254:	2b00      	cmp	r3, #0
 8012256:	d003      	beq.n	8012260 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801225c:	2200      	movs	r2, #0
 801225e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f7fd fb2b 	bl	800f8bc <HAL_DMA_GetError>
 8012266:	4603      	mov	r3, r0
 8012268:	2b02      	cmp	r3, #2
 801226a:	d01b      	beq.n	80122a4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	681a      	ldr	r2, [r3, #0]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801227a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	2200      	movs	r2, #0
 8012280:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2220      	movs	r2, #32
 8012286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2200      	movs	r2, #0
 801228e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012296:	f043 0210 	orr.w	r2, r3, #16
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801229e:	68f8      	ldr	r0, [r7, #12]
 80122a0:	f7fe fd78 	bl	8010d94 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80122a4:	bf00      	nop
 80122a6:	3710      	adds	r7, #16
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b086      	sub	sp, #24
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80122b4:	2300      	movs	r3, #0
 80122b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80122c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80122c6:	4b4b      	ldr	r3, [pc, #300]	; (80123f4 <I2C_DMAAbort+0x148>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	08db      	lsrs	r3, r3, #3
 80122cc:	4a4a      	ldr	r2, [pc, #296]	; (80123f8 <I2C_DMAAbort+0x14c>)
 80122ce:	fba2 2303 	umull	r2, r3, r2, r3
 80122d2:	0a1a      	lsrs	r2, r3, #8
 80122d4:	4613      	mov	r3, r2
 80122d6:	009b      	lsls	r3, r3, #2
 80122d8:	4413      	add	r3, r2
 80122da:	00da      	lsls	r2, r3, #3
 80122dc:	1ad3      	subs	r3, r2, r3
 80122de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d106      	bne.n	80122f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ea:	f043 0220 	orr.w	r2, r3, #32
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80122f2:	e00a      	b.n	801230a <I2C_DMAAbort+0x5e>
    }
    count--;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	3b01      	subs	r3, #1
 80122f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012308:	d0ea      	beq.n	80122e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801230e:	2b00      	cmp	r3, #0
 8012310:	d003      	beq.n	801231a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012316:	2200      	movs	r2, #0
 8012318:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801231e:	2b00      	cmp	r3, #0
 8012320:	d003      	beq.n	801232a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012326:	2200      	movs	r2, #0
 8012328:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	681a      	ldr	r2, [r3, #0]
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012338:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	2200      	movs	r2, #0
 801233e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012344:	2b00      	cmp	r3, #0
 8012346:	d003      	beq.n	8012350 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801234c:	2200      	movs	r2, #0
 801234e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012354:	2b00      	cmp	r3, #0
 8012356:	d003      	beq.n	8012360 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801235c:	2200      	movs	r2, #0
 801235e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	f022 0201 	bic.w	r2, r2, #1
 801236e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012376:	b2db      	uxtb	r3, r3
 8012378:	2b60      	cmp	r3, #96	; 0x60
 801237a:	d10e      	bne.n	801239a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	2220      	movs	r2, #32
 8012380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	2200      	movs	r2, #0
 8012388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	2200      	movs	r2, #0
 8012390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012392:	6978      	ldr	r0, [r7, #20]
 8012394:	f7fe fd08 	bl	8010da8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012398:	e027      	b.n	80123ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801239a:	7cfb      	ldrb	r3, [r7, #19]
 801239c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80123a0:	2b28      	cmp	r3, #40	; 0x28
 80123a2:	d117      	bne.n	80123d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	697b      	ldr	r3, [r7, #20]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	f042 0201 	orr.w	r2, r2, #1
 80123b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80123c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	2200      	movs	r2, #0
 80123c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	2228      	movs	r2, #40	; 0x28
 80123ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80123d2:	e007      	b.n	80123e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	2220      	movs	r2, #32
 80123d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	2200      	movs	r2, #0
 80123e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80123e4:	6978      	ldr	r0, [r7, #20]
 80123e6:	f7fe fcd5 	bl	8010d94 <HAL_I2C_ErrorCallback>
}
 80123ea:	bf00      	nop
 80123ec:	3718      	adds	r7, #24
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}
 80123f2:	bf00      	nop
 80123f4:	20000000 	.word	0x20000000
 80123f8:	14f8b589 	.word	0x14f8b589

080123fc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b085      	sub	sp, #20
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012404:	2300      	movs	r3, #0
 8012406:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8012408:	4b13      	ldr	r3, [pc, #76]	; (8012458 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	08db      	lsrs	r3, r3, #3
 801240e:	4a13      	ldr	r2, [pc, #76]	; (801245c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8012410:	fba2 2303 	umull	r2, r3, r2, r3
 8012414:	0a1a      	lsrs	r2, r3, #8
 8012416:	4613      	mov	r3, r2
 8012418:	009b      	lsls	r3, r3, #2
 801241a:	4413      	add	r3, r2
 801241c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	3b01      	subs	r3, #1
 8012422:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d107      	bne.n	801243a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801242e:	f043 0220 	orr.w	r2, r3, #32
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8012436:	2301      	movs	r3, #1
 8012438:	e008      	b.n	801244c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012448:	d0e9      	beq.n	801241e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801244a:	2300      	movs	r3, #0
}
 801244c:	4618      	mov	r0, r3
 801244e:	3714      	adds	r7, #20
 8012450:	46bd      	mov	sp, r7
 8012452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012456:	4770      	bx	lr
 8012458:	20000000 	.word	0x20000000
 801245c:	14f8b589 	.word	0x14f8b589

08012460 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8012460:	b480      	push	{r7}
 8012462:	b083      	sub	sp, #12
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801246c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8012470:	d103      	bne.n	801247a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2201      	movs	r2, #1
 8012476:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8012478:	e007      	b.n	801248a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801247e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8012482:	d102      	bne.n	801248a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2208      	movs	r2, #8
 8012488:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801248a:	bf00      	nop
 801248c:	370c      	adds	r7, #12
 801248e:	46bd      	mov	sp, r7
 8012490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012494:	4770      	bx	lr

08012496 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8012496:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012498:	b08f      	sub	sp, #60	; 0x3c
 801249a:	af0a      	add	r7, sp, #40	; 0x28
 801249c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d101      	bne.n	80124a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80124a4:	2301      	movs	r3, #1
 80124a6:	e10f      	b.n	80126c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d106      	bne.n	80124c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2200      	movs	r2, #0
 80124be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f00b f948 	bl	801d758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2203      	movs	r2, #3
 80124cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d102      	bne.n	80124e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2200      	movs	r2, #0
 80124e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	4618      	mov	r0, r3
 80124e8:	f004 f871 	bl	80165ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	603b      	str	r3, [r7, #0]
 80124f2:	687e      	ldr	r6, [r7, #4]
 80124f4:	466d      	mov	r5, sp
 80124f6:	f106 0410 	add.w	r4, r6, #16
 80124fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80124fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80124fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012502:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012506:	e885 0003 	stmia.w	r5, {r0, r1}
 801250a:	1d33      	adds	r3, r6, #4
 801250c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801250e:	6838      	ldr	r0, [r7, #0]
 8012510:	f003 ff48 	bl	80163a4 <USB_CoreInit>
 8012514:	4603      	mov	r3, r0
 8012516:	2b00      	cmp	r3, #0
 8012518:	d005      	beq.n	8012526 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2202      	movs	r2, #2
 801251e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8012522:	2301      	movs	r3, #1
 8012524:	e0d0      	b.n	80126c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	2100      	movs	r1, #0
 801252c:	4618      	mov	r0, r3
 801252e:	f004 f85f 	bl	80165f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012532:	2300      	movs	r3, #0
 8012534:	73fb      	strb	r3, [r7, #15]
 8012536:	e04a      	b.n	80125ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8012538:	7bfa      	ldrb	r2, [r7, #15]
 801253a:	6879      	ldr	r1, [r7, #4]
 801253c:	4613      	mov	r3, r2
 801253e:	00db      	lsls	r3, r3, #3
 8012540:	4413      	add	r3, r2
 8012542:	009b      	lsls	r3, r3, #2
 8012544:	440b      	add	r3, r1
 8012546:	333d      	adds	r3, #61	; 0x3d
 8012548:	2201      	movs	r2, #1
 801254a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801254c:	7bfa      	ldrb	r2, [r7, #15]
 801254e:	6879      	ldr	r1, [r7, #4]
 8012550:	4613      	mov	r3, r2
 8012552:	00db      	lsls	r3, r3, #3
 8012554:	4413      	add	r3, r2
 8012556:	009b      	lsls	r3, r3, #2
 8012558:	440b      	add	r3, r1
 801255a:	333c      	adds	r3, #60	; 0x3c
 801255c:	7bfa      	ldrb	r2, [r7, #15]
 801255e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8012560:	7bfa      	ldrb	r2, [r7, #15]
 8012562:	7bfb      	ldrb	r3, [r7, #15]
 8012564:	b298      	uxth	r0, r3
 8012566:	6879      	ldr	r1, [r7, #4]
 8012568:	4613      	mov	r3, r2
 801256a:	00db      	lsls	r3, r3, #3
 801256c:	4413      	add	r3, r2
 801256e:	009b      	lsls	r3, r3, #2
 8012570:	440b      	add	r3, r1
 8012572:	3344      	adds	r3, #68	; 0x44
 8012574:	4602      	mov	r2, r0
 8012576:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8012578:	7bfa      	ldrb	r2, [r7, #15]
 801257a:	6879      	ldr	r1, [r7, #4]
 801257c:	4613      	mov	r3, r2
 801257e:	00db      	lsls	r3, r3, #3
 8012580:	4413      	add	r3, r2
 8012582:	009b      	lsls	r3, r3, #2
 8012584:	440b      	add	r3, r1
 8012586:	3340      	adds	r3, #64	; 0x40
 8012588:	2200      	movs	r2, #0
 801258a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801258c:	7bfa      	ldrb	r2, [r7, #15]
 801258e:	6879      	ldr	r1, [r7, #4]
 8012590:	4613      	mov	r3, r2
 8012592:	00db      	lsls	r3, r3, #3
 8012594:	4413      	add	r3, r2
 8012596:	009b      	lsls	r3, r3, #2
 8012598:	440b      	add	r3, r1
 801259a:	3348      	adds	r3, #72	; 0x48
 801259c:	2200      	movs	r2, #0
 801259e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80125a0:	7bfa      	ldrb	r2, [r7, #15]
 80125a2:	6879      	ldr	r1, [r7, #4]
 80125a4:	4613      	mov	r3, r2
 80125a6:	00db      	lsls	r3, r3, #3
 80125a8:	4413      	add	r3, r2
 80125aa:	009b      	lsls	r3, r3, #2
 80125ac:	440b      	add	r3, r1
 80125ae:	334c      	adds	r3, #76	; 0x4c
 80125b0:	2200      	movs	r2, #0
 80125b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80125b4:	7bfa      	ldrb	r2, [r7, #15]
 80125b6:	6879      	ldr	r1, [r7, #4]
 80125b8:	4613      	mov	r3, r2
 80125ba:	00db      	lsls	r3, r3, #3
 80125bc:	4413      	add	r3, r2
 80125be:	009b      	lsls	r3, r3, #2
 80125c0:	440b      	add	r3, r1
 80125c2:	3354      	adds	r3, #84	; 0x54
 80125c4:	2200      	movs	r2, #0
 80125c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80125c8:	7bfb      	ldrb	r3, [r7, #15]
 80125ca:	3301      	adds	r3, #1
 80125cc:	73fb      	strb	r3, [r7, #15]
 80125ce:	7bfa      	ldrb	r2, [r7, #15]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d3af      	bcc.n	8012538 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80125d8:	2300      	movs	r3, #0
 80125da:	73fb      	strb	r3, [r7, #15]
 80125dc:	e044      	b.n	8012668 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80125de:	7bfa      	ldrb	r2, [r7, #15]
 80125e0:	6879      	ldr	r1, [r7, #4]
 80125e2:	4613      	mov	r3, r2
 80125e4:	00db      	lsls	r3, r3, #3
 80125e6:	4413      	add	r3, r2
 80125e8:	009b      	lsls	r3, r3, #2
 80125ea:	440b      	add	r3, r1
 80125ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80125f0:	2200      	movs	r2, #0
 80125f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80125f4:	7bfa      	ldrb	r2, [r7, #15]
 80125f6:	6879      	ldr	r1, [r7, #4]
 80125f8:	4613      	mov	r3, r2
 80125fa:	00db      	lsls	r3, r3, #3
 80125fc:	4413      	add	r3, r2
 80125fe:	009b      	lsls	r3, r3, #2
 8012600:	440b      	add	r3, r1
 8012602:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8012606:	7bfa      	ldrb	r2, [r7, #15]
 8012608:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801260a:	7bfa      	ldrb	r2, [r7, #15]
 801260c:	6879      	ldr	r1, [r7, #4]
 801260e:	4613      	mov	r3, r2
 8012610:	00db      	lsls	r3, r3, #3
 8012612:	4413      	add	r3, r2
 8012614:	009b      	lsls	r3, r3, #2
 8012616:	440b      	add	r3, r1
 8012618:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801261c:	2200      	movs	r2, #0
 801261e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8012620:	7bfa      	ldrb	r2, [r7, #15]
 8012622:	6879      	ldr	r1, [r7, #4]
 8012624:	4613      	mov	r3, r2
 8012626:	00db      	lsls	r3, r3, #3
 8012628:	4413      	add	r3, r2
 801262a:	009b      	lsls	r3, r3, #2
 801262c:	440b      	add	r3, r1
 801262e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8012632:	2200      	movs	r2, #0
 8012634:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8012636:	7bfa      	ldrb	r2, [r7, #15]
 8012638:	6879      	ldr	r1, [r7, #4]
 801263a:	4613      	mov	r3, r2
 801263c:	00db      	lsls	r3, r3, #3
 801263e:	4413      	add	r3, r2
 8012640:	009b      	lsls	r3, r3, #2
 8012642:	440b      	add	r3, r1
 8012644:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012648:	2200      	movs	r2, #0
 801264a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801264c:	7bfa      	ldrb	r2, [r7, #15]
 801264e:	6879      	ldr	r1, [r7, #4]
 8012650:	4613      	mov	r3, r2
 8012652:	00db      	lsls	r3, r3, #3
 8012654:	4413      	add	r3, r2
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	440b      	add	r3, r1
 801265a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 801265e:	2200      	movs	r2, #0
 8012660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012662:	7bfb      	ldrb	r3, [r7, #15]
 8012664:	3301      	adds	r3, #1
 8012666:	73fb      	strb	r3, [r7, #15]
 8012668:	7bfa      	ldrb	r2, [r7, #15]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	429a      	cmp	r2, r3
 8012670:	d3b5      	bcc.n	80125de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	603b      	str	r3, [r7, #0]
 8012678:	687e      	ldr	r6, [r7, #4]
 801267a:	466d      	mov	r5, sp
 801267c:	f106 0410 	add.w	r4, r6, #16
 8012680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012688:	e894 0003 	ldmia.w	r4, {r0, r1}
 801268c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012690:	1d33      	adds	r3, r6, #4
 8012692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012694:	6838      	ldr	r0, [r7, #0]
 8012696:	f003 fff7 	bl	8016688 <USB_DevInit>
 801269a:	4603      	mov	r3, r0
 801269c:	2b00      	cmp	r3, #0
 801269e:	d005      	beq.n	80126ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2202      	movs	r2, #2
 80126a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80126a8:	2301      	movs	r3, #1
 80126aa:	e00d      	b.n	80126c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2200      	movs	r2, #0
 80126b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2201      	movs	r2, #1
 80126b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	4618      	mov	r0, r3
 80126c2:	f005 f946 	bl	8017952 <USB_DevDisconnect>

  return HAL_OK;
 80126c6:	2300      	movs	r3, #0
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3714      	adds	r7, #20
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080126d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	d101      	bne.n	80126ec <HAL_PCD_Start+0x1c>
 80126e8:	2302      	movs	r3, #2
 80126ea:	e020      	b.n	801272e <HAL_PCD_Start+0x5e>
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2201      	movs	r2, #1
 80126f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126f8:	2b01      	cmp	r3, #1
 80126fa:	d109      	bne.n	8012710 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8012700:	2b01      	cmp	r3, #1
 8012702:	d005      	beq.n	8012710 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012708:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	4618      	mov	r0, r3
 8012716:	f003 ff49 	bl	80165ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4618      	mov	r0, r3
 8012720:	f005 f8f6 	bl	8017910 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2200      	movs	r2, #0
 8012728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801272c:	2300      	movs	r3, #0
}
 801272e:	4618      	mov	r0, r3
 8012730:	3710      	adds	r7, #16
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}

08012736 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8012736:	b590      	push	{r4, r7, lr}
 8012738:	b08d      	sub	sp, #52	; 0x34
 801273a:	af00      	add	r7, sp, #0
 801273c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012744:	6a3b      	ldr	r3, [r7, #32]
 8012746:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	4618      	mov	r0, r3
 801274e:	f005 f9b4 	bl	8017aba <USB_GetMode>
 8012752:	4603      	mov	r3, r0
 8012754:	2b00      	cmp	r3, #0
 8012756:	f040 848a 	bne.w	801306e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	4618      	mov	r0, r3
 8012760:	f005 f918 	bl	8017994 <USB_ReadInterrupts>
 8012764:	4603      	mov	r3, r0
 8012766:	2b00      	cmp	r3, #0
 8012768:	f000 8480 	beq.w	801306c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 801276c:	69fb      	ldr	r3, [r7, #28]
 801276e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012772:	689b      	ldr	r3, [r3, #8]
 8012774:	0a1b      	lsrs	r3, r3, #8
 8012776:	f3c3 020d 	ubfx	r2, r3, #0, #14
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	4618      	mov	r0, r3
 8012786:	f005 f905 	bl	8017994 <USB_ReadInterrupts>
 801278a:	4603      	mov	r3, r0
 801278c:	f003 0302 	and.w	r3, r3, #2
 8012790:	2b02      	cmp	r3, #2
 8012792:	d107      	bne.n	80127a4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	695a      	ldr	r2, [r3, #20]
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	f002 0202 	and.w	r2, r2, #2
 80127a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	4618      	mov	r0, r3
 80127aa:	f005 f8f3 	bl	8017994 <USB_ReadInterrupts>
 80127ae:	4603      	mov	r3, r0
 80127b0:	f003 0310 	and.w	r3, r3, #16
 80127b4:	2b10      	cmp	r3, #16
 80127b6:	d161      	bne.n	801287c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	699a      	ldr	r2, [r3, #24]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	f022 0210 	bic.w	r2, r2, #16
 80127c6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80127c8:	6a3b      	ldr	r3, [r7, #32]
 80127ca:	6a1b      	ldr	r3, [r3, #32]
 80127cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80127ce:	69bb      	ldr	r3, [r7, #24]
 80127d0:	f003 020f 	and.w	r2, r3, #15
 80127d4:	4613      	mov	r3, r2
 80127d6:	00db      	lsls	r3, r3, #3
 80127d8:	4413      	add	r3, r2
 80127da:	009b      	lsls	r3, r3, #2
 80127dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80127e0:	687a      	ldr	r2, [r7, #4]
 80127e2:	4413      	add	r3, r2
 80127e4:	3304      	adds	r3, #4
 80127e6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80127e8:	69bb      	ldr	r3, [r7, #24]
 80127ea:	0c5b      	lsrs	r3, r3, #17
 80127ec:	f003 030f 	and.w	r3, r3, #15
 80127f0:	2b02      	cmp	r3, #2
 80127f2:	d124      	bne.n	801283e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80127f4:	69ba      	ldr	r2, [r7, #24]
 80127f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80127fa:	4013      	ands	r3, r2
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d035      	beq.n	801286c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8012804:	69bb      	ldr	r3, [r7, #24]
 8012806:	091b      	lsrs	r3, r3, #4
 8012808:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801280a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801280e:	b29b      	uxth	r3, r3
 8012810:	461a      	mov	r2, r3
 8012812:	6a38      	ldr	r0, [r7, #32]
 8012814:	f004 ff2a 	bl	801766c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	691a      	ldr	r2, [r3, #16]
 801281c:	69bb      	ldr	r3, [r7, #24]
 801281e:	091b      	lsrs	r3, r3, #4
 8012820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012824:	441a      	add	r2, r3
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	6a1a      	ldr	r2, [r3, #32]
 801282e:	69bb      	ldr	r3, [r7, #24]
 8012830:	091b      	lsrs	r3, r3, #4
 8012832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012836:	441a      	add	r2, r3
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	621a      	str	r2, [r3, #32]
 801283c:	e016      	b.n	801286c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	0c5b      	lsrs	r3, r3, #17
 8012842:	f003 030f 	and.w	r3, r3, #15
 8012846:	2b06      	cmp	r3, #6
 8012848:	d110      	bne.n	801286c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012850:	2208      	movs	r2, #8
 8012852:	4619      	mov	r1, r3
 8012854:	6a38      	ldr	r0, [r7, #32]
 8012856:	f004 ff09 	bl	801766c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	6a1a      	ldr	r2, [r3, #32]
 801285e:	69bb      	ldr	r3, [r7, #24]
 8012860:	091b      	lsrs	r3, r3, #4
 8012862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012866:	441a      	add	r2, r3
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	699a      	ldr	r2, [r3, #24]
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	f042 0210 	orr.w	r2, r2, #16
 801287a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4618      	mov	r0, r3
 8012882:	f005 f887 	bl	8017994 <USB_ReadInterrupts>
 8012886:	4603      	mov	r3, r0
 8012888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801288c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012890:	f040 80a7 	bne.w	80129e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8012894:	2300      	movs	r3, #0
 8012896:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	4618      	mov	r0, r3
 801289e:	f005 f88c 	bl	80179ba <USB_ReadDevAllOutEpInterrupt>
 80128a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80128a4:	e099      	b.n	80129da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80128a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a8:	f003 0301 	and.w	r3, r3, #1
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	f000 808e 	beq.w	80129ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128b8:	b2d2      	uxtb	r2, r2
 80128ba:	4611      	mov	r1, r2
 80128bc:	4618      	mov	r0, r3
 80128be:	f005 f8b0 	bl	8017a22 <USB_ReadDevOutEPInterrupt>
 80128c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80128c4:	693b      	ldr	r3, [r7, #16]
 80128c6:	f003 0301 	and.w	r3, r3, #1
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00c      	beq.n	80128e8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80128ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d0:	015a      	lsls	r2, r3, #5
 80128d2:	69fb      	ldr	r3, [r7, #28]
 80128d4:	4413      	add	r3, r2
 80128d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128da:	461a      	mov	r2, r3
 80128dc:	2301      	movs	r3, #1
 80128de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80128e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f000 fec2 	bl	801366c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80128e8:	693b      	ldr	r3, [r7, #16]
 80128ea:	f003 0308 	and.w	r3, r3, #8
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d00c      	beq.n	801290c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80128f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f4:	015a      	lsls	r2, r3, #5
 80128f6:	69fb      	ldr	r3, [r7, #28]
 80128f8:	4413      	add	r3, r2
 80128fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128fe:	461a      	mov	r2, r3
 8012900:	2308      	movs	r3, #8
 8012902:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8012904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f000 ff98 	bl	801383c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	f003 0310 	and.w	r3, r3, #16
 8012912:	2b00      	cmp	r3, #0
 8012914:	d008      	beq.n	8012928 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8012916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012918:	015a      	lsls	r2, r3, #5
 801291a:	69fb      	ldr	r3, [r7, #28]
 801291c:	4413      	add	r3, r2
 801291e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012922:	461a      	mov	r2, r3
 8012924:	2310      	movs	r3, #16
 8012926:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	f003 0302 	and.w	r3, r3, #2
 801292e:	2b00      	cmp	r3, #0
 8012930:	d030      	beq.n	8012994 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8012932:	6a3b      	ldr	r3, [r7, #32]
 8012934:	695b      	ldr	r3, [r3, #20]
 8012936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801293a:	2b80      	cmp	r3, #128	; 0x80
 801293c:	d109      	bne.n	8012952 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 801293e:	69fb      	ldr	r3, [r7, #28]
 8012940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	69fa      	ldr	r2, [r7, #28]
 8012948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801294c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012950:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8012952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012954:	4613      	mov	r3, r2
 8012956:	00db      	lsls	r3, r3, #3
 8012958:	4413      	add	r3, r2
 801295a:	009b      	lsls	r3, r3, #2
 801295c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	4413      	add	r3, r2
 8012964:	3304      	adds	r3, #4
 8012966:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8012968:	697b      	ldr	r3, [r7, #20]
 801296a:	78db      	ldrb	r3, [r3, #3]
 801296c:	2b01      	cmp	r3, #1
 801296e:	d108      	bne.n	8012982 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8012970:	697b      	ldr	r3, [r7, #20]
 8012972:	2200      	movs	r2, #0
 8012974:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012978:	b2db      	uxtb	r3, r3
 801297a:	4619      	mov	r1, r3
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f00a ffe7 	bl	801d950 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8012982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012984:	015a      	lsls	r2, r3, #5
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	4413      	add	r3, r2
 801298a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801298e:	461a      	mov	r2, r3
 8012990:	2302      	movs	r3, #2
 8012992:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	f003 0320 	and.w	r3, r3, #32
 801299a:	2b00      	cmp	r3, #0
 801299c:	d008      	beq.n	80129b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a0:	015a      	lsls	r2, r3, #5
 80129a2:	69fb      	ldr	r3, [r7, #28]
 80129a4:	4413      	add	r3, r2
 80129a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129aa:	461a      	mov	r2, r3
 80129ac:	2320      	movs	r3, #32
 80129ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d009      	beq.n	80129ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80129ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129bc:	015a      	lsls	r2, r3, #5
 80129be:	69fb      	ldr	r3, [r7, #28]
 80129c0:	4413      	add	r3, r2
 80129c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129c6:	461a      	mov	r2, r3
 80129c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80129cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80129ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d0:	3301      	adds	r3, #1
 80129d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80129d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129d6:	085b      	lsrs	r3, r3, #1
 80129d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80129da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129dc:	2b00      	cmp	r3, #0
 80129de:	f47f af62 	bne.w	80128a6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	4618      	mov	r0, r3
 80129e8:	f004 ffd4 	bl	8017994 <USB_ReadInterrupts>
 80129ec:	4603      	mov	r3, r0
 80129ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80129f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80129f6:	f040 80db 	bne.w	8012bb0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	4618      	mov	r0, r3
 8012a00:	f004 fff5 	bl	80179ee <USB_ReadDevAllInEpInterrupt>
 8012a04:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8012a06:	2300      	movs	r3, #0
 8012a08:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8012a0a:	e0cd      	b.n	8012ba8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8012a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0e:	f003 0301 	and.w	r3, r3, #1
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	f000 80c2 	beq.w	8012b9c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a1e:	b2d2      	uxtb	r2, r2
 8012a20:	4611      	mov	r1, r2
 8012a22:	4618      	mov	r0, r3
 8012a24:	f005 f81b 	bl	8017a5e <USB_ReadDevInEPInterrupt>
 8012a28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	f003 0301 	and.w	r3, r3, #1
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d057      	beq.n	8012ae4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8012a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a36:	f003 030f 	and.w	r3, r3, #15
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8012a40:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8012a42:	69fb      	ldr	r3, [r7, #28]
 8012a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	43db      	mvns	r3, r3
 8012a4e:	69f9      	ldr	r1, [r7, #28]
 8012a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a54:	4013      	ands	r3, r2
 8012a56:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8012a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5a:	015a      	lsls	r2, r3, #5
 8012a5c:	69fb      	ldr	r3, [r7, #28]
 8012a5e:	4413      	add	r3, r2
 8012a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a64:	461a      	mov	r2, r3
 8012a66:	2301      	movs	r3, #1
 8012a68:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	691b      	ldr	r3, [r3, #16]
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d132      	bne.n	8012ad8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8012a72:	6879      	ldr	r1, [r7, #4]
 8012a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a76:	4613      	mov	r3, r2
 8012a78:	00db      	lsls	r3, r3, #3
 8012a7a:	4413      	add	r3, r2
 8012a7c:	009b      	lsls	r3, r3, #2
 8012a7e:	440b      	add	r3, r1
 8012a80:	334c      	adds	r3, #76	; 0x4c
 8012a82:	6819      	ldr	r1, [r3, #0]
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a88:	4613      	mov	r3, r2
 8012a8a:	00db      	lsls	r3, r3, #3
 8012a8c:	4413      	add	r3, r2
 8012a8e:	009b      	lsls	r3, r3, #2
 8012a90:	4403      	add	r3, r0
 8012a92:	3348      	adds	r3, #72	; 0x48
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	4419      	add	r1, r3
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a9c:	4613      	mov	r3, r2
 8012a9e:	00db      	lsls	r3, r3, #3
 8012aa0:	4413      	add	r3, r2
 8012aa2:	009b      	lsls	r3, r3, #2
 8012aa4:	4403      	add	r3, r0
 8012aa6:	334c      	adds	r3, #76	; 0x4c
 8012aa8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8012aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d113      	bne.n	8012ad8 <HAL_PCD_IRQHandler+0x3a2>
 8012ab0:	6879      	ldr	r1, [r7, #4]
 8012ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	00db      	lsls	r3, r3, #3
 8012ab8:	4413      	add	r3, r2
 8012aba:	009b      	lsls	r3, r3, #2
 8012abc:	440b      	add	r3, r1
 8012abe:	3354      	adds	r3, #84	; 0x54
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d108      	bne.n	8012ad8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6818      	ldr	r0, [r3, #0]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012ad0:	461a      	mov	r2, r3
 8012ad2:	2101      	movs	r1, #1
 8012ad4:	f005 f822 	bl	8017b1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8012ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	4619      	mov	r1, r3
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f00a febb 	bl	801d85a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	f003 0308 	and.w	r3, r3, #8
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d008      	beq.n	8012b00 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8012aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af0:	015a      	lsls	r2, r3, #5
 8012af2:	69fb      	ldr	r3, [r7, #28]
 8012af4:	4413      	add	r3, r2
 8012af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012afa:	461a      	mov	r2, r3
 8012afc:	2308      	movs	r3, #8
 8012afe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	f003 0310 	and.w	r3, r3, #16
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d008      	beq.n	8012b1c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8012b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0c:	015a      	lsls	r2, r3, #5
 8012b0e:	69fb      	ldr	r3, [r7, #28]
 8012b10:	4413      	add	r3, r2
 8012b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b16:	461a      	mov	r2, r3
 8012b18:	2310      	movs	r3, #16
 8012b1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d008      	beq.n	8012b38 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8012b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b28:	015a      	lsls	r2, r3, #5
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b32:	461a      	mov	r2, r3
 8012b34:	2340      	movs	r3, #64	; 0x40
 8012b36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8012b38:	693b      	ldr	r3, [r7, #16]
 8012b3a:	f003 0302 	and.w	r3, r3, #2
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d023      	beq.n	8012b8a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8012b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b44:	6a38      	ldr	r0, [r7, #32]
 8012b46:	f003 ff03 	bl	8016950 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8012b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b4c:	4613      	mov	r3, r2
 8012b4e:	00db      	lsls	r3, r3, #3
 8012b50:	4413      	add	r3, r2
 8012b52:	009b      	lsls	r3, r3, #2
 8012b54:	3338      	adds	r3, #56	; 0x38
 8012b56:	687a      	ldr	r2, [r7, #4]
 8012b58:	4413      	add	r3, r2
 8012b5a:	3304      	adds	r3, #4
 8012b5c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	78db      	ldrb	r3, [r3, #3]
 8012b62:	2b01      	cmp	r3, #1
 8012b64:	d108      	bne.n	8012b78 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8012b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	4619      	mov	r1, r3
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f00a fefe 	bl	801d974 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8012b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7a:	015a      	lsls	r2, r3, #5
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	4413      	add	r3, r2
 8012b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b84:	461a      	mov	r2, r3
 8012b86:	2302      	movs	r3, #2
 8012b88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d003      	beq.n	8012b9c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8012b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f000 fcdb 	bl	8013552 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8012b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8012ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba4:	085b      	lsrs	r3, r3, #1
 8012ba6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8012ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	f47f af2e 	bne.w	8012a0c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f004 feed 	bl	8017994 <USB_ReadInterrupts>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012bc4:	d122      	bne.n	8012c0c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8012bc6:	69fb      	ldr	r3, [r7, #28]
 8012bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	69fa      	ldr	r2, [r7, #28]
 8012bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012bd4:	f023 0301 	bic.w	r3, r3, #1
 8012bd8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8012be0:	2b01      	cmp	r3, #1
 8012be2:	d108      	bne.n	8012bf6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2200      	movs	r2, #0
 8012be8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8012bec:	2100      	movs	r1, #0
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f000 fec2 	bl	8013978 <HAL_PCDEx_LPM_Callback>
 8012bf4:	e002      	b.n	8012bfc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f00a fe9c 	bl	801d934 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	695a      	ldr	r2, [r3, #20]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8012c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4618      	mov	r0, r3
 8012c12:	f004 febf 	bl	8017994 <USB_ReadInterrupts>
 8012c16:	4603      	mov	r3, r0
 8012c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012c20:	d112      	bne.n	8012c48 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8012c22:	69fb      	ldr	r3, [r7, #28]
 8012c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c28:	689b      	ldr	r3, [r3, #8]
 8012c2a:	f003 0301 	and.w	r3, r3, #1
 8012c2e:	2b01      	cmp	r3, #1
 8012c30:	d102      	bne.n	8012c38 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f00a fe58 	bl	801d8e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	695a      	ldr	r2, [r3, #20]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8012c46:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f004 fea1 	bl	8017994 <USB_ReadInterrupts>
 8012c52:	4603      	mov	r3, r0
 8012c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012c5c:	f040 80b7 	bne.w	8012dce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8012c60:	69fb      	ldr	r3, [r7, #28]
 8012c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c66:	685b      	ldr	r3, [r3, #4]
 8012c68:	69fa      	ldr	r2, [r7, #28]
 8012c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012c6e:	f023 0301 	bic.w	r3, r3, #1
 8012c72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	2110      	movs	r1, #16
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f003 fe68 	bl	8016950 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012c80:	2300      	movs	r3, #0
 8012c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c84:	e046      	b.n	8012d14 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8012c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c88:	015a      	lsls	r2, r3, #5
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	4413      	add	r3, r2
 8012c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c92:	461a      	mov	r2, r3
 8012c94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012c98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9c:	015a      	lsls	r2, r3, #5
 8012c9e:	69fb      	ldr	r3, [r7, #28]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012caa:	0151      	lsls	r1, r2, #5
 8012cac:	69fa      	ldr	r2, [r7, #28]
 8012cae:	440a      	add	r2, r1
 8012cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012cb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8012cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cbc:	015a      	lsls	r2, r3, #5
 8012cbe:	69fb      	ldr	r3, [r7, #28]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012ccc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd0:	015a      	lsls	r2, r3, #5
 8012cd2:	69fb      	ldr	r3, [r7, #28]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012cde:	0151      	lsls	r1, r2, #5
 8012ce0:	69fa      	ldr	r2, [r7, #28]
 8012ce2:	440a      	add	r2, r1
 8012ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ce8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012cec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf0:	015a      	lsls	r2, r3, #5
 8012cf2:	69fb      	ldr	r3, [r7, #28]
 8012cf4:	4413      	add	r3, r2
 8012cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012cfe:	0151      	lsls	r1, r2, #5
 8012d00:	69fa      	ldr	r2, [r7, #28]
 8012d02:	440a      	add	r2, r1
 8012d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012d0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d10:	3301      	adds	r3, #1
 8012d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d3b3      	bcc.n	8012c86 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8012d1e:	69fb      	ldr	r3, [r7, #28]
 8012d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d24:	69db      	ldr	r3, [r3, #28]
 8012d26:	69fa      	ldr	r2, [r7, #28]
 8012d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d2c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8012d30:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d016      	beq.n	8012d68 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8012d3a:	69fb      	ldr	r3, [r7, #28]
 8012d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d44:	69fa      	ldr	r2, [r7, #28]
 8012d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d4a:	f043 030b 	orr.w	r3, r3, #11
 8012d4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8012d52:	69fb      	ldr	r3, [r7, #28]
 8012d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d5a:	69fa      	ldr	r2, [r7, #28]
 8012d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d60:	f043 030b 	orr.w	r3, r3, #11
 8012d64:	6453      	str	r3, [r2, #68]	; 0x44
 8012d66:	e015      	b.n	8012d94 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d6e:	695b      	ldr	r3, [r3, #20]
 8012d70:	69fa      	ldr	r2, [r7, #28]
 8012d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012d7a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8012d7e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8012d80:	69fb      	ldr	r3, [r7, #28]
 8012d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d86:	691b      	ldr	r3, [r3, #16]
 8012d88:	69fa      	ldr	r2, [r7, #28]
 8012d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d8e:	f043 030b 	orr.w	r3, r3, #11
 8012d92:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	69fa      	ldr	r2, [r7, #28]
 8012d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012da2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012da6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6818      	ldr	r0, [r3, #0]
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	691b      	ldr	r3, [r3, #16]
 8012db0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8012db8:	461a      	mov	r2, r3
 8012dba:	f004 feaf 	bl	8017b1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	695a      	ldr	r2, [r3, #20]
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8012dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f004 fdde 	bl	8017994 <USB_ReadInterrupts>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012de2:	d124      	bne.n	8012e2e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	4618      	mov	r0, r3
 8012dea:	f004 fe74 	bl	8017ad6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	4618      	mov	r0, r3
 8012df4:	f003 fe29 	bl	8016a4a <USB_GetDevSpeed>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681c      	ldr	r4, [r3, #0]
 8012e04:	f001 f9e8 	bl	80141d8 <HAL_RCC_GetHCLKFreq>
 8012e08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8012e0e:	b2db      	uxtb	r3, r3
 8012e10:	461a      	mov	r2, r3
 8012e12:	4620      	mov	r0, r4
 8012e14:	f003 fb28 	bl	8016468 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f00a fd46 	bl	801d8aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	695a      	ldr	r2, [r3, #20]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8012e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	4618      	mov	r0, r3
 8012e34:	f004 fdae 	bl	8017994 <USB_ReadInterrupts>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	f003 0308 	and.w	r3, r3, #8
 8012e3e:	2b08      	cmp	r3, #8
 8012e40:	d10a      	bne.n	8012e58 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f00a fd23 	bl	801d88e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	695a      	ldr	r2, [r3, #20]
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	f002 0208 	and.w	r2, r2, #8
 8012e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f004 fd99 	bl	8017994 <USB_ReadInterrupts>
 8012e62:	4603      	mov	r3, r0
 8012e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e68:	2b80      	cmp	r3, #128	; 0x80
 8012e6a:	d122      	bne.n	8012eb2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8012e6c:	6a3b      	ldr	r3, [r7, #32]
 8012e6e:	699b      	ldr	r3, [r3, #24]
 8012e70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012e74:	6a3b      	ldr	r3, [r7, #32]
 8012e76:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012e78:	2301      	movs	r3, #1
 8012e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8012e7c:	e014      	b.n	8012ea8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8012e7e:	6879      	ldr	r1, [r7, #4]
 8012e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e82:	4613      	mov	r3, r2
 8012e84:	00db      	lsls	r3, r3, #3
 8012e86:	4413      	add	r3, r2
 8012e88:	009b      	lsls	r3, r3, #2
 8012e8a:	440b      	add	r3, r1
 8012e8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d105      	bne.n	8012ea2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8012e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f000 fb27 	bl	80134f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea4:	3301      	adds	r3, #1
 8012ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012eae:	429a      	cmp	r2, r3
 8012eb0:	d3e5      	bcc.n	8012e7e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f004 fd6c 	bl	8017994 <USB_ReadInterrupts>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012ec6:	d13b      	bne.n	8012f40 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012ec8:	2301      	movs	r3, #1
 8012eca:	627b      	str	r3, [r7, #36]	; 0x24
 8012ecc:	e02b      	b.n	8012f26 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8012ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed0:	015a      	lsls	r2, r3, #5
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8012ede:	6879      	ldr	r1, [r7, #4]
 8012ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ee2:	4613      	mov	r3, r2
 8012ee4:	00db      	lsls	r3, r3, #3
 8012ee6:	4413      	add	r3, r2
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	440b      	add	r3, r1
 8012eec:	3340      	adds	r3, #64	; 0x40
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	2b01      	cmp	r3, #1
 8012ef2:	d115      	bne.n	8012f20 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8012ef4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	da12      	bge.n	8012f20 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8012efa:	6879      	ldr	r1, [r7, #4]
 8012efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012efe:	4613      	mov	r3, r2
 8012f00:	00db      	lsls	r3, r3, #3
 8012f02:	4413      	add	r3, r2
 8012f04:	009b      	lsls	r3, r3, #2
 8012f06:	440b      	add	r3, r1
 8012f08:	333f      	adds	r3, #63	; 0x3f
 8012f0a:	2201      	movs	r2, #1
 8012f0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8012f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f10:	b2db      	uxtb	r3, r3
 8012f12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012f16:	b2db      	uxtb	r3, r3
 8012f18:	4619      	mov	r1, r3
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f000 fae8 	bl	80134f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f22:	3301      	adds	r3, #1
 8012f24:	627b      	str	r3, [r7, #36]	; 0x24
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d3ce      	bcc.n	8012ece <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	695a      	ldr	r2, [r3, #20]
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8012f3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	4618      	mov	r0, r3
 8012f46:	f004 fd25 	bl	8017994 <USB_ReadInterrupts>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012f54:	d155      	bne.n	8013002 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012f56:	2301      	movs	r3, #1
 8012f58:	627b      	str	r3, [r7, #36]	; 0x24
 8012f5a:	e045      	b.n	8012fe8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8012f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5e:	015a      	lsls	r2, r3, #5
 8012f60:	69fb      	ldr	r3, [r7, #28]
 8012f62:	4413      	add	r3, r2
 8012f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8012f6c:	6879      	ldr	r1, [r7, #4]
 8012f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f70:	4613      	mov	r3, r2
 8012f72:	00db      	lsls	r3, r3, #3
 8012f74:	4413      	add	r3, r2
 8012f76:	009b      	lsls	r3, r3, #2
 8012f78:	440b      	add	r3, r1
 8012f7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d12e      	bne.n	8012fe2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8012f84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	da2b      	bge.n	8012fe2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8012f8a:	69bb      	ldr	r3, [r7, #24]
 8012f8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8012f96:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d121      	bne.n	8012fe2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8012f9e:	6879      	ldr	r1, [r7, #4]
 8012fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	00db      	lsls	r3, r3, #3
 8012fa6:	4413      	add	r3, r2
 8012fa8:	009b      	lsls	r3, r3, #2
 8012faa:	440b      	add	r3, r1
 8012fac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8012fb0:	2201      	movs	r2, #1
 8012fb2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8012fb4:	6a3b      	ldr	r3, [r7, #32]
 8012fb6:	699b      	ldr	r3, [r3, #24]
 8012fb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012fbc:	6a3b      	ldr	r3, [r7, #32]
 8012fbe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8012fc0:	6a3b      	ldr	r3, [r7, #32]
 8012fc2:	695b      	ldr	r3, [r3, #20]
 8012fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d10a      	bne.n	8012fe2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8012fcc:	69fb      	ldr	r3, [r7, #28]
 8012fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	69fa      	ldr	r2, [r7, #28]
 8012fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012fde:	6053      	str	r3, [r2, #4]
            break;
 8012fe0:	e007      	b.n	8012ff2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8012fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fee:	429a      	cmp	r2, r3
 8012ff0:	d3b4      	bcc.n	8012f5c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	695a      	ldr	r2, [r3, #20]
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8013000:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	4618      	mov	r0, r3
 8013008:	f004 fcc4 	bl	8017994 <USB_ReadInterrupts>
 801300c:	4603      	mov	r3, r0
 801300e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013016:	d10a      	bne.n	801302e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f00a fcbd 	bl	801d998 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	695a      	ldr	r2, [r3, #20]
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801302c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	4618      	mov	r0, r3
 8013034:	f004 fcae 	bl	8017994 <USB_ReadInterrupts>
 8013038:	4603      	mov	r3, r0
 801303a:	f003 0304 	and.w	r3, r3, #4
 801303e:	2b04      	cmp	r3, #4
 8013040:	d115      	bne.n	801306e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801304a:	69bb      	ldr	r3, [r7, #24]
 801304c:	f003 0304 	and.w	r3, r3, #4
 8013050:	2b00      	cmp	r3, #0
 8013052:	d002      	beq.n	801305a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f00a fcad 	bl	801d9b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	6859      	ldr	r1, [r3, #4]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	69ba      	ldr	r2, [r7, #24]
 8013066:	430a      	orrs	r2, r1
 8013068:	605a      	str	r2, [r3, #4]
 801306a:	e000      	b.n	801306e <HAL_PCD_IRQHandler+0x938>
      return;
 801306c:	bf00      	nop
    }
  }
}
 801306e:	3734      	adds	r7, #52	; 0x34
 8013070:	46bd      	mov	sp, r7
 8013072:	bd90      	pop	{r4, r7, pc}

08013074 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	460b      	mov	r3, r1
 801307e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8013086:	2b01      	cmp	r3, #1
 8013088:	d101      	bne.n	801308e <HAL_PCD_SetAddress+0x1a>
 801308a:	2302      	movs	r3, #2
 801308c:	e013      	b.n	80130b6 <HAL_PCD_SetAddress+0x42>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2201      	movs	r2, #1
 8013092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	78fa      	ldrb	r2, [r7, #3]
 801309a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	78fa      	ldrb	r2, [r7, #3]
 80130a4:	4611      	mov	r1, r2
 80130a6:	4618      	mov	r0, r3
 80130a8:	f004 fc0c 	bl	80178c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	2200      	movs	r2, #0
 80130b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80130b4:	2300      	movs	r3, #0
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}

080130be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80130be:	b580      	push	{r7, lr}
 80130c0:	b084      	sub	sp, #16
 80130c2:	af00      	add	r7, sp, #0
 80130c4:	6078      	str	r0, [r7, #4]
 80130c6:	4608      	mov	r0, r1
 80130c8:	4611      	mov	r1, r2
 80130ca:	461a      	mov	r2, r3
 80130cc:	4603      	mov	r3, r0
 80130ce:	70fb      	strb	r3, [r7, #3]
 80130d0:	460b      	mov	r3, r1
 80130d2:	803b      	strh	r3, [r7, #0]
 80130d4:	4613      	mov	r3, r2
 80130d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80130d8:	2300      	movs	r3, #0
 80130da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80130dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	da0f      	bge.n	8013104 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80130e4:	78fb      	ldrb	r3, [r7, #3]
 80130e6:	f003 020f 	and.w	r2, r3, #15
 80130ea:	4613      	mov	r3, r2
 80130ec:	00db      	lsls	r3, r3, #3
 80130ee:	4413      	add	r3, r2
 80130f0:	009b      	lsls	r3, r3, #2
 80130f2:	3338      	adds	r3, #56	; 0x38
 80130f4:	687a      	ldr	r2, [r7, #4]
 80130f6:	4413      	add	r3, r2
 80130f8:	3304      	adds	r3, #4
 80130fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2201      	movs	r2, #1
 8013100:	705a      	strb	r2, [r3, #1]
 8013102:	e00f      	b.n	8013124 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013104:	78fb      	ldrb	r3, [r7, #3]
 8013106:	f003 020f 	and.w	r2, r3, #15
 801310a:	4613      	mov	r3, r2
 801310c:	00db      	lsls	r3, r3, #3
 801310e:	4413      	add	r3, r2
 8013110:	009b      	lsls	r3, r3, #2
 8013112:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	4413      	add	r3, r2
 801311a:	3304      	adds	r3, #4
 801311c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	2200      	movs	r2, #0
 8013122:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8013124:	78fb      	ldrb	r3, [r7, #3]
 8013126:	f003 030f 	and.w	r3, r3, #15
 801312a:	b2da      	uxtb	r2, r3
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8013130:	883a      	ldrh	r2, [r7, #0]
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	78ba      	ldrb	r2, [r7, #2]
 801313a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	785b      	ldrb	r3, [r3, #1]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d004      	beq.n	801314e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	781b      	ldrb	r3, [r3, #0]
 8013148:	b29a      	uxth	r2, r3
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801314e:	78bb      	ldrb	r3, [r7, #2]
 8013150:	2b02      	cmp	r3, #2
 8013152:	d102      	bne.n	801315a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	2200      	movs	r2, #0
 8013158:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8013160:	2b01      	cmp	r3, #1
 8013162:	d101      	bne.n	8013168 <HAL_PCD_EP_Open+0xaa>
 8013164:	2302      	movs	r3, #2
 8013166:	e00e      	b.n	8013186 <HAL_PCD_EP_Open+0xc8>
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2201      	movs	r2, #1
 801316c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	68f9      	ldr	r1, [r7, #12]
 8013176:	4618      	mov	r0, r3
 8013178:	f003 fc8c 	bl	8016a94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2200      	movs	r2, #0
 8013180:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8013184:	7afb      	ldrb	r3, [r7, #11]
}
 8013186:	4618      	mov	r0, r3
 8013188:	3710      	adds	r7, #16
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}

0801318e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801318e:	b580      	push	{r7, lr}
 8013190:	b084      	sub	sp, #16
 8013192:	af00      	add	r7, sp, #0
 8013194:	6078      	str	r0, [r7, #4]
 8013196:	460b      	mov	r3, r1
 8013198:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801319a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	da0f      	bge.n	80131c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80131a2:	78fb      	ldrb	r3, [r7, #3]
 80131a4:	f003 020f 	and.w	r2, r3, #15
 80131a8:	4613      	mov	r3, r2
 80131aa:	00db      	lsls	r3, r3, #3
 80131ac:	4413      	add	r3, r2
 80131ae:	009b      	lsls	r3, r3, #2
 80131b0:	3338      	adds	r3, #56	; 0x38
 80131b2:	687a      	ldr	r2, [r7, #4]
 80131b4:	4413      	add	r3, r2
 80131b6:	3304      	adds	r3, #4
 80131b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2201      	movs	r2, #1
 80131be:	705a      	strb	r2, [r3, #1]
 80131c0:	e00f      	b.n	80131e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80131c2:	78fb      	ldrb	r3, [r7, #3]
 80131c4:	f003 020f 	and.w	r2, r3, #15
 80131c8:	4613      	mov	r3, r2
 80131ca:	00db      	lsls	r3, r3, #3
 80131cc:	4413      	add	r3, r2
 80131ce:	009b      	lsls	r3, r3, #2
 80131d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	4413      	add	r3, r2
 80131d8:	3304      	adds	r3, #4
 80131da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2200      	movs	r2, #0
 80131e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80131e2:	78fb      	ldrb	r3, [r7, #3]
 80131e4:	f003 030f 	and.w	r3, r3, #15
 80131e8:	b2da      	uxtb	r2, r3
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80131f4:	2b01      	cmp	r3, #1
 80131f6:	d101      	bne.n	80131fc <HAL_PCD_EP_Close+0x6e>
 80131f8:	2302      	movs	r3, #2
 80131fa:	e00e      	b.n	801321a <HAL_PCD_EP_Close+0x8c>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2201      	movs	r2, #1
 8013200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	68f9      	ldr	r1, [r7, #12]
 801320a:	4618      	mov	r0, r3
 801320c:	f003 fcca 	bl	8016ba4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2200      	movs	r2, #0
 8013214:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8013218:	2300      	movs	r3, #0
}
 801321a:	4618      	mov	r0, r3
 801321c:	3710      	adds	r7, #16
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}

08013222 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013222:	b580      	push	{r7, lr}
 8013224:	b086      	sub	sp, #24
 8013226:	af00      	add	r7, sp, #0
 8013228:	60f8      	str	r0, [r7, #12]
 801322a:	607a      	str	r2, [r7, #4]
 801322c:	603b      	str	r3, [r7, #0]
 801322e:	460b      	mov	r3, r1
 8013230:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013232:	7afb      	ldrb	r3, [r7, #11]
 8013234:	f003 020f 	and.w	r2, r3, #15
 8013238:	4613      	mov	r3, r2
 801323a:	00db      	lsls	r3, r3, #3
 801323c:	4413      	add	r3, r2
 801323e:	009b      	lsls	r3, r3, #2
 8013240:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8013244:	68fa      	ldr	r2, [r7, #12]
 8013246:	4413      	add	r3, r2
 8013248:	3304      	adds	r3, #4
 801324a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	683a      	ldr	r2, [r7, #0]
 8013256:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	2200      	movs	r2, #0
 801325c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 801325e:	697b      	ldr	r3, [r7, #20]
 8013260:	2200      	movs	r2, #0
 8013262:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013264:	7afb      	ldrb	r3, [r7, #11]
 8013266:	f003 030f 	and.w	r3, r3, #15
 801326a:	b2da      	uxtb	r2, r3
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	691b      	ldr	r3, [r3, #16]
 8013274:	2b01      	cmp	r3, #1
 8013276:	d102      	bne.n	801327e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801327e:	7afb      	ldrb	r3, [r7, #11]
 8013280:	f003 030f 	and.w	r3, r3, #15
 8013284:	2b00      	cmp	r3, #0
 8013286:	d109      	bne.n	801329c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	6818      	ldr	r0, [r3, #0]
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	691b      	ldr	r3, [r3, #16]
 8013290:	b2db      	uxtb	r3, r3
 8013292:	461a      	mov	r2, r3
 8013294:	6979      	ldr	r1, [r7, #20]
 8013296:	f003 ffa9 	bl	80171ec <USB_EP0StartXfer>
 801329a:	e008      	b.n	80132ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	6818      	ldr	r0, [r3, #0]
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	691b      	ldr	r3, [r3, #16]
 80132a4:	b2db      	uxtb	r3, r3
 80132a6:	461a      	mov	r2, r3
 80132a8:	6979      	ldr	r1, [r7, #20]
 80132aa:	f003 fd57 	bl	8016d5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80132ae:	2300      	movs	r3, #0
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3718      	adds	r7, #24
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}

080132b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80132b8:	b480      	push	{r7}
 80132ba:	b083      	sub	sp, #12
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
 80132c0:	460b      	mov	r3, r1
 80132c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80132c4:	78fb      	ldrb	r3, [r7, #3]
 80132c6:	f003 020f 	and.w	r2, r3, #15
 80132ca:	6879      	ldr	r1, [r7, #4]
 80132cc:	4613      	mov	r3, r2
 80132ce:	00db      	lsls	r3, r3, #3
 80132d0:	4413      	add	r3, r2
 80132d2:	009b      	lsls	r3, r3, #2
 80132d4:	440b      	add	r3, r1
 80132d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80132da:	681b      	ldr	r3, [r3, #0]
}
 80132dc:	4618      	mov	r0, r3
 80132de:	370c      	adds	r7, #12
 80132e0:	46bd      	mov	sp, r7
 80132e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e6:	4770      	bx	lr

080132e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b086      	sub	sp, #24
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	607a      	str	r2, [r7, #4]
 80132f2:	603b      	str	r3, [r7, #0]
 80132f4:	460b      	mov	r3, r1
 80132f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80132f8:	7afb      	ldrb	r3, [r7, #11]
 80132fa:	f003 020f 	and.w	r2, r3, #15
 80132fe:	4613      	mov	r3, r2
 8013300:	00db      	lsls	r3, r3, #3
 8013302:	4413      	add	r3, r2
 8013304:	009b      	lsls	r3, r3, #2
 8013306:	3338      	adds	r3, #56	; 0x38
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	4413      	add	r3, r2
 801330c:	3304      	adds	r3, #4
 801330e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	687a      	ldr	r2, [r7, #4]
 8013314:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	683a      	ldr	r2, [r7, #0]
 801331a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	2200      	movs	r2, #0
 8013320:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	2201      	movs	r2, #1
 8013326:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013328:	7afb      	ldrb	r3, [r7, #11]
 801332a:	f003 030f 	and.w	r3, r3, #15
 801332e:	b2da      	uxtb	r2, r3
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	691b      	ldr	r3, [r3, #16]
 8013338:	2b01      	cmp	r3, #1
 801333a:	d102      	bne.n	8013342 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801333c:	687a      	ldr	r2, [r7, #4]
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8013342:	7afb      	ldrb	r3, [r7, #11]
 8013344:	f003 030f 	and.w	r3, r3, #15
 8013348:	2b00      	cmp	r3, #0
 801334a:	d109      	bne.n	8013360 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	6818      	ldr	r0, [r3, #0]
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	691b      	ldr	r3, [r3, #16]
 8013354:	b2db      	uxtb	r3, r3
 8013356:	461a      	mov	r2, r3
 8013358:	6979      	ldr	r1, [r7, #20]
 801335a:	f003 ff47 	bl	80171ec <USB_EP0StartXfer>
 801335e:	e008      	b.n	8013372 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	6818      	ldr	r0, [r3, #0]
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	691b      	ldr	r3, [r3, #16]
 8013368:	b2db      	uxtb	r3, r3
 801336a:	461a      	mov	r2, r3
 801336c:	6979      	ldr	r1, [r7, #20]
 801336e:	f003 fcf5 	bl	8016d5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8013372:	2300      	movs	r3, #0
}
 8013374:	4618      	mov	r0, r3
 8013376:	3718      	adds	r7, #24
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}

0801337c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	460b      	mov	r3, r1
 8013386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8013388:	78fb      	ldrb	r3, [r7, #3]
 801338a:	f003 020f 	and.w	r2, r3, #15
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	685b      	ldr	r3, [r3, #4]
 8013392:	429a      	cmp	r2, r3
 8013394:	d901      	bls.n	801339a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8013396:	2301      	movs	r3, #1
 8013398:	e050      	b.n	801343c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801339a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	da0f      	bge.n	80133c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80133a2:	78fb      	ldrb	r3, [r7, #3]
 80133a4:	f003 020f 	and.w	r2, r3, #15
 80133a8:	4613      	mov	r3, r2
 80133aa:	00db      	lsls	r3, r3, #3
 80133ac:	4413      	add	r3, r2
 80133ae:	009b      	lsls	r3, r3, #2
 80133b0:	3338      	adds	r3, #56	; 0x38
 80133b2:	687a      	ldr	r2, [r7, #4]
 80133b4:	4413      	add	r3, r2
 80133b6:	3304      	adds	r3, #4
 80133b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	2201      	movs	r2, #1
 80133be:	705a      	strb	r2, [r3, #1]
 80133c0:	e00d      	b.n	80133de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80133c2:	78fa      	ldrb	r2, [r7, #3]
 80133c4:	4613      	mov	r3, r2
 80133c6:	00db      	lsls	r3, r3, #3
 80133c8:	4413      	add	r3, r2
 80133ca:	009b      	lsls	r3, r3, #2
 80133cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	4413      	add	r3, r2
 80133d4:	3304      	adds	r3, #4
 80133d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	2200      	movs	r2, #0
 80133dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	2201      	movs	r2, #1
 80133e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80133e4:	78fb      	ldrb	r3, [r7, #3]
 80133e6:	f003 030f 	and.w	r3, r3, #15
 80133ea:	b2da      	uxtb	r2, r3
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80133f6:	2b01      	cmp	r3, #1
 80133f8:	d101      	bne.n	80133fe <HAL_PCD_EP_SetStall+0x82>
 80133fa:	2302      	movs	r3, #2
 80133fc:	e01e      	b.n	801343c <HAL_PCD_EP_SetStall+0xc0>
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2201      	movs	r2, #1
 8013402:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	68f9      	ldr	r1, [r7, #12]
 801340c:	4618      	mov	r0, r3
 801340e:	f004 f985 	bl	801771c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8013412:	78fb      	ldrb	r3, [r7, #3]
 8013414:	f003 030f 	and.w	r3, r3, #15
 8013418:	2b00      	cmp	r3, #0
 801341a:	d10a      	bne.n	8013432 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6818      	ldr	r0, [r3, #0]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	691b      	ldr	r3, [r3, #16]
 8013424:	b2d9      	uxtb	r1, r3
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801342c:	461a      	mov	r2, r3
 801342e:	f004 fb75 	bl	8017b1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2200      	movs	r2, #0
 8013436:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801343a:	2300      	movs	r3, #0
}
 801343c:	4618      	mov	r0, r3
 801343e:	3710      	adds	r7, #16
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}

08013444 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b084      	sub	sp, #16
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
 801344c:	460b      	mov	r3, r1
 801344e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013450:	78fb      	ldrb	r3, [r7, #3]
 8013452:	f003 020f 	and.w	r2, r3, #15
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	685b      	ldr	r3, [r3, #4]
 801345a:	429a      	cmp	r2, r3
 801345c:	d901      	bls.n	8013462 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801345e:	2301      	movs	r3, #1
 8013460:	e042      	b.n	80134e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013466:	2b00      	cmp	r3, #0
 8013468:	da0f      	bge.n	801348a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801346a:	78fb      	ldrb	r3, [r7, #3]
 801346c:	f003 020f 	and.w	r2, r3, #15
 8013470:	4613      	mov	r3, r2
 8013472:	00db      	lsls	r3, r3, #3
 8013474:	4413      	add	r3, r2
 8013476:	009b      	lsls	r3, r3, #2
 8013478:	3338      	adds	r3, #56	; 0x38
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	4413      	add	r3, r2
 801347e:	3304      	adds	r3, #4
 8013480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	2201      	movs	r2, #1
 8013486:	705a      	strb	r2, [r3, #1]
 8013488:	e00f      	b.n	80134aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801348a:	78fb      	ldrb	r3, [r7, #3]
 801348c:	f003 020f 	and.w	r2, r3, #15
 8013490:	4613      	mov	r3, r2
 8013492:	00db      	lsls	r3, r3, #3
 8013494:	4413      	add	r3, r2
 8013496:	009b      	lsls	r3, r3, #2
 8013498:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801349c:	687a      	ldr	r2, [r7, #4]
 801349e:	4413      	add	r3, r2
 80134a0:	3304      	adds	r3, #4
 80134a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2200      	movs	r2, #0
 80134a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2200      	movs	r2, #0
 80134ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80134b0:	78fb      	ldrb	r3, [r7, #3]
 80134b2:	f003 030f 	and.w	r3, r3, #15
 80134b6:	b2da      	uxtb	r2, r3
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80134c2:	2b01      	cmp	r3, #1
 80134c4:	d101      	bne.n	80134ca <HAL_PCD_EP_ClrStall+0x86>
 80134c6:	2302      	movs	r3, #2
 80134c8:	e00e      	b.n	80134e8 <HAL_PCD_EP_ClrStall+0xa4>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2201      	movs	r2, #1
 80134ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	68f9      	ldr	r1, [r7, #12]
 80134d8:	4618      	mov	r0, r3
 80134da:	f004 f98d 	bl	80177f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2200      	movs	r2, #0
 80134e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80134e6:	2300      	movs	r3, #0
}
 80134e8:	4618      	mov	r0, r3
 80134ea:	3710      	adds	r7, #16
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}

080134f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b084      	sub	sp, #16
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	460b      	mov	r3, r1
 80134fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80134fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013500:	2b00      	cmp	r3, #0
 8013502:	da0c      	bge.n	801351e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013504:	78fb      	ldrb	r3, [r7, #3]
 8013506:	f003 020f 	and.w	r2, r3, #15
 801350a:	4613      	mov	r3, r2
 801350c:	00db      	lsls	r3, r3, #3
 801350e:	4413      	add	r3, r2
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	3338      	adds	r3, #56	; 0x38
 8013514:	687a      	ldr	r2, [r7, #4]
 8013516:	4413      	add	r3, r2
 8013518:	3304      	adds	r3, #4
 801351a:	60fb      	str	r3, [r7, #12]
 801351c:	e00c      	b.n	8013538 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801351e:	78fb      	ldrb	r3, [r7, #3]
 8013520:	f003 020f 	and.w	r2, r3, #15
 8013524:	4613      	mov	r3, r2
 8013526:	00db      	lsls	r3, r3, #3
 8013528:	4413      	add	r3, r2
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8013530:	687a      	ldr	r2, [r7, #4]
 8013532:	4413      	add	r3, r2
 8013534:	3304      	adds	r3, #4
 8013536:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	68f9      	ldr	r1, [r7, #12]
 801353e:	4618      	mov	r0, r3
 8013540:	f003 ffac 	bl	801749c <USB_EPStopXfer>
 8013544:	4603      	mov	r3, r0
 8013546:	72fb      	strb	r3, [r7, #11]

  return ret;
 8013548:	7afb      	ldrb	r3, [r7, #11]
}
 801354a:	4618      	mov	r0, r3
 801354c:	3710      	adds	r7, #16
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}

08013552 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8013552:	b580      	push	{r7, lr}
 8013554:	b08a      	sub	sp, #40	; 0x28
 8013556:	af02      	add	r7, sp, #8
 8013558:	6078      	str	r0, [r7, #4]
 801355a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8013566:	683a      	ldr	r2, [r7, #0]
 8013568:	4613      	mov	r3, r2
 801356a:	00db      	lsls	r3, r3, #3
 801356c:	4413      	add	r3, r2
 801356e:	009b      	lsls	r3, r3, #2
 8013570:	3338      	adds	r3, #56	; 0x38
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	4413      	add	r3, r2
 8013576:	3304      	adds	r3, #4
 8013578:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	6a1a      	ldr	r2, [r3, #32]
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	699b      	ldr	r3, [r3, #24]
 8013582:	429a      	cmp	r2, r3
 8013584:	d901      	bls.n	801358a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8013586:	2301      	movs	r3, #1
 8013588:	e06c      	b.n	8013664 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	699a      	ldr	r2, [r3, #24]
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	6a1b      	ldr	r3, [r3, #32]
 8013592:	1ad3      	subs	r3, r2, r3
 8013594:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	68db      	ldr	r3, [r3, #12]
 801359a:	69fa      	ldr	r2, [r7, #28]
 801359c:	429a      	cmp	r2, r3
 801359e:	d902      	bls.n	80135a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80135a6:	69fb      	ldr	r3, [r7, #28]
 80135a8:	3303      	adds	r3, #3
 80135aa:	089b      	lsrs	r3, r3, #2
 80135ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80135ae:	e02b      	b.n	8013608 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	699a      	ldr	r2, [r3, #24]
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	6a1b      	ldr	r3, [r3, #32]
 80135b8:	1ad3      	subs	r3, r2, r3
 80135ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	68db      	ldr	r3, [r3, #12]
 80135c0:	69fa      	ldr	r2, [r7, #28]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d902      	bls.n	80135cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	68db      	ldr	r3, [r3, #12]
 80135ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80135cc:	69fb      	ldr	r3, [r7, #28]
 80135ce:	3303      	adds	r3, #3
 80135d0:	089b      	lsrs	r3, r3, #2
 80135d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	6919      	ldr	r1, [r3, #16]
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	b2da      	uxtb	r2, r3
 80135dc:	69fb      	ldr	r3, [r7, #28]
 80135de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	9300      	str	r3, [sp, #0]
 80135e8:	4603      	mov	r3, r0
 80135ea:	6978      	ldr	r0, [r7, #20]
 80135ec:	f004 f800 	bl	80175f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	691a      	ldr	r2, [r3, #16]
 80135f4:	69fb      	ldr	r3, [r7, #28]
 80135f6:	441a      	add	r2, r3
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	6a1a      	ldr	r2, [r3, #32]
 8013600:	69fb      	ldr	r3, [r7, #28]
 8013602:	441a      	add	r2, r3
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	015a      	lsls	r2, r3, #5
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	4413      	add	r3, r2
 8013610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013614:	699b      	ldr	r3, [r3, #24]
 8013616:	b29b      	uxth	r3, r3
 8013618:	69ba      	ldr	r2, [r7, #24]
 801361a:	429a      	cmp	r2, r3
 801361c:	d809      	bhi.n	8013632 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	6a1a      	ldr	r2, [r3, #32]
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8013626:	429a      	cmp	r2, r3
 8013628:	d203      	bcs.n	8013632 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	699b      	ldr	r3, [r3, #24]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d1be      	bne.n	80135b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	699a      	ldr	r2, [r3, #24]
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	6a1b      	ldr	r3, [r3, #32]
 801363a:	429a      	cmp	r2, r3
 801363c:	d811      	bhi.n	8013662 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	f003 030f 	and.w	r3, r3, #15
 8013644:	2201      	movs	r2, #1
 8013646:	fa02 f303 	lsl.w	r3, r2, r3
 801364a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	43db      	mvns	r3, r3
 8013658:	6939      	ldr	r1, [r7, #16]
 801365a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801365e:	4013      	ands	r3, r2
 8013660:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8013662:	2300      	movs	r3, #0
}
 8013664:	4618      	mov	r0, r3
 8013666:	3720      	adds	r7, #32
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}

0801366c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b088      	sub	sp, #32
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801367c:	69fb      	ldr	r3, [r7, #28]
 801367e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	333c      	adds	r3, #60	; 0x3c
 8013684:	3304      	adds	r3, #4
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	015a      	lsls	r2, r3, #5
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	4413      	add	r3, r2
 8013692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013696:	689b      	ldr	r3, [r3, #8]
 8013698:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	691b      	ldr	r3, [r3, #16]
 801369e:	2b01      	cmp	r3, #1
 80136a0:	d17b      	bne.n	801379a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	f003 0308 	and.w	r3, r3, #8
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d015      	beq.n	80136d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	4a61      	ldr	r2, [pc, #388]	; (8013834 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80136b0:	4293      	cmp	r3, r2
 80136b2:	f240 80b9 	bls.w	8013828 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80136b6:	693b      	ldr	r3, [r7, #16]
 80136b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80136bc:	2b00      	cmp	r3, #0
 80136be:	f000 80b3 	beq.w	8013828 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	015a      	lsls	r2, r3, #5
 80136c6:	69bb      	ldr	r3, [r7, #24]
 80136c8:	4413      	add	r3, r2
 80136ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136ce:	461a      	mov	r2, r3
 80136d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80136d4:	6093      	str	r3, [r2, #8]
 80136d6:	e0a7      	b.n	8013828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80136d8:	693b      	ldr	r3, [r7, #16]
 80136da:	f003 0320 	and.w	r3, r3, #32
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d009      	beq.n	80136f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	015a      	lsls	r2, r3, #5
 80136e6:	69bb      	ldr	r3, [r7, #24]
 80136e8:	4413      	add	r3, r2
 80136ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136ee:	461a      	mov	r2, r3
 80136f0:	2320      	movs	r3, #32
 80136f2:	6093      	str	r3, [r2, #8]
 80136f4:	e098      	b.n	8013828 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80136f6:	693b      	ldr	r3, [r7, #16]
 80136f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f040 8093 	bne.w	8013828 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	4a4b      	ldr	r2, [pc, #300]	; (8013834 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8013706:	4293      	cmp	r3, r2
 8013708:	d90f      	bls.n	801372a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8013710:	2b00      	cmp	r3, #0
 8013712:	d00a      	beq.n	801372a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	015a      	lsls	r2, r3, #5
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	4413      	add	r3, r2
 801371c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013720:	461a      	mov	r2, r3
 8013722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013726:	6093      	str	r3, [r2, #8]
 8013728:	e07e      	b.n	8013828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 801372a:	683a      	ldr	r2, [r7, #0]
 801372c:	4613      	mov	r3, r2
 801372e:	00db      	lsls	r3, r3, #3
 8013730:	4413      	add	r3, r2
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8013738:	687a      	ldr	r2, [r7, #4]
 801373a:	4413      	add	r3, r2
 801373c:	3304      	adds	r3, #4
 801373e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	69da      	ldr	r2, [r3, #28]
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	0159      	lsls	r1, r3, #5
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	440b      	add	r3, r1
 801374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013750:	691b      	ldr	r3, [r3, #16]
 8013752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013756:	1ad2      	subs	r2, r2, r3
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d114      	bne.n	801378c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	699b      	ldr	r3, [r3, #24]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d109      	bne.n	801377e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6818      	ldr	r0, [r3, #0]
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013774:	461a      	mov	r2, r3
 8013776:	2101      	movs	r1, #1
 8013778:	f004 f9d0 	bl	8017b1c <USB_EP0_OutStart>
 801377c:	e006      	b.n	801378c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	691a      	ldr	r2, [r3, #16]
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	6a1b      	ldr	r3, [r3, #32]
 8013786:	441a      	add	r2, r3
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	b2db      	uxtb	r3, r3
 8013790:	4619      	mov	r1, r3
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f00a f846 	bl	801d824 <HAL_PCD_DataOutStageCallback>
 8013798:	e046      	b.n	8013828 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	4a26      	ldr	r2, [pc, #152]	; (8013838 <PCD_EP_OutXfrComplete_int+0x1cc>)
 801379e:	4293      	cmp	r3, r2
 80137a0:	d124      	bne.n	80137ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80137a2:	693b      	ldr	r3, [r7, #16]
 80137a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d00a      	beq.n	80137c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	015a      	lsls	r2, r3, #5
 80137b0:	69bb      	ldr	r3, [r7, #24]
 80137b2:	4413      	add	r3, r2
 80137b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137b8:	461a      	mov	r2, r3
 80137ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80137be:	6093      	str	r3, [r2, #8]
 80137c0:	e032      	b.n	8013828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80137c2:	693b      	ldr	r3, [r7, #16]
 80137c4:	f003 0320 	and.w	r3, r3, #32
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d008      	beq.n	80137de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	015a      	lsls	r2, r3, #5
 80137d0:	69bb      	ldr	r3, [r7, #24]
 80137d2:	4413      	add	r3, r2
 80137d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137d8:	461a      	mov	r2, r3
 80137da:	2320      	movs	r3, #32
 80137dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	b2db      	uxtb	r3, r3
 80137e2:	4619      	mov	r1, r3
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f00a f81d 	bl	801d824 <HAL_PCD_DataOutStageCallback>
 80137ea:	e01d      	b.n	8013828 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80137ec:	683b      	ldr	r3, [r7, #0]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d114      	bne.n	801381c <PCD_EP_OutXfrComplete_int+0x1b0>
 80137f2:	6879      	ldr	r1, [r7, #4]
 80137f4:	683a      	ldr	r2, [r7, #0]
 80137f6:	4613      	mov	r3, r2
 80137f8:	00db      	lsls	r3, r3, #3
 80137fa:	4413      	add	r3, r2
 80137fc:	009b      	lsls	r3, r3, #2
 80137fe:	440b      	add	r3, r1
 8013800:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d108      	bne.n	801381c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	6818      	ldr	r0, [r3, #0]
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013814:	461a      	mov	r2, r3
 8013816:	2100      	movs	r1, #0
 8013818:	f004 f980 	bl	8017b1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	b2db      	uxtb	r3, r3
 8013820:	4619      	mov	r1, r3
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f009 fffe 	bl	801d824 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8013828:	2300      	movs	r3, #0
}
 801382a:	4618      	mov	r0, r3
 801382c:	3720      	adds	r7, #32
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}
 8013832:	bf00      	nop
 8013834:	4f54300a 	.word	0x4f54300a
 8013838:	4f54310a 	.word	0x4f54310a

0801383c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b086      	sub	sp, #24
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	333c      	adds	r3, #60	; 0x3c
 8013854:	3304      	adds	r3, #4
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	015a      	lsls	r2, r3, #5
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	4413      	add	r3, r2
 8013862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	4a15      	ldr	r2, [pc, #84]	; (80138c4 <PCD_EP_OutSetupPacket_int+0x88>)
 801386e:	4293      	cmp	r3, r2
 8013870:	d90e      	bls.n	8013890 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8013878:	2b00      	cmp	r3, #0
 801387a:	d009      	beq.n	8013890 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	015a      	lsls	r2, r3, #5
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	4413      	add	r3, r2
 8013884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013888:	461a      	mov	r2, r3
 801388a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801388e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f009 ffb5 	bl	801d800 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	4a0a      	ldr	r2, [pc, #40]	; (80138c4 <PCD_EP_OutSetupPacket_int+0x88>)
 801389a:	4293      	cmp	r3, r2
 801389c:	d90c      	bls.n	80138b8 <PCD_EP_OutSetupPacket_int+0x7c>
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	691b      	ldr	r3, [r3, #16]
 80138a2:	2b01      	cmp	r3, #1
 80138a4:	d108      	bne.n	80138b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6818      	ldr	r0, [r3, #0]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80138b0:	461a      	mov	r2, r3
 80138b2:	2101      	movs	r1, #1
 80138b4:	f004 f932 	bl	8017b1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80138b8:	2300      	movs	r3, #0
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	3718      	adds	r7, #24
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	4f54300a 	.word	0x4f54300a

080138c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80138c8:	b480      	push	{r7}
 80138ca:	b085      	sub	sp, #20
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	460b      	mov	r3, r1
 80138d2:	70fb      	strb	r3, [r7, #3]
 80138d4:	4613      	mov	r3, r2
 80138d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80138e0:	78fb      	ldrb	r3, [r7, #3]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d107      	bne.n	80138f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80138e6:	883b      	ldrh	r3, [r7, #0]
 80138e8:	0419      	lsls	r1, r3, #16
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	68ba      	ldr	r2, [r7, #8]
 80138f0:	430a      	orrs	r2, r1
 80138f2:	629a      	str	r2, [r3, #40]	; 0x28
 80138f4:	e028      	b.n	8013948 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138fc:	0c1b      	lsrs	r3, r3, #16
 80138fe:	68ba      	ldr	r2, [r7, #8]
 8013900:	4413      	add	r3, r2
 8013902:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8013904:	2300      	movs	r3, #0
 8013906:	73fb      	strb	r3, [r7, #15]
 8013908:	e00d      	b.n	8013926 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	681a      	ldr	r2, [r3, #0]
 801390e:	7bfb      	ldrb	r3, [r7, #15]
 8013910:	3340      	adds	r3, #64	; 0x40
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	4413      	add	r3, r2
 8013916:	685b      	ldr	r3, [r3, #4]
 8013918:	0c1b      	lsrs	r3, r3, #16
 801391a:	68ba      	ldr	r2, [r7, #8]
 801391c:	4413      	add	r3, r2
 801391e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8013920:	7bfb      	ldrb	r3, [r7, #15]
 8013922:	3301      	adds	r3, #1
 8013924:	73fb      	strb	r3, [r7, #15]
 8013926:	7bfa      	ldrb	r2, [r7, #15]
 8013928:	78fb      	ldrb	r3, [r7, #3]
 801392a:	3b01      	subs	r3, #1
 801392c:	429a      	cmp	r2, r3
 801392e:	d3ec      	bcc.n	801390a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8013930:	883b      	ldrh	r3, [r7, #0]
 8013932:	0418      	lsls	r0, r3, #16
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6819      	ldr	r1, [r3, #0]
 8013938:	78fb      	ldrb	r3, [r7, #3]
 801393a:	3b01      	subs	r3, #1
 801393c:	68ba      	ldr	r2, [r7, #8]
 801393e:	4302      	orrs	r2, r0
 8013940:	3340      	adds	r3, #64	; 0x40
 8013942:	009b      	lsls	r3, r3, #2
 8013944:	440b      	add	r3, r1
 8013946:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8013948:	2300      	movs	r3, #0
}
 801394a:	4618      	mov	r0, r3
 801394c:	3714      	adds	r7, #20
 801394e:	46bd      	mov	sp, r7
 8013950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013954:	4770      	bx	lr

08013956 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8013956:	b480      	push	{r7}
 8013958:	b083      	sub	sp, #12
 801395a:	af00      	add	r7, sp, #0
 801395c:	6078      	str	r0, [r7, #4]
 801395e:	460b      	mov	r3, r1
 8013960:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	887a      	ldrh	r2, [r7, #2]
 8013968:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801396a:	2300      	movs	r3, #0
}
 801396c:	4618      	mov	r0, r3
 801396e:	370c      	adds	r7, #12
 8013970:	46bd      	mov	sp, r7
 8013972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013976:	4770      	bx	lr

08013978 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013978:	b480      	push	{r7}
 801397a:	b083      	sub	sp, #12
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	460b      	mov	r3, r1
 8013982:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8013984:	bf00      	nop
 8013986:	370c      	adds	r7, #12
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr

08013990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b086      	sub	sp, #24
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d101      	bne.n	80139a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801399e:	2301      	movs	r3, #1
 80139a0:	e267      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	f003 0301 	and.w	r3, r3, #1
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d075      	beq.n	8013a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80139ae:	4b88      	ldr	r3, [pc, #544]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 80139b0:	689b      	ldr	r3, [r3, #8]
 80139b2:	f003 030c 	and.w	r3, r3, #12
 80139b6:	2b04      	cmp	r3, #4
 80139b8:	d00c      	beq.n	80139d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80139ba:	4b85      	ldr	r3, [pc, #532]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 80139bc:	689b      	ldr	r3, [r3, #8]
 80139be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80139c2:	2b08      	cmp	r3, #8
 80139c4:	d112      	bne.n	80139ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80139c6:	4b82      	ldr	r3, [pc, #520]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 80139c8:	685b      	ldr	r3, [r3, #4]
 80139ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80139ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80139d2:	d10b      	bne.n	80139ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80139d4:	4b7e      	ldr	r3, [pc, #504]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d05b      	beq.n	8013a98 <HAL_RCC_OscConfig+0x108>
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d157      	bne.n	8013a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80139e8:	2301      	movs	r3, #1
 80139ea:	e242      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	685b      	ldr	r3, [r3, #4]
 80139f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80139f4:	d106      	bne.n	8013a04 <HAL_RCC_OscConfig+0x74>
 80139f6:	4b76      	ldr	r3, [pc, #472]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	4a75      	ldr	r2, [pc, #468]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 80139fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013a00:	6013      	str	r3, [r2, #0]
 8013a02:	e01d      	b.n	8013a40 <HAL_RCC_OscConfig+0xb0>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	685b      	ldr	r3, [r3, #4]
 8013a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013a0c:	d10c      	bne.n	8013a28 <HAL_RCC_OscConfig+0x98>
 8013a0e:	4b70      	ldr	r3, [pc, #448]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	4a6f      	ldr	r2, [pc, #444]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013a18:	6013      	str	r3, [r2, #0]
 8013a1a:	4b6d      	ldr	r3, [pc, #436]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	4a6c      	ldr	r2, [pc, #432]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013a24:	6013      	str	r3, [r2, #0]
 8013a26:	e00b      	b.n	8013a40 <HAL_RCC_OscConfig+0xb0>
 8013a28:	4b69      	ldr	r3, [pc, #420]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	4a68      	ldr	r2, [pc, #416]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013a32:	6013      	str	r3, [r2, #0]
 8013a34:	4b66      	ldr	r3, [pc, #408]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	4a65      	ldr	r2, [pc, #404]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	685b      	ldr	r3, [r3, #4]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d013      	beq.n	8013a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013a48:	f7fb fb66 	bl	800f118 <HAL_GetTick>
 8013a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013a4e:	e008      	b.n	8013a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013a50:	f7fb fb62 	bl	800f118 <HAL_GetTick>
 8013a54:	4602      	mov	r2, r0
 8013a56:	693b      	ldr	r3, [r7, #16]
 8013a58:	1ad3      	subs	r3, r2, r3
 8013a5a:	2b64      	cmp	r3, #100	; 0x64
 8013a5c:	d901      	bls.n	8013a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013a5e:	2303      	movs	r3, #3
 8013a60:	e207      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013a62:	4b5b      	ldr	r3, [pc, #364]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d0f0      	beq.n	8013a50 <HAL_RCC_OscConfig+0xc0>
 8013a6e:	e014      	b.n	8013a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013a70:	f7fb fb52 	bl	800f118 <HAL_GetTick>
 8013a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013a76:	e008      	b.n	8013a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013a78:	f7fb fb4e 	bl	800f118 <HAL_GetTick>
 8013a7c:	4602      	mov	r2, r0
 8013a7e:	693b      	ldr	r3, [r7, #16]
 8013a80:	1ad3      	subs	r3, r2, r3
 8013a82:	2b64      	cmp	r3, #100	; 0x64
 8013a84:	d901      	bls.n	8013a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013a86:	2303      	movs	r3, #3
 8013a88:	e1f3      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013a8a:	4b51      	ldr	r3, [pc, #324]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d1f0      	bne.n	8013a78 <HAL_RCC_OscConfig+0xe8>
 8013a96:	e000      	b.n	8013a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	f003 0302 	and.w	r3, r3, #2
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d063      	beq.n	8013b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013aa6:	4b4a      	ldr	r3, [pc, #296]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013aa8:	689b      	ldr	r3, [r3, #8]
 8013aaa:	f003 030c 	and.w	r3, r3, #12
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d00b      	beq.n	8013aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013ab2:	4b47      	ldr	r3, [pc, #284]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013ab4:	689b      	ldr	r3, [r3, #8]
 8013ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013aba:	2b08      	cmp	r3, #8
 8013abc:	d11c      	bne.n	8013af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013abe:	4b44      	ldr	r3, [pc, #272]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013ac0:	685b      	ldr	r3, [r3, #4]
 8013ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d116      	bne.n	8013af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013aca:	4b41      	ldr	r3, [pc, #260]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	f003 0302 	and.w	r3, r3, #2
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d005      	beq.n	8013ae2 <HAL_RCC_OscConfig+0x152>
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	68db      	ldr	r3, [r3, #12]
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	d001      	beq.n	8013ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	e1c7      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013ae2:	4b3b      	ldr	r3, [pc, #236]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	691b      	ldr	r3, [r3, #16]
 8013aee:	00db      	lsls	r3, r3, #3
 8013af0:	4937      	ldr	r1, [pc, #220]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013af2:	4313      	orrs	r3, r2
 8013af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013af6:	e03a      	b.n	8013b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	68db      	ldr	r3, [r3, #12]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d020      	beq.n	8013b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013b00:	4b34      	ldr	r3, [pc, #208]	; (8013bd4 <HAL_RCC_OscConfig+0x244>)
 8013b02:	2201      	movs	r2, #1
 8013b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013b06:	f7fb fb07 	bl	800f118 <HAL_GetTick>
 8013b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013b0c:	e008      	b.n	8013b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013b0e:	f7fb fb03 	bl	800f118 <HAL_GetTick>
 8013b12:	4602      	mov	r2, r0
 8013b14:	693b      	ldr	r3, [r7, #16]
 8013b16:	1ad3      	subs	r3, r2, r3
 8013b18:	2b02      	cmp	r3, #2
 8013b1a:	d901      	bls.n	8013b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013b1c:	2303      	movs	r3, #3
 8013b1e:	e1a8      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013b20:	4b2b      	ldr	r3, [pc, #172]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	f003 0302 	and.w	r3, r3, #2
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d0f0      	beq.n	8013b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013b2c:	4b28      	ldr	r3, [pc, #160]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	691b      	ldr	r3, [r3, #16]
 8013b38:	00db      	lsls	r3, r3, #3
 8013b3a:	4925      	ldr	r1, [pc, #148]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013b3c:	4313      	orrs	r3, r2
 8013b3e:	600b      	str	r3, [r1, #0]
 8013b40:	e015      	b.n	8013b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013b42:	4b24      	ldr	r3, [pc, #144]	; (8013bd4 <HAL_RCC_OscConfig+0x244>)
 8013b44:	2200      	movs	r2, #0
 8013b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013b48:	f7fb fae6 	bl	800f118 <HAL_GetTick>
 8013b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013b4e:	e008      	b.n	8013b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013b50:	f7fb fae2 	bl	800f118 <HAL_GetTick>
 8013b54:	4602      	mov	r2, r0
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	1ad3      	subs	r3, r2, r3
 8013b5a:	2b02      	cmp	r3, #2
 8013b5c:	d901      	bls.n	8013b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013b5e:	2303      	movs	r3, #3
 8013b60:	e187      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013b62:	4b1b      	ldr	r3, [pc, #108]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	f003 0302 	and.w	r3, r3, #2
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d1f0      	bne.n	8013b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	f003 0308 	and.w	r3, r3, #8
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d036      	beq.n	8013be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	695b      	ldr	r3, [r3, #20]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d016      	beq.n	8013bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013b82:	4b15      	ldr	r3, [pc, #84]	; (8013bd8 <HAL_RCC_OscConfig+0x248>)
 8013b84:	2201      	movs	r2, #1
 8013b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013b88:	f7fb fac6 	bl	800f118 <HAL_GetTick>
 8013b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013b8e:	e008      	b.n	8013ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013b90:	f7fb fac2 	bl	800f118 <HAL_GetTick>
 8013b94:	4602      	mov	r2, r0
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	1ad3      	subs	r3, r2, r3
 8013b9a:	2b02      	cmp	r3, #2
 8013b9c:	d901      	bls.n	8013ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013b9e:	2303      	movs	r3, #3
 8013ba0:	e167      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013ba2:	4b0b      	ldr	r3, [pc, #44]	; (8013bd0 <HAL_RCC_OscConfig+0x240>)
 8013ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ba6:	f003 0302 	and.w	r3, r3, #2
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d0f0      	beq.n	8013b90 <HAL_RCC_OscConfig+0x200>
 8013bae:	e01b      	b.n	8013be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013bb0:	4b09      	ldr	r3, [pc, #36]	; (8013bd8 <HAL_RCC_OscConfig+0x248>)
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013bb6:	f7fb faaf 	bl	800f118 <HAL_GetTick>
 8013bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013bbc:	e00e      	b.n	8013bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013bbe:	f7fb faab 	bl	800f118 <HAL_GetTick>
 8013bc2:	4602      	mov	r2, r0
 8013bc4:	693b      	ldr	r3, [r7, #16]
 8013bc6:	1ad3      	subs	r3, r2, r3
 8013bc8:	2b02      	cmp	r3, #2
 8013bca:	d907      	bls.n	8013bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8013bcc:	2303      	movs	r3, #3
 8013bce:	e150      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
 8013bd0:	40023800 	.word	0x40023800
 8013bd4:	42470000 	.word	0x42470000
 8013bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013bdc:	4b88      	ldr	r3, [pc, #544]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013be0:	f003 0302 	and.w	r3, r3, #2
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d1ea      	bne.n	8013bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	f003 0304 	and.w	r3, r3, #4
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f000 8097 	beq.w	8013d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013bfa:	4b81      	ldr	r3, [pc, #516]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d10f      	bne.n	8013c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013c06:	2300      	movs	r3, #0
 8013c08:	60bb      	str	r3, [r7, #8]
 8013c0a:	4b7d      	ldr	r3, [pc, #500]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c0e:	4a7c      	ldr	r2, [pc, #496]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c14:	6413      	str	r3, [r2, #64]	; 0x40
 8013c16:	4b7a      	ldr	r3, [pc, #488]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c1e:	60bb      	str	r3, [r7, #8]
 8013c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013c22:	2301      	movs	r3, #1
 8013c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013c26:	4b77      	ldr	r3, [pc, #476]	; (8013e04 <HAL_RCC_OscConfig+0x474>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d118      	bne.n	8013c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013c32:	4b74      	ldr	r3, [pc, #464]	; (8013e04 <HAL_RCC_OscConfig+0x474>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	4a73      	ldr	r2, [pc, #460]	; (8013e04 <HAL_RCC_OscConfig+0x474>)
 8013c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013c3e:	f7fb fa6b 	bl	800f118 <HAL_GetTick>
 8013c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013c44:	e008      	b.n	8013c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013c46:	f7fb fa67 	bl	800f118 <HAL_GetTick>
 8013c4a:	4602      	mov	r2, r0
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	1ad3      	subs	r3, r2, r3
 8013c50:	2b02      	cmp	r3, #2
 8013c52:	d901      	bls.n	8013c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8013c54:	2303      	movs	r3, #3
 8013c56:	e10c      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013c58:	4b6a      	ldr	r3, [pc, #424]	; (8013e04 <HAL_RCC_OscConfig+0x474>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d0f0      	beq.n	8013c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	689b      	ldr	r3, [r3, #8]
 8013c68:	2b01      	cmp	r3, #1
 8013c6a:	d106      	bne.n	8013c7a <HAL_RCC_OscConfig+0x2ea>
 8013c6c:	4b64      	ldr	r3, [pc, #400]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c70:	4a63      	ldr	r2, [pc, #396]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013c72:	f043 0301 	orr.w	r3, r3, #1
 8013c76:	6713      	str	r3, [r2, #112]	; 0x70
 8013c78:	e01c      	b.n	8013cb4 <HAL_RCC_OscConfig+0x324>
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	689b      	ldr	r3, [r3, #8]
 8013c7e:	2b05      	cmp	r3, #5
 8013c80:	d10c      	bne.n	8013c9c <HAL_RCC_OscConfig+0x30c>
 8013c82:	4b5f      	ldr	r3, [pc, #380]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c86:	4a5e      	ldr	r2, [pc, #376]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013c88:	f043 0304 	orr.w	r3, r3, #4
 8013c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8013c8e:	4b5c      	ldr	r3, [pc, #368]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c92:	4a5b      	ldr	r2, [pc, #364]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013c94:	f043 0301 	orr.w	r3, r3, #1
 8013c98:	6713      	str	r3, [r2, #112]	; 0x70
 8013c9a:	e00b      	b.n	8013cb4 <HAL_RCC_OscConfig+0x324>
 8013c9c:	4b58      	ldr	r3, [pc, #352]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ca0:	4a57      	ldr	r2, [pc, #348]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013ca2:	f023 0301 	bic.w	r3, r3, #1
 8013ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8013ca8:	4b55      	ldr	r3, [pc, #340]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cac:	4a54      	ldr	r2, [pc, #336]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013cae:	f023 0304 	bic.w	r3, r3, #4
 8013cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	689b      	ldr	r3, [r3, #8]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d015      	beq.n	8013ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013cbc:	f7fb fa2c 	bl	800f118 <HAL_GetTick>
 8013cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013cc2:	e00a      	b.n	8013cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013cc4:	f7fb fa28 	bl	800f118 <HAL_GetTick>
 8013cc8:	4602      	mov	r2, r0
 8013cca:	693b      	ldr	r3, [r7, #16]
 8013ccc:	1ad3      	subs	r3, r2, r3
 8013cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8013cd2:	4293      	cmp	r3, r2
 8013cd4:	d901      	bls.n	8013cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8013cd6:	2303      	movs	r3, #3
 8013cd8:	e0cb      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013cda:	4b49      	ldr	r3, [pc, #292]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cde:	f003 0302 	and.w	r3, r3, #2
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d0ee      	beq.n	8013cc4 <HAL_RCC_OscConfig+0x334>
 8013ce6:	e014      	b.n	8013d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013ce8:	f7fb fa16 	bl	800f118 <HAL_GetTick>
 8013cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013cee:	e00a      	b.n	8013d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013cf0:	f7fb fa12 	bl	800f118 <HAL_GetTick>
 8013cf4:	4602      	mov	r2, r0
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	1ad3      	subs	r3, r2, r3
 8013cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8013cfe:	4293      	cmp	r3, r2
 8013d00:	d901      	bls.n	8013d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8013d02:	2303      	movs	r3, #3
 8013d04:	e0b5      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013d06:	4b3e      	ldr	r3, [pc, #248]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d0a:	f003 0302 	and.w	r3, r3, #2
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d1ee      	bne.n	8013cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013d12:	7dfb      	ldrb	r3, [r7, #23]
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	d105      	bne.n	8013d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013d18:	4b39      	ldr	r3, [pc, #228]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d1c:	4a38      	ldr	r2, [pc, #224]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	699b      	ldr	r3, [r3, #24]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	f000 80a1 	beq.w	8013e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013d2e:	4b34      	ldr	r3, [pc, #208]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013d30:	689b      	ldr	r3, [r3, #8]
 8013d32:	f003 030c 	and.w	r3, r3, #12
 8013d36:	2b08      	cmp	r3, #8
 8013d38:	d05c      	beq.n	8013df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	699b      	ldr	r3, [r3, #24]
 8013d3e:	2b02      	cmp	r3, #2
 8013d40:	d141      	bne.n	8013dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013d42:	4b31      	ldr	r3, [pc, #196]	; (8013e08 <HAL_RCC_OscConfig+0x478>)
 8013d44:	2200      	movs	r2, #0
 8013d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d48:	f7fb f9e6 	bl	800f118 <HAL_GetTick>
 8013d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013d4e:	e008      	b.n	8013d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013d50:	f7fb f9e2 	bl	800f118 <HAL_GetTick>
 8013d54:	4602      	mov	r2, r0
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	1ad3      	subs	r3, r2, r3
 8013d5a:	2b02      	cmp	r3, #2
 8013d5c:	d901      	bls.n	8013d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8013d5e:	2303      	movs	r3, #3
 8013d60:	e087      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013d62:	4b27      	ldr	r3, [pc, #156]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d1f0      	bne.n	8013d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	69da      	ldr	r2, [r3, #28]
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	6a1b      	ldr	r3, [r3, #32]
 8013d76:	431a      	orrs	r2, r3
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d7c:	019b      	lsls	r3, r3, #6
 8013d7e:	431a      	orrs	r2, r3
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d84:	085b      	lsrs	r3, r3, #1
 8013d86:	3b01      	subs	r3, #1
 8013d88:	041b      	lsls	r3, r3, #16
 8013d8a:	431a      	orrs	r2, r3
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d90:	061b      	lsls	r3, r3, #24
 8013d92:	491b      	ldr	r1, [pc, #108]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013d94:	4313      	orrs	r3, r2
 8013d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013d98:	4b1b      	ldr	r3, [pc, #108]	; (8013e08 <HAL_RCC_OscConfig+0x478>)
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d9e:	f7fb f9bb 	bl	800f118 <HAL_GetTick>
 8013da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013da4:	e008      	b.n	8013db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013da6:	f7fb f9b7 	bl	800f118 <HAL_GetTick>
 8013daa:	4602      	mov	r2, r0
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	1ad3      	subs	r3, r2, r3
 8013db0:	2b02      	cmp	r3, #2
 8013db2:	d901      	bls.n	8013db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8013db4:	2303      	movs	r3, #3
 8013db6:	e05c      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013db8:	4b11      	ldr	r3, [pc, #68]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d0f0      	beq.n	8013da6 <HAL_RCC_OscConfig+0x416>
 8013dc4:	e054      	b.n	8013e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013dc6:	4b10      	ldr	r3, [pc, #64]	; (8013e08 <HAL_RCC_OscConfig+0x478>)
 8013dc8:	2200      	movs	r2, #0
 8013dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013dcc:	f7fb f9a4 	bl	800f118 <HAL_GetTick>
 8013dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013dd2:	e008      	b.n	8013de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013dd4:	f7fb f9a0 	bl	800f118 <HAL_GetTick>
 8013dd8:	4602      	mov	r2, r0
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	1ad3      	subs	r3, r2, r3
 8013dde:	2b02      	cmp	r3, #2
 8013de0:	d901      	bls.n	8013de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8013de2:	2303      	movs	r3, #3
 8013de4:	e045      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013de6:	4b06      	ldr	r3, [pc, #24]	; (8013e00 <HAL_RCC_OscConfig+0x470>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d1f0      	bne.n	8013dd4 <HAL_RCC_OscConfig+0x444>
 8013df2:	e03d      	b.n	8013e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	699b      	ldr	r3, [r3, #24]
 8013df8:	2b01      	cmp	r3, #1
 8013dfa:	d107      	bne.n	8013e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8013dfc:	2301      	movs	r3, #1
 8013dfe:	e038      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
 8013e00:	40023800 	.word	0x40023800
 8013e04:	40007000 	.word	0x40007000
 8013e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013e0c:	4b1b      	ldr	r3, [pc, #108]	; (8013e7c <HAL_RCC_OscConfig+0x4ec>)
 8013e0e:	685b      	ldr	r3, [r3, #4]
 8013e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	699b      	ldr	r3, [r3, #24]
 8013e16:	2b01      	cmp	r3, #1
 8013e18:	d028      	beq.n	8013e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d121      	bne.n	8013e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d11a      	bne.n	8013e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013e36:	68fa      	ldr	r2, [r7, #12]
 8013e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013e3c:	4013      	ands	r3, r2
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d111      	bne.n	8013e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e52:	085b      	lsrs	r3, r3, #1
 8013e54:	3b01      	subs	r3, #1
 8013e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d107      	bne.n	8013e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d001      	beq.n	8013e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	e000      	b.n	8013e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8013e70:	2300      	movs	r3, #0
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3718      	adds	r7, #24
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}
 8013e7a:	bf00      	nop
 8013e7c:	40023800 	.word	0x40023800

08013e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b084      	sub	sp, #16
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d101      	bne.n	8013e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013e90:	2301      	movs	r3, #1
 8013e92:	e0cc      	b.n	801402e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013e94:	4b68      	ldr	r3, [pc, #416]	; (8014038 <HAL_RCC_ClockConfig+0x1b8>)
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	f003 0307 	and.w	r3, r3, #7
 8013e9c:	683a      	ldr	r2, [r7, #0]
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d90c      	bls.n	8013ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013ea2:	4b65      	ldr	r3, [pc, #404]	; (8014038 <HAL_RCC_ClockConfig+0x1b8>)
 8013ea4:	683a      	ldr	r2, [r7, #0]
 8013ea6:	b2d2      	uxtb	r2, r2
 8013ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013eaa:	4b63      	ldr	r3, [pc, #396]	; (8014038 <HAL_RCC_ClockConfig+0x1b8>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	f003 0307 	and.w	r3, r3, #7
 8013eb2:	683a      	ldr	r2, [r7, #0]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d001      	beq.n	8013ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013eb8:	2301      	movs	r3, #1
 8013eba:	e0b8      	b.n	801402e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	f003 0302 	and.w	r3, r3, #2
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d020      	beq.n	8013f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	f003 0304 	and.w	r3, r3, #4
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d005      	beq.n	8013ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013ed4:	4b59      	ldr	r3, [pc, #356]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013ed6:	689b      	ldr	r3, [r3, #8]
 8013ed8:	4a58      	ldr	r2, [pc, #352]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	f003 0308 	and.w	r3, r3, #8
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d005      	beq.n	8013ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013eec:	4b53      	ldr	r3, [pc, #332]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013eee:	689b      	ldr	r3, [r3, #8]
 8013ef0:	4a52      	ldr	r2, [pc, #328]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013ef8:	4b50      	ldr	r3, [pc, #320]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013efa:	689b      	ldr	r3, [r3, #8]
 8013efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	689b      	ldr	r3, [r3, #8]
 8013f04:	494d      	ldr	r1, [pc, #308]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013f06:	4313      	orrs	r3, r2
 8013f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	f003 0301 	and.w	r3, r3, #1
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d044      	beq.n	8013fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	2b01      	cmp	r3, #1
 8013f1c:	d107      	bne.n	8013f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013f1e:	4b47      	ldr	r3, [pc, #284]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d119      	bne.n	8013f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	e07f      	b.n	801402e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	685b      	ldr	r3, [r3, #4]
 8013f32:	2b02      	cmp	r3, #2
 8013f34:	d003      	beq.n	8013f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013f3a:	2b03      	cmp	r3, #3
 8013f3c:	d107      	bne.n	8013f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013f3e:	4b3f      	ldr	r3, [pc, #252]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d109      	bne.n	8013f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	e06f      	b.n	801402e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013f4e:	4b3b      	ldr	r3, [pc, #236]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	f003 0302 	and.w	r3, r3, #2
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d101      	bne.n	8013f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013f5a:	2301      	movs	r3, #1
 8013f5c:	e067      	b.n	801402e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013f5e:	4b37      	ldr	r3, [pc, #220]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013f60:	689b      	ldr	r3, [r3, #8]
 8013f62:	f023 0203 	bic.w	r2, r3, #3
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	685b      	ldr	r3, [r3, #4]
 8013f6a:	4934      	ldr	r1, [pc, #208]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013f6c:	4313      	orrs	r3, r2
 8013f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013f70:	f7fb f8d2 	bl	800f118 <HAL_GetTick>
 8013f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013f76:	e00a      	b.n	8013f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013f78:	f7fb f8ce 	bl	800f118 <HAL_GetTick>
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	1ad3      	subs	r3, r2, r3
 8013f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f86:	4293      	cmp	r3, r2
 8013f88:	d901      	bls.n	8013f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013f8a:	2303      	movs	r3, #3
 8013f8c:	e04f      	b.n	801402e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013f8e:	4b2b      	ldr	r3, [pc, #172]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013f90:	689b      	ldr	r3, [r3, #8]
 8013f92:	f003 020c 	and.w	r2, r3, #12
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	685b      	ldr	r3, [r3, #4]
 8013f9a:	009b      	lsls	r3, r3, #2
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	d1eb      	bne.n	8013f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013fa0:	4b25      	ldr	r3, [pc, #148]	; (8014038 <HAL_RCC_ClockConfig+0x1b8>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	f003 0307 	and.w	r3, r3, #7
 8013fa8:	683a      	ldr	r2, [r7, #0]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d20c      	bcs.n	8013fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013fae:	4b22      	ldr	r3, [pc, #136]	; (8014038 <HAL_RCC_ClockConfig+0x1b8>)
 8013fb0:	683a      	ldr	r2, [r7, #0]
 8013fb2:	b2d2      	uxtb	r2, r2
 8013fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013fb6:	4b20      	ldr	r3, [pc, #128]	; (8014038 <HAL_RCC_ClockConfig+0x1b8>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	f003 0307 	and.w	r3, r3, #7
 8013fbe:	683a      	ldr	r2, [r7, #0]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d001      	beq.n	8013fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	e032      	b.n	801402e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	f003 0304 	and.w	r3, r3, #4
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d008      	beq.n	8013fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013fd4:	4b19      	ldr	r3, [pc, #100]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013fd6:	689b      	ldr	r3, [r3, #8]
 8013fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	68db      	ldr	r3, [r3, #12]
 8013fe0:	4916      	ldr	r1, [pc, #88]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013fe2:	4313      	orrs	r3, r2
 8013fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	f003 0308 	and.w	r3, r3, #8
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d009      	beq.n	8014006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013ff2:	4b12      	ldr	r3, [pc, #72]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8013ff4:	689b      	ldr	r3, [r3, #8]
 8013ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	691b      	ldr	r3, [r3, #16]
 8013ffe:	00db      	lsls	r3, r3, #3
 8014000:	490e      	ldr	r1, [pc, #56]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 8014002:	4313      	orrs	r3, r2
 8014004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014006:	f000 f821 	bl	801404c <HAL_RCC_GetSysClockFreq>
 801400a:	4602      	mov	r2, r0
 801400c:	4b0b      	ldr	r3, [pc, #44]	; (801403c <HAL_RCC_ClockConfig+0x1bc>)
 801400e:	689b      	ldr	r3, [r3, #8]
 8014010:	091b      	lsrs	r3, r3, #4
 8014012:	f003 030f 	and.w	r3, r3, #15
 8014016:	490a      	ldr	r1, [pc, #40]	; (8014040 <HAL_RCC_ClockConfig+0x1c0>)
 8014018:	5ccb      	ldrb	r3, [r1, r3]
 801401a:	fa22 f303 	lsr.w	r3, r2, r3
 801401e:	4a09      	ldr	r2, [pc, #36]	; (8014044 <HAL_RCC_ClockConfig+0x1c4>)
 8014020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8014022:	4b09      	ldr	r3, [pc, #36]	; (8014048 <HAL_RCC_ClockConfig+0x1c8>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	4618      	mov	r0, r3
 8014028:	f7fa fd8e 	bl	800eb48 <HAL_InitTick>

  return HAL_OK;
 801402c:	2300      	movs	r3, #0
}
 801402e:	4618      	mov	r0, r3
 8014030:	3710      	adds	r7, #16
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	40023c00 	.word	0x40023c00
 801403c:	40023800 	.word	0x40023800
 8014040:	080223bc 	.word	0x080223bc
 8014044:	20000000 	.word	0x20000000
 8014048:	20000004 	.word	0x20000004

0801404c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801404c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014050:	b090      	sub	sp, #64	; 0x40
 8014052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8014054:	2300      	movs	r3, #0
 8014056:	637b      	str	r3, [r7, #52]	; 0x34
 8014058:	2300      	movs	r3, #0
 801405a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801405c:	2300      	movs	r3, #0
 801405e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8014060:	2300      	movs	r3, #0
 8014062:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014064:	4b59      	ldr	r3, [pc, #356]	; (80141cc <HAL_RCC_GetSysClockFreq+0x180>)
 8014066:	689b      	ldr	r3, [r3, #8]
 8014068:	f003 030c 	and.w	r3, r3, #12
 801406c:	2b08      	cmp	r3, #8
 801406e:	d00d      	beq.n	801408c <HAL_RCC_GetSysClockFreq+0x40>
 8014070:	2b08      	cmp	r3, #8
 8014072:	f200 80a1 	bhi.w	80141b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8014076:	2b00      	cmp	r3, #0
 8014078:	d002      	beq.n	8014080 <HAL_RCC_GetSysClockFreq+0x34>
 801407a:	2b04      	cmp	r3, #4
 801407c:	d003      	beq.n	8014086 <HAL_RCC_GetSysClockFreq+0x3a>
 801407e:	e09b      	b.n	80141b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8014080:	4b53      	ldr	r3, [pc, #332]	; (80141d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8014082:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8014084:	e09b      	b.n	80141be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8014086:	4b53      	ldr	r3, [pc, #332]	; (80141d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8014088:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801408a:	e098      	b.n	80141be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801408c:	4b4f      	ldr	r3, [pc, #316]	; (80141cc <HAL_RCC_GetSysClockFreq+0x180>)
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014094:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014096:	4b4d      	ldr	r3, [pc, #308]	; (80141cc <HAL_RCC_GetSysClockFreq+0x180>)
 8014098:	685b      	ldr	r3, [r3, #4]
 801409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d028      	beq.n	80140f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80140a2:	4b4a      	ldr	r3, [pc, #296]	; (80141cc <HAL_RCC_GetSysClockFreq+0x180>)
 80140a4:	685b      	ldr	r3, [r3, #4]
 80140a6:	099b      	lsrs	r3, r3, #6
 80140a8:	2200      	movs	r2, #0
 80140aa:	623b      	str	r3, [r7, #32]
 80140ac:	627a      	str	r2, [r7, #36]	; 0x24
 80140ae:	6a3b      	ldr	r3, [r7, #32]
 80140b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80140b4:	2100      	movs	r1, #0
 80140b6:	4b47      	ldr	r3, [pc, #284]	; (80141d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80140b8:	fb03 f201 	mul.w	r2, r3, r1
 80140bc:	2300      	movs	r3, #0
 80140be:	fb00 f303 	mul.w	r3, r0, r3
 80140c2:	4413      	add	r3, r2
 80140c4:	4a43      	ldr	r2, [pc, #268]	; (80141d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80140c6:	fba0 1202 	umull	r1, r2, r0, r2
 80140ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80140cc:	460a      	mov	r2, r1
 80140ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80140d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140d2:	4413      	add	r3, r2
 80140d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140d8:	2200      	movs	r2, #0
 80140da:	61bb      	str	r3, [r7, #24]
 80140dc:	61fa      	str	r2, [r7, #28]
 80140de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80140e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80140e6:	f7f4 fdd7 	bl	8008c98 <__aeabi_uldivmod>
 80140ea:	4602      	mov	r2, r0
 80140ec:	460b      	mov	r3, r1
 80140ee:	4613      	mov	r3, r2
 80140f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80140f2:	e053      	b.n	801419c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80140f4:	4b35      	ldr	r3, [pc, #212]	; (80141cc <HAL_RCC_GetSysClockFreq+0x180>)
 80140f6:	685b      	ldr	r3, [r3, #4]
 80140f8:	099b      	lsrs	r3, r3, #6
 80140fa:	2200      	movs	r2, #0
 80140fc:	613b      	str	r3, [r7, #16]
 80140fe:	617a      	str	r2, [r7, #20]
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8014106:	f04f 0b00 	mov.w	fp, #0
 801410a:	4652      	mov	r2, sl
 801410c:	465b      	mov	r3, fp
 801410e:	f04f 0000 	mov.w	r0, #0
 8014112:	f04f 0100 	mov.w	r1, #0
 8014116:	0159      	lsls	r1, r3, #5
 8014118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801411c:	0150      	lsls	r0, r2, #5
 801411e:	4602      	mov	r2, r0
 8014120:	460b      	mov	r3, r1
 8014122:	ebb2 080a 	subs.w	r8, r2, sl
 8014126:	eb63 090b 	sbc.w	r9, r3, fp
 801412a:	f04f 0200 	mov.w	r2, #0
 801412e:	f04f 0300 	mov.w	r3, #0
 8014132:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8014136:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801413a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801413e:	ebb2 0408 	subs.w	r4, r2, r8
 8014142:	eb63 0509 	sbc.w	r5, r3, r9
 8014146:	f04f 0200 	mov.w	r2, #0
 801414a:	f04f 0300 	mov.w	r3, #0
 801414e:	00eb      	lsls	r3, r5, #3
 8014150:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014154:	00e2      	lsls	r2, r4, #3
 8014156:	4614      	mov	r4, r2
 8014158:	461d      	mov	r5, r3
 801415a:	eb14 030a 	adds.w	r3, r4, sl
 801415e:	603b      	str	r3, [r7, #0]
 8014160:	eb45 030b 	adc.w	r3, r5, fp
 8014164:	607b      	str	r3, [r7, #4]
 8014166:	f04f 0200 	mov.w	r2, #0
 801416a:	f04f 0300 	mov.w	r3, #0
 801416e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8014172:	4629      	mov	r1, r5
 8014174:	028b      	lsls	r3, r1, #10
 8014176:	4621      	mov	r1, r4
 8014178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801417c:	4621      	mov	r1, r4
 801417e:	028a      	lsls	r2, r1, #10
 8014180:	4610      	mov	r0, r2
 8014182:	4619      	mov	r1, r3
 8014184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014186:	2200      	movs	r2, #0
 8014188:	60bb      	str	r3, [r7, #8]
 801418a:	60fa      	str	r2, [r7, #12]
 801418c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014190:	f7f4 fd82 	bl	8008c98 <__aeabi_uldivmod>
 8014194:	4602      	mov	r2, r0
 8014196:	460b      	mov	r3, r1
 8014198:	4613      	mov	r3, r2
 801419a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801419c:	4b0b      	ldr	r3, [pc, #44]	; (80141cc <HAL_RCC_GetSysClockFreq+0x180>)
 801419e:	685b      	ldr	r3, [r3, #4]
 80141a0:	0c1b      	lsrs	r3, r3, #16
 80141a2:	f003 0303 	and.w	r3, r3, #3
 80141a6:	3301      	adds	r3, #1
 80141a8:	005b      	lsls	r3, r3, #1
 80141aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80141ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80141ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80141b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80141b6:	e002      	b.n	80141be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80141b8:	4b05      	ldr	r3, [pc, #20]	; (80141d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80141ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80141bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80141be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3740      	adds	r7, #64	; 0x40
 80141c4:	46bd      	mov	sp, r7
 80141c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80141ca:	bf00      	nop
 80141cc:	40023800 	.word	0x40023800
 80141d0:	00f42400 	.word	0x00f42400
 80141d4:	017d7840 	.word	0x017d7840

080141d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80141d8:	b480      	push	{r7}
 80141da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80141dc:	4b03      	ldr	r3, [pc, #12]	; (80141ec <HAL_RCC_GetHCLKFreq+0x14>)
 80141de:	681b      	ldr	r3, [r3, #0]
}
 80141e0:	4618      	mov	r0, r3
 80141e2:	46bd      	mov	sp, r7
 80141e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e8:	4770      	bx	lr
 80141ea:	bf00      	nop
 80141ec:	20000000 	.word	0x20000000

080141f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80141f4:	f7ff fff0 	bl	80141d8 <HAL_RCC_GetHCLKFreq>
 80141f8:	4602      	mov	r2, r0
 80141fa:	4b05      	ldr	r3, [pc, #20]	; (8014210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80141fc:	689b      	ldr	r3, [r3, #8]
 80141fe:	0a9b      	lsrs	r3, r3, #10
 8014200:	f003 0307 	and.w	r3, r3, #7
 8014204:	4903      	ldr	r1, [pc, #12]	; (8014214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014206:	5ccb      	ldrb	r3, [r1, r3]
 8014208:	fa22 f303 	lsr.w	r3, r2, r3
}
 801420c:	4618      	mov	r0, r3
 801420e:	bd80      	pop	{r7, pc}
 8014210:	40023800 	.word	0x40023800
 8014214:	080223cc 	.word	0x080223cc

08014218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801421c:	f7ff ffdc 	bl	80141d8 <HAL_RCC_GetHCLKFreq>
 8014220:	4602      	mov	r2, r0
 8014222:	4b05      	ldr	r3, [pc, #20]	; (8014238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8014224:	689b      	ldr	r3, [r3, #8]
 8014226:	0b5b      	lsrs	r3, r3, #13
 8014228:	f003 0307 	and.w	r3, r3, #7
 801422c:	4903      	ldr	r1, [pc, #12]	; (801423c <HAL_RCC_GetPCLK2Freq+0x24>)
 801422e:	5ccb      	ldrb	r3, [r1, r3]
 8014230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014234:	4618      	mov	r0, r3
 8014236:	bd80      	pop	{r7, pc}
 8014238:	40023800 	.word	0x40023800
 801423c:	080223cc 	.word	0x080223cc

08014240 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014240:	b480      	push	{r7}
 8014242:	b083      	sub	sp, #12
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
 8014248:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	220f      	movs	r2, #15
 801424e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8014250:	4b12      	ldr	r3, [pc, #72]	; (801429c <HAL_RCC_GetClockConfig+0x5c>)
 8014252:	689b      	ldr	r3, [r3, #8]
 8014254:	f003 0203 	and.w	r2, r3, #3
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801425c:	4b0f      	ldr	r3, [pc, #60]	; (801429c <HAL_RCC_GetClockConfig+0x5c>)
 801425e:	689b      	ldr	r3, [r3, #8]
 8014260:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8014268:	4b0c      	ldr	r3, [pc, #48]	; (801429c <HAL_RCC_GetClockConfig+0x5c>)
 801426a:	689b      	ldr	r3, [r3, #8]
 801426c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8014274:	4b09      	ldr	r3, [pc, #36]	; (801429c <HAL_RCC_GetClockConfig+0x5c>)
 8014276:	689b      	ldr	r3, [r3, #8]
 8014278:	08db      	lsrs	r3, r3, #3
 801427a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8014282:	4b07      	ldr	r3, [pc, #28]	; (80142a0 <HAL_RCC_GetClockConfig+0x60>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	f003 0207 	and.w	r2, r3, #7
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	601a      	str	r2, [r3, #0]
}
 801428e:	bf00      	nop
 8014290:	370c      	adds	r7, #12
 8014292:	46bd      	mov	sp, r7
 8014294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014298:	4770      	bx	lr
 801429a:	bf00      	nop
 801429c:	40023800 	.word	0x40023800
 80142a0:	40023c00 	.word	0x40023c00

080142a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b086      	sub	sp, #24
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80142ac:	2300      	movs	r3, #0
 80142ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80142b0:	2300      	movs	r3, #0
 80142b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	f003 0301 	and.w	r3, r3, #1
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d105      	bne.n	80142cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d038      	beq.n	801433e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80142cc:	4b68      	ldr	r3, [pc, #416]	; (8014470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80142ce:	2200      	movs	r2, #0
 80142d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80142d2:	f7fa ff21 	bl	800f118 <HAL_GetTick>
 80142d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80142d8:	e008      	b.n	80142ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80142da:	f7fa ff1d 	bl	800f118 <HAL_GetTick>
 80142de:	4602      	mov	r2, r0
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	1ad3      	subs	r3, r2, r3
 80142e4:	2b02      	cmp	r3, #2
 80142e6:	d901      	bls.n	80142ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80142e8:	2303      	movs	r3, #3
 80142ea:	e0bd      	b.n	8014468 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80142ec:	4b61      	ldr	r3, [pc, #388]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d1f0      	bne.n	80142da <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	685a      	ldr	r2, [r3, #4]
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	689b      	ldr	r3, [r3, #8]
 8014300:	019b      	lsls	r3, r3, #6
 8014302:	431a      	orrs	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	68db      	ldr	r3, [r3, #12]
 8014308:	071b      	lsls	r3, r3, #28
 801430a:	495a      	ldr	r1, [pc, #360]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801430c:	4313      	orrs	r3, r2
 801430e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8014312:	4b57      	ldr	r3, [pc, #348]	; (8014470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8014314:	2201      	movs	r2, #1
 8014316:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8014318:	f7fa fefe 	bl	800f118 <HAL_GetTick>
 801431c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801431e:	e008      	b.n	8014332 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8014320:	f7fa fefa 	bl	800f118 <HAL_GetTick>
 8014324:	4602      	mov	r2, r0
 8014326:	697b      	ldr	r3, [r7, #20]
 8014328:	1ad3      	subs	r3, r2, r3
 801432a:	2b02      	cmp	r3, #2
 801432c:	d901      	bls.n	8014332 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801432e:	2303      	movs	r3, #3
 8014330:	e09a      	b.n	8014468 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8014332:	4b50      	ldr	r3, [pc, #320]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801433a:	2b00      	cmp	r3, #0
 801433c:	d0f0      	beq.n	8014320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	f003 0302 	and.w	r3, r3, #2
 8014346:	2b00      	cmp	r3, #0
 8014348:	f000 8083 	beq.w	8014452 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801434c:	2300      	movs	r3, #0
 801434e:	60fb      	str	r3, [r7, #12]
 8014350:	4b48      	ldr	r3, [pc, #288]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8014352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014354:	4a47      	ldr	r2, [pc, #284]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8014356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801435a:	6413      	str	r3, [r2, #64]	; 0x40
 801435c:	4b45      	ldr	r3, [pc, #276]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014364:	60fb      	str	r3, [r7, #12]
 8014366:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8014368:	4b43      	ldr	r3, [pc, #268]	; (8014478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	4a42      	ldr	r2, [pc, #264]	; (8014478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801436e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014372:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014374:	f7fa fed0 	bl	800f118 <HAL_GetTick>
 8014378:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801437a:	e008      	b.n	801438e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801437c:	f7fa fecc 	bl	800f118 <HAL_GetTick>
 8014380:	4602      	mov	r2, r0
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	1ad3      	subs	r3, r2, r3
 8014386:	2b02      	cmp	r3, #2
 8014388:	d901      	bls.n	801438e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 801438a:	2303      	movs	r3, #3
 801438c:	e06c      	b.n	8014468 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801438e:	4b3a      	ldr	r3, [pc, #232]	; (8014478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014396:	2b00      	cmp	r3, #0
 8014398:	d0f0      	beq.n	801437c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801439a:	4b36      	ldr	r3, [pc, #216]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80143a2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d02f      	beq.n	801440a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	691b      	ldr	r3, [r3, #16]
 80143ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80143b2:	693a      	ldr	r2, [r7, #16]
 80143b4:	429a      	cmp	r2, r3
 80143b6:	d028      	beq.n	801440a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80143b8:	4b2e      	ldr	r3, [pc, #184]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80143ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80143c0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80143c2:	4b2e      	ldr	r3, [pc, #184]	; (801447c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80143c4:	2201      	movs	r2, #1
 80143c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80143c8:	4b2c      	ldr	r3, [pc, #176]	; (801447c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80143ca:	2200      	movs	r2, #0
 80143cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80143ce:	4a29      	ldr	r2, [pc, #164]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80143d4:	4b27      	ldr	r3, [pc, #156]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80143d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143d8:	f003 0301 	and.w	r3, r3, #1
 80143dc:	2b01      	cmp	r3, #1
 80143de:	d114      	bne.n	801440a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80143e0:	f7fa fe9a 	bl	800f118 <HAL_GetTick>
 80143e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80143e6:	e00a      	b.n	80143fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80143e8:	f7fa fe96 	bl	800f118 <HAL_GetTick>
 80143ec:	4602      	mov	r2, r0
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	1ad3      	subs	r3, r2, r3
 80143f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80143f6:	4293      	cmp	r3, r2
 80143f8:	d901      	bls.n	80143fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80143fa:	2303      	movs	r3, #3
 80143fc:	e034      	b.n	8014468 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80143fe:	4b1d      	ldr	r3, [pc, #116]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8014400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014402:	f003 0302 	and.w	r3, r3, #2
 8014406:	2b00      	cmp	r3, #0
 8014408:	d0ee      	beq.n	80143e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	691b      	ldr	r3, [r3, #16]
 801440e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014416:	d10d      	bne.n	8014434 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8014418:	4b16      	ldr	r3, [pc, #88]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801441a:	689b      	ldr	r3, [r3, #8]
 801441c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	691b      	ldr	r3, [r3, #16]
 8014424:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801442c:	4911      	ldr	r1, [pc, #68]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801442e:	4313      	orrs	r3, r2
 8014430:	608b      	str	r3, [r1, #8]
 8014432:	e005      	b.n	8014440 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8014434:	4b0f      	ldr	r3, [pc, #60]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8014436:	689b      	ldr	r3, [r3, #8]
 8014438:	4a0e      	ldr	r2, [pc, #56]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801443a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801443e:	6093      	str	r3, [r2, #8]
 8014440:	4b0c      	ldr	r3, [pc, #48]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8014442:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	691b      	ldr	r3, [r3, #16]
 8014448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801444c:	4909      	ldr	r1, [pc, #36]	; (8014474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801444e:	4313      	orrs	r3, r2
 8014450:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	f003 0308 	and.w	r3, r3, #8
 801445a:	2b00      	cmp	r3, #0
 801445c:	d003      	beq.n	8014466 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	7d1a      	ldrb	r2, [r3, #20]
 8014462:	4b07      	ldr	r3, [pc, #28]	; (8014480 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8014464:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8014466:	2300      	movs	r3, #0
}
 8014468:	4618      	mov	r0, r3
 801446a:	3718      	adds	r7, #24
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	42470068 	.word	0x42470068
 8014474:	40023800 	.word	0x40023800
 8014478:	40007000 	.word	0x40007000
 801447c:	42470e40 	.word	0x42470e40
 8014480:	424711e0 	.word	0x424711e0

08014484 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b084      	sub	sp, #16
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801448c:	2301      	movs	r3, #1
 801448e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d101      	bne.n	801449a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8014496:	2301      	movs	r3, #1
 8014498:	e066      	b.n	8014568 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	7f5b      	ldrb	r3, [r3, #29]
 801449e:	b2db      	uxtb	r3, r3
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d105      	bne.n	80144b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2200      	movs	r2, #0
 80144a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f7fa f9b8 	bl	800e820 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2202      	movs	r2, #2
 80144b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	22ca      	movs	r2, #202	; 0xca
 80144bc:	625a      	str	r2, [r3, #36]	; 0x24
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	2253      	movs	r2, #83	; 0x53
 80144c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f000 f87a 	bl	80145c0 <RTC_EnterInitMode>
 80144cc:	4603      	mov	r3, r0
 80144ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80144d0:	7bfb      	ldrb	r3, [r7, #15]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d12c      	bne.n	8014530 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	689b      	ldr	r3, [r3, #8]
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	6812      	ldr	r2, [r2, #0]
 80144e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80144e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80144e8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	6899      	ldr	r1, [r3, #8]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	685a      	ldr	r2, [r3, #4]
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	691b      	ldr	r3, [r3, #16]
 80144f8:	431a      	orrs	r2, r3
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	695b      	ldr	r3, [r3, #20]
 80144fe:	431a      	orrs	r2, r3
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	430a      	orrs	r2, r1
 8014506:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	687a      	ldr	r2, [r7, #4]
 801450e:	68d2      	ldr	r2, [r2, #12]
 8014510:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	6919      	ldr	r1, [r3, #16]
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	689b      	ldr	r3, [r3, #8]
 801451c:	041a      	lsls	r2, r3, #16
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	430a      	orrs	r2, r1
 8014524:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f000 f881 	bl	801462e <RTC_ExitInitMode>
 801452c:	4603      	mov	r3, r0
 801452e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8014530:	7bfb      	ldrb	r3, [r7, #15]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d113      	bne.n	801455e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014544:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	699a      	ldr	r2, [r3, #24]
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	430a      	orrs	r2, r1
 8014556:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2201      	movs	r2, #1
 801455c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	22ff      	movs	r2, #255	; 0xff
 8014564:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8014566:	7bfb      	ldrb	r3, [r7, #15]
}
 8014568:	4618      	mov	r0, r3
 801456a:	3710      	adds	r7, #16
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}

08014570 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014578:	2300      	movs	r3, #0
 801457a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	68da      	ldr	r2, [r3, #12]
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801458a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801458c:	f7fa fdc4 	bl	800f118 <HAL_GetTick>
 8014590:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014592:	e009      	b.n	80145a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014594:	f7fa fdc0 	bl	800f118 <HAL_GetTick>
 8014598:	4602      	mov	r2, r0
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	1ad3      	subs	r3, r2, r3
 801459e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80145a2:	d901      	bls.n	80145a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80145a4:	2303      	movs	r3, #3
 80145a6:	e007      	b.n	80145b8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	68db      	ldr	r3, [r3, #12]
 80145ae:	f003 0320 	and.w	r3, r3, #32
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d0ee      	beq.n	8014594 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80145b6:	2300      	movs	r3, #0
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	3710      	adds	r7, #16
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}

080145c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b084      	sub	sp, #16
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80145c8:	2300      	movs	r3, #0
 80145ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80145cc:	2300      	movs	r3, #0
 80145ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	68db      	ldr	r3, [r3, #12]
 80145d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d122      	bne.n	8014624 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	68da      	ldr	r2, [r3, #12]
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80145ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80145ee:	f7fa fd93 	bl	800f118 <HAL_GetTick>
 80145f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80145f4:	e00c      	b.n	8014610 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80145f6:	f7fa fd8f 	bl	800f118 <HAL_GetTick>
 80145fa:	4602      	mov	r2, r0
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	1ad3      	subs	r3, r2, r3
 8014600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014604:	d904      	bls.n	8014610 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2204      	movs	r2, #4
 801460a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 801460c:	2301      	movs	r3, #1
 801460e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	68db      	ldr	r3, [r3, #12]
 8014616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801461a:	2b00      	cmp	r3, #0
 801461c:	d102      	bne.n	8014624 <RTC_EnterInitMode+0x64>
 801461e:	7bfb      	ldrb	r3, [r7, #15]
 8014620:	2b01      	cmp	r3, #1
 8014622:	d1e8      	bne.n	80145f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8014624:	7bfb      	ldrb	r3, [r7, #15]
}
 8014626:	4618      	mov	r0, r3
 8014628:	3710      	adds	r7, #16
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}

0801462e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801462e:	b580      	push	{r7, lr}
 8014630:	b084      	sub	sp, #16
 8014632:	af00      	add	r7, sp, #0
 8014634:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014636:	2300      	movs	r3, #0
 8014638:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	68da      	ldr	r2, [r3, #12]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014648:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	689b      	ldr	r3, [r3, #8]
 8014650:	f003 0320 	and.w	r3, r3, #32
 8014654:	2b00      	cmp	r3, #0
 8014656:	d10a      	bne.n	801466e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f7ff ff89 	bl	8014570 <HAL_RTC_WaitForSynchro>
 801465e:	4603      	mov	r3, r0
 8014660:	2b00      	cmp	r3, #0
 8014662:	d004      	beq.n	801466e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2204      	movs	r2, #4
 8014668:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 801466a:	2301      	movs	r3, #1
 801466c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 801466e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014670:	4618      	mov	r0, r3
 8014672:	3710      	adds	r7, #16
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}

08014678 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d101      	bne.n	801468a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014686:	2301      	movs	r3, #1
 8014688:	e07b      	b.n	8014782 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801468e:	2b00      	cmp	r3, #0
 8014690:	d108      	bne.n	80146a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801469a:	d009      	beq.n	80146b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2200      	movs	r2, #0
 80146a0:	61da      	str	r2, [r3, #28]
 80146a2:	e005      	b.n	80146b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2200      	movs	r2, #0
 80146a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	2200      	movs	r2, #0
 80146ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2200      	movs	r2, #0
 80146b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80146bc:	b2db      	uxtb	r3, r3
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d106      	bne.n	80146d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	2200      	movs	r2, #0
 80146c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f7fa f8d4 	bl	800e878 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2202      	movs	r2, #2
 80146d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	681a      	ldr	r2, [r3, #0]
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80146e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	685b      	ldr	r3, [r3, #4]
 80146ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	689b      	ldr	r3, [r3, #8]
 80146f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80146f8:	431a      	orrs	r2, r3
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	68db      	ldr	r3, [r3, #12]
 80146fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014702:	431a      	orrs	r2, r3
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	691b      	ldr	r3, [r3, #16]
 8014708:	f003 0302 	and.w	r3, r3, #2
 801470c:	431a      	orrs	r2, r3
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	695b      	ldr	r3, [r3, #20]
 8014712:	f003 0301 	and.w	r3, r3, #1
 8014716:	431a      	orrs	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	699b      	ldr	r3, [r3, #24]
 801471c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014720:	431a      	orrs	r2, r3
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	69db      	ldr	r3, [r3, #28]
 8014726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801472a:	431a      	orrs	r2, r3
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	6a1b      	ldr	r3, [r3, #32]
 8014730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014734:	ea42 0103 	orr.w	r1, r2, r3
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801473c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	430a      	orrs	r2, r1
 8014746:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	699b      	ldr	r3, [r3, #24]
 801474c:	0c1b      	lsrs	r3, r3, #16
 801474e:	f003 0104 	and.w	r1, r3, #4
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014756:	f003 0210 	and.w	r2, r3, #16
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	430a      	orrs	r2, r1
 8014760:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	69da      	ldr	r2, [r3, #28]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014770:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2200      	movs	r2, #0
 8014776:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2201      	movs	r2, #1
 801477c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8014780:	2300      	movs	r3, #0
}
 8014782:	4618      	mov	r0, r3
 8014784:	3708      	adds	r7, #8
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}

0801478a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801478a:	b580      	push	{r7, lr}
 801478c:	b08c      	sub	sp, #48	; 0x30
 801478e:	af00      	add	r7, sp, #0
 8014790:	60f8      	str	r0, [r7, #12]
 8014792:	60b9      	str	r1, [r7, #8]
 8014794:	607a      	str	r2, [r7, #4]
 8014796:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8014798:	2301      	movs	r3, #1
 801479a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801479c:	2300      	movs	r3, #0
 801479e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80147a8:	2b01      	cmp	r3, #1
 80147aa:	d101      	bne.n	80147b0 <HAL_SPI_TransmitReceive+0x26>
 80147ac:	2302      	movs	r3, #2
 80147ae:	e18a      	b.n	8014ac6 <HAL_SPI_TransmitReceive+0x33c>
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	2201      	movs	r2, #1
 80147b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80147b8:	f7fa fcae 	bl	800f118 <HAL_GetTick>
 80147bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80147c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	685b      	ldr	r3, [r3, #4]
 80147cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80147ce:	887b      	ldrh	r3, [r7, #2]
 80147d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80147d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147d6:	2b01      	cmp	r3, #1
 80147d8:	d00f      	beq.n	80147fa <HAL_SPI_TransmitReceive+0x70>
 80147da:	69fb      	ldr	r3, [r7, #28]
 80147dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80147e0:	d107      	bne.n	80147f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	689b      	ldr	r3, [r3, #8]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d103      	bne.n	80147f2 <HAL_SPI_TransmitReceive+0x68>
 80147ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147ee:	2b04      	cmp	r3, #4
 80147f0:	d003      	beq.n	80147fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80147f2:	2302      	movs	r3, #2
 80147f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80147f8:	e15b      	b.n	8014ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d005      	beq.n	801480c <HAL_SPI_TransmitReceive+0x82>
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d002      	beq.n	801480c <HAL_SPI_TransmitReceive+0x82>
 8014806:	887b      	ldrh	r3, [r7, #2]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d103      	bne.n	8014814 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801480c:	2301      	movs	r3, #1
 801480e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8014812:	e14e      	b.n	8014ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801481a:	b2db      	uxtb	r3, r3
 801481c:	2b04      	cmp	r3, #4
 801481e:	d003      	beq.n	8014828 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2205      	movs	r2, #5
 8014824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	2200      	movs	r2, #0
 801482c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	687a      	ldr	r2, [r7, #4]
 8014832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	887a      	ldrh	r2, [r7, #2]
 8014838:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	887a      	ldrh	r2, [r7, #2]
 801483e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	68ba      	ldr	r2, [r7, #8]
 8014844:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	887a      	ldrh	r2, [r7, #2]
 801484a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	887a      	ldrh	r2, [r7, #2]
 8014850:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	2200      	movs	r2, #0
 8014856:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	2200      	movs	r2, #0
 801485c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014868:	2b40      	cmp	r3, #64	; 0x40
 801486a:	d007      	beq.n	801487c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	681a      	ldr	r2, [r3, #0]
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801487a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	68db      	ldr	r3, [r3, #12]
 8014880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014884:	d178      	bne.n	8014978 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	685b      	ldr	r3, [r3, #4]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d002      	beq.n	8014894 <HAL_SPI_TransmitReceive+0x10a>
 801488e:	8b7b      	ldrh	r3, [r7, #26]
 8014890:	2b01      	cmp	r3, #1
 8014892:	d166      	bne.n	8014962 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014898:	881a      	ldrh	r2, [r3, #0]
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148a4:	1c9a      	adds	r2, r3, #2
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	3b01      	subs	r3, #1
 80148b2:	b29a      	uxth	r2, r3
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80148b8:	e053      	b.n	8014962 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	689b      	ldr	r3, [r3, #8]
 80148c0:	f003 0302 	and.w	r3, r3, #2
 80148c4:	2b02      	cmp	r3, #2
 80148c6:	d11b      	bne.n	8014900 <HAL_SPI_TransmitReceive+0x176>
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80148cc:	b29b      	uxth	r3, r3
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d016      	beq.n	8014900 <HAL_SPI_TransmitReceive+0x176>
 80148d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148d4:	2b01      	cmp	r3, #1
 80148d6:	d113      	bne.n	8014900 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148dc:	881a      	ldrh	r2, [r3, #0]
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148e8:	1c9a      	adds	r2, r3, #2
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80148f2:	b29b      	uxth	r3, r3
 80148f4:	3b01      	subs	r3, #1
 80148f6:	b29a      	uxth	r2, r3
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80148fc:	2300      	movs	r3, #0
 80148fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	689b      	ldr	r3, [r3, #8]
 8014906:	f003 0301 	and.w	r3, r3, #1
 801490a:	2b01      	cmp	r3, #1
 801490c:	d119      	bne.n	8014942 <HAL_SPI_TransmitReceive+0x1b8>
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014912:	b29b      	uxth	r3, r3
 8014914:	2b00      	cmp	r3, #0
 8014916:	d014      	beq.n	8014942 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	68da      	ldr	r2, [r3, #12]
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014922:	b292      	uxth	r2, r2
 8014924:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801492a:	1c9a      	adds	r2, r3, #2
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014934:	b29b      	uxth	r3, r3
 8014936:	3b01      	subs	r3, #1
 8014938:	b29a      	uxth	r2, r3
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801493e:	2301      	movs	r3, #1
 8014940:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8014942:	f7fa fbe9 	bl	800f118 <HAL_GetTick>
 8014946:	4602      	mov	r2, r0
 8014948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801494a:	1ad3      	subs	r3, r2, r3
 801494c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801494e:	429a      	cmp	r2, r3
 8014950:	d807      	bhi.n	8014962 <HAL_SPI_TransmitReceive+0x1d8>
 8014952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014958:	d003      	beq.n	8014962 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801495a:	2303      	movs	r3, #3
 801495c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8014960:	e0a7      	b.n	8014ab2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014966:	b29b      	uxth	r3, r3
 8014968:	2b00      	cmp	r3, #0
 801496a:	d1a6      	bne.n	80148ba <HAL_SPI_TransmitReceive+0x130>
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014970:	b29b      	uxth	r3, r3
 8014972:	2b00      	cmp	r3, #0
 8014974:	d1a1      	bne.n	80148ba <HAL_SPI_TransmitReceive+0x130>
 8014976:	e07c      	b.n	8014a72 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d002      	beq.n	8014986 <HAL_SPI_TransmitReceive+0x1fc>
 8014980:	8b7b      	ldrh	r3, [r7, #26]
 8014982:	2b01      	cmp	r3, #1
 8014984:	d16b      	bne.n	8014a5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	330c      	adds	r3, #12
 8014990:	7812      	ldrb	r2, [r2, #0]
 8014992:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014998:	1c5a      	adds	r2, r3, #1
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80149a2:	b29b      	uxth	r3, r3
 80149a4:	3b01      	subs	r3, #1
 80149a6:	b29a      	uxth	r2, r3
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80149ac:	e057      	b.n	8014a5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	689b      	ldr	r3, [r3, #8]
 80149b4:	f003 0302 	and.w	r3, r3, #2
 80149b8:	2b02      	cmp	r3, #2
 80149ba:	d11c      	bne.n	80149f6 <HAL_SPI_TransmitReceive+0x26c>
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d017      	beq.n	80149f6 <HAL_SPI_TransmitReceive+0x26c>
 80149c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c8:	2b01      	cmp	r3, #1
 80149ca:	d114      	bne.n	80149f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	330c      	adds	r3, #12
 80149d6:	7812      	ldrb	r2, [r2, #0]
 80149d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149de:	1c5a      	adds	r2, r3, #1
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	3b01      	subs	r3, #1
 80149ec:	b29a      	uxth	r2, r3
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80149f2:	2300      	movs	r3, #0
 80149f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	689b      	ldr	r3, [r3, #8]
 80149fc:	f003 0301 	and.w	r3, r3, #1
 8014a00:	2b01      	cmp	r3, #1
 8014a02:	d119      	bne.n	8014a38 <HAL_SPI_TransmitReceive+0x2ae>
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d014      	beq.n	8014a38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	68da      	ldr	r2, [r3, #12]
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a18:	b2d2      	uxtb	r2, r2
 8014a1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a20:	1c5a      	adds	r2, r3, #1
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014a2a:	b29b      	uxth	r3, r3
 8014a2c:	3b01      	subs	r3, #1
 8014a2e:	b29a      	uxth	r2, r3
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014a34:	2301      	movs	r3, #1
 8014a36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014a38:	f7fa fb6e 	bl	800f118 <HAL_GetTick>
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a40:	1ad3      	subs	r3, r2, r3
 8014a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a44:	429a      	cmp	r2, r3
 8014a46:	d803      	bhi.n	8014a50 <HAL_SPI_TransmitReceive+0x2c6>
 8014a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a4e:	d102      	bne.n	8014a56 <HAL_SPI_TransmitReceive+0x2cc>
 8014a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d103      	bne.n	8014a5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8014a56:	2303      	movs	r3, #3
 8014a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8014a5c:	e029      	b.n	8014ab2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014a62:	b29b      	uxth	r3, r3
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d1a2      	bne.n	80149ae <HAL_SPI_TransmitReceive+0x224>
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014a6c:	b29b      	uxth	r3, r3
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d19d      	bne.n	80149ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a76:	68f8      	ldr	r0, [r7, #12]
 8014a78:	f000 fc3c 	bl	80152f4 <SPI_EndRxTxTransaction>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d006      	beq.n	8014a90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8014a82:	2301      	movs	r3, #1
 8014a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	2220      	movs	r2, #32
 8014a8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8014a8e:	e010      	b.n	8014ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	689b      	ldr	r3, [r3, #8]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d10b      	bne.n	8014ab0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014a98:	2300      	movs	r3, #0
 8014a9a:	617b      	str	r3, [r7, #20]
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	68db      	ldr	r3, [r3, #12]
 8014aa2:	617b      	str	r3, [r7, #20]
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	689b      	ldr	r3, [r3, #8]
 8014aaa:	617b      	str	r3, [r7, #20]
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	e000      	b.n	8014ab2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8014ab0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	2201      	movs	r2, #1
 8014ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	2200      	movs	r2, #0
 8014abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3730      	adds	r7, #48	; 0x30
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
	...

08014ad0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b086      	sub	sp, #24
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	607a      	str	r2, [r7, #4]
 8014adc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d101      	bne.n	8014af0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8014aec:	2302      	movs	r3, #2
 8014aee:	e0e3      	b.n	8014cb8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	2201      	movs	r2, #1
 8014af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014afe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8014b06:	7dbb      	ldrb	r3, [r7, #22]
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d00d      	beq.n	8014b28 <HAL_SPI_TransmitReceive_DMA+0x58>
 8014b0c:	693b      	ldr	r3, [r7, #16]
 8014b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014b12:	d106      	bne.n	8014b22 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	689b      	ldr	r3, [r3, #8]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d102      	bne.n	8014b22 <HAL_SPI_TransmitReceive_DMA+0x52>
 8014b1c:	7dbb      	ldrb	r3, [r7, #22]
 8014b1e:	2b04      	cmp	r3, #4
 8014b20:	d002      	beq.n	8014b28 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8014b22:	2302      	movs	r3, #2
 8014b24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8014b26:	e0c2      	b.n	8014cae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d005      	beq.n	8014b3a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d002      	beq.n	8014b3a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8014b34:	887b      	ldrh	r3, [r7, #2]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d102      	bne.n	8014b40 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8014b3e:	e0b6      	b.n	8014cae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014b46:	b2db      	uxtb	r3, r3
 8014b48:	2b04      	cmp	r3, #4
 8014b4a:	d003      	beq.n	8014b54 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	2205      	movs	r2, #5
 8014b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	2200      	movs	r2, #0
 8014b58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	68ba      	ldr	r2, [r7, #8]
 8014b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	887a      	ldrh	r2, [r7, #2]
 8014b64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	887a      	ldrh	r2, [r7, #2]
 8014b6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	687a      	ldr	r2, [r7, #4]
 8014b70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	887a      	ldrh	r2, [r7, #2]
 8014b76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	887a      	ldrh	r2, [r7, #2]
 8014b7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2200      	movs	r2, #0
 8014b82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	2200      	movs	r2, #0
 8014b88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014b90:	b2db      	uxtb	r3, r3
 8014b92:	2b04      	cmp	r3, #4
 8014b94:	d108      	bne.n	8014ba8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b9a:	4a49      	ldr	r2, [pc, #292]	; (8014cc0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8014b9c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ba2:	4a48      	ldr	r2, [pc, #288]	; (8014cc4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8014ba4:	63da      	str	r2, [r3, #60]	; 0x3c
 8014ba6:	e007      	b.n	8014bb8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014bac:	4a46      	ldr	r2, [pc, #280]	; (8014cc8 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8014bae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014bb4:	4a45      	ldr	r2, [pc, #276]	; (8014ccc <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8014bb6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014bbc:	4a44      	ldr	r2, [pc, #272]	; (8014cd0 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8014bbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	330c      	adds	r3, #12
 8014bd2:	4619      	mov	r1, r3
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bd8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014bde:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8014be0:	f7fa fc5a 	bl	800f498 <HAL_DMA_Start_IT>
 8014be4:	4603      	mov	r3, r0
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d00c      	beq.n	8014c04 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bee:	f043 0210 	orr.w	r2, r3, #16
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8014bf6:	2301      	movs	r3, #1
 8014bf8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	2201      	movs	r2, #1
 8014bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8014c02:	e054      	b.n	8014cae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	685a      	ldr	r2, [r3, #4]
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	f042 0201 	orr.w	r2, r2, #1
 8014c12:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c18:	2200      	movs	r2, #0
 8014c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c20:	2200      	movs	r2, #0
 8014c22:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c28:	2200      	movs	r2, #0
 8014c2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c30:	2200      	movs	r2, #0
 8014c32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c3c:	4619      	mov	r1, r3
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	330c      	adds	r3, #12
 8014c44:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014c4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8014c4c:	f7fa fc24 	bl	800f498 <HAL_DMA_Start_IT>
 8014c50:	4603      	mov	r3, r0
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d00c      	beq.n	8014c70 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c5a:	f043 0210 	orr.w	r2, r3, #16
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8014c62:	2301      	movs	r3, #1
 8014c64:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2201      	movs	r2, #1
 8014c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8014c6e:	e01e      	b.n	8014cae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c7a:	2b40      	cmp	r3, #64	; 0x40
 8014c7c:	d007      	beq.n	8014c8e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	681a      	ldr	r2, [r3, #0]
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c8c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	685a      	ldr	r2, [r3, #4]
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	f042 0220 	orr.w	r2, r2, #32
 8014c9c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	685a      	ldr	r2, [r3, #4]
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	f042 0202 	orr.w	r2, r2, #2
 8014cac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3718      	adds	r7, #24
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}
 8014cc0:	08015079 	.word	0x08015079
 8014cc4:	08014f41 	.word	0x08014f41
 8014cc8:	08015095 	.word	0x08015095
 8014ccc:	08014fe9 	.word	0x08014fe9
 8014cd0:	080150b1 	.word	0x080150b1

08014cd4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b088      	sub	sp, #32
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	689b      	ldr	r3, [r3, #8]
 8014cea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014cec:	69bb      	ldr	r3, [r7, #24]
 8014cee:	099b      	lsrs	r3, r3, #6
 8014cf0:	f003 0301 	and.w	r3, r3, #1
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d10f      	bne.n	8014d18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014cf8:	69bb      	ldr	r3, [r7, #24]
 8014cfa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d00a      	beq.n	8014d18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014d02:	69fb      	ldr	r3, [r7, #28]
 8014d04:	099b      	lsrs	r3, r3, #6
 8014d06:	f003 0301 	and.w	r3, r3, #1
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d004      	beq.n	8014d18 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d12:	6878      	ldr	r0, [r7, #4]
 8014d14:	4798      	blx	r3
    return;
 8014d16:	e0d7      	b.n	8014ec8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8014d18:	69bb      	ldr	r3, [r7, #24]
 8014d1a:	085b      	lsrs	r3, r3, #1
 8014d1c:	f003 0301 	and.w	r3, r3, #1
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d00a      	beq.n	8014d3a <HAL_SPI_IRQHandler+0x66>
 8014d24:	69fb      	ldr	r3, [r7, #28]
 8014d26:	09db      	lsrs	r3, r3, #7
 8014d28:	f003 0301 	and.w	r3, r3, #1
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d004      	beq.n	8014d3a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	4798      	blx	r3
    return;
 8014d38:	e0c6      	b.n	8014ec8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014d3a:	69bb      	ldr	r3, [r7, #24]
 8014d3c:	095b      	lsrs	r3, r3, #5
 8014d3e:	f003 0301 	and.w	r3, r3, #1
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d10c      	bne.n	8014d60 <HAL_SPI_IRQHandler+0x8c>
 8014d46:	69bb      	ldr	r3, [r7, #24]
 8014d48:	099b      	lsrs	r3, r3, #6
 8014d4a:	f003 0301 	and.w	r3, r3, #1
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d106      	bne.n	8014d60 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8014d52:	69bb      	ldr	r3, [r7, #24]
 8014d54:	0a1b      	lsrs	r3, r3, #8
 8014d56:	f003 0301 	and.w	r3, r3, #1
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	f000 80b4 	beq.w	8014ec8 <HAL_SPI_IRQHandler+0x1f4>
 8014d60:	69fb      	ldr	r3, [r7, #28]
 8014d62:	095b      	lsrs	r3, r3, #5
 8014d64:	f003 0301 	and.w	r3, r3, #1
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	f000 80ad 	beq.w	8014ec8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014d6e:	69bb      	ldr	r3, [r7, #24]
 8014d70:	099b      	lsrs	r3, r3, #6
 8014d72:	f003 0301 	and.w	r3, r3, #1
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d023      	beq.n	8014dc2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	2b03      	cmp	r3, #3
 8014d84:	d011      	beq.n	8014daa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d8a:	f043 0204 	orr.w	r2, r3, #4
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014d92:	2300      	movs	r3, #0
 8014d94:	617b      	str	r3, [r7, #20]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	68db      	ldr	r3, [r3, #12]
 8014d9c:	617b      	str	r3, [r7, #20]
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	689b      	ldr	r3, [r3, #8]
 8014da4:	617b      	str	r3, [r7, #20]
 8014da6:	697b      	ldr	r3, [r7, #20]
 8014da8:	e00b      	b.n	8014dc2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014daa:	2300      	movs	r3, #0
 8014dac:	613b      	str	r3, [r7, #16]
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	68db      	ldr	r3, [r3, #12]
 8014db4:	613b      	str	r3, [r7, #16]
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	689b      	ldr	r3, [r3, #8]
 8014dbc:	613b      	str	r3, [r7, #16]
 8014dbe:	693b      	ldr	r3, [r7, #16]
        return;
 8014dc0:	e082      	b.n	8014ec8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8014dc2:	69bb      	ldr	r3, [r7, #24]
 8014dc4:	095b      	lsrs	r3, r3, #5
 8014dc6:	f003 0301 	and.w	r3, r3, #1
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d014      	beq.n	8014df8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dd2:	f043 0201 	orr.w	r2, r3, #1
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8014dda:	2300      	movs	r3, #0
 8014ddc:	60fb      	str	r3, [r7, #12]
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	689b      	ldr	r3, [r3, #8]
 8014de4:	60fb      	str	r3, [r7, #12]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	681a      	ldr	r2, [r3, #0]
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014df4:	601a      	str	r2, [r3, #0]
 8014df6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	0a1b      	lsrs	r3, r3, #8
 8014dfc:	f003 0301 	and.w	r3, r3, #1
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d00c      	beq.n	8014e1e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e08:	f043 0208 	orr.w	r2, r3, #8
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014e10:	2300      	movs	r3, #0
 8014e12:	60bb      	str	r3, [r7, #8]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	689b      	ldr	r3, [r3, #8]
 8014e1a:	60bb      	str	r3, [r7, #8]
 8014e1c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d04f      	beq.n	8014ec6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	685a      	ldr	r2, [r3, #4]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014e34:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2201      	movs	r2, #1
 8014e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014e3e:	69fb      	ldr	r3, [r7, #28]
 8014e40:	f003 0302 	and.w	r3, r3, #2
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d104      	bne.n	8014e52 <HAL_SPI_IRQHandler+0x17e>
 8014e48:	69fb      	ldr	r3, [r7, #28]
 8014e4a:	f003 0301 	and.w	r3, r3, #1
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d034      	beq.n	8014ebc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	685a      	ldr	r2, [r3, #4]
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	f022 0203 	bic.w	r2, r2, #3
 8014e60:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d011      	beq.n	8014e8e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e6e:	4a18      	ldr	r2, [pc, #96]	; (8014ed0 <HAL_SPI_IRQHandler+0x1fc>)
 8014e70:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7fa fb66 	bl	800f548 <HAL_DMA_Abort_IT>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d005      	beq.n	8014e8e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d016      	beq.n	8014ec4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014e9a:	4a0d      	ldr	r2, [pc, #52]	; (8014ed0 <HAL_SPI_IRQHandler+0x1fc>)
 8014e9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7fa fb50 	bl	800f548 <HAL_DMA_Abort_IT>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d00a      	beq.n	8014ec4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014eb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8014eba:	e003      	b.n	8014ec4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f000 f827 	bl	8014f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8014ec2:	e000      	b.n	8014ec6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8014ec4:	bf00      	nop
    return;
 8014ec6:	bf00      	nop
  }
}
 8014ec8:	3720      	adds	r7, #32
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd80      	pop	{r7, pc}
 8014ece:	bf00      	nop
 8014ed0:	080150f1 	.word	0x080150f1

08014ed4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	b083      	sub	sp, #12
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8014edc:	bf00      	nop
 8014ede:	370c      	adds	r7, #12
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee6:	4770      	bx	lr

08014ee8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014ee8:	b480      	push	{r7}
 8014eea:	b083      	sub	sp, #12
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8014ef0:	bf00      	nop
 8014ef2:	370c      	adds	r7, #12
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr

08014efc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014efc:	b480      	push	{r7}
 8014efe:	b083      	sub	sp, #12
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8014f04:	bf00      	nop
 8014f06:	370c      	adds	r7, #12
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0e:	4770      	bx	lr

08014f10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014f10:	b480      	push	{r7}
 8014f12:	b083      	sub	sp, #12
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014f18:	bf00      	nop
 8014f1a:	370c      	adds	r7, #12
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f22:	4770      	bx	lr

08014f24 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8014f24:	b480      	push	{r7}
 8014f26:	b083      	sub	sp, #12
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014f32:	b2db      	uxtb	r3, r3
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	370c      	adds	r7, #12
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr

08014f40 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b084      	sub	sp, #16
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f4c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014f4e:	f7fa f8e3 	bl	800f118 <HAL_GetTick>
 8014f52:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014f62:	d03b      	beq.n	8014fdc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	685a      	ldr	r2, [r3, #4]
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	f022 0220 	bic.w	r2, r2, #32
 8014f72:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	689b      	ldr	r3, [r3, #8]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d10d      	bne.n	8014f98 <SPI_DMAReceiveCplt+0x58>
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014f84:	d108      	bne.n	8014f98 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	685a      	ldr	r2, [r3, #4]
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	f022 0203 	bic.w	r2, r2, #3
 8014f94:	605a      	str	r2, [r3, #4]
 8014f96:	e007      	b.n	8014fa8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	685a      	ldr	r2, [r3, #4]
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	f022 0201 	bic.w	r2, r2, #1
 8014fa6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014fa8:	68ba      	ldr	r2, [r7, #8]
 8014faa:	2164      	movs	r1, #100	; 0x64
 8014fac:	68f8      	ldr	r0, [r7, #12]
 8014fae:	f000 f93b 	bl	8015228 <SPI_EndRxTransaction>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d002      	beq.n	8014fbe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	2220      	movs	r2, #32
 8014fbc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	2201      	movs	r2, #1
 8014fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d003      	beq.n	8014fdc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	f7ff ff9b 	bl	8014f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014fda:	e002      	b.n	8014fe2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8014fdc:	68f8      	ldr	r0, [r7, #12]
 8014fde:	f7ff ff79 	bl	8014ed4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014fe2:	3710      	adds	r7, #16
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}

08014fe8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b084      	sub	sp, #16
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ff4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014ff6:	f7fa f88f 	bl	800f118 <HAL_GetTick>
 8014ffa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801500a:	d02f      	beq.n	801506c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	685a      	ldr	r2, [r3, #4]
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	f022 0220 	bic.w	r2, r2, #32
 801501a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801501c:	68ba      	ldr	r2, [r7, #8]
 801501e:	2164      	movs	r1, #100	; 0x64
 8015020:	68f8      	ldr	r0, [r7, #12]
 8015022:	f000 f967 	bl	80152f4 <SPI_EndRxTxTransaction>
 8015026:	4603      	mov	r3, r0
 8015028:	2b00      	cmp	r3, #0
 801502a:	d005      	beq.n	8015038 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015030:	f043 0220 	orr.w	r2, r3, #32
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	685a      	ldr	r2, [r3, #4]
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	f022 0203 	bic.w	r2, r2, #3
 8015046:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	2200      	movs	r2, #0
 801504c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	2200      	movs	r2, #0
 8015052:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	2201      	movs	r2, #1
 8015058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015060:	2b00      	cmp	r3, #0
 8015062:	d003      	beq.n	801506c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015064:	68f8      	ldr	r0, [r7, #12]
 8015066:	f7ff ff53 	bl	8014f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801506a:	e002      	b.n	8015072 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 801506c:	68f8      	ldr	r0, [r7, #12]
 801506e:	f7f8 ff7b 	bl	800df68 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015072:	3710      	adds	r7, #16
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}

08015078 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b084      	sub	sp, #16
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015084:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8015086:	68f8      	ldr	r0, [r7, #12]
 8015088:	f7ff ff2e 	bl	8014ee8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801508c:	bf00      	nop
 801508e:	3710      	adds	r7, #16
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}

08015094 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b084      	sub	sp, #16
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150a0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80150a2:	68f8      	ldr	r0, [r7, #12]
 80150a4:	f7ff ff2a 	bl	8014efc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80150a8:	bf00      	nop
 80150aa:	3710      	adds	r7, #16
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}

080150b0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b084      	sub	sp, #16
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150bc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	685a      	ldr	r2, [r3, #4]
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	f022 0203 	bic.w	r2, r2, #3
 80150cc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80150d2:	f043 0210 	orr.w	r2, r3, #16
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	2201      	movs	r2, #1
 80150de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80150e2:	68f8      	ldr	r0, [r7, #12]
 80150e4:	f7ff ff14 	bl	8014f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80150e8:	bf00      	nop
 80150ea:	3710      	adds	r7, #16
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	2200      	movs	r2, #0
 8015102:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	2200      	movs	r2, #0
 8015108:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801510a:	68f8      	ldr	r0, [r7, #12]
 801510c:	f7ff ff00 	bl	8014f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015110:	bf00      	nop
 8015112:	3710      	adds	r7, #16
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}

08015118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b088      	sub	sp, #32
 801511c:	af00      	add	r7, sp, #0
 801511e:	60f8      	str	r0, [r7, #12]
 8015120:	60b9      	str	r1, [r7, #8]
 8015122:	603b      	str	r3, [r7, #0]
 8015124:	4613      	mov	r3, r2
 8015126:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8015128:	f7f9 fff6 	bl	800f118 <HAL_GetTick>
 801512c:	4602      	mov	r2, r0
 801512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015130:	1a9b      	subs	r3, r3, r2
 8015132:	683a      	ldr	r2, [r7, #0]
 8015134:	4413      	add	r3, r2
 8015136:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8015138:	f7f9 ffee 	bl	800f118 <HAL_GetTick>
 801513c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801513e:	4b39      	ldr	r3, [pc, #228]	; (8015224 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	015b      	lsls	r3, r3, #5
 8015144:	0d1b      	lsrs	r3, r3, #20
 8015146:	69fa      	ldr	r2, [r7, #28]
 8015148:	fb02 f303 	mul.w	r3, r2, r3
 801514c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801514e:	e054      	b.n	80151fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015156:	d050      	beq.n	80151fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8015158:	f7f9 ffde 	bl	800f118 <HAL_GetTick>
 801515c:	4602      	mov	r2, r0
 801515e:	69bb      	ldr	r3, [r7, #24]
 8015160:	1ad3      	subs	r3, r2, r3
 8015162:	69fa      	ldr	r2, [r7, #28]
 8015164:	429a      	cmp	r2, r3
 8015166:	d902      	bls.n	801516e <SPI_WaitFlagStateUntilTimeout+0x56>
 8015168:	69fb      	ldr	r3, [r7, #28]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d13d      	bne.n	80151ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	685a      	ldr	r2, [r3, #4]
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801517c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	685b      	ldr	r3, [r3, #4]
 8015182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015186:	d111      	bne.n	80151ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	689b      	ldr	r3, [r3, #8]
 801518c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015190:	d004      	beq.n	801519c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	689b      	ldr	r3, [r3, #8]
 8015196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801519a:	d107      	bne.n	80151ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80151aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80151b4:	d10f      	bne.n	80151d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80151c4:	601a      	str	r2, [r3, #0]
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80151d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	2201      	movs	r2, #1
 80151da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	2200      	movs	r2, #0
 80151e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80151e6:	2303      	movs	r3, #3
 80151e8:	e017      	b.n	801521a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d101      	bne.n	80151f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80151f0:	2300      	movs	r3, #0
 80151f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80151f4:	697b      	ldr	r3, [r7, #20]
 80151f6:	3b01      	subs	r3, #1
 80151f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	689a      	ldr	r2, [r3, #8]
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	4013      	ands	r3, r2
 8015204:	68ba      	ldr	r2, [r7, #8]
 8015206:	429a      	cmp	r2, r3
 8015208:	bf0c      	ite	eq
 801520a:	2301      	moveq	r3, #1
 801520c:	2300      	movne	r3, #0
 801520e:	b2db      	uxtb	r3, r3
 8015210:	461a      	mov	r2, r3
 8015212:	79fb      	ldrb	r3, [r7, #7]
 8015214:	429a      	cmp	r2, r3
 8015216:	d19b      	bne.n	8015150 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8015218:	2300      	movs	r3, #0
}
 801521a:	4618      	mov	r0, r3
 801521c:	3720      	adds	r7, #32
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
 8015222:	bf00      	nop
 8015224:	20000000 	.word	0x20000000

08015228 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b086      	sub	sp, #24
 801522c:	af02      	add	r7, sp, #8
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801523c:	d111      	bne.n	8015262 <SPI_EndRxTransaction+0x3a>
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	689b      	ldr	r3, [r3, #8]
 8015242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015246:	d004      	beq.n	8015252 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	689b      	ldr	r3, [r3, #8]
 801524c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015250:	d107      	bne.n	8015262 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	681a      	ldr	r2, [r3, #0]
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015260:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	685b      	ldr	r3, [r3, #4]
 8015266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801526a:	d12a      	bne.n	80152c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	689b      	ldr	r3, [r3, #8]
 8015270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015274:	d012      	beq.n	801529c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	9300      	str	r3, [sp, #0]
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	2200      	movs	r2, #0
 801527e:	2180      	movs	r1, #128	; 0x80
 8015280:	68f8      	ldr	r0, [r7, #12]
 8015282:	f7ff ff49 	bl	8015118 <SPI_WaitFlagStateUntilTimeout>
 8015286:	4603      	mov	r3, r0
 8015288:	2b00      	cmp	r3, #0
 801528a:	d02d      	beq.n	80152e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015290:	f043 0220 	orr.w	r2, r3, #32
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8015298:	2303      	movs	r3, #3
 801529a:	e026      	b.n	80152ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	9300      	str	r3, [sp, #0]
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	2200      	movs	r2, #0
 80152a4:	2101      	movs	r1, #1
 80152a6:	68f8      	ldr	r0, [r7, #12]
 80152a8:	f7ff ff36 	bl	8015118 <SPI_WaitFlagStateUntilTimeout>
 80152ac:	4603      	mov	r3, r0
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d01a      	beq.n	80152e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152b6:	f043 0220 	orr.w	r2, r3, #32
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80152be:	2303      	movs	r3, #3
 80152c0:	e013      	b.n	80152ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	9300      	str	r3, [sp, #0]
 80152c6:	68bb      	ldr	r3, [r7, #8]
 80152c8:	2200      	movs	r2, #0
 80152ca:	2101      	movs	r1, #1
 80152cc:	68f8      	ldr	r0, [r7, #12]
 80152ce:	f7ff ff23 	bl	8015118 <SPI_WaitFlagStateUntilTimeout>
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d007      	beq.n	80152e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152dc:	f043 0220 	orr.w	r2, r3, #32
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80152e4:	2303      	movs	r3, #3
 80152e6:	e000      	b.n	80152ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80152e8:	2300      	movs	r3, #0
}
 80152ea:	4618      	mov	r0, r3
 80152ec:	3710      	adds	r7, #16
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}
	...

080152f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b088      	sub	sp, #32
 80152f8:	af02      	add	r7, sp, #8
 80152fa:	60f8      	str	r0, [r7, #12]
 80152fc:	60b9      	str	r1, [r7, #8]
 80152fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8015300:	4b1b      	ldr	r3, [pc, #108]	; (8015370 <SPI_EndRxTxTransaction+0x7c>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	4a1b      	ldr	r2, [pc, #108]	; (8015374 <SPI_EndRxTxTransaction+0x80>)
 8015306:	fba2 2303 	umull	r2, r3, r2, r3
 801530a:	0d5b      	lsrs	r3, r3, #21
 801530c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015310:	fb02 f303 	mul.w	r3, r2, r3
 8015314:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	685b      	ldr	r3, [r3, #4]
 801531a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801531e:	d112      	bne.n	8015346 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	9300      	str	r3, [sp, #0]
 8015324:	68bb      	ldr	r3, [r7, #8]
 8015326:	2200      	movs	r2, #0
 8015328:	2180      	movs	r1, #128	; 0x80
 801532a:	68f8      	ldr	r0, [r7, #12]
 801532c:	f7ff fef4 	bl	8015118 <SPI_WaitFlagStateUntilTimeout>
 8015330:	4603      	mov	r3, r0
 8015332:	2b00      	cmp	r3, #0
 8015334:	d016      	beq.n	8015364 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801533a:	f043 0220 	orr.w	r2, r3, #32
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8015342:	2303      	movs	r3, #3
 8015344:	e00f      	b.n	8015366 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d00a      	beq.n	8015362 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	3b01      	subs	r3, #1
 8015350:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	689b      	ldr	r3, [r3, #8]
 8015358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801535c:	2b80      	cmp	r3, #128	; 0x80
 801535e:	d0f2      	beq.n	8015346 <SPI_EndRxTxTransaction+0x52>
 8015360:	e000      	b.n	8015364 <SPI_EndRxTxTransaction+0x70>
        break;
 8015362:	bf00      	nop
  }

  return HAL_OK;
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	3718      	adds	r7, #24
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}
 801536e:	bf00      	nop
 8015370:	20000000 	.word	0x20000000
 8015374:	165e9f81 	.word	0x165e9f81

08015378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b082      	sub	sp, #8
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d101      	bne.n	801538a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015386:	2301      	movs	r3, #1
 8015388:	e041      	b.n	801540e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015390:	b2db      	uxtb	r3, r3
 8015392:	2b00      	cmp	r3, #0
 8015394:	d106      	bne.n	80153a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	2200      	movs	r2, #0
 801539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801539e:	6878      	ldr	r0, [r7, #4]
 80153a0:	f7f9 fb20 	bl	800e9e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2202      	movs	r2, #2
 80153a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681a      	ldr	r2, [r3, #0]
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	3304      	adds	r3, #4
 80153b4:	4619      	mov	r1, r3
 80153b6:	4610      	mov	r0, r2
 80153b8:	f000 fc54 	bl	8015c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2201      	movs	r2, #1
 80153c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2201      	movs	r2, #1
 80153c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2201      	movs	r2, #1
 80153d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	2201      	movs	r2, #1
 80153d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2201      	movs	r2, #1
 80153e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2201      	movs	r2, #1
 80153e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2201      	movs	r2, #1
 80153f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2201      	movs	r2, #1
 80153f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2201      	movs	r2, #1
 8015400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2201      	movs	r2, #1
 8015408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801540c:	2300      	movs	r3, #0
}
 801540e:	4618      	mov	r0, r3
 8015410:	3708      	adds	r7, #8
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}
	...

08015418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015418:	b480      	push	{r7}
 801541a:	b085      	sub	sp, #20
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015426:	b2db      	uxtb	r3, r3
 8015428:	2b01      	cmp	r3, #1
 801542a:	d001      	beq.n	8015430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801542c:	2301      	movs	r3, #1
 801542e:	e044      	b.n	80154ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	2202      	movs	r2, #2
 8015434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	68da      	ldr	r2, [r3, #12]
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	f042 0201 	orr.w	r2, r2, #1
 8015446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	4a1e      	ldr	r2, [pc, #120]	; (80154c8 <HAL_TIM_Base_Start_IT+0xb0>)
 801544e:	4293      	cmp	r3, r2
 8015450:	d018      	beq.n	8015484 <HAL_TIM_Base_Start_IT+0x6c>
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801545a:	d013      	beq.n	8015484 <HAL_TIM_Base_Start_IT+0x6c>
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	4a1a      	ldr	r2, [pc, #104]	; (80154cc <HAL_TIM_Base_Start_IT+0xb4>)
 8015462:	4293      	cmp	r3, r2
 8015464:	d00e      	beq.n	8015484 <HAL_TIM_Base_Start_IT+0x6c>
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	4a19      	ldr	r2, [pc, #100]	; (80154d0 <HAL_TIM_Base_Start_IT+0xb8>)
 801546c:	4293      	cmp	r3, r2
 801546e:	d009      	beq.n	8015484 <HAL_TIM_Base_Start_IT+0x6c>
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	4a17      	ldr	r2, [pc, #92]	; (80154d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8015476:	4293      	cmp	r3, r2
 8015478:	d004      	beq.n	8015484 <HAL_TIM_Base_Start_IT+0x6c>
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	4a16      	ldr	r2, [pc, #88]	; (80154d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8015480:	4293      	cmp	r3, r2
 8015482:	d111      	bne.n	80154a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	689b      	ldr	r3, [r3, #8]
 801548a:	f003 0307 	and.w	r3, r3, #7
 801548e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	2b06      	cmp	r3, #6
 8015494:	d010      	beq.n	80154b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	681a      	ldr	r2, [r3, #0]
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	f042 0201 	orr.w	r2, r2, #1
 80154a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80154a6:	e007      	b.n	80154b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	681a      	ldr	r2, [r3, #0]
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	f042 0201 	orr.w	r2, r2, #1
 80154b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80154b8:	2300      	movs	r3, #0
}
 80154ba:	4618      	mov	r0, r3
 80154bc:	3714      	adds	r7, #20
 80154be:	46bd      	mov	sp, r7
 80154c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c4:	4770      	bx	lr
 80154c6:	bf00      	nop
 80154c8:	40010000 	.word	0x40010000
 80154cc:	40000400 	.word	0x40000400
 80154d0:	40000800 	.word	0x40000800
 80154d4:	40000c00 	.word	0x40000c00
 80154d8:	40014000 	.word	0x40014000

080154dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b082      	sub	sp, #8
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d101      	bne.n	80154ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80154ea:	2301      	movs	r3, #1
 80154ec:	e041      	b.n	8015572 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80154f4:	b2db      	uxtb	r3, r3
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d106      	bne.n	8015508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	2200      	movs	r2, #0
 80154fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	f000 f839 	bl	801557a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2202      	movs	r2, #2
 801550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681a      	ldr	r2, [r3, #0]
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	3304      	adds	r3, #4
 8015518:	4619      	mov	r1, r3
 801551a:	4610      	mov	r0, r2
 801551c:	f000 fba2 	bl	8015c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2201      	movs	r2, #1
 8015524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	2201      	movs	r2, #1
 801552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2201      	movs	r2, #1
 8015534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2201      	movs	r2, #1
 801553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2201      	movs	r2, #1
 8015544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2201      	movs	r2, #1
 801554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	2201      	movs	r2, #1
 8015554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	2201      	movs	r2, #1
 801555c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2201      	movs	r2, #1
 8015564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2201      	movs	r2, #1
 801556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015570:	2300      	movs	r3, #0
}
 8015572:	4618      	mov	r0, r3
 8015574:	3708      	adds	r7, #8
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}

0801557a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801557a:	b480      	push	{r7}
 801557c:	b083      	sub	sp, #12
 801557e:	af00      	add	r7, sp, #0
 8015580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8015582:	bf00      	nop
 8015584:	370c      	adds	r7, #12
 8015586:	46bd      	mov	sp, r7
 8015588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558c:	4770      	bx	lr
	...

08015590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b084      	sub	sp, #16
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
 8015598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d109      	bne.n	80155b4 <HAL_TIM_PWM_Start+0x24>
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80155a6:	b2db      	uxtb	r3, r3
 80155a8:	2b01      	cmp	r3, #1
 80155aa:	bf14      	ite	ne
 80155ac:	2301      	movne	r3, #1
 80155ae:	2300      	moveq	r3, #0
 80155b0:	b2db      	uxtb	r3, r3
 80155b2:	e022      	b.n	80155fa <HAL_TIM_PWM_Start+0x6a>
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	2b04      	cmp	r3, #4
 80155b8:	d109      	bne.n	80155ce <HAL_TIM_PWM_Start+0x3e>
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80155c0:	b2db      	uxtb	r3, r3
 80155c2:	2b01      	cmp	r3, #1
 80155c4:	bf14      	ite	ne
 80155c6:	2301      	movne	r3, #1
 80155c8:	2300      	moveq	r3, #0
 80155ca:	b2db      	uxtb	r3, r3
 80155cc:	e015      	b.n	80155fa <HAL_TIM_PWM_Start+0x6a>
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	2b08      	cmp	r3, #8
 80155d2:	d109      	bne.n	80155e8 <HAL_TIM_PWM_Start+0x58>
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	2b01      	cmp	r3, #1
 80155de:	bf14      	ite	ne
 80155e0:	2301      	movne	r3, #1
 80155e2:	2300      	moveq	r3, #0
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	e008      	b.n	80155fa <HAL_TIM_PWM_Start+0x6a>
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80155ee:	b2db      	uxtb	r3, r3
 80155f0:	2b01      	cmp	r3, #1
 80155f2:	bf14      	ite	ne
 80155f4:	2301      	movne	r3, #1
 80155f6:	2300      	moveq	r3, #0
 80155f8:	b2db      	uxtb	r3, r3
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d001      	beq.n	8015602 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80155fe:	2301      	movs	r3, #1
 8015600:	e068      	b.n	80156d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015602:	683b      	ldr	r3, [r7, #0]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d104      	bne.n	8015612 <HAL_TIM_PWM_Start+0x82>
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2202      	movs	r2, #2
 801560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015610:	e013      	b.n	801563a <HAL_TIM_PWM_Start+0xaa>
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	2b04      	cmp	r3, #4
 8015616:	d104      	bne.n	8015622 <HAL_TIM_PWM_Start+0x92>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2202      	movs	r2, #2
 801561c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015620:	e00b      	b.n	801563a <HAL_TIM_PWM_Start+0xaa>
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	2b08      	cmp	r3, #8
 8015626:	d104      	bne.n	8015632 <HAL_TIM_PWM_Start+0xa2>
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	2202      	movs	r2, #2
 801562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015630:	e003      	b.n	801563a <HAL_TIM_PWM_Start+0xaa>
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2202      	movs	r2, #2
 8015636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	2201      	movs	r2, #1
 8015640:	6839      	ldr	r1, [r7, #0]
 8015642:	4618      	mov	r0, r3
 8015644:	f000 fdb4 	bl	80161b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	4a23      	ldr	r2, [pc, #140]	; (80156dc <HAL_TIM_PWM_Start+0x14c>)
 801564e:	4293      	cmp	r3, r2
 8015650:	d107      	bne.n	8015662 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015660:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	4a1d      	ldr	r2, [pc, #116]	; (80156dc <HAL_TIM_PWM_Start+0x14c>)
 8015668:	4293      	cmp	r3, r2
 801566a:	d018      	beq.n	801569e <HAL_TIM_PWM_Start+0x10e>
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015674:	d013      	beq.n	801569e <HAL_TIM_PWM_Start+0x10e>
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	4a19      	ldr	r2, [pc, #100]	; (80156e0 <HAL_TIM_PWM_Start+0x150>)
 801567c:	4293      	cmp	r3, r2
 801567e:	d00e      	beq.n	801569e <HAL_TIM_PWM_Start+0x10e>
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	4a17      	ldr	r2, [pc, #92]	; (80156e4 <HAL_TIM_PWM_Start+0x154>)
 8015686:	4293      	cmp	r3, r2
 8015688:	d009      	beq.n	801569e <HAL_TIM_PWM_Start+0x10e>
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	4a16      	ldr	r2, [pc, #88]	; (80156e8 <HAL_TIM_PWM_Start+0x158>)
 8015690:	4293      	cmp	r3, r2
 8015692:	d004      	beq.n	801569e <HAL_TIM_PWM_Start+0x10e>
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	4a14      	ldr	r2, [pc, #80]	; (80156ec <HAL_TIM_PWM_Start+0x15c>)
 801569a:	4293      	cmp	r3, r2
 801569c:	d111      	bne.n	80156c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	689b      	ldr	r3, [r3, #8]
 80156a4:	f003 0307 	and.w	r3, r3, #7
 80156a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	2b06      	cmp	r3, #6
 80156ae:	d010      	beq.n	80156d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	681a      	ldr	r2, [r3, #0]
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	f042 0201 	orr.w	r2, r2, #1
 80156be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80156c0:	e007      	b.n	80156d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	681a      	ldr	r2, [r3, #0]
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	f042 0201 	orr.w	r2, r2, #1
 80156d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80156d2:	2300      	movs	r3, #0
}
 80156d4:	4618      	mov	r0, r3
 80156d6:	3710      	adds	r7, #16
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}
 80156dc:	40010000 	.word	0x40010000
 80156e0:	40000400 	.word	0x40000400
 80156e4:	40000800 	.word	0x40000800
 80156e8:	40000c00 	.word	0x40000c00
 80156ec:	40014000 	.word	0x40014000

080156f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b082      	sub	sp, #8
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	691b      	ldr	r3, [r3, #16]
 80156fe:	f003 0302 	and.w	r3, r3, #2
 8015702:	2b02      	cmp	r3, #2
 8015704:	d122      	bne.n	801574c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	68db      	ldr	r3, [r3, #12]
 801570c:	f003 0302 	and.w	r3, r3, #2
 8015710:	2b02      	cmp	r3, #2
 8015712:	d11b      	bne.n	801574c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	f06f 0202 	mvn.w	r2, #2
 801571c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2201      	movs	r2, #1
 8015722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	699b      	ldr	r3, [r3, #24]
 801572a:	f003 0303 	and.w	r3, r3, #3
 801572e:	2b00      	cmp	r3, #0
 8015730:	d003      	beq.n	801573a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f000 fa77 	bl	8015c26 <HAL_TIM_IC_CaptureCallback>
 8015738:	e005      	b.n	8015746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f000 fa69 	bl	8015c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f000 fa7a 	bl	8015c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	2200      	movs	r2, #0
 801574a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	691b      	ldr	r3, [r3, #16]
 8015752:	f003 0304 	and.w	r3, r3, #4
 8015756:	2b04      	cmp	r3, #4
 8015758:	d122      	bne.n	80157a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	68db      	ldr	r3, [r3, #12]
 8015760:	f003 0304 	and.w	r3, r3, #4
 8015764:	2b04      	cmp	r3, #4
 8015766:	d11b      	bne.n	80157a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	f06f 0204 	mvn.w	r2, #4
 8015770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	2202      	movs	r2, #2
 8015776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	699b      	ldr	r3, [r3, #24]
 801577e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015782:	2b00      	cmp	r3, #0
 8015784:	d003      	beq.n	801578e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f000 fa4d 	bl	8015c26 <HAL_TIM_IC_CaptureCallback>
 801578c:	e005      	b.n	801579a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f000 fa3f 	bl	8015c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f000 fa50 	bl	8015c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2200      	movs	r2, #0
 801579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	691b      	ldr	r3, [r3, #16]
 80157a6:	f003 0308 	and.w	r3, r3, #8
 80157aa:	2b08      	cmp	r3, #8
 80157ac:	d122      	bne.n	80157f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	68db      	ldr	r3, [r3, #12]
 80157b4:	f003 0308 	and.w	r3, r3, #8
 80157b8:	2b08      	cmp	r3, #8
 80157ba:	d11b      	bne.n	80157f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f06f 0208 	mvn.w	r2, #8
 80157c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	2204      	movs	r2, #4
 80157ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	69db      	ldr	r3, [r3, #28]
 80157d2:	f003 0303 	and.w	r3, r3, #3
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d003      	beq.n	80157e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f000 fa23 	bl	8015c26 <HAL_TIM_IC_CaptureCallback>
 80157e0:	e005      	b.n	80157ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f000 fa15 	bl	8015c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80157e8:	6878      	ldr	r0, [r7, #4]
 80157ea:	f000 fa26 	bl	8015c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	2200      	movs	r2, #0
 80157f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	691b      	ldr	r3, [r3, #16]
 80157fa:	f003 0310 	and.w	r3, r3, #16
 80157fe:	2b10      	cmp	r3, #16
 8015800:	d122      	bne.n	8015848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	68db      	ldr	r3, [r3, #12]
 8015808:	f003 0310 	and.w	r3, r3, #16
 801580c:	2b10      	cmp	r3, #16
 801580e:	d11b      	bne.n	8015848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	f06f 0210 	mvn.w	r2, #16
 8015818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	2208      	movs	r2, #8
 801581e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	69db      	ldr	r3, [r3, #28]
 8015826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801582a:	2b00      	cmp	r3, #0
 801582c:	d003      	beq.n	8015836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f000 f9f9 	bl	8015c26 <HAL_TIM_IC_CaptureCallback>
 8015834:	e005      	b.n	8015842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	f000 f9eb 	bl	8015c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f000 f9fc 	bl	8015c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	2200      	movs	r2, #0
 8015846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	691b      	ldr	r3, [r3, #16]
 801584e:	f003 0301 	and.w	r3, r3, #1
 8015852:	2b01      	cmp	r3, #1
 8015854:	d10e      	bne.n	8015874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	68db      	ldr	r3, [r3, #12]
 801585c:	f003 0301 	and.w	r3, r3, #1
 8015860:	2b01      	cmp	r3, #1
 8015862:	d107      	bne.n	8015874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	f06f 0201 	mvn.w	r2, #1
 801586c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f7f8 ff08 	bl	800e684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	691b      	ldr	r3, [r3, #16]
 801587a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801587e:	2b80      	cmp	r3, #128	; 0x80
 8015880:	d10e      	bne.n	80158a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	68db      	ldr	r3, [r3, #12]
 8015888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801588c:	2b80      	cmp	r3, #128	; 0x80
 801588e:	d107      	bne.n	80158a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f000 fd78 	bl	8016390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	691b      	ldr	r3, [r3, #16]
 80158a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80158aa:	2b40      	cmp	r3, #64	; 0x40
 80158ac:	d10e      	bne.n	80158cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	68db      	ldr	r3, [r3, #12]
 80158b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80158b8:	2b40      	cmp	r3, #64	; 0x40
 80158ba:	d107      	bne.n	80158cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80158c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80158c6:	6878      	ldr	r0, [r7, #4]
 80158c8:	f000 f9c1 	bl	8015c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	691b      	ldr	r3, [r3, #16]
 80158d2:	f003 0320 	and.w	r3, r3, #32
 80158d6:	2b20      	cmp	r3, #32
 80158d8:	d10e      	bne.n	80158f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	68db      	ldr	r3, [r3, #12]
 80158e0:	f003 0320 	and.w	r3, r3, #32
 80158e4:	2b20      	cmp	r3, #32
 80158e6:	d107      	bne.n	80158f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	f06f 0220 	mvn.w	r2, #32
 80158f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f000 fd42 	bl	801637c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80158f8:	bf00      	nop
 80158fa:	3708      	adds	r7, #8
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}

08015900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b086      	sub	sp, #24
 8015904:	af00      	add	r7, sp, #0
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801590c:	2300      	movs	r3, #0
 801590e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015916:	2b01      	cmp	r3, #1
 8015918:	d101      	bne.n	801591e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801591a:	2302      	movs	r3, #2
 801591c:	e0ae      	b.n	8015a7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	2201      	movs	r2, #1
 8015922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	2b0c      	cmp	r3, #12
 801592a:	f200 809f 	bhi.w	8015a6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 801592e:	a201      	add	r2, pc, #4	; (adr r2, 8015934 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8015930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015934:	08015969 	.word	0x08015969
 8015938:	08015a6d 	.word	0x08015a6d
 801593c:	08015a6d 	.word	0x08015a6d
 8015940:	08015a6d 	.word	0x08015a6d
 8015944:	080159a9 	.word	0x080159a9
 8015948:	08015a6d 	.word	0x08015a6d
 801594c:	08015a6d 	.word	0x08015a6d
 8015950:	08015a6d 	.word	0x08015a6d
 8015954:	080159eb 	.word	0x080159eb
 8015958:	08015a6d 	.word	0x08015a6d
 801595c:	08015a6d 	.word	0x08015a6d
 8015960:	08015a6d 	.word	0x08015a6d
 8015964:	08015a2b 	.word	0x08015a2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	68b9      	ldr	r1, [r7, #8]
 801596e:	4618      	mov	r0, r3
 8015970:	f000 f9f8 	bl	8015d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	699a      	ldr	r2, [r3, #24]
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	f042 0208 	orr.w	r2, r2, #8
 8015982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	699a      	ldr	r2, [r3, #24]
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	f022 0204 	bic.w	r2, r2, #4
 8015992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	6999      	ldr	r1, [r3, #24]
 801599a:	68bb      	ldr	r3, [r7, #8]
 801599c:	691a      	ldr	r2, [r3, #16]
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	430a      	orrs	r2, r1
 80159a4:	619a      	str	r2, [r3, #24]
      break;
 80159a6:	e064      	b.n	8015a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	68b9      	ldr	r1, [r7, #8]
 80159ae:	4618      	mov	r0, r3
 80159b0:	f000 fa3e 	bl	8015e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	699a      	ldr	r2, [r3, #24]
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80159c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	699a      	ldr	r2, [r3, #24]
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80159d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	6999      	ldr	r1, [r3, #24]
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	691b      	ldr	r3, [r3, #16]
 80159de:	021a      	lsls	r2, r3, #8
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	430a      	orrs	r2, r1
 80159e6:	619a      	str	r2, [r3, #24]
      break;
 80159e8:	e043      	b.n	8015a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	68b9      	ldr	r1, [r7, #8]
 80159f0:	4618      	mov	r0, r3
 80159f2:	f000 fa89 	bl	8015f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	69da      	ldr	r2, [r3, #28]
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	f042 0208 	orr.w	r2, r2, #8
 8015a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	69da      	ldr	r2, [r3, #28]
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	f022 0204 	bic.w	r2, r2, #4
 8015a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	69d9      	ldr	r1, [r3, #28]
 8015a1c:	68bb      	ldr	r3, [r7, #8]
 8015a1e:	691a      	ldr	r2, [r3, #16]
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	430a      	orrs	r2, r1
 8015a26:	61da      	str	r2, [r3, #28]
      break;
 8015a28:	e023      	b.n	8015a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	68b9      	ldr	r1, [r7, #8]
 8015a30:	4618      	mov	r0, r3
 8015a32:	f000 fad3 	bl	8015fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	69da      	ldr	r2, [r3, #28]
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	69da      	ldr	r2, [r3, #28]
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	69d9      	ldr	r1, [r3, #28]
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	691b      	ldr	r3, [r3, #16]
 8015a60:	021a      	lsls	r2, r3, #8
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	430a      	orrs	r2, r1
 8015a68:	61da      	str	r2, [r3, #28]
      break;
 8015a6a:	e002      	b.n	8015a72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8015a6c:	2301      	movs	r3, #1
 8015a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8015a70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	2200      	movs	r2, #0
 8015a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	3718      	adds	r7, #24
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}

08015a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b084      	sub	sp, #16
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015a98:	2b01      	cmp	r3, #1
 8015a9a:	d101      	bne.n	8015aa0 <HAL_TIM_ConfigClockSource+0x1c>
 8015a9c:	2302      	movs	r3, #2
 8015a9e:	e0b4      	b.n	8015c0a <HAL_TIM_ConfigClockSource+0x186>
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2201      	movs	r2, #1
 8015aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2202      	movs	r2, #2
 8015aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	689b      	ldr	r3, [r3, #8]
 8015ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8015abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015ac0:	68bb      	ldr	r3, [r7, #8]
 8015ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	68ba      	ldr	r2, [r7, #8]
 8015ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015ad8:	d03e      	beq.n	8015b58 <HAL_TIM_ConfigClockSource+0xd4>
 8015ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015ade:	f200 8087 	bhi.w	8015bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8015ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015ae6:	f000 8086 	beq.w	8015bf6 <HAL_TIM_ConfigClockSource+0x172>
 8015aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015aee:	d87f      	bhi.n	8015bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8015af0:	2b70      	cmp	r3, #112	; 0x70
 8015af2:	d01a      	beq.n	8015b2a <HAL_TIM_ConfigClockSource+0xa6>
 8015af4:	2b70      	cmp	r3, #112	; 0x70
 8015af6:	d87b      	bhi.n	8015bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8015af8:	2b60      	cmp	r3, #96	; 0x60
 8015afa:	d050      	beq.n	8015b9e <HAL_TIM_ConfigClockSource+0x11a>
 8015afc:	2b60      	cmp	r3, #96	; 0x60
 8015afe:	d877      	bhi.n	8015bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8015b00:	2b50      	cmp	r3, #80	; 0x50
 8015b02:	d03c      	beq.n	8015b7e <HAL_TIM_ConfigClockSource+0xfa>
 8015b04:	2b50      	cmp	r3, #80	; 0x50
 8015b06:	d873      	bhi.n	8015bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8015b08:	2b40      	cmp	r3, #64	; 0x40
 8015b0a:	d058      	beq.n	8015bbe <HAL_TIM_ConfigClockSource+0x13a>
 8015b0c:	2b40      	cmp	r3, #64	; 0x40
 8015b0e:	d86f      	bhi.n	8015bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8015b10:	2b30      	cmp	r3, #48	; 0x30
 8015b12:	d064      	beq.n	8015bde <HAL_TIM_ConfigClockSource+0x15a>
 8015b14:	2b30      	cmp	r3, #48	; 0x30
 8015b16:	d86b      	bhi.n	8015bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8015b18:	2b20      	cmp	r3, #32
 8015b1a:	d060      	beq.n	8015bde <HAL_TIM_ConfigClockSource+0x15a>
 8015b1c:	2b20      	cmp	r3, #32
 8015b1e:	d867      	bhi.n	8015bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d05c      	beq.n	8015bde <HAL_TIM_ConfigClockSource+0x15a>
 8015b24:	2b10      	cmp	r3, #16
 8015b26:	d05a      	beq.n	8015bde <HAL_TIM_ConfigClockSource+0x15a>
 8015b28:	e062      	b.n	8015bf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	6818      	ldr	r0, [r3, #0]
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	6899      	ldr	r1, [r3, #8]
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	685a      	ldr	r2, [r3, #4]
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	68db      	ldr	r3, [r3, #12]
 8015b3a:	f000 fb19 	bl	8016170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	689b      	ldr	r3, [r3, #8]
 8015b44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015b4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	68ba      	ldr	r2, [r7, #8]
 8015b54:	609a      	str	r2, [r3, #8]
      break;
 8015b56:	e04f      	b.n	8015bf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	6818      	ldr	r0, [r3, #0]
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	6899      	ldr	r1, [r3, #8]
 8015b60:	683b      	ldr	r3, [r7, #0]
 8015b62:	685a      	ldr	r2, [r3, #4]
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	68db      	ldr	r3, [r3, #12]
 8015b68:	f000 fb02 	bl	8016170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	689a      	ldr	r2, [r3, #8]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015b7a:	609a      	str	r2, [r3, #8]
      break;
 8015b7c:	e03c      	b.n	8015bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	6818      	ldr	r0, [r3, #0]
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	6859      	ldr	r1, [r3, #4]
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	68db      	ldr	r3, [r3, #12]
 8015b8a:	461a      	mov	r2, r3
 8015b8c:	f000 fa76 	bl	801607c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	2150      	movs	r1, #80	; 0x50
 8015b96:	4618      	mov	r0, r3
 8015b98:	f000 facf 	bl	801613a <TIM_ITRx_SetConfig>
      break;
 8015b9c:	e02c      	b.n	8015bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	6818      	ldr	r0, [r3, #0]
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	6859      	ldr	r1, [r3, #4]
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	68db      	ldr	r3, [r3, #12]
 8015baa:	461a      	mov	r2, r3
 8015bac:	f000 fa95 	bl	80160da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	2160      	movs	r1, #96	; 0x60
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f000 fabf 	bl	801613a <TIM_ITRx_SetConfig>
      break;
 8015bbc:	e01c      	b.n	8015bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	6818      	ldr	r0, [r3, #0]
 8015bc2:	683b      	ldr	r3, [r7, #0]
 8015bc4:	6859      	ldr	r1, [r3, #4]
 8015bc6:	683b      	ldr	r3, [r7, #0]
 8015bc8:	68db      	ldr	r3, [r3, #12]
 8015bca:	461a      	mov	r2, r3
 8015bcc:	f000 fa56 	bl	801607c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	2140      	movs	r1, #64	; 0x40
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f000 faaf 	bl	801613a <TIM_ITRx_SetConfig>
      break;
 8015bdc:	e00c      	b.n	8015bf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681a      	ldr	r2, [r3, #0]
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	4619      	mov	r1, r3
 8015be8:	4610      	mov	r0, r2
 8015bea:	f000 faa6 	bl	801613a <TIM_ITRx_SetConfig>
      break;
 8015bee:	e003      	b.n	8015bf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8015bf0:	2301      	movs	r3, #1
 8015bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8015bf4:	e000      	b.n	8015bf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8015bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2201      	movs	r2, #1
 8015bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2200      	movs	r2, #0
 8015c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	3710      	adds	r7, #16
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}

08015c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015c12:	b480      	push	{r7}
 8015c14:	b083      	sub	sp, #12
 8015c16:	af00      	add	r7, sp, #0
 8015c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015c1a:	bf00      	nop
 8015c1c:	370c      	adds	r7, #12
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c24:	4770      	bx	lr

08015c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8015c26:	b480      	push	{r7}
 8015c28:	b083      	sub	sp, #12
 8015c2a:	af00      	add	r7, sp, #0
 8015c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015c2e:	bf00      	nop
 8015c30:	370c      	adds	r7, #12
 8015c32:	46bd      	mov	sp, r7
 8015c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c38:	4770      	bx	lr

08015c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015c3a:	b480      	push	{r7}
 8015c3c:	b083      	sub	sp, #12
 8015c3e:	af00      	add	r7, sp, #0
 8015c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015c42:	bf00      	nop
 8015c44:	370c      	adds	r7, #12
 8015c46:	46bd      	mov	sp, r7
 8015c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4c:	4770      	bx	lr

08015c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015c4e:	b480      	push	{r7}
 8015c50:	b083      	sub	sp, #12
 8015c52:	af00      	add	r7, sp, #0
 8015c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015c56:	bf00      	nop
 8015c58:	370c      	adds	r7, #12
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c60:	4770      	bx	lr
	...

08015c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8015c64:	b480      	push	{r7}
 8015c66:	b085      	sub	sp, #20
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	4a34      	ldr	r2, [pc, #208]	; (8015d48 <TIM_Base_SetConfig+0xe4>)
 8015c78:	4293      	cmp	r3, r2
 8015c7a:	d00f      	beq.n	8015c9c <TIM_Base_SetConfig+0x38>
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015c82:	d00b      	beq.n	8015c9c <TIM_Base_SetConfig+0x38>
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	4a31      	ldr	r2, [pc, #196]	; (8015d4c <TIM_Base_SetConfig+0xe8>)
 8015c88:	4293      	cmp	r3, r2
 8015c8a:	d007      	beq.n	8015c9c <TIM_Base_SetConfig+0x38>
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	4a30      	ldr	r2, [pc, #192]	; (8015d50 <TIM_Base_SetConfig+0xec>)
 8015c90:	4293      	cmp	r3, r2
 8015c92:	d003      	beq.n	8015c9c <TIM_Base_SetConfig+0x38>
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	4a2f      	ldr	r2, [pc, #188]	; (8015d54 <TIM_Base_SetConfig+0xf0>)
 8015c98:	4293      	cmp	r3, r2
 8015c9a:	d108      	bne.n	8015cae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	68fa      	ldr	r2, [r7, #12]
 8015caa:	4313      	orrs	r3, r2
 8015cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	4a25      	ldr	r2, [pc, #148]	; (8015d48 <TIM_Base_SetConfig+0xe4>)
 8015cb2:	4293      	cmp	r3, r2
 8015cb4:	d01b      	beq.n	8015cee <TIM_Base_SetConfig+0x8a>
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015cbc:	d017      	beq.n	8015cee <TIM_Base_SetConfig+0x8a>
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	4a22      	ldr	r2, [pc, #136]	; (8015d4c <TIM_Base_SetConfig+0xe8>)
 8015cc2:	4293      	cmp	r3, r2
 8015cc4:	d013      	beq.n	8015cee <TIM_Base_SetConfig+0x8a>
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	4a21      	ldr	r2, [pc, #132]	; (8015d50 <TIM_Base_SetConfig+0xec>)
 8015cca:	4293      	cmp	r3, r2
 8015ccc:	d00f      	beq.n	8015cee <TIM_Base_SetConfig+0x8a>
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	4a20      	ldr	r2, [pc, #128]	; (8015d54 <TIM_Base_SetConfig+0xf0>)
 8015cd2:	4293      	cmp	r3, r2
 8015cd4:	d00b      	beq.n	8015cee <TIM_Base_SetConfig+0x8a>
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	4a1f      	ldr	r2, [pc, #124]	; (8015d58 <TIM_Base_SetConfig+0xf4>)
 8015cda:	4293      	cmp	r3, r2
 8015cdc:	d007      	beq.n	8015cee <TIM_Base_SetConfig+0x8a>
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	4a1e      	ldr	r2, [pc, #120]	; (8015d5c <TIM_Base_SetConfig+0xf8>)
 8015ce2:	4293      	cmp	r3, r2
 8015ce4:	d003      	beq.n	8015cee <TIM_Base_SetConfig+0x8a>
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	4a1d      	ldr	r2, [pc, #116]	; (8015d60 <TIM_Base_SetConfig+0xfc>)
 8015cea:	4293      	cmp	r3, r2
 8015cec:	d108      	bne.n	8015d00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	68db      	ldr	r3, [r3, #12]
 8015cfa:	68fa      	ldr	r2, [r7, #12]
 8015cfc:	4313      	orrs	r3, r2
 8015cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015d06:	683b      	ldr	r3, [r7, #0]
 8015d08:	695b      	ldr	r3, [r3, #20]
 8015d0a:	4313      	orrs	r3, r2
 8015d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	68fa      	ldr	r2, [r7, #12]
 8015d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	689a      	ldr	r2, [r3, #8]
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	681a      	ldr	r2, [r3, #0]
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	4a08      	ldr	r2, [pc, #32]	; (8015d48 <TIM_Base_SetConfig+0xe4>)
 8015d28:	4293      	cmp	r3, r2
 8015d2a:	d103      	bne.n	8015d34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	691a      	ldr	r2, [r3, #16]
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	2201      	movs	r2, #1
 8015d38:	615a      	str	r2, [r3, #20]
}
 8015d3a:	bf00      	nop
 8015d3c:	3714      	adds	r7, #20
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d44:	4770      	bx	lr
 8015d46:	bf00      	nop
 8015d48:	40010000 	.word	0x40010000
 8015d4c:	40000400 	.word	0x40000400
 8015d50:	40000800 	.word	0x40000800
 8015d54:	40000c00 	.word	0x40000c00
 8015d58:	40014000 	.word	0x40014000
 8015d5c:	40014400 	.word	0x40014400
 8015d60:	40014800 	.word	0x40014800

08015d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015d64:	b480      	push	{r7}
 8015d66:	b087      	sub	sp, #28
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	6a1b      	ldr	r3, [r3, #32]
 8015d72:	f023 0201 	bic.w	r2, r3, #1
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	6a1b      	ldr	r3, [r3, #32]
 8015d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	685b      	ldr	r3, [r3, #4]
 8015d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	699b      	ldr	r3, [r3, #24]
 8015d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	f023 0303 	bic.w	r3, r3, #3
 8015d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	68fa      	ldr	r2, [r7, #12]
 8015da2:	4313      	orrs	r3, r2
 8015da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015da6:	697b      	ldr	r3, [r7, #20]
 8015da8:	f023 0302 	bic.w	r3, r3, #2
 8015dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	689b      	ldr	r3, [r3, #8]
 8015db2:	697a      	ldr	r2, [r7, #20]
 8015db4:	4313      	orrs	r3, r2
 8015db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	4a1c      	ldr	r2, [pc, #112]	; (8015e2c <TIM_OC1_SetConfig+0xc8>)
 8015dbc:	4293      	cmp	r3, r2
 8015dbe:	d10c      	bne.n	8015dda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	f023 0308 	bic.w	r3, r3, #8
 8015dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	68db      	ldr	r3, [r3, #12]
 8015dcc:	697a      	ldr	r2, [r7, #20]
 8015dce:	4313      	orrs	r3, r2
 8015dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	f023 0304 	bic.w	r3, r3, #4
 8015dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	4a13      	ldr	r2, [pc, #76]	; (8015e2c <TIM_OC1_SetConfig+0xc8>)
 8015dde:	4293      	cmp	r3, r2
 8015de0:	d111      	bne.n	8015e06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8015de2:	693b      	ldr	r3, [r7, #16]
 8015de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015dea:	693b      	ldr	r3, [r7, #16]
 8015dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	695b      	ldr	r3, [r3, #20]
 8015df6:	693a      	ldr	r2, [r7, #16]
 8015df8:	4313      	orrs	r3, r2
 8015dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	699b      	ldr	r3, [r3, #24]
 8015e00:	693a      	ldr	r2, [r7, #16]
 8015e02:	4313      	orrs	r3, r2
 8015e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	693a      	ldr	r2, [r7, #16]
 8015e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	68fa      	ldr	r2, [r7, #12]
 8015e10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	685a      	ldr	r2, [r3, #4]
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	697a      	ldr	r2, [r7, #20]
 8015e1e:	621a      	str	r2, [r3, #32]
}
 8015e20:	bf00      	nop
 8015e22:	371c      	adds	r7, #28
 8015e24:	46bd      	mov	sp, r7
 8015e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2a:	4770      	bx	lr
 8015e2c:	40010000 	.word	0x40010000

08015e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015e30:	b480      	push	{r7}
 8015e32:	b087      	sub	sp, #28
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	6a1b      	ldr	r3, [r3, #32]
 8015e3e:	f023 0210 	bic.w	r2, r3, #16
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	6a1b      	ldr	r3, [r3, #32]
 8015e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	685b      	ldr	r3, [r3, #4]
 8015e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	699b      	ldr	r3, [r3, #24]
 8015e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	021b      	lsls	r3, r3, #8
 8015e6e:	68fa      	ldr	r2, [r7, #12]
 8015e70:	4313      	orrs	r3, r2
 8015e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015e74:	697b      	ldr	r3, [r7, #20]
 8015e76:	f023 0320 	bic.w	r3, r3, #32
 8015e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	689b      	ldr	r3, [r3, #8]
 8015e80:	011b      	lsls	r3, r3, #4
 8015e82:	697a      	ldr	r2, [r7, #20]
 8015e84:	4313      	orrs	r3, r2
 8015e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	4a1e      	ldr	r2, [pc, #120]	; (8015f04 <TIM_OC2_SetConfig+0xd4>)
 8015e8c:	4293      	cmp	r3, r2
 8015e8e:	d10d      	bne.n	8015eac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015e90:	697b      	ldr	r3, [r7, #20]
 8015e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	68db      	ldr	r3, [r3, #12]
 8015e9c:	011b      	lsls	r3, r3, #4
 8015e9e:	697a      	ldr	r2, [r7, #20]
 8015ea0:	4313      	orrs	r3, r2
 8015ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015ea4:	697b      	ldr	r3, [r7, #20]
 8015ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	4a15      	ldr	r2, [pc, #84]	; (8015f04 <TIM_OC2_SetConfig+0xd4>)
 8015eb0:	4293      	cmp	r3, r2
 8015eb2:	d113      	bne.n	8015edc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015eb4:	693b      	ldr	r3, [r7, #16]
 8015eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015ebc:	693b      	ldr	r3, [r7, #16]
 8015ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	695b      	ldr	r3, [r3, #20]
 8015ec8:	009b      	lsls	r3, r3, #2
 8015eca:	693a      	ldr	r2, [r7, #16]
 8015ecc:	4313      	orrs	r3, r2
 8015ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	699b      	ldr	r3, [r3, #24]
 8015ed4:	009b      	lsls	r3, r3, #2
 8015ed6:	693a      	ldr	r2, [r7, #16]
 8015ed8:	4313      	orrs	r3, r2
 8015eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	693a      	ldr	r2, [r7, #16]
 8015ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	68fa      	ldr	r2, [r7, #12]
 8015ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	685a      	ldr	r2, [r3, #4]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	697a      	ldr	r2, [r7, #20]
 8015ef4:	621a      	str	r2, [r3, #32]
}
 8015ef6:	bf00      	nop
 8015ef8:	371c      	adds	r7, #28
 8015efa:	46bd      	mov	sp, r7
 8015efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f00:	4770      	bx	lr
 8015f02:	bf00      	nop
 8015f04:	40010000 	.word	0x40010000

08015f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015f08:	b480      	push	{r7}
 8015f0a:	b087      	sub	sp, #28
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
 8015f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	6a1b      	ldr	r3, [r3, #32]
 8015f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	6a1b      	ldr	r3, [r3, #32]
 8015f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	685b      	ldr	r3, [r3, #4]
 8015f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	69db      	ldr	r3, [r3, #28]
 8015f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	f023 0303 	bic.w	r3, r3, #3
 8015f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	68fa      	ldr	r2, [r7, #12]
 8015f46:	4313      	orrs	r3, r2
 8015f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015f52:	683b      	ldr	r3, [r7, #0]
 8015f54:	689b      	ldr	r3, [r3, #8]
 8015f56:	021b      	lsls	r3, r3, #8
 8015f58:	697a      	ldr	r2, [r7, #20]
 8015f5a:	4313      	orrs	r3, r2
 8015f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	4a1d      	ldr	r2, [pc, #116]	; (8015fd8 <TIM_OC3_SetConfig+0xd0>)
 8015f62:	4293      	cmp	r3, r2
 8015f64:	d10d      	bne.n	8015f82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	68db      	ldr	r3, [r3, #12]
 8015f72:	021b      	lsls	r3, r3, #8
 8015f74:	697a      	ldr	r2, [r7, #20]
 8015f76:	4313      	orrs	r3, r2
 8015f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015f7a:	697b      	ldr	r3, [r7, #20]
 8015f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	4a14      	ldr	r2, [pc, #80]	; (8015fd8 <TIM_OC3_SetConfig+0xd0>)
 8015f86:	4293      	cmp	r3, r2
 8015f88:	d113      	bne.n	8015fb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8015f8a:	693b      	ldr	r3, [r7, #16]
 8015f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015f92:	693b      	ldr	r3, [r7, #16]
 8015f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8015f9a:	683b      	ldr	r3, [r7, #0]
 8015f9c:	695b      	ldr	r3, [r3, #20]
 8015f9e:	011b      	lsls	r3, r3, #4
 8015fa0:	693a      	ldr	r2, [r7, #16]
 8015fa2:	4313      	orrs	r3, r2
 8015fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	699b      	ldr	r3, [r3, #24]
 8015faa:	011b      	lsls	r3, r3, #4
 8015fac:	693a      	ldr	r2, [r7, #16]
 8015fae:	4313      	orrs	r3, r2
 8015fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	693a      	ldr	r2, [r7, #16]
 8015fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	68fa      	ldr	r2, [r7, #12]
 8015fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	685a      	ldr	r2, [r3, #4]
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	697a      	ldr	r2, [r7, #20]
 8015fca:	621a      	str	r2, [r3, #32]
}
 8015fcc:	bf00      	nop
 8015fce:	371c      	adds	r7, #28
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd6:	4770      	bx	lr
 8015fd8:	40010000 	.word	0x40010000

08015fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015fdc:	b480      	push	{r7}
 8015fde:	b087      	sub	sp, #28
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
 8015fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	6a1b      	ldr	r3, [r3, #32]
 8015fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	6a1b      	ldr	r3, [r3, #32]
 8015ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	685b      	ldr	r3, [r3, #4]
 8015ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	69db      	ldr	r3, [r3, #28]
 8016002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801600a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	021b      	lsls	r3, r3, #8
 801601a:	68fa      	ldr	r2, [r7, #12]
 801601c:	4313      	orrs	r3, r2
 801601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	689b      	ldr	r3, [r3, #8]
 801602c:	031b      	lsls	r3, r3, #12
 801602e:	693a      	ldr	r2, [r7, #16]
 8016030:	4313      	orrs	r3, r2
 8016032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	4a10      	ldr	r2, [pc, #64]	; (8016078 <TIM_OC4_SetConfig+0x9c>)
 8016038:	4293      	cmp	r3, r2
 801603a:	d109      	bne.n	8016050 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801603c:	697b      	ldr	r3, [r7, #20]
 801603e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	695b      	ldr	r3, [r3, #20]
 8016048:	019b      	lsls	r3, r3, #6
 801604a:	697a      	ldr	r2, [r7, #20]
 801604c:	4313      	orrs	r3, r2
 801604e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	697a      	ldr	r2, [r7, #20]
 8016054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	68fa      	ldr	r2, [r7, #12]
 801605a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801605c:	683b      	ldr	r3, [r7, #0]
 801605e:	685a      	ldr	r2, [r3, #4]
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	693a      	ldr	r2, [r7, #16]
 8016068:	621a      	str	r2, [r3, #32]
}
 801606a:	bf00      	nop
 801606c:	371c      	adds	r7, #28
 801606e:	46bd      	mov	sp, r7
 8016070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016074:	4770      	bx	lr
 8016076:	bf00      	nop
 8016078:	40010000 	.word	0x40010000

0801607c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801607c:	b480      	push	{r7}
 801607e:	b087      	sub	sp, #28
 8016080:	af00      	add	r7, sp, #0
 8016082:	60f8      	str	r0, [r7, #12]
 8016084:	60b9      	str	r1, [r7, #8]
 8016086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	6a1b      	ldr	r3, [r3, #32]
 801608c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	6a1b      	ldr	r3, [r3, #32]
 8016092:	f023 0201 	bic.w	r2, r3, #1
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	699b      	ldr	r3, [r3, #24]
 801609e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80160a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	011b      	lsls	r3, r3, #4
 80160ac:	693a      	ldr	r2, [r7, #16]
 80160ae:	4313      	orrs	r3, r2
 80160b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	f023 030a 	bic.w	r3, r3, #10
 80160b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80160ba:	697a      	ldr	r2, [r7, #20]
 80160bc:	68bb      	ldr	r3, [r7, #8]
 80160be:	4313      	orrs	r3, r2
 80160c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	693a      	ldr	r2, [r7, #16]
 80160c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	697a      	ldr	r2, [r7, #20]
 80160cc:	621a      	str	r2, [r3, #32]
}
 80160ce:	bf00      	nop
 80160d0:	371c      	adds	r7, #28
 80160d2:	46bd      	mov	sp, r7
 80160d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d8:	4770      	bx	lr

080160da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80160da:	b480      	push	{r7}
 80160dc:	b087      	sub	sp, #28
 80160de:	af00      	add	r7, sp, #0
 80160e0:	60f8      	str	r0, [r7, #12]
 80160e2:	60b9      	str	r1, [r7, #8]
 80160e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	6a1b      	ldr	r3, [r3, #32]
 80160ea:	f023 0210 	bic.w	r2, r3, #16
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	699b      	ldr	r3, [r3, #24]
 80160f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	6a1b      	ldr	r3, [r3, #32]
 80160fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80160fe:	697b      	ldr	r3, [r7, #20]
 8016100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8016104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	031b      	lsls	r3, r3, #12
 801610a:	697a      	ldr	r2, [r7, #20]
 801610c:	4313      	orrs	r3, r2
 801610e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016110:	693b      	ldr	r3, [r7, #16]
 8016112:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8016116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	011b      	lsls	r3, r3, #4
 801611c:	693a      	ldr	r2, [r7, #16]
 801611e:	4313      	orrs	r3, r2
 8016120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	697a      	ldr	r2, [r7, #20]
 8016126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	693a      	ldr	r2, [r7, #16]
 801612c:	621a      	str	r2, [r3, #32]
}
 801612e:	bf00      	nop
 8016130:	371c      	adds	r7, #28
 8016132:	46bd      	mov	sp, r7
 8016134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016138:	4770      	bx	lr

0801613a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801613a:	b480      	push	{r7}
 801613c:	b085      	sub	sp, #20
 801613e:	af00      	add	r7, sp, #0
 8016140:	6078      	str	r0, [r7, #4]
 8016142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	689b      	ldr	r3, [r3, #8]
 8016148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8016152:	683a      	ldr	r2, [r7, #0]
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	4313      	orrs	r3, r2
 8016158:	f043 0307 	orr.w	r3, r3, #7
 801615c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	68fa      	ldr	r2, [r7, #12]
 8016162:	609a      	str	r2, [r3, #8]
}
 8016164:	bf00      	nop
 8016166:	3714      	adds	r7, #20
 8016168:	46bd      	mov	sp, r7
 801616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616e:	4770      	bx	lr

08016170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8016170:	b480      	push	{r7}
 8016172:	b087      	sub	sp, #28
 8016174:	af00      	add	r7, sp, #0
 8016176:	60f8      	str	r0, [r7, #12]
 8016178:	60b9      	str	r1, [r7, #8]
 801617a:	607a      	str	r2, [r7, #4]
 801617c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	689b      	ldr	r3, [r3, #8]
 8016182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016184:	697b      	ldr	r3, [r7, #20]
 8016186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801618a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	021a      	lsls	r2, r3, #8
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	431a      	orrs	r2, r3
 8016194:	68bb      	ldr	r3, [r7, #8]
 8016196:	4313      	orrs	r3, r2
 8016198:	697a      	ldr	r2, [r7, #20]
 801619a:	4313      	orrs	r3, r2
 801619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	697a      	ldr	r2, [r7, #20]
 80161a2:	609a      	str	r2, [r3, #8]
}
 80161a4:	bf00      	nop
 80161a6:	371c      	adds	r7, #28
 80161a8:	46bd      	mov	sp, r7
 80161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ae:	4770      	bx	lr

080161b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80161b0:	b480      	push	{r7}
 80161b2:	b087      	sub	sp, #28
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	60f8      	str	r0, [r7, #12]
 80161b8:	60b9      	str	r1, [r7, #8]
 80161ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	f003 031f 	and.w	r3, r3, #31
 80161c2:	2201      	movs	r2, #1
 80161c4:	fa02 f303 	lsl.w	r3, r2, r3
 80161c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	6a1a      	ldr	r2, [r3, #32]
 80161ce:	697b      	ldr	r3, [r7, #20]
 80161d0:	43db      	mvns	r3, r3
 80161d2:	401a      	ands	r2, r3
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	6a1a      	ldr	r2, [r3, #32]
 80161dc:	68bb      	ldr	r3, [r7, #8]
 80161de:	f003 031f 	and.w	r3, r3, #31
 80161e2:	6879      	ldr	r1, [r7, #4]
 80161e4:	fa01 f303 	lsl.w	r3, r1, r3
 80161e8:	431a      	orrs	r2, r3
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	621a      	str	r2, [r3, #32]
}
 80161ee:	bf00      	nop
 80161f0:	371c      	adds	r7, #28
 80161f2:	46bd      	mov	sp, r7
 80161f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f8:	4770      	bx	lr
	...

080161fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80161fc:	b480      	push	{r7}
 80161fe:	b085      	sub	sp, #20
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
 8016204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801620c:	2b01      	cmp	r3, #1
 801620e:	d101      	bne.n	8016214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016210:	2302      	movs	r3, #2
 8016212:	e050      	b.n	80162b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2201      	movs	r2, #1
 8016218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	2202      	movs	r2, #2
 8016220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	685b      	ldr	r3, [r3, #4]
 801622a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	689b      	ldr	r3, [r3, #8]
 8016232:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801623a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	68fa      	ldr	r2, [r7, #12]
 8016242:	4313      	orrs	r3, r2
 8016244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	68fa      	ldr	r2, [r7, #12]
 801624c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	4a1c      	ldr	r2, [pc, #112]	; (80162c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8016254:	4293      	cmp	r3, r2
 8016256:	d018      	beq.n	801628a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016260:	d013      	beq.n	801628a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	4a18      	ldr	r2, [pc, #96]	; (80162c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8016268:	4293      	cmp	r3, r2
 801626a:	d00e      	beq.n	801628a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	4a16      	ldr	r2, [pc, #88]	; (80162cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8016272:	4293      	cmp	r3, r2
 8016274:	d009      	beq.n	801628a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	4a15      	ldr	r2, [pc, #84]	; (80162d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801627c:	4293      	cmp	r3, r2
 801627e:	d004      	beq.n	801628a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	4a13      	ldr	r2, [pc, #76]	; (80162d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8016286:	4293      	cmp	r3, r2
 8016288:	d10c      	bne.n	80162a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	685b      	ldr	r3, [r3, #4]
 8016296:	68ba      	ldr	r2, [r7, #8]
 8016298:	4313      	orrs	r3, r2
 801629a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	68ba      	ldr	r2, [r7, #8]
 80162a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	2201      	movs	r2, #1
 80162a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2200      	movs	r2, #0
 80162b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80162b4:	2300      	movs	r3, #0
}
 80162b6:	4618      	mov	r0, r3
 80162b8:	3714      	adds	r7, #20
 80162ba:	46bd      	mov	sp, r7
 80162bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c0:	4770      	bx	lr
 80162c2:	bf00      	nop
 80162c4:	40010000 	.word	0x40010000
 80162c8:	40000400 	.word	0x40000400
 80162cc:	40000800 	.word	0x40000800
 80162d0:	40000c00 	.word	0x40000c00
 80162d4:	40014000 	.word	0x40014000

080162d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80162d8:	b480      	push	{r7}
 80162da:	b085      	sub	sp, #20
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
 80162e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80162e2:	2300      	movs	r3, #0
 80162e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80162ec:	2b01      	cmp	r3, #1
 80162ee:	d101      	bne.n	80162f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80162f0:	2302      	movs	r3, #2
 80162f2:	e03d      	b.n	8016370 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2201      	movs	r2, #1
 80162f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8016302:	683b      	ldr	r3, [r7, #0]
 8016304:	68db      	ldr	r3, [r3, #12]
 8016306:	4313      	orrs	r3, r2
 8016308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8016310:	683b      	ldr	r3, [r7, #0]
 8016312:	689b      	ldr	r3, [r3, #8]
 8016314:	4313      	orrs	r3, r2
 8016316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	685b      	ldr	r3, [r3, #4]
 8016322:	4313      	orrs	r3, r2
 8016324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	4313      	orrs	r3, r2
 8016332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	691b      	ldr	r3, [r3, #16]
 801633e:	4313      	orrs	r3, r2
 8016340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	695b      	ldr	r3, [r3, #20]
 801634c:	4313      	orrs	r3, r2
 801634e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	69db      	ldr	r3, [r3, #28]
 801635a:	4313      	orrs	r3, r2
 801635c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	68fa      	ldr	r2, [r7, #12]
 8016364:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2200      	movs	r2, #0
 801636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801636e:	2300      	movs	r3, #0
}
 8016370:	4618      	mov	r0, r3
 8016372:	3714      	adds	r7, #20
 8016374:	46bd      	mov	sp, r7
 8016376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637a:	4770      	bx	lr

0801637c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801637c:	b480      	push	{r7}
 801637e:	b083      	sub	sp, #12
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016384:	bf00      	nop
 8016386:	370c      	adds	r7, #12
 8016388:	46bd      	mov	sp, r7
 801638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638e:	4770      	bx	lr

08016390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8016390:	b480      	push	{r7}
 8016392:	b083      	sub	sp, #12
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8016398:	bf00      	nop
 801639a:	370c      	adds	r7, #12
 801639c:	46bd      	mov	sp, r7
 801639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a2:	4770      	bx	lr

080163a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80163a4:	b084      	sub	sp, #16
 80163a6:	b580      	push	{r7, lr}
 80163a8:	b084      	sub	sp, #16
 80163aa:	af00      	add	r7, sp, #0
 80163ac:	6078      	str	r0, [r7, #4]
 80163ae:	f107 001c 	add.w	r0, r7, #28
 80163b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80163b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b8:	2b01      	cmp	r3, #1
 80163ba:	d122      	bne.n	8016402 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	68db      	ldr	r3, [r3, #12]
 80163cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80163d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80163d4:	687a      	ldr	r2, [r7, #4]
 80163d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	68db      	ldr	r3, [r3, #12]
 80163dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80163e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163e6:	2b01      	cmp	r3, #1
 80163e8:	d105      	bne.n	80163f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	68db      	ldr	r3, [r3, #12]
 80163ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80163f6:	6878      	ldr	r0, [r7, #4]
 80163f8:	f001 fbee 	bl	8017bd8 <USB_CoreReset>
 80163fc:	4603      	mov	r3, r0
 80163fe:	73fb      	strb	r3, [r7, #15]
 8016400:	e01a      	b.n	8016438 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	68db      	ldr	r3, [r3, #12]
 8016406:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801640e:	6878      	ldr	r0, [r7, #4]
 8016410:	f001 fbe2 	bl	8017bd8 <USB_CoreReset>
 8016414:	4603      	mov	r3, r0
 8016416:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8016418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801641a:	2b00      	cmp	r3, #0
 801641c:	d106      	bne.n	801642c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016422:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	639a      	str	r2, [r3, #56]	; 0x38
 801642a:	e005      	b.n	8016438 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016430:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8016438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801643a:	2b01      	cmp	r3, #1
 801643c:	d10b      	bne.n	8016456 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	689b      	ldr	r3, [r3, #8]
 8016442:	f043 0206 	orr.w	r2, r3, #6
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	689b      	ldr	r3, [r3, #8]
 801644e:	f043 0220 	orr.w	r2, r3, #32
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8016456:	7bfb      	ldrb	r3, [r7, #15]
}
 8016458:	4618      	mov	r0, r3
 801645a:	3710      	adds	r7, #16
 801645c:	46bd      	mov	sp, r7
 801645e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016462:	b004      	add	sp, #16
 8016464:	4770      	bx	lr
	...

08016468 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8016468:	b480      	push	{r7}
 801646a:	b087      	sub	sp, #28
 801646c:	af00      	add	r7, sp, #0
 801646e:	60f8      	str	r0, [r7, #12]
 8016470:	60b9      	str	r1, [r7, #8]
 8016472:	4613      	mov	r3, r2
 8016474:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8016476:	79fb      	ldrb	r3, [r7, #7]
 8016478:	2b02      	cmp	r3, #2
 801647a:	d165      	bne.n	8016548 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	4a41      	ldr	r2, [pc, #260]	; (8016584 <USB_SetTurnaroundTime+0x11c>)
 8016480:	4293      	cmp	r3, r2
 8016482:	d906      	bls.n	8016492 <USB_SetTurnaroundTime+0x2a>
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	4a40      	ldr	r2, [pc, #256]	; (8016588 <USB_SetTurnaroundTime+0x120>)
 8016488:	4293      	cmp	r3, r2
 801648a:	d202      	bcs.n	8016492 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801648c:	230f      	movs	r3, #15
 801648e:	617b      	str	r3, [r7, #20]
 8016490:	e062      	b.n	8016558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	4a3c      	ldr	r2, [pc, #240]	; (8016588 <USB_SetTurnaroundTime+0x120>)
 8016496:	4293      	cmp	r3, r2
 8016498:	d306      	bcc.n	80164a8 <USB_SetTurnaroundTime+0x40>
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	4a3b      	ldr	r2, [pc, #236]	; (801658c <USB_SetTurnaroundTime+0x124>)
 801649e:	4293      	cmp	r3, r2
 80164a0:	d202      	bcs.n	80164a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80164a2:	230e      	movs	r3, #14
 80164a4:	617b      	str	r3, [r7, #20]
 80164a6:	e057      	b.n	8016558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	4a38      	ldr	r2, [pc, #224]	; (801658c <USB_SetTurnaroundTime+0x124>)
 80164ac:	4293      	cmp	r3, r2
 80164ae:	d306      	bcc.n	80164be <USB_SetTurnaroundTime+0x56>
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	4a37      	ldr	r2, [pc, #220]	; (8016590 <USB_SetTurnaroundTime+0x128>)
 80164b4:	4293      	cmp	r3, r2
 80164b6:	d202      	bcs.n	80164be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80164b8:	230d      	movs	r3, #13
 80164ba:	617b      	str	r3, [r7, #20]
 80164bc:	e04c      	b.n	8016558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80164be:	68bb      	ldr	r3, [r7, #8]
 80164c0:	4a33      	ldr	r2, [pc, #204]	; (8016590 <USB_SetTurnaroundTime+0x128>)
 80164c2:	4293      	cmp	r3, r2
 80164c4:	d306      	bcc.n	80164d4 <USB_SetTurnaroundTime+0x6c>
 80164c6:	68bb      	ldr	r3, [r7, #8]
 80164c8:	4a32      	ldr	r2, [pc, #200]	; (8016594 <USB_SetTurnaroundTime+0x12c>)
 80164ca:	4293      	cmp	r3, r2
 80164cc:	d802      	bhi.n	80164d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80164ce:	230c      	movs	r3, #12
 80164d0:	617b      	str	r3, [r7, #20]
 80164d2:	e041      	b.n	8016558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	4a2f      	ldr	r2, [pc, #188]	; (8016594 <USB_SetTurnaroundTime+0x12c>)
 80164d8:	4293      	cmp	r3, r2
 80164da:	d906      	bls.n	80164ea <USB_SetTurnaroundTime+0x82>
 80164dc:	68bb      	ldr	r3, [r7, #8]
 80164de:	4a2e      	ldr	r2, [pc, #184]	; (8016598 <USB_SetTurnaroundTime+0x130>)
 80164e0:	4293      	cmp	r3, r2
 80164e2:	d802      	bhi.n	80164ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80164e4:	230b      	movs	r3, #11
 80164e6:	617b      	str	r3, [r7, #20]
 80164e8:	e036      	b.n	8016558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80164ea:	68bb      	ldr	r3, [r7, #8]
 80164ec:	4a2a      	ldr	r2, [pc, #168]	; (8016598 <USB_SetTurnaroundTime+0x130>)
 80164ee:	4293      	cmp	r3, r2
 80164f0:	d906      	bls.n	8016500 <USB_SetTurnaroundTime+0x98>
 80164f2:	68bb      	ldr	r3, [r7, #8]
 80164f4:	4a29      	ldr	r2, [pc, #164]	; (801659c <USB_SetTurnaroundTime+0x134>)
 80164f6:	4293      	cmp	r3, r2
 80164f8:	d802      	bhi.n	8016500 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80164fa:	230a      	movs	r3, #10
 80164fc:	617b      	str	r3, [r7, #20]
 80164fe:	e02b      	b.n	8016558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	4a26      	ldr	r2, [pc, #152]	; (801659c <USB_SetTurnaroundTime+0x134>)
 8016504:	4293      	cmp	r3, r2
 8016506:	d906      	bls.n	8016516 <USB_SetTurnaroundTime+0xae>
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	4a25      	ldr	r2, [pc, #148]	; (80165a0 <USB_SetTurnaroundTime+0x138>)
 801650c:	4293      	cmp	r3, r2
 801650e:	d202      	bcs.n	8016516 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8016510:	2309      	movs	r3, #9
 8016512:	617b      	str	r3, [r7, #20]
 8016514:	e020      	b.n	8016558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	4a21      	ldr	r2, [pc, #132]	; (80165a0 <USB_SetTurnaroundTime+0x138>)
 801651a:	4293      	cmp	r3, r2
 801651c:	d306      	bcc.n	801652c <USB_SetTurnaroundTime+0xc4>
 801651e:	68bb      	ldr	r3, [r7, #8]
 8016520:	4a20      	ldr	r2, [pc, #128]	; (80165a4 <USB_SetTurnaroundTime+0x13c>)
 8016522:	4293      	cmp	r3, r2
 8016524:	d802      	bhi.n	801652c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8016526:	2308      	movs	r3, #8
 8016528:	617b      	str	r3, [r7, #20]
 801652a:	e015      	b.n	8016558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801652c:	68bb      	ldr	r3, [r7, #8]
 801652e:	4a1d      	ldr	r2, [pc, #116]	; (80165a4 <USB_SetTurnaroundTime+0x13c>)
 8016530:	4293      	cmp	r3, r2
 8016532:	d906      	bls.n	8016542 <USB_SetTurnaroundTime+0xda>
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	4a1c      	ldr	r2, [pc, #112]	; (80165a8 <USB_SetTurnaroundTime+0x140>)
 8016538:	4293      	cmp	r3, r2
 801653a:	d202      	bcs.n	8016542 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801653c:	2307      	movs	r3, #7
 801653e:	617b      	str	r3, [r7, #20]
 8016540:	e00a      	b.n	8016558 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8016542:	2306      	movs	r3, #6
 8016544:	617b      	str	r3, [r7, #20]
 8016546:	e007      	b.n	8016558 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8016548:	79fb      	ldrb	r3, [r7, #7]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d102      	bne.n	8016554 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801654e:	2309      	movs	r3, #9
 8016550:	617b      	str	r3, [r7, #20]
 8016552:	e001      	b.n	8016558 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8016554:	2309      	movs	r3, #9
 8016556:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	68db      	ldr	r3, [r3, #12]
 801655c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	68da      	ldr	r2, [r3, #12]
 8016568:	697b      	ldr	r3, [r7, #20]
 801656a:	029b      	lsls	r3, r3, #10
 801656c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8016570:	431a      	orrs	r2, r3
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8016576:	2300      	movs	r3, #0
}
 8016578:	4618      	mov	r0, r3
 801657a:	371c      	adds	r7, #28
 801657c:	46bd      	mov	sp, r7
 801657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016582:	4770      	bx	lr
 8016584:	00d8acbf 	.word	0x00d8acbf
 8016588:	00e4e1c0 	.word	0x00e4e1c0
 801658c:	00f42400 	.word	0x00f42400
 8016590:	01067380 	.word	0x01067380
 8016594:	011a499f 	.word	0x011a499f
 8016598:	01312cff 	.word	0x01312cff
 801659c:	014ca43f 	.word	0x014ca43f
 80165a0:	016e3600 	.word	0x016e3600
 80165a4:	01a6ab1f 	.word	0x01a6ab1f
 80165a8:	01e84800 	.word	0x01e84800

080165ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80165ac:	b480      	push	{r7}
 80165ae:	b083      	sub	sp, #12
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	689b      	ldr	r3, [r3, #8]
 80165b8:	f043 0201 	orr.w	r2, r3, #1
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80165c0:	2300      	movs	r3, #0
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	370c      	adds	r7, #12
 80165c6:	46bd      	mov	sp, r7
 80165c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165cc:	4770      	bx	lr

080165ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80165ce:	b480      	push	{r7}
 80165d0:	b083      	sub	sp, #12
 80165d2:	af00      	add	r7, sp, #0
 80165d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	689b      	ldr	r3, [r3, #8]
 80165da:	f023 0201 	bic.w	r2, r3, #1
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80165e2:	2300      	movs	r3, #0
}
 80165e4:	4618      	mov	r0, r3
 80165e6:	370c      	adds	r7, #12
 80165e8:	46bd      	mov	sp, r7
 80165ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ee:	4770      	bx	lr

080165f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b084      	sub	sp, #16
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
 80165f8:	460b      	mov	r3, r1
 80165fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80165fc:	2300      	movs	r3, #0
 80165fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	68db      	ldr	r3, [r3, #12]
 8016604:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801660c:	78fb      	ldrb	r3, [r7, #3]
 801660e:	2b01      	cmp	r3, #1
 8016610:	d115      	bne.n	801663e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	68db      	ldr	r3, [r3, #12]
 8016616:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801661e:	2001      	movs	r0, #1
 8016620:	f7f8 fd86 	bl	800f130 <HAL_Delay>
      ms++;
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	3301      	adds	r3, #1
 8016628:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801662a:	6878      	ldr	r0, [r7, #4]
 801662c:	f001 fa45 	bl	8017aba <USB_GetMode>
 8016630:	4603      	mov	r3, r0
 8016632:	2b01      	cmp	r3, #1
 8016634:	d01e      	beq.n	8016674 <USB_SetCurrentMode+0x84>
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	2b31      	cmp	r3, #49	; 0x31
 801663a:	d9f0      	bls.n	801661e <USB_SetCurrentMode+0x2e>
 801663c:	e01a      	b.n	8016674 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801663e:	78fb      	ldrb	r3, [r7, #3]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d115      	bne.n	8016670 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	68db      	ldr	r3, [r3, #12]
 8016648:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8016650:	2001      	movs	r0, #1
 8016652:	f7f8 fd6d 	bl	800f130 <HAL_Delay>
      ms++;
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	3301      	adds	r3, #1
 801665a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801665c:	6878      	ldr	r0, [r7, #4]
 801665e:	f001 fa2c 	bl	8017aba <USB_GetMode>
 8016662:	4603      	mov	r3, r0
 8016664:	2b00      	cmp	r3, #0
 8016666:	d005      	beq.n	8016674 <USB_SetCurrentMode+0x84>
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	2b31      	cmp	r3, #49	; 0x31
 801666c:	d9f0      	bls.n	8016650 <USB_SetCurrentMode+0x60>
 801666e:	e001      	b.n	8016674 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8016670:	2301      	movs	r3, #1
 8016672:	e005      	b.n	8016680 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	2b32      	cmp	r3, #50	; 0x32
 8016678:	d101      	bne.n	801667e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801667a:	2301      	movs	r3, #1
 801667c:	e000      	b.n	8016680 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801667e:	2300      	movs	r3, #0
}
 8016680:	4618      	mov	r0, r3
 8016682:	3710      	adds	r7, #16
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}

08016688 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8016688:	b084      	sub	sp, #16
 801668a:	b580      	push	{r7, lr}
 801668c:	b086      	sub	sp, #24
 801668e:	af00      	add	r7, sp, #0
 8016690:	6078      	str	r0, [r7, #4]
 8016692:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8016696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801669a:	2300      	movs	r3, #0
 801669c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80166a2:	2300      	movs	r3, #0
 80166a4:	613b      	str	r3, [r7, #16]
 80166a6:	e009      	b.n	80166bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80166a8:	687a      	ldr	r2, [r7, #4]
 80166aa:	693b      	ldr	r3, [r7, #16]
 80166ac:	3340      	adds	r3, #64	; 0x40
 80166ae:	009b      	lsls	r3, r3, #2
 80166b0:	4413      	add	r3, r2
 80166b2:	2200      	movs	r2, #0
 80166b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80166b6:	693b      	ldr	r3, [r7, #16]
 80166b8:	3301      	adds	r3, #1
 80166ba:	613b      	str	r3, [r7, #16]
 80166bc:	693b      	ldr	r3, [r7, #16]
 80166be:	2b0e      	cmp	r3, #14
 80166c0:	d9f2      	bls.n	80166a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80166c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d11c      	bne.n	8016702 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80166ce:	685b      	ldr	r3, [r3, #4]
 80166d0:	68fa      	ldr	r2, [r7, #12]
 80166d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80166d6:	f043 0302 	orr.w	r3, r3, #2
 80166da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	639a      	str	r2, [r3, #56]	; 0x38
 8016700:	e00b      	b.n	801671a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016706:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016712:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016720:	461a      	mov	r2, r3
 8016722:	2300      	movs	r3, #0
 8016724:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801672c:	4619      	mov	r1, r3
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016734:	461a      	mov	r2, r3
 8016736:	680b      	ldr	r3, [r1, #0]
 8016738:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801673c:	2b01      	cmp	r3, #1
 801673e:	d10c      	bne.n	801675a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8016740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016742:	2b00      	cmp	r3, #0
 8016744:	d104      	bne.n	8016750 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8016746:	2100      	movs	r1, #0
 8016748:	6878      	ldr	r0, [r7, #4]
 801674a:	f000 f965 	bl	8016a18 <USB_SetDevSpeed>
 801674e:	e008      	b.n	8016762 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8016750:	2101      	movs	r1, #1
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f000 f960 	bl	8016a18 <USB_SetDevSpeed>
 8016758:	e003      	b.n	8016762 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801675a:	2103      	movs	r1, #3
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f000 f95b 	bl	8016a18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8016762:	2110      	movs	r1, #16
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	f000 f8f3 	bl	8016950 <USB_FlushTxFifo>
 801676a:	4603      	mov	r3, r0
 801676c:	2b00      	cmp	r3, #0
 801676e:	d001      	beq.n	8016774 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8016770:	2301      	movs	r3, #1
 8016772:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8016774:	6878      	ldr	r0, [r7, #4]
 8016776:	f000 f91f 	bl	80169b8 <USB_FlushRxFifo>
 801677a:	4603      	mov	r3, r0
 801677c:	2b00      	cmp	r3, #0
 801677e:	d001      	beq.n	8016784 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8016780:	2301      	movs	r3, #1
 8016782:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801678a:	461a      	mov	r2, r3
 801678c:	2300      	movs	r3, #0
 801678e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016796:	461a      	mov	r2, r3
 8016798:	2300      	movs	r3, #0
 801679a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80167a2:	461a      	mov	r2, r3
 80167a4:	2300      	movs	r3, #0
 80167a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80167a8:	2300      	movs	r3, #0
 80167aa:	613b      	str	r3, [r7, #16]
 80167ac:	e043      	b.n	8016836 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80167ae:	693b      	ldr	r3, [r7, #16]
 80167b0:	015a      	lsls	r2, r3, #5
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	4413      	add	r3, r2
 80167b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80167c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80167c4:	d118      	bne.n	80167f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d10a      	bne.n	80167e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	015a      	lsls	r2, r3, #5
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	4413      	add	r3, r2
 80167d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80167d8:	461a      	mov	r2, r3
 80167da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80167de:	6013      	str	r3, [r2, #0]
 80167e0:	e013      	b.n	801680a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80167e2:	693b      	ldr	r3, [r7, #16]
 80167e4:	015a      	lsls	r2, r3, #5
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	4413      	add	r3, r2
 80167ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80167ee:	461a      	mov	r2, r3
 80167f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80167f4:	6013      	str	r3, [r2, #0]
 80167f6:	e008      	b.n	801680a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80167f8:	693b      	ldr	r3, [r7, #16]
 80167fa:	015a      	lsls	r2, r3, #5
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	4413      	add	r3, r2
 8016800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016804:	461a      	mov	r2, r3
 8016806:	2300      	movs	r3, #0
 8016808:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	015a      	lsls	r2, r3, #5
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	4413      	add	r3, r2
 8016812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016816:	461a      	mov	r2, r3
 8016818:	2300      	movs	r3, #0
 801681a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801681c:	693b      	ldr	r3, [r7, #16]
 801681e:	015a      	lsls	r2, r3, #5
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	4413      	add	r3, r2
 8016824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016828:	461a      	mov	r2, r3
 801682a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801682e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016830:	693b      	ldr	r3, [r7, #16]
 8016832:	3301      	adds	r3, #1
 8016834:	613b      	str	r3, [r7, #16]
 8016836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016838:	693a      	ldr	r2, [r7, #16]
 801683a:	429a      	cmp	r2, r3
 801683c:	d3b7      	bcc.n	80167ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801683e:	2300      	movs	r3, #0
 8016840:	613b      	str	r3, [r7, #16]
 8016842:	e043      	b.n	80168cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016844:	693b      	ldr	r3, [r7, #16]
 8016846:	015a      	lsls	r2, r3, #5
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	4413      	add	r3, r2
 801684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801685a:	d118      	bne.n	801688e <USB_DevInit+0x206>
    {
      if (i == 0U)
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d10a      	bne.n	8016878 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8016862:	693b      	ldr	r3, [r7, #16]
 8016864:	015a      	lsls	r2, r3, #5
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	4413      	add	r3, r2
 801686a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801686e:	461a      	mov	r2, r3
 8016870:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8016874:	6013      	str	r3, [r2, #0]
 8016876:	e013      	b.n	80168a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	015a      	lsls	r2, r3, #5
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	4413      	add	r3, r2
 8016880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016884:	461a      	mov	r2, r3
 8016886:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801688a:	6013      	str	r3, [r2, #0]
 801688c:	e008      	b.n	80168a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801688e:	693b      	ldr	r3, [r7, #16]
 8016890:	015a      	lsls	r2, r3, #5
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	4413      	add	r3, r2
 8016896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801689a:	461a      	mov	r2, r3
 801689c:	2300      	movs	r3, #0
 801689e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80168a0:	693b      	ldr	r3, [r7, #16]
 80168a2:	015a      	lsls	r2, r3, #5
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	4413      	add	r3, r2
 80168a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168ac:	461a      	mov	r2, r3
 80168ae:	2300      	movs	r3, #0
 80168b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80168b2:	693b      	ldr	r3, [r7, #16]
 80168b4:	015a      	lsls	r2, r3, #5
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	4413      	add	r3, r2
 80168ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168be:	461a      	mov	r2, r3
 80168c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80168c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80168c6:	693b      	ldr	r3, [r7, #16]
 80168c8:	3301      	adds	r3, #1
 80168ca:	613b      	str	r3, [r7, #16]
 80168cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ce:	693a      	ldr	r2, [r7, #16]
 80168d0:	429a      	cmp	r2, r3
 80168d2:	d3b7      	bcc.n	8016844 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80168da:	691b      	ldr	r3, [r3, #16]
 80168dc:	68fa      	ldr	r2, [r7, #12]
 80168de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80168e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80168e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2200      	movs	r2, #0
 80168ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80168f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80168f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d105      	bne.n	8016908 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	699b      	ldr	r3, [r3, #24]
 8016900:	f043 0210 	orr.w	r2, r3, #16
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	699a      	ldr	r2, [r3, #24]
 801690c:	4b0f      	ldr	r3, [pc, #60]	; (801694c <USB_DevInit+0x2c4>)
 801690e:	4313      	orrs	r3, r2
 8016910:	687a      	ldr	r2, [r7, #4]
 8016912:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8016914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016916:	2b00      	cmp	r3, #0
 8016918:	d005      	beq.n	8016926 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	699b      	ldr	r3, [r3, #24]
 801691e:	f043 0208 	orr.w	r2, r3, #8
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8016926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016928:	2b01      	cmp	r3, #1
 801692a:	d107      	bne.n	801693c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	699b      	ldr	r3, [r3, #24]
 8016930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016934:	f043 0304 	orr.w	r3, r3, #4
 8016938:	687a      	ldr	r2, [r7, #4]
 801693a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801693c:	7dfb      	ldrb	r3, [r7, #23]
}
 801693e:	4618      	mov	r0, r3
 8016940:	3718      	adds	r7, #24
 8016942:	46bd      	mov	sp, r7
 8016944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016948:	b004      	add	sp, #16
 801694a:	4770      	bx	lr
 801694c:	803c3800 	.word	0x803c3800

08016950 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8016950:	b480      	push	{r7}
 8016952:	b085      	sub	sp, #20
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
 8016958:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801695a:	2300      	movs	r3, #0
 801695c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	3301      	adds	r3, #1
 8016962:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	4a13      	ldr	r2, [pc, #76]	; (80169b4 <USB_FlushTxFifo+0x64>)
 8016968:	4293      	cmp	r3, r2
 801696a:	d901      	bls.n	8016970 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801696c:	2303      	movs	r3, #3
 801696e:	e01b      	b.n	80169a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	691b      	ldr	r3, [r3, #16]
 8016974:	2b00      	cmp	r3, #0
 8016976:	daf2      	bge.n	801695e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8016978:	2300      	movs	r3, #0
 801697a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801697c:	683b      	ldr	r3, [r7, #0]
 801697e:	019b      	lsls	r3, r3, #6
 8016980:	f043 0220 	orr.w	r2, r3, #32
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	3301      	adds	r3, #1
 801698c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	4a08      	ldr	r2, [pc, #32]	; (80169b4 <USB_FlushTxFifo+0x64>)
 8016992:	4293      	cmp	r3, r2
 8016994:	d901      	bls.n	801699a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8016996:	2303      	movs	r3, #3
 8016998:	e006      	b.n	80169a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	691b      	ldr	r3, [r3, #16]
 801699e:	f003 0320 	and.w	r3, r3, #32
 80169a2:	2b20      	cmp	r3, #32
 80169a4:	d0f0      	beq.n	8016988 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80169a6:	2300      	movs	r3, #0
}
 80169a8:	4618      	mov	r0, r3
 80169aa:	3714      	adds	r7, #20
 80169ac:	46bd      	mov	sp, r7
 80169ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b2:	4770      	bx	lr
 80169b4:	00030d40 	.word	0x00030d40

080169b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80169b8:	b480      	push	{r7}
 80169ba:	b085      	sub	sp, #20
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80169c0:	2300      	movs	r3, #0
 80169c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	3301      	adds	r3, #1
 80169c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	4a11      	ldr	r2, [pc, #68]	; (8016a14 <USB_FlushRxFifo+0x5c>)
 80169ce:	4293      	cmp	r3, r2
 80169d0:	d901      	bls.n	80169d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80169d2:	2303      	movs	r3, #3
 80169d4:	e018      	b.n	8016a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	691b      	ldr	r3, [r3, #16]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	daf2      	bge.n	80169c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80169de:	2300      	movs	r3, #0
 80169e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	2210      	movs	r2, #16
 80169e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	3301      	adds	r3, #1
 80169ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	4a08      	ldr	r2, [pc, #32]	; (8016a14 <USB_FlushRxFifo+0x5c>)
 80169f2:	4293      	cmp	r3, r2
 80169f4:	d901      	bls.n	80169fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80169f6:	2303      	movs	r3, #3
 80169f8:	e006      	b.n	8016a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	691b      	ldr	r3, [r3, #16]
 80169fe:	f003 0310 	and.w	r3, r3, #16
 8016a02:	2b10      	cmp	r3, #16
 8016a04:	d0f0      	beq.n	80169e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8016a06:	2300      	movs	r3, #0
}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	3714      	adds	r7, #20
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a12:	4770      	bx	lr
 8016a14:	00030d40 	.word	0x00030d40

08016a18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8016a18:	b480      	push	{r7}
 8016a1a:	b085      	sub	sp, #20
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	460b      	mov	r3, r1
 8016a22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016a2e:	681a      	ldr	r2, [r3, #0]
 8016a30:	78fb      	ldrb	r3, [r7, #3]
 8016a32:	68f9      	ldr	r1, [r7, #12]
 8016a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016a38:	4313      	orrs	r3, r2
 8016a3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8016a3c:	2300      	movs	r3, #0
}
 8016a3e:	4618      	mov	r0, r3
 8016a40:	3714      	adds	r7, #20
 8016a42:	46bd      	mov	sp, r7
 8016a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a48:	4770      	bx	lr

08016a4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8016a4a:	b480      	push	{r7}
 8016a4c:	b087      	sub	sp, #28
 8016a4e:	af00      	add	r7, sp, #0
 8016a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8016a56:	693b      	ldr	r3, [r7, #16]
 8016a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016a5c:	689b      	ldr	r3, [r3, #8]
 8016a5e:	f003 0306 	and.w	r3, r3, #6
 8016a62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d102      	bne.n	8016a70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	75fb      	strb	r3, [r7, #23]
 8016a6e:	e00a      	b.n	8016a86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	2b02      	cmp	r3, #2
 8016a74:	d002      	beq.n	8016a7c <USB_GetDevSpeed+0x32>
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	2b06      	cmp	r3, #6
 8016a7a:	d102      	bne.n	8016a82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8016a7c:	2302      	movs	r3, #2
 8016a7e:	75fb      	strb	r3, [r7, #23]
 8016a80:	e001      	b.n	8016a86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8016a82:	230f      	movs	r3, #15
 8016a84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8016a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a88:	4618      	mov	r0, r3
 8016a8a:	371c      	adds	r7, #28
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a92:	4770      	bx	lr

08016a94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016a94:	b480      	push	{r7}
 8016a96:	b085      	sub	sp, #20
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016aa2:	683b      	ldr	r3, [r7, #0]
 8016aa4:	781b      	ldrb	r3, [r3, #0]
 8016aa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016aa8:	683b      	ldr	r3, [r7, #0]
 8016aaa:	785b      	ldrb	r3, [r3, #1]
 8016aac:	2b01      	cmp	r3, #1
 8016aae:	d13a      	bne.n	8016b26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ab6:	69da      	ldr	r2, [r3, #28]
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	781b      	ldrb	r3, [r3, #0]
 8016abc:	f003 030f 	and.w	r3, r3, #15
 8016ac0:	2101      	movs	r1, #1
 8016ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8016ac6:	b29b      	uxth	r3, r3
 8016ac8:	68f9      	ldr	r1, [r7, #12]
 8016aca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016ace:	4313      	orrs	r3, r2
 8016ad0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8016ad2:	68bb      	ldr	r3, [r7, #8]
 8016ad4:	015a      	lsls	r2, r3, #5
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	4413      	add	r3, r2
 8016ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d155      	bne.n	8016b94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	015a      	lsls	r2, r3, #5
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	4413      	add	r3, r2
 8016af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016af4:	681a      	ldr	r2, [r3, #0]
 8016af6:	683b      	ldr	r3, [r7, #0]
 8016af8:	68db      	ldr	r3, [r3, #12]
 8016afa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	791b      	ldrb	r3, [r3, #4]
 8016b02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016b04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016b06:	68bb      	ldr	r3, [r7, #8]
 8016b08:	059b      	lsls	r3, r3, #22
 8016b0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016b0c:	4313      	orrs	r3, r2
 8016b0e:	68ba      	ldr	r2, [r7, #8]
 8016b10:	0151      	lsls	r1, r2, #5
 8016b12:	68fa      	ldr	r2, [r7, #12]
 8016b14:	440a      	add	r2, r1
 8016b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016b22:	6013      	str	r3, [r2, #0]
 8016b24:	e036      	b.n	8016b94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016b2c:	69da      	ldr	r2, [r3, #28]
 8016b2e:	683b      	ldr	r3, [r7, #0]
 8016b30:	781b      	ldrb	r3, [r3, #0]
 8016b32:	f003 030f 	and.w	r3, r3, #15
 8016b36:	2101      	movs	r1, #1
 8016b38:	fa01 f303 	lsl.w	r3, r1, r3
 8016b3c:	041b      	lsls	r3, r3, #16
 8016b3e:	68f9      	ldr	r1, [r7, #12]
 8016b40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016b44:	4313      	orrs	r3, r2
 8016b46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	015a      	lsls	r2, r3, #5
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	4413      	add	r3, r2
 8016b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d11a      	bne.n	8016b94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8016b5e:	68bb      	ldr	r3, [r7, #8]
 8016b60:	015a      	lsls	r2, r3, #5
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	4413      	add	r3, r2
 8016b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b6a:	681a      	ldr	r2, [r3, #0]
 8016b6c:	683b      	ldr	r3, [r7, #0]
 8016b6e:	68db      	ldr	r3, [r3, #12]
 8016b70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8016b74:	683b      	ldr	r3, [r7, #0]
 8016b76:	791b      	ldrb	r3, [r3, #4]
 8016b78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8016b7a:	430b      	orrs	r3, r1
 8016b7c:	4313      	orrs	r3, r2
 8016b7e:	68ba      	ldr	r2, [r7, #8]
 8016b80:	0151      	lsls	r1, r2, #5
 8016b82:	68fa      	ldr	r2, [r7, #12]
 8016b84:	440a      	add	r2, r1
 8016b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016b92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8016b94:	2300      	movs	r3, #0
}
 8016b96:	4618      	mov	r0, r3
 8016b98:	3714      	adds	r7, #20
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba0:	4770      	bx	lr
	...

08016ba4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	b085      	sub	sp, #20
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
 8016bac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016bb2:	683b      	ldr	r3, [r7, #0]
 8016bb4:	781b      	ldrb	r3, [r3, #0]
 8016bb6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8016bb8:	683b      	ldr	r3, [r7, #0]
 8016bba:	785b      	ldrb	r3, [r3, #1]
 8016bbc:	2b01      	cmp	r3, #1
 8016bbe:	d161      	bne.n	8016c84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	015a      	lsls	r2, r3, #5
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	4413      	add	r3, r2
 8016bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016bd6:	d11f      	bne.n	8016c18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8016bd8:	68bb      	ldr	r3, [r7, #8]
 8016bda:	015a      	lsls	r2, r3, #5
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	4413      	add	r3, r2
 8016be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	68ba      	ldr	r2, [r7, #8]
 8016be8:	0151      	lsls	r1, r2, #5
 8016bea:	68fa      	ldr	r2, [r7, #12]
 8016bec:	440a      	add	r2, r1
 8016bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016bf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016bf6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	015a      	lsls	r2, r3, #5
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	4413      	add	r3, r2
 8016c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	68ba      	ldr	r2, [r7, #8]
 8016c08:	0151      	lsls	r1, r2, #5
 8016c0a:	68fa      	ldr	r2, [r7, #12]
 8016c0c:	440a      	add	r2, r1
 8016c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016c12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016c16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016c20:	683b      	ldr	r3, [r7, #0]
 8016c22:	781b      	ldrb	r3, [r3, #0]
 8016c24:	f003 030f 	and.w	r3, r3, #15
 8016c28:	2101      	movs	r1, #1
 8016c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8016c2e:	b29b      	uxth	r3, r3
 8016c30:	43db      	mvns	r3, r3
 8016c32:	68f9      	ldr	r1, [r7, #12]
 8016c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016c38:	4013      	ands	r3, r2
 8016c3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c42:	69da      	ldr	r2, [r3, #28]
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	781b      	ldrb	r3, [r3, #0]
 8016c48:	f003 030f 	and.w	r3, r3, #15
 8016c4c:	2101      	movs	r1, #1
 8016c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	43db      	mvns	r3, r3
 8016c56:	68f9      	ldr	r1, [r7, #12]
 8016c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016c5c:	4013      	ands	r3, r2
 8016c5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8016c60:	68bb      	ldr	r3, [r7, #8]
 8016c62:	015a      	lsls	r2, r3, #5
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	4413      	add	r3, r2
 8016c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c6c:	681a      	ldr	r2, [r3, #0]
 8016c6e:	68bb      	ldr	r3, [r7, #8]
 8016c70:	0159      	lsls	r1, r3, #5
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	440b      	add	r3, r1
 8016c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c7a:	4619      	mov	r1, r3
 8016c7c:	4b35      	ldr	r3, [pc, #212]	; (8016d54 <USB_DeactivateEndpoint+0x1b0>)
 8016c7e:	4013      	ands	r3, r2
 8016c80:	600b      	str	r3, [r1, #0]
 8016c82:	e060      	b.n	8016d46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	015a      	lsls	r2, r3, #5
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	4413      	add	r3, r2
 8016c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016c9a:	d11f      	bne.n	8016cdc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8016c9c:	68bb      	ldr	r3, [r7, #8]
 8016c9e:	015a      	lsls	r2, r3, #5
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	4413      	add	r3, r2
 8016ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	68ba      	ldr	r2, [r7, #8]
 8016cac:	0151      	lsls	r1, r2, #5
 8016cae:	68fa      	ldr	r2, [r7, #12]
 8016cb0:	440a      	add	r2, r1
 8016cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016cb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016cba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8016cbc:	68bb      	ldr	r3, [r7, #8]
 8016cbe:	015a      	lsls	r2, r3, #5
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	4413      	add	r3, r2
 8016cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	68ba      	ldr	r2, [r7, #8]
 8016ccc:	0151      	lsls	r1, r2, #5
 8016cce:	68fa      	ldr	r2, [r7, #12]
 8016cd0:	440a      	add	r2, r1
 8016cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016cda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016ce4:	683b      	ldr	r3, [r7, #0]
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	f003 030f 	and.w	r3, r3, #15
 8016cec:	2101      	movs	r1, #1
 8016cee:	fa01 f303 	lsl.w	r3, r1, r3
 8016cf2:	041b      	lsls	r3, r3, #16
 8016cf4:	43db      	mvns	r3, r3
 8016cf6:	68f9      	ldr	r1, [r7, #12]
 8016cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016cfc:	4013      	ands	r3, r2
 8016cfe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016d06:	69da      	ldr	r2, [r3, #28]
 8016d08:	683b      	ldr	r3, [r7, #0]
 8016d0a:	781b      	ldrb	r3, [r3, #0]
 8016d0c:	f003 030f 	and.w	r3, r3, #15
 8016d10:	2101      	movs	r1, #1
 8016d12:	fa01 f303 	lsl.w	r3, r1, r3
 8016d16:	041b      	lsls	r3, r3, #16
 8016d18:	43db      	mvns	r3, r3
 8016d1a:	68f9      	ldr	r1, [r7, #12]
 8016d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016d20:	4013      	ands	r3, r2
 8016d22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	015a      	lsls	r2, r3, #5
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	4413      	add	r3, r2
 8016d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d30:	681a      	ldr	r2, [r3, #0]
 8016d32:	68bb      	ldr	r3, [r7, #8]
 8016d34:	0159      	lsls	r1, r3, #5
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	440b      	add	r3, r1
 8016d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d3e:	4619      	mov	r1, r3
 8016d40:	4b05      	ldr	r3, [pc, #20]	; (8016d58 <USB_DeactivateEndpoint+0x1b4>)
 8016d42:	4013      	ands	r3, r2
 8016d44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8016d46:	2300      	movs	r3, #0
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3714      	adds	r7, #20
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d52:	4770      	bx	lr
 8016d54:	ec337800 	.word	0xec337800
 8016d58:	eff37800 	.word	0xeff37800

08016d5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b08a      	sub	sp, #40	; 0x28
 8016d60:	af02      	add	r7, sp, #8
 8016d62:	60f8      	str	r0, [r7, #12]
 8016d64:	60b9      	str	r1, [r7, #8]
 8016d66:	4613      	mov	r3, r2
 8016d68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8016d6e:	68bb      	ldr	r3, [r7, #8]
 8016d70:	781b      	ldrb	r3, [r3, #0]
 8016d72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	785b      	ldrb	r3, [r3, #1]
 8016d78:	2b01      	cmp	r3, #1
 8016d7a:	f040 815c 	bne.w	8017036 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8016d7e:	68bb      	ldr	r3, [r7, #8]
 8016d80:	699b      	ldr	r3, [r3, #24]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d132      	bne.n	8016dec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016d86:	69bb      	ldr	r3, [r7, #24]
 8016d88:	015a      	lsls	r2, r3, #5
 8016d8a:	69fb      	ldr	r3, [r7, #28]
 8016d8c:	4413      	add	r3, r2
 8016d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d92:	691b      	ldr	r3, [r3, #16]
 8016d94:	69ba      	ldr	r2, [r7, #24]
 8016d96:	0151      	lsls	r1, r2, #5
 8016d98:	69fa      	ldr	r2, [r7, #28]
 8016d9a:	440a      	add	r2, r1
 8016d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016da0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8016da4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016da8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016daa:	69bb      	ldr	r3, [r7, #24]
 8016dac:	015a      	lsls	r2, r3, #5
 8016dae:	69fb      	ldr	r3, [r7, #28]
 8016db0:	4413      	add	r3, r2
 8016db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016db6:	691b      	ldr	r3, [r3, #16]
 8016db8:	69ba      	ldr	r2, [r7, #24]
 8016dba:	0151      	lsls	r1, r2, #5
 8016dbc:	69fa      	ldr	r2, [r7, #28]
 8016dbe:	440a      	add	r2, r1
 8016dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016dc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016dc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016dca:	69bb      	ldr	r3, [r7, #24]
 8016dcc:	015a      	lsls	r2, r3, #5
 8016dce:	69fb      	ldr	r3, [r7, #28]
 8016dd0:	4413      	add	r3, r2
 8016dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016dd6:	691b      	ldr	r3, [r3, #16]
 8016dd8:	69ba      	ldr	r2, [r7, #24]
 8016dda:	0151      	lsls	r1, r2, #5
 8016ddc:	69fa      	ldr	r2, [r7, #28]
 8016dde:	440a      	add	r2, r1
 8016de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016de4:	0cdb      	lsrs	r3, r3, #19
 8016de6:	04db      	lsls	r3, r3, #19
 8016de8:	6113      	str	r3, [r2, #16]
 8016dea:	e074      	b.n	8016ed6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016dec:	69bb      	ldr	r3, [r7, #24]
 8016dee:	015a      	lsls	r2, r3, #5
 8016df0:	69fb      	ldr	r3, [r7, #28]
 8016df2:	4413      	add	r3, r2
 8016df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016df8:	691b      	ldr	r3, [r3, #16]
 8016dfa:	69ba      	ldr	r2, [r7, #24]
 8016dfc:	0151      	lsls	r1, r2, #5
 8016dfe:	69fa      	ldr	r2, [r7, #28]
 8016e00:	440a      	add	r2, r1
 8016e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016e06:	0cdb      	lsrs	r3, r3, #19
 8016e08:	04db      	lsls	r3, r3, #19
 8016e0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016e0c:	69bb      	ldr	r3, [r7, #24]
 8016e0e:	015a      	lsls	r2, r3, #5
 8016e10:	69fb      	ldr	r3, [r7, #28]
 8016e12:	4413      	add	r3, r2
 8016e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016e18:	691b      	ldr	r3, [r3, #16]
 8016e1a:	69ba      	ldr	r2, [r7, #24]
 8016e1c:	0151      	lsls	r1, r2, #5
 8016e1e:	69fa      	ldr	r2, [r7, #28]
 8016e20:	440a      	add	r2, r1
 8016e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016e26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8016e2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016e2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016e30:	69bb      	ldr	r3, [r7, #24]
 8016e32:	015a      	lsls	r2, r3, #5
 8016e34:	69fb      	ldr	r3, [r7, #28]
 8016e36:	4413      	add	r3, r2
 8016e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016e3c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	6999      	ldr	r1, [r3, #24]
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	68db      	ldr	r3, [r3, #12]
 8016e46:	440b      	add	r3, r1
 8016e48:	1e59      	subs	r1, r3, #1
 8016e4a:	68bb      	ldr	r3, [r7, #8]
 8016e4c:	68db      	ldr	r3, [r3, #12]
 8016e4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8016e52:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016e54:	4b9d      	ldr	r3, [pc, #628]	; (80170cc <USB_EPStartXfer+0x370>)
 8016e56:	400b      	ands	r3, r1
 8016e58:	69b9      	ldr	r1, [r7, #24]
 8016e5a:	0148      	lsls	r0, r1, #5
 8016e5c:	69f9      	ldr	r1, [r7, #28]
 8016e5e:	4401      	add	r1, r0
 8016e60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8016e64:	4313      	orrs	r3, r2
 8016e66:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016e68:	69bb      	ldr	r3, [r7, #24]
 8016e6a:	015a      	lsls	r2, r3, #5
 8016e6c:	69fb      	ldr	r3, [r7, #28]
 8016e6e:	4413      	add	r3, r2
 8016e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016e74:	691a      	ldr	r2, [r3, #16]
 8016e76:	68bb      	ldr	r3, [r7, #8]
 8016e78:	699b      	ldr	r3, [r3, #24]
 8016e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016e7e:	69b9      	ldr	r1, [r7, #24]
 8016e80:	0148      	lsls	r0, r1, #5
 8016e82:	69f9      	ldr	r1, [r7, #28]
 8016e84:	4401      	add	r1, r0
 8016e86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8016e8a:	4313      	orrs	r3, r2
 8016e8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	791b      	ldrb	r3, [r3, #4]
 8016e92:	2b01      	cmp	r3, #1
 8016e94:	d11f      	bne.n	8016ed6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8016e96:	69bb      	ldr	r3, [r7, #24]
 8016e98:	015a      	lsls	r2, r3, #5
 8016e9a:	69fb      	ldr	r3, [r7, #28]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ea2:	691b      	ldr	r3, [r3, #16]
 8016ea4:	69ba      	ldr	r2, [r7, #24]
 8016ea6:	0151      	lsls	r1, r2, #5
 8016ea8:	69fa      	ldr	r2, [r7, #28]
 8016eaa:	440a      	add	r2, r1
 8016eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016eb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8016eb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8016eb6:	69bb      	ldr	r3, [r7, #24]
 8016eb8:	015a      	lsls	r2, r3, #5
 8016eba:	69fb      	ldr	r3, [r7, #28]
 8016ebc:	4413      	add	r3, r2
 8016ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ec2:	691b      	ldr	r3, [r3, #16]
 8016ec4:	69ba      	ldr	r2, [r7, #24]
 8016ec6:	0151      	lsls	r1, r2, #5
 8016ec8:	69fa      	ldr	r2, [r7, #28]
 8016eca:	440a      	add	r2, r1
 8016ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016ed0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016ed4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8016ed6:	79fb      	ldrb	r3, [r7, #7]
 8016ed8:	2b01      	cmp	r3, #1
 8016eda:	d14b      	bne.n	8016f74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8016edc:	68bb      	ldr	r3, [r7, #8]
 8016ede:	695b      	ldr	r3, [r3, #20]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d009      	beq.n	8016ef8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8016ee4:	69bb      	ldr	r3, [r7, #24]
 8016ee6:	015a      	lsls	r2, r3, #5
 8016ee8:	69fb      	ldr	r3, [r7, #28]
 8016eea:	4413      	add	r3, r2
 8016eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ef0:	461a      	mov	r2, r3
 8016ef2:	68bb      	ldr	r3, [r7, #8]
 8016ef4:	695b      	ldr	r3, [r3, #20]
 8016ef6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8016ef8:	68bb      	ldr	r3, [r7, #8]
 8016efa:	791b      	ldrb	r3, [r3, #4]
 8016efc:	2b01      	cmp	r3, #1
 8016efe:	d128      	bne.n	8016f52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016f00:	69fb      	ldr	r3, [r7, #28]
 8016f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016f06:	689b      	ldr	r3, [r3, #8]
 8016f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d110      	bne.n	8016f32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016f10:	69bb      	ldr	r3, [r7, #24]
 8016f12:	015a      	lsls	r2, r3, #5
 8016f14:	69fb      	ldr	r3, [r7, #28]
 8016f16:	4413      	add	r3, r2
 8016f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	69ba      	ldr	r2, [r7, #24]
 8016f20:	0151      	lsls	r1, r2, #5
 8016f22:	69fa      	ldr	r2, [r7, #28]
 8016f24:	440a      	add	r2, r1
 8016f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016f2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016f2e:	6013      	str	r3, [r2, #0]
 8016f30:	e00f      	b.n	8016f52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016f32:	69bb      	ldr	r3, [r7, #24]
 8016f34:	015a      	lsls	r2, r3, #5
 8016f36:	69fb      	ldr	r3, [r7, #28]
 8016f38:	4413      	add	r3, r2
 8016f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	69ba      	ldr	r2, [r7, #24]
 8016f42:	0151      	lsls	r1, r2, #5
 8016f44:	69fa      	ldr	r2, [r7, #28]
 8016f46:	440a      	add	r2, r1
 8016f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016f50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016f52:	69bb      	ldr	r3, [r7, #24]
 8016f54:	015a      	lsls	r2, r3, #5
 8016f56:	69fb      	ldr	r3, [r7, #28]
 8016f58:	4413      	add	r3, r2
 8016f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	69ba      	ldr	r2, [r7, #24]
 8016f62:	0151      	lsls	r1, r2, #5
 8016f64:	69fa      	ldr	r2, [r7, #28]
 8016f66:	440a      	add	r2, r1
 8016f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016f6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016f70:	6013      	str	r3, [r2, #0]
 8016f72:	e133      	b.n	80171dc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016f74:	69bb      	ldr	r3, [r7, #24]
 8016f76:	015a      	lsls	r2, r3, #5
 8016f78:	69fb      	ldr	r3, [r7, #28]
 8016f7a:	4413      	add	r3, r2
 8016f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	69ba      	ldr	r2, [r7, #24]
 8016f84:	0151      	lsls	r1, r2, #5
 8016f86:	69fa      	ldr	r2, [r7, #28]
 8016f88:	440a      	add	r2, r1
 8016f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016f8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016f92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8016f94:	68bb      	ldr	r3, [r7, #8]
 8016f96:	791b      	ldrb	r3, [r3, #4]
 8016f98:	2b01      	cmp	r3, #1
 8016f9a:	d015      	beq.n	8016fc8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8016f9c:	68bb      	ldr	r3, [r7, #8]
 8016f9e:	699b      	ldr	r3, [r3, #24]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	f000 811b 	beq.w	80171dc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8016fa6:	69fb      	ldr	r3, [r7, #28]
 8016fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016fae:	68bb      	ldr	r3, [r7, #8]
 8016fb0:	781b      	ldrb	r3, [r3, #0]
 8016fb2:	f003 030f 	and.w	r3, r3, #15
 8016fb6:	2101      	movs	r1, #1
 8016fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8016fbc:	69f9      	ldr	r1, [r7, #28]
 8016fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016fc2:	4313      	orrs	r3, r2
 8016fc4:	634b      	str	r3, [r1, #52]	; 0x34
 8016fc6:	e109      	b.n	80171dc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016fc8:	69fb      	ldr	r3, [r7, #28]
 8016fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016fce:	689b      	ldr	r3, [r3, #8]
 8016fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d110      	bne.n	8016ffa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016fd8:	69bb      	ldr	r3, [r7, #24]
 8016fda:	015a      	lsls	r2, r3, #5
 8016fdc:	69fb      	ldr	r3, [r7, #28]
 8016fde:	4413      	add	r3, r2
 8016fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	69ba      	ldr	r2, [r7, #24]
 8016fe8:	0151      	lsls	r1, r2, #5
 8016fea:	69fa      	ldr	r2, [r7, #28]
 8016fec:	440a      	add	r2, r1
 8016fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016ff6:	6013      	str	r3, [r2, #0]
 8016ff8:	e00f      	b.n	801701a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016ffa:	69bb      	ldr	r3, [r7, #24]
 8016ffc:	015a      	lsls	r2, r3, #5
 8016ffe:	69fb      	ldr	r3, [r7, #28]
 8017000:	4413      	add	r3, r2
 8017002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	69ba      	ldr	r2, [r7, #24]
 801700a:	0151      	lsls	r1, r2, #5
 801700c:	69fa      	ldr	r2, [r7, #28]
 801700e:	440a      	add	r2, r1
 8017010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017018:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801701a:	68bb      	ldr	r3, [r7, #8]
 801701c:	6919      	ldr	r1, [r3, #16]
 801701e:	68bb      	ldr	r3, [r7, #8]
 8017020:	781a      	ldrb	r2, [r3, #0]
 8017022:	68bb      	ldr	r3, [r7, #8]
 8017024:	699b      	ldr	r3, [r3, #24]
 8017026:	b298      	uxth	r0, r3
 8017028:	79fb      	ldrb	r3, [r7, #7]
 801702a:	9300      	str	r3, [sp, #0]
 801702c:	4603      	mov	r3, r0
 801702e:	68f8      	ldr	r0, [r7, #12]
 8017030:	f000 fade 	bl	80175f0 <USB_WritePacket>
 8017034:	e0d2      	b.n	80171dc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8017036:	69bb      	ldr	r3, [r7, #24]
 8017038:	015a      	lsls	r2, r3, #5
 801703a:	69fb      	ldr	r3, [r7, #28]
 801703c:	4413      	add	r3, r2
 801703e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017042:	691b      	ldr	r3, [r3, #16]
 8017044:	69ba      	ldr	r2, [r7, #24]
 8017046:	0151      	lsls	r1, r2, #5
 8017048:	69fa      	ldr	r2, [r7, #28]
 801704a:	440a      	add	r2, r1
 801704c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017050:	0cdb      	lsrs	r3, r3, #19
 8017052:	04db      	lsls	r3, r3, #19
 8017054:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8017056:	69bb      	ldr	r3, [r7, #24]
 8017058:	015a      	lsls	r2, r3, #5
 801705a:	69fb      	ldr	r3, [r7, #28]
 801705c:	4413      	add	r3, r2
 801705e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017062:	691b      	ldr	r3, [r3, #16]
 8017064:	69ba      	ldr	r2, [r7, #24]
 8017066:	0151      	lsls	r1, r2, #5
 8017068:	69fa      	ldr	r2, [r7, #28]
 801706a:	440a      	add	r2, r1
 801706c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017070:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8017074:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017078:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801707a:	68bb      	ldr	r3, [r7, #8]
 801707c:	699b      	ldr	r3, [r3, #24]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d126      	bne.n	80170d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8017082:	69bb      	ldr	r3, [r7, #24]
 8017084:	015a      	lsls	r2, r3, #5
 8017086:	69fb      	ldr	r3, [r7, #28]
 8017088:	4413      	add	r3, r2
 801708a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801708e:	691a      	ldr	r2, [r3, #16]
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	68db      	ldr	r3, [r3, #12]
 8017094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017098:	69b9      	ldr	r1, [r7, #24]
 801709a:	0148      	lsls	r0, r1, #5
 801709c:	69f9      	ldr	r1, [r7, #28]
 801709e:	4401      	add	r1, r0
 80170a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80170a4:	4313      	orrs	r3, r2
 80170a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80170a8:	69bb      	ldr	r3, [r7, #24]
 80170aa:	015a      	lsls	r2, r3, #5
 80170ac:	69fb      	ldr	r3, [r7, #28]
 80170ae:	4413      	add	r3, r2
 80170b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80170b4:	691b      	ldr	r3, [r3, #16]
 80170b6:	69ba      	ldr	r2, [r7, #24]
 80170b8:	0151      	lsls	r1, r2, #5
 80170ba:	69fa      	ldr	r2, [r7, #28]
 80170bc:	440a      	add	r2, r1
 80170be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80170c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80170c6:	6113      	str	r3, [r2, #16]
 80170c8:	e03a      	b.n	8017140 <USB_EPStartXfer+0x3e4>
 80170ca:	bf00      	nop
 80170cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80170d0:	68bb      	ldr	r3, [r7, #8]
 80170d2:	699a      	ldr	r2, [r3, #24]
 80170d4:	68bb      	ldr	r3, [r7, #8]
 80170d6:	68db      	ldr	r3, [r3, #12]
 80170d8:	4413      	add	r3, r2
 80170da:	1e5a      	subs	r2, r3, #1
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	68db      	ldr	r3, [r3, #12]
 80170e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80170e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	68db      	ldr	r3, [r3, #12]
 80170ea:	8afa      	ldrh	r2, [r7, #22]
 80170ec:	fb03 f202 	mul.w	r2, r3, r2
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80170f4:	69bb      	ldr	r3, [r7, #24]
 80170f6:	015a      	lsls	r2, r3, #5
 80170f8:	69fb      	ldr	r3, [r7, #28]
 80170fa:	4413      	add	r3, r2
 80170fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017100:	691a      	ldr	r2, [r3, #16]
 8017102:	8afb      	ldrh	r3, [r7, #22]
 8017104:	04d9      	lsls	r1, r3, #19
 8017106:	4b38      	ldr	r3, [pc, #224]	; (80171e8 <USB_EPStartXfer+0x48c>)
 8017108:	400b      	ands	r3, r1
 801710a:	69b9      	ldr	r1, [r7, #24]
 801710c:	0148      	lsls	r0, r1, #5
 801710e:	69f9      	ldr	r1, [r7, #28]
 8017110:	4401      	add	r1, r0
 8017112:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8017116:	4313      	orrs	r3, r2
 8017118:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801711a:	69bb      	ldr	r3, [r7, #24]
 801711c:	015a      	lsls	r2, r3, #5
 801711e:	69fb      	ldr	r3, [r7, #28]
 8017120:	4413      	add	r3, r2
 8017122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017126:	691a      	ldr	r2, [r3, #16]
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	69db      	ldr	r3, [r3, #28]
 801712c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017130:	69b9      	ldr	r1, [r7, #24]
 8017132:	0148      	lsls	r0, r1, #5
 8017134:	69f9      	ldr	r1, [r7, #28]
 8017136:	4401      	add	r1, r0
 8017138:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801713c:	4313      	orrs	r3, r2
 801713e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8017140:	79fb      	ldrb	r3, [r7, #7]
 8017142:	2b01      	cmp	r3, #1
 8017144:	d10d      	bne.n	8017162 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	691b      	ldr	r3, [r3, #16]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d009      	beq.n	8017162 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801714e:	68bb      	ldr	r3, [r7, #8]
 8017150:	6919      	ldr	r1, [r3, #16]
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	015a      	lsls	r2, r3, #5
 8017156:	69fb      	ldr	r3, [r7, #28]
 8017158:	4413      	add	r3, r2
 801715a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801715e:	460a      	mov	r2, r1
 8017160:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8017162:	68bb      	ldr	r3, [r7, #8]
 8017164:	791b      	ldrb	r3, [r3, #4]
 8017166:	2b01      	cmp	r3, #1
 8017168:	d128      	bne.n	80171bc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801716a:	69fb      	ldr	r3, [r7, #28]
 801716c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017170:	689b      	ldr	r3, [r3, #8]
 8017172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017176:	2b00      	cmp	r3, #0
 8017178:	d110      	bne.n	801719c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801717a:	69bb      	ldr	r3, [r7, #24]
 801717c:	015a      	lsls	r2, r3, #5
 801717e:	69fb      	ldr	r3, [r7, #28]
 8017180:	4413      	add	r3, r2
 8017182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	69ba      	ldr	r2, [r7, #24]
 801718a:	0151      	lsls	r1, r2, #5
 801718c:	69fa      	ldr	r2, [r7, #28]
 801718e:	440a      	add	r2, r1
 8017190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017194:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017198:	6013      	str	r3, [r2, #0]
 801719a:	e00f      	b.n	80171bc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801719c:	69bb      	ldr	r3, [r7, #24]
 801719e:	015a      	lsls	r2, r3, #5
 80171a0:	69fb      	ldr	r3, [r7, #28]
 80171a2:	4413      	add	r3, r2
 80171a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	69ba      	ldr	r2, [r7, #24]
 80171ac:	0151      	lsls	r1, r2, #5
 80171ae:	69fa      	ldr	r2, [r7, #28]
 80171b0:	440a      	add	r2, r1
 80171b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80171b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80171ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80171bc:	69bb      	ldr	r3, [r7, #24]
 80171be:	015a      	lsls	r2, r3, #5
 80171c0:	69fb      	ldr	r3, [r7, #28]
 80171c2:	4413      	add	r3, r2
 80171c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	69ba      	ldr	r2, [r7, #24]
 80171cc:	0151      	lsls	r1, r2, #5
 80171ce:	69fa      	ldr	r2, [r7, #28]
 80171d0:	440a      	add	r2, r1
 80171d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80171d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80171da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80171dc:	2300      	movs	r3, #0
}
 80171de:	4618      	mov	r0, r3
 80171e0:	3720      	adds	r7, #32
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}
 80171e6:	bf00      	nop
 80171e8:	1ff80000 	.word	0x1ff80000

080171ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80171ec:	b480      	push	{r7}
 80171ee:	b087      	sub	sp, #28
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	60f8      	str	r0, [r7, #12]
 80171f4:	60b9      	str	r1, [r7, #8]
 80171f6:	4613      	mov	r3, r2
 80171f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80171fe:	68bb      	ldr	r3, [r7, #8]
 8017200:	781b      	ldrb	r3, [r3, #0]
 8017202:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8017204:	68bb      	ldr	r3, [r7, #8]
 8017206:	785b      	ldrb	r3, [r3, #1]
 8017208:	2b01      	cmp	r3, #1
 801720a:	f040 80ce 	bne.w	80173aa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801720e:	68bb      	ldr	r3, [r7, #8]
 8017210:	699b      	ldr	r3, [r3, #24]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d132      	bne.n	801727c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8017216:	693b      	ldr	r3, [r7, #16]
 8017218:	015a      	lsls	r2, r3, #5
 801721a:	697b      	ldr	r3, [r7, #20]
 801721c:	4413      	add	r3, r2
 801721e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017222:	691b      	ldr	r3, [r3, #16]
 8017224:	693a      	ldr	r2, [r7, #16]
 8017226:	0151      	lsls	r1, r2, #5
 8017228:	697a      	ldr	r2, [r7, #20]
 801722a:	440a      	add	r2, r1
 801722c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017230:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8017234:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017238:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801723a:	693b      	ldr	r3, [r7, #16]
 801723c:	015a      	lsls	r2, r3, #5
 801723e:	697b      	ldr	r3, [r7, #20]
 8017240:	4413      	add	r3, r2
 8017242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017246:	691b      	ldr	r3, [r3, #16]
 8017248:	693a      	ldr	r2, [r7, #16]
 801724a:	0151      	lsls	r1, r2, #5
 801724c:	697a      	ldr	r2, [r7, #20]
 801724e:	440a      	add	r2, r1
 8017250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017258:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801725a:	693b      	ldr	r3, [r7, #16]
 801725c:	015a      	lsls	r2, r3, #5
 801725e:	697b      	ldr	r3, [r7, #20]
 8017260:	4413      	add	r3, r2
 8017262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017266:	691b      	ldr	r3, [r3, #16]
 8017268:	693a      	ldr	r2, [r7, #16]
 801726a:	0151      	lsls	r1, r2, #5
 801726c:	697a      	ldr	r2, [r7, #20]
 801726e:	440a      	add	r2, r1
 8017270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017274:	0cdb      	lsrs	r3, r3, #19
 8017276:	04db      	lsls	r3, r3, #19
 8017278:	6113      	str	r3, [r2, #16]
 801727a:	e04e      	b.n	801731a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801727c:	693b      	ldr	r3, [r7, #16]
 801727e:	015a      	lsls	r2, r3, #5
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	4413      	add	r3, r2
 8017284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017288:	691b      	ldr	r3, [r3, #16]
 801728a:	693a      	ldr	r2, [r7, #16]
 801728c:	0151      	lsls	r1, r2, #5
 801728e:	697a      	ldr	r2, [r7, #20]
 8017290:	440a      	add	r2, r1
 8017292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017296:	0cdb      	lsrs	r3, r3, #19
 8017298:	04db      	lsls	r3, r3, #19
 801729a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801729c:	693b      	ldr	r3, [r7, #16]
 801729e:	015a      	lsls	r2, r3, #5
 80172a0:	697b      	ldr	r3, [r7, #20]
 80172a2:	4413      	add	r3, r2
 80172a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172a8:	691b      	ldr	r3, [r3, #16]
 80172aa:	693a      	ldr	r2, [r7, #16]
 80172ac:	0151      	lsls	r1, r2, #5
 80172ae:	697a      	ldr	r2, [r7, #20]
 80172b0:	440a      	add	r2, r1
 80172b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80172b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80172ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80172be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80172c0:	68bb      	ldr	r3, [r7, #8]
 80172c2:	699a      	ldr	r2, [r3, #24]
 80172c4:	68bb      	ldr	r3, [r7, #8]
 80172c6:	68db      	ldr	r3, [r3, #12]
 80172c8:	429a      	cmp	r2, r3
 80172ca:	d903      	bls.n	80172d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	68da      	ldr	r2, [r3, #12]
 80172d0:	68bb      	ldr	r3, [r7, #8]
 80172d2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80172d4:	693b      	ldr	r3, [r7, #16]
 80172d6:	015a      	lsls	r2, r3, #5
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	4413      	add	r3, r2
 80172dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80172e0:	691b      	ldr	r3, [r3, #16]
 80172e2:	693a      	ldr	r2, [r7, #16]
 80172e4:	0151      	lsls	r1, r2, #5
 80172e6:	697a      	ldr	r2, [r7, #20]
 80172e8:	440a      	add	r2, r1
 80172ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80172ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80172f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80172f4:	693b      	ldr	r3, [r7, #16]
 80172f6:	015a      	lsls	r2, r3, #5
 80172f8:	697b      	ldr	r3, [r7, #20]
 80172fa:	4413      	add	r3, r2
 80172fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017300:	691a      	ldr	r2, [r3, #16]
 8017302:	68bb      	ldr	r3, [r7, #8]
 8017304:	699b      	ldr	r3, [r3, #24]
 8017306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801730a:	6939      	ldr	r1, [r7, #16]
 801730c:	0148      	lsls	r0, r1, #5
 801730e:	6979      	ldr	r1, [r7, #20]
 8017310:	4401      	add	r1, r0
 8017312:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8017316:	4313      	orrs	r3, r2
 8017318:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801731a:	79fb      	ldrb	r3, [r7, #7]
 801731c:	2b01      	cmp	r3, #1
 801731e:	d11e      	bne.n	801735e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	695b      	ldr	r3, [r3, #20]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d009      	beq.n	801733c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8017328:	693b      	ldr	r3, [r7, #16]
 801732a:	015a      	lsls	r2, r3, #5
 801732c:	697b      	ldr	r3, [r7, #20]
 801732e:	4413      	add	r3, r2
 8017330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017334:	461a      	mov	r2, r3
 8017336:	68bb      	ldr	r3, [r7, #8]
 8017338:	695b      	ldr	r3, [r3, #20]
 801733a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801733c:	693b      	ldr	r3, [r7, #16]
 801733e:	015a      	lsls	r2, r3, #5
 8017340:	697b      	ldr	r3, [r7, #20]
 8017342:	4413      	add	r3, r2
 8017344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	693a      	ldr	r2, [r7, #16]
 801734c:	0151      	lsls	r1, r2, #5
 801734e:	697a      	ldr	r2, [r7, #20]
 8017350:	440a      	add	r2, r1
 8017352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017356:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801735a:	6013      	str	r3, [r2, #0]
 801735c:	e097      	b.n	801748e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801735e:	693b      	ldr	r3, [r7, #16]
 8017360:	015a      	lsls	r2, r3, #5
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	4413      	add	r3, r2
 8017366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	693a      	ldr	r2, [r7, #16]
 801736e:	0151      	lsls	r1, r2, #5
 8017370:	697a      	ldr	r2, [r7, #20]
 8017372:	440a      	add	r2, r1
 8017374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017378:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801737c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801737e:	68bb      	ldr	r3, [r7, #8]
 8017380:	699b      	ldr	r3, [r3, #24]
 8017382:	2b00      	cmp	r3, #0
 8017384:	f000 8083 	beq.w	801748e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8017388:	697b      	ldr	r3, [r7, #20]
 801738a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801738e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	781b      	ldrb	r3, [r3, #0]
 8017394:	f003 030f 	and.w	r3, r3, #15
 8017398:	2101      	movs	r1, #1
 801739a:	fa01 f303 	lsl.w	r3, r1, r3
 801739e:	6979      	ldr	r1, [r7, #20]
 80173a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80173a4:	4313      	orrs	r3, r2
 80173a6:	634b      	str	r3, [r1, #52]	; 0x34
 80173a8:	e071      	b.n	801748e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80173aa:	693b      	ldr	r3, [r7, #16]
 80173ac:	015a      	lsls	r2, r3, #5
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	4413      	add	r3, r2
 80173b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80173b6:	691b      	ldr	r3, [r3, #16]
 80173b8:	693a      	ldr	r2, [r7, #16]
 80173ba:	0151      	lsls	r1, r2, #5
 80173bc:	697a      	ldr	r2, [r7, #20]
 80173be:	440a      	add	r2, r1
 80173c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80173c4:	0cdb      	lsrs	r3, r3, #19
 80173c6:	04db      	lsls	r3, r3, #19
 80173c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80173ca:	693b      	ldr	r3, [r7, #16]
 80173cc:	015a      	lsls	r2, r3, #5
 80173ce:	697b      	ldr	r3, [r7, #20]
 80173d0:	4413      	add	r3, r2
 80173d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80173d6:	691b      	ldr	r3, [r3, #16]
 80173d8:	693a      	ldr	r2, [r7, #16]
 80173da:	0151      	lsls	r1, r2, #5
 80173dc:	697a      	ldr	r2, [r7, #20]
 80173de:	440a      	add	r2, r1
 80173e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80173e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80173e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80173ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80173ee:	68bb      	ldr	r3, [r7, #8]
 80173f0:	699b      	ldr	r3, [r3, #24]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d003      	beq.n	80173fe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80173f6:	68bb      	ldr	r3, [r7, #8]
 80173f8:	68da      	ldr	r2, [r3, #12]
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80173fe:	68bb      	ldr	r3, [r7, #8]
 8017400:	68da      	ldr	r2, [r3, #12]
 8017402:	68bb      	ldr	r3, [r7, #8]
 8017404:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017406:	693b      	ldr	r3, [r7, #16]
 8017408:	015a      	lsls	r2, r3, #5
 801740a:	697b      	ldr	r3, [r7, #20]
 801740c:	4413      	add	r3, r2
 801740e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017412:	691b      	ldr	r3, [r3, #16]
 8017414:	693a      	ldr	r2, [r7, #16]
 8017416:	0151      	lsls	r1, r2, #5
 8017418:	697a      	ldr	r2, [r7, #20]
 801741a:	440a      	add	r2, r1
 801741c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017424:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	015a      	lsls	r2, r3, #5
 801742a:	697b      	ldr	r3, [r7, #20]
 801742c:	4413      	add	r3, r2
 801742e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017432:	691a      	ldr	r2, [r3, #16]
 8017434:	68bb      	ldr	r3, [r7, #8]
 8017436:	69db      	ldr	r3, [r3, #28]
 8017438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801743c:	6939      	ldr	r1, [r7, #16]
 801743e:	0148      	lsls	r0, r1, #5
 8017440:	6979      	ldr	r1, [r7, #20]
 8017442:	4401      	add	r1, r0
 8017444:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8017448:	4313      	orrs	r3, r2
 801744a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801744c:	79fb      	ldrb	r3, [r7, #7]
 801744e:	2b01      	cmp	r3, #1
 8017450:	d10d      	bne.n	801746e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8017452:	68bb      	ldr	r3, [r7, #8]
 8017454:	691b      	ldr	r3, [r3, #16]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d009      	beq.n	801746e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	6919      	ldr	r1, [r3, #16]
 801745e:	693b      	ldr	r3, [r7, #16]
 8017460:	015a      	lsls	r2, r3, #5
 8017462:	697b      	ldr	r3, [r7, #20]
 8017464:	4413      	add	r3, r2
 8017466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801746a:	460a      	mov	r2, r1
 801746c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801746e:	693b      	ldr	r3, [r7, #16]
 8017470:	015a      	lsls	r2, r3, #5
 8017472:	697b      	ldr	r3, [r7, #20]
 8017474:	4413      	add	r3, r2
 8017476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	693a      	ldr	r2, [r7, #16]
 801747e:	0151      	lsls	r1, r2, #5
 8017480:	697a      	ldr	r2, [r7, #20]
 8017482:	440a      	add	r2, r1
 8017484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017488:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801748c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801748e:	2300      	movs	r3, #0
}
 8017490:	4618      	mov	r0, r3
 8017492:	371c      	adds	r7, #28
 8017494:	46bd      	mov	sp, r7
 8017496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749a:	4770      	bx	lr

0801749c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801749c:	b480      	push	{r7}
 801749e:	b087      	sub	sp, #28
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
 80174a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80174a6:	2300      	movs	r3, #0
 80174a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80174aa:	2300      	movs	r3, #0
 80174ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80174b2:	683b      	ldr	r3, [r7, #0]
 80174b4:	785b      	ldrb	r3, [r3, #1]
 80174b6:	2b01      	cmp	r3, #1
 80174b8:	d14a      	bne.n	8017550 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	781b      	ldrb	r3, [r3, #0]
 80174be:	015a      	lsls	r2, r3, #5
 80174c0:	693b      	ldr	r3, [r7, #16]
 80174c2:	4413      	add	r3, r2
 80174c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80174ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80174d2:	f040 8086 	bne.w	80175e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80174d6:	683b      	ldr	r3, [r7, #0]
 80174d8:	781b      	ldrb	r3, [r3, #0]
 80174da:	015a      	lsls	r2, r3, #5
 80174dc:	693b      	ldr	r3, [r7, #16]
 80174de:	4413      	add	r3, r2
 80174e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	683a      	ldr	r2, [r7, #0]
 80174e8:	7812      	ldrb	r2, [r2, #0]
 80174ea:	0151      	lsls	r1, r2, #5
 80174ec:	693a      	ldr	r2, [r7, #16]
 80174ee:	440a      	add	r2, r1
 80174f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80174f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80174f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	781b      	ldrb	r3, [r3, #0]
 80174fe:	015a      	lsls	r2, r3, #5
 8017500:	693b      	ldr	r3, [r7, #16]
 8017502:	4413      	add	r3, r2
 8017504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	683a      	ldr	r2, [r7, #0]
 801750c:	7812      	ldrb	r2, [r2, #0]
 801750e:	0151      	lsls	r1, r2, #5
 8017510:	693a      	ldr	r2, [r7, #16]
 8017512:	440a      	add	r2, r1
 8017514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801751c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	3301      	adds	r3, #1
 8017522:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	f242 7210 	movw	r2, #10000	; 0x2710
 801752a:	4293      	cmp	r3, r2
 801752c:	d902      	bls.n	8017534 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801752e:	2301      	movs	r3, #1
 8017530:	75fb      	strb	r3, [r7, #23]
          break;
 8017532:	e056      	b.n	80175e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8017534:	683b      	ldr	r3, [r7, #0]
 8017536:	781b      	ldrb	r3, [r3, #0]
 8017538:	015a      	lsls	r2, r3, #5
 801753a:	693b      	ldr	r3, [r7, #16]
 801753c:	4413      	add	r3, r2
 801753e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801754c:	d0e7      	beq.n	801751e <USB_EPStopXfer+0x82>
 801754e:	e048      	b.n	80175e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017550:	683b      	ldr	r3, [r7, #0]
 8017552:	781b      	ldrb	r3, [r3, #0]
 8017554:	015a      	lsls	r2, r3, #5
 8017556:	693b      	ldr	r3, [r7, #16]
 8017558:	4413      	add	r3, r2
 801755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017568:	d13b      	bne.n	80175e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	781b      	ldrb	r3, [r3, #0]
 801756e:	015a      	lsls	r2, r3, #5
 8017570:	693b      	ldr	r3, [r7, #16]
 8017572:	4413      	add	r3, r2
 8017574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	683a      	ldr	r2, [r7, #0]
 801757c:	7812      	ldrb	r2, [r2, #0]
 801757e:	0151      	lsls	r1, r2, #5
 8017580:	693a      	ldr	r2, [r7, #16]
 8017582:	440a      	add	r2, r1
 8017584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017588:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801758c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801758e:	683b      	ldr	r3, [r7, #0]
 8017590:	781b      	ldrb	r3, [r3, #0]
 8017592:	015a      	lsls	r2, r3, #5
 8017594:	693b      	ldr	r3, [r7, #16]
 8017596:	4413      	add	r3, r2
 8017598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	683a      	ldr	r2, [r7, #0]
 80175a0:	7812      	ldrb	r2, [r2, #0]
 80175a2:	0151      	lsls	r1, r2, #5
 80175a4:	693a      	ldr	r2, [r7, #16]
 80175a6:	440a      	add	r2, r1
 80175a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80175ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80175b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	3301      	adds	r3, #1
 80175b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80175be:	4293      	cmp	r3, r2
 80175c0:	d902      	bls.n	80175c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80175c2:	2301      	movs	r3, #1
 80175c4:	75fb      	strb	r3, [r7, #23]
          break;
 80175c6:	e00c      	b.n	80175e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80175c8:	683b      	ldr	r3, [r7, #0]
 80175ca:	781b      	ldrb	r3, [r3, #0]
 80175cc:	015a      	lsls	r2, r3, #5
 80175ce:	693b      	ldr	r3, [r7, #16]
 80175d0:	4413      	add	r3, r2
 80175d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80175dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80175e0:	d0e7      	beq.n	80175b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80175e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80175e4:	4618      	mov	r0, r3
 80175e6:	371c      	adds	r7, #28
 80175e8:	46bd      	mov	sp, r7
 80175ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ee:	4770      	bx	lr

080175f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80175f0:	b480      	push	{r7}
 80175f2:	b089      	sub	sp, #36	; 0x24
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	60f8      	str	r0, [r7, #12]
 80175f8:	60b9      	str	r1, [r7, #8]
 80175fa:	4611      	mov	r1, r2
 80175fc:	461a      	mov	r2, r3
 80175fe:	460b      	mov	r3, r1
 8017600:	71fb      	strb	r3, [r7, #7]
 8017602:	4613      	mov	r3, r2
 8017604:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801760e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017612:	2b00      	cmp	r3, #0
 8017614:	d123      	bne.n	801765e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8017616:	88bb      	ldrh	r3, [r7, #4]
 8017618:	3303      	adds	r3, #3
 801761a:	089b      	lsrs	r3, r3, #2
 801761c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801761e:	2300      	movs	r3, #0
 8017620:	61bb      	str	r3, [r7, #24]
 8017622:	e018      	b.n	8017656 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8017624:	79fb      	ldrb	r3, [r7, #7]
 8017626:	031a      	lsls	r2, r3, #12
 8017628:	697b      	ldr	r3, [r7, #20]
 801762a:	4413      	add	r3, r2
 801762c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017630:	461a      	mov	r2, r3
 8017632:	69fb      	ldr	r3, [r7, #28]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	6013      	str	r3, [r2, #0]
      pSrc++;
 8017638:	69fb      	ldr	r3, [r7, #28]
 801763a:	3301      	adds	r3, #1
 801763c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801763e:	69fb      	ldr	r3, [r7, #28]
 8017640:	3301      	adds	r3, #1
 8017642:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8017644:	69fb      	ldr	r3, [r7, #28]
 8017646:	3301      	adds	r3, #1
 8017648:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801764a:	69fb      	ldr	r3, [r7, #28]
 801764c:	3301      	adds	r3, #1
 801764e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8017650:	69bb      	ldr	r3, [r7, #24]
 8017652:	3301      	adds	r3, #1
 8017654:	61bb      	str	r3, [r7, #24]
 8017656:	69ba      	ldr	r2, [r7, #24]
 8017658:	693b      	ldr	r3, [r7, #16]
 801765a:	429a      	cmp	r2, r3
 801765c:	d3e2      	bcc.n	8017624 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801765e:	2300      	movs	r3, #0
}
 8017660:	4618      	mov	r0, r3
 8017662:	3724      	adds	r7, #36	; 0x24
 8017664:	46bd      	mov	sp, r7
 8017666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766a:	4770      	bx	lr

0801766c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801766c:	b480      	push	{r7}
 801766e:	b08b      	sub	sp, #44	; 0x2c
 8017670:	af00      	add	r7, sp, #0
 8017672:	60f8      	str	r0, [r7, #12]
 8017674:	60b9      	str	r1, [r7, #8]
 8017676:	4613      	mov	r3, r2
 8017678:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801767e:	68bb      	ldr	r3, [r7, #8]
 8017680:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8017682:	88fb      	ldrh	r3, [r7, #6]
 8017684:	089b      	lsrs	r3, r3, #2
 8017686:	b29b      	uxth	r3, r3
 8017688:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801768a:	88fb      	ldrh	r3, [r7, #6]
 801768c:	f003 0303 	and.w	r3, r3, #3
 8017690:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8017692:	2300      	movs	r3, #0
 8017694:	623b      	str	r3, [r7, #32]
 8017696:	e014      	b.n	80176c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8017698:	69bb      	ldr	r3, [r7, #24]
 801769a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801769e:	681a      	ldr	r2, [r3, #0]
 80176a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80176a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176a6:	3301      	adds	r3, #1
 80176a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80176aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ac:	3301      	adds	r3, #1
 80176ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80176b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176b2:	3301      	adds	r3, #1
 80176b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80176b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176b8:	3301      	adds	r3, #1
 80176ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80176bc:	6a3b      	ldr	r3, [r7, #32]
 80176be:	3301      	adds	r3, #1
 80176c0:	623b      	str	r3, [r7, #32]
 80176c2:	6a3a      	ldr	r2, [r7, #32]
 80176c4:	697b      	ldr	r3, [r7, #20]
 80176c6:	429a      	cmp	r2, r3
 80176c8:	d3e6      	bcc.n	8017698 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80176ca:	8bfb      	ldrh	r3, [r7, #30]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d01e      	beq.n	801770e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80176d0:	2300      	movs	r3, #0
 80176d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80176d4:	69bb      	ldr	r3, [r7, #24]
 80176d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80176da:	461a      	mov	r2, r3
 80176dc:	f107 0310 	add.w	r3, r7, #16
 80176e0:	6812      	ldr	r2, [r2, #0]
 80176e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80176e4:	693a      	ldr	r2, [r7, #16]
 80176e6:	6a3b      	ldr	r3, [r7, #32]
 80176e8:	b2db      	uxtb	r3, r3
 80176ea:	00db      	lsls	r3, r3, #3
 80176ec:	fa22 f303 	lsr.w	r3, r2, r3
 80176f0:	b2da      	uxtb	r2, r3
 80176f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176f4:	701a      	strb	r2, [r3, #0]
      i++;
 80176f6:	6a3b      	ldr	r3, [r7, #32]
 80176f8:	3301      	adds	r3, #1
 80176fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80176fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176fe:	3301      	adds	r3, #1
 8017700:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8017702:	8bfb      	ldrh	r3, [r7, #30]
 8017704:	3b01      	subs	r3, #1
 8017706:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8017708:	8bfb      	ldrh	r3, [r7, #30]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d1ea      	bne.n	80176e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017710:	4618      	mov	r0, r3
 8017712:	372c      	adds	r7, #44	; 0x2c
 8017714:	46bd      	mov	sp, r7
 8017716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771a:	4770      	bx	lr

0801771c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801771c:	b480      	push	{r7}
 801771e:	b085      	sub	sp, #20
 8017720:	af00      	add	r7, sp, #0
 8017722:	6078      	str	r0, [r7, #4]
 8017724:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801772a:	683b      	ldr	r3, [r7, #0]
 801772c:	781b      	ldrb	r3, [r3, #0]
 801772e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	785b      	ldrb	r3, [r3, #1]
 8017734:	2b01      	cmp	r3, #1
 8017736:	d12c      	bne.n	8017792 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	015a      	lsls	r2, r3, #5
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	4413      	add	r3, r2
 8017740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	2b00      	cmp	r3, #0
 8017748:	db12      	blt.n	8017770 <USB_EPSetStall+0x54>
 801774a:	68bb      	ldr	r3, [r7, #8]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d00f      	beq.n	8017770 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	015a      	lsls	r2, r3, #5
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	4413      	add	r3, r2
 8017758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	68ba      	ldr	r2, [r7, #8]
 8017760:	0151      	lsls	r1, r2, #5
 8017762:	68fa      	ldr	r2, [r7, #12]
 8017764:	440a      	add	r2, r1
 8017766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801776a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801776e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8017770:	68bb      	ldr	r3, [r7, #8]
 8017772:	015a      	lsls	r2, r3, #5
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	4413      	add	r3, r2
 8017778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	68ba      	ldr	r2, [r7, #8]
 8017780:	0151      	lsls	r1, r2, #5
 8017782:	68fa      	ldr	r2, [r7, #12]
 8017784:	440a      	add	r2, r1
 8017786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801778a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801778e:	6013      	str	r3, [r2, #0]
 8017790:	e02b      	b.n	80177ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8017792:	68bb      	ldr	r3, [r7, #8]
 8017794:	015a      	lsls	r2, r3, #5
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	4413      	add	r3, r2
 801779a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	db12      	blt.n	80177ca <USB_EPSetStall+0xae>
 80177a4:	68bb      	ldr	r3, [r7, #8]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d00f      	beq.n	80177ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80177aa:	68bb      	ldr	r3, [r7, #8]
 80177ac:	015a      	lsls	r2, r3, #5
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	4413      	add	r3, r2
 80177b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	68ba      	ldr	r2, [r7, #8]
 80177ba:	0151      	lsls	r1, r2, #5
 80177bc:	68fa      	ldr	r2, [r7, #12]
 80177be:	440a      	add	r2, r1
 80177c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80177c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80177c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80177ca:	68bb      	ldr	r3, [r7, #8]
 80177cc:	015a      	lsls	r2, r3, #5
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	4413      	add	r3, r2
 80177d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	68ba      	ldr	r2, [r7, #8]
 80177da:	0151      	lsls	r1, r2, #5
 80177dc:	68fa      	ldr	r2, [r7, #12]
 80177de:	440a      	add	r2, r1
 80177e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80177e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80177e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80177ea:	2300      	movs	r3, #0
}
 80177ec:	4618      	mov	r0, r3
 80177ee:	3714      	adds	r7, #20
 80177f0:	46bd      	mov	sp, r7
 80177f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f6:	4770      	bx	lr

080177f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80177f8:	b480      	push	{r7}
 80177fa:	b085      	sub	sp, #20
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
 8017800:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8017806:	683b      	ldr	r3, [r7, #0]
 8017808:	781b      	ldrb	r3, [r3, #0]
 801780a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	785b      	ldrb	r3, [r3, #1]
 8017810:	2b01      	cmp	r3, #1
 8017812:	d128      	bne.n	8017866 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8017814:	68bb      	ldr	r3, [r7, #8]
 8017816:	015a      	lsls	r2, r3, #5
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	4413      	add	r3, r2
 801781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	68ba      	ldr	r2, [r7, #8]
 8017824:	0151      	lsls	r1, r2, #5
 8017826:	68fa      	ldr	r2, [r7, #12]
 8017828:	440a      	add	r2, r1
 801782a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801782e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017832:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017834:	683b      	ldr	r3, [r7, #0]
 8017836:	791b      	ldrb	r3, [r3, #4]
 8017838:	2b03      	cmp	r3, #3
 801783a:	d003      	beq.n	8017844 <USB_EPClearStall+0x4c>
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	791b      	ldrb	r3, [r3, #4]
 8017840:	2b02      	cmp	r3, #2
 8017842:	d138      	bne.n	80178b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017844:	68bb      	ldr	r3, [r7, #8]
 8017846:	015a      	lsls	r2, r3, #5
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	4413      	add	r3, r2
 801784c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	68ba      	ldr	r2, [r7, #8]
 8017854:	0151      	lsls	r1, r2, #5
 8017856:	68fa      	ldr	r2, [r7, #12]
 8017858:	440a      	add	r2, r1
 801785a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801785e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017862:	6013      	str	r3, [r2, #0]
 8017864:	e027      	b.n	80178b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8017866:	68bb      	ldr	r3, [r7, #8]
 8017868:	015a      	lsls	r2, r3, #5
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	4413      	add	r3, r2
 801786e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	68ba      	ldr	r2, [r7, #8]
 8017876:	0151      	lsls	r1, r2, #5
 8017878:	68fa      	ldr	r2, [r7, #12]
 801787a:	440a      	add	r2, r1
 801787c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017880:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017884:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017886:	683b      	ldr	r3, [r7, #0]
 8017888:	791b      	ldrb	r3, [r3, #4]
 801788a:	2b03      	cmp	r3, #3
 801788c:	d003      	beq.n	8017896 <USB_EPClearStall+0x9e>
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	791b      	ldrb	r3, [r3, #4]
 8017892:	2b02      	cmp	r3, #2
 8017894:	d10f      	bne.n	80178b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017896:	68bb      	ldr	r3, [r7, #8]
 8017898:	015a      	lsls	r2, r3, #5
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	4413      	add	r3, r2
 801789e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	68ba      	ldr	r2, [r7, #8]
 80178a6:	0151      	lsls	r1, r2, #5
 80178a8:	68fa      	ldr	r2, [r7, #12]
 80178aa:	440a      	add	r2, r1
 80178ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80178b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80178b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80178b6:	2300      	movs	r3, #0
}
 80178b8:	4618      	mov	r0, r3
 80178ba:	3714      	adds	r7, #20
 80178bc:	46bd      	mov	sp, r7
 80178be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c2:	4770      	bx	lr

080178c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80178c4:	b480      	push	{r7}
 80178c6:	b085      	sub	sp, #20
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
 80178cc:	460b      	mov	r3, r1
 80178ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	68fa      	ldr	r2, [r7, #12]
 80178de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80178e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80178e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80178ee:	681a      	ldr	r2, [r3, #0]
 80178f0:	78fb      	ldrb	r3, [r7, #3]
 80178f2:	011b      	lsls	r3, r3, #4
 80178f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80178f8:	68f9      	ldr	r1, [r7, #12]
 80178fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80178fe:	4313      	orrs	r3, r2
 8017900:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8017902:	2300      	movs	r3, #0
}
 8017904:	4618      	mov	r0, r3
 8017906:	3714      	adds	r7, #20
 8017908:	46bd      	mov	sp, r7
 801790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790e:	4770      	bx	lr

08017910 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017910:	b480      	push	{r7}
 8017912:	b085      	sub	sp, #20
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	68fa      	ldr	r2, [r7, #12]
 8017926:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801792a:	f023 0303 	bic.w	r3, r3, #3
 801792e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017936:	685b      	ldr	r3, [r3, #4]
 8017938:	68fa      	ldr	r2, [r7, #12]
 801793a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801793e:	f023 0302 	bic.w	r3, r3, #2
 8017942:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017944:	2300      	movs	r3, #0
}
 8017946:	4618      	mov	r0, r3
 8017948:	3714      	adds	r7, #20
 801794a:	46bd      	mov	sp, r7
 801794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017950:	4770      	bx	lr

08017952 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017952:	b480      	push	{r7}
 8017954:	b085      	sub	sp, #20
 8017956:	af00      	add	r7, sp, #0
 8017958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	68fa      	ldr	r2, [r7, #12]
 8017968:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801796c:	f023 0303 	bic.w	r3, r3, #3
 8017970:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017978:	685b      	ldr	r3, [r3, #4]
 801797a:	68fa      	ldr	r2, [r7, #12]
 801797c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017980:	f043 0302 	orr.w	r3, r3, #2
 8017984:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017986:	2300      	movs	r3, #0
}
 8017988:	4618      	mov	r0, r3
 801798a:	3714      	adds	r7, #20
 801798c:	46bd      	mov	sp, r7
 801798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017992:	4770      	bx	lr

08017994 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8017994:	b480      	push	{r7}
 8017996:	b085      	sub	sp, #20
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	695b      	ldr	r3, [r3, #20]
 80179a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	699b      	ldr	r3, [r3, #24]
 80179a6:	68fa      	ldr	r2, [r7, #12]
 80179a8:	4013      	ands	r3, r2
 80179aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80179ac:	68fb      	ldr	r3, [r7, #12]
}
 80179ae:	4618      	mov	r0, r3
 80179b0:	3714      	adds	r7, #20
 80179b2:	46bd      	mov	sp, r7
 80179b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b8:	4770      	bx	lr

080179ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80179ba:	b480      	push	{r7}
 80179bc:	b085      	sub	sp, #20
 80179be:	af00      	add	r7, sp, #0
 80179c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80179cc:	699b      	ldr	r3, [r3, #24]
 80179ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80179d6:	69db      	ldr	r3, [r3, #28]
 80179d8:	68ba      	ldr	r2, [r7, #8]
 80179da:	4013      	ands	r3, r2
 80179dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80179de:	68bb      	ldr	r3, [r7, #8]
 80179e0:	0c1b      	lsrs	r3, r3, #16
}
 80179e2:	4618      	mov	r0, r3
 80179e4:	3714      	adds	r7, #20
 80179e6:	46bd      	mov	sp, r7
 80179e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ec:	4770      	bx	lr

080179ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80179ee:	b480      	push	{r7}
 80179f0:	b085      	sub	sp, #20
 80179f2:	af00      	add	r7, sp, #0
 80179f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017a00:	699b      	ldr	r3, [r3, #24]
 8017a02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017a0a:	69db      	ldr	r3, [r3, #28]
 8017a0c:	68ba      	ldr	r2, [r7, #8]
 8017a0e:	4013      	ands	r3, r2
 8017a10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8017a12:	68bb      	ldr	r3, [r7, #8]
 8017a14:	b29b      	uxth	r3, r3
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	3714      	adds	r7, #20
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a20:	4770      	bx	lr

08017a22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017a22:	b480      	push	{r7}
 8017a24:	b085      	sub	sp, #20
 8017a26:	af00      	add	r7, sp, #0
 8017a28:	6078      	str	r0, [r7, #4]
 8017a2a:	460b      	mov	r3, r1
 8017a2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8017a32:	78fb      	ldrb	r3, [r7, #3]
 8017a34:	015a      	lsls	r2, r3, #5
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	4413      	add	r3, r2
 8017a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017a3e:	689b      	ldr	r3, [r3, #8]
 8017a40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017a48:	695b      	ldr	r3, [r3, #20]
 8017a4a:	68ba      	ldr	r2, [r7, #8]
 8017a4c:	4013      	ands	r3, r2
 8017a4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017a50:	68bb      	ldr	r3, [r7, #8]
}
 8017a52:	4618      	mov	r0, r3
 8017a54:	3714      	adds	r7, #20
 8017a56:	46bd      	mov	sp, r7
 8017a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5c:	4770      	bx	lr

08017a5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017a5e:	b480      	push	{r7}
 8017a60:	b087      	sub	sp, #28
 8017a62:	af00      	add	r7, sp, #0
 8017a64:	6078      	str	r0, [r7, #4]
 8017a66:	460b      	mov	r3, r1
 8017a68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8017a6e:	697b      	ldr	r3, [r7, #20]
 8017a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017a74:	691b      	ldr	r3, [r3, #16]
 8017a76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8017a78:	697b      	ldr	r3, [r7, #20]
 8017a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8017a82:	78fb      	ldrb	r3, [r7, #3]
 8017a84:	f003 030f 	and.w	r3, r3, #15
 8017a88:	68fa      	ldr	r2, [r7, #12]
 8017a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8017a8e:	01db      	lsls	r3, r3, #7
 8017a90:	b2db      	uxtb	r3, r3
 8017a92:	693a      	ldr	r2, [r7, #16]
 8017a94:	4313      	orrs	r3, r2
 8017a96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8017a98:	78fb      	ldrb	r3, [r7, #3]
 8017a9a:	015a      	lsls	r2, r3, #5
 8017a9c:	697b      	ldr	r3, [r7, #20]
 8017a9e:	4413      	add	r3, r2
 8017aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017aa4:	689b      	ldr	r3, [r3, #8]
 8017aa6:	693a      	ldr	r2, [r7, #16]
 8017aa8:	4013      	ands	r3, r2
 8017aaa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017aac:	68bb      	ldr	r3, [r7, #8]
}
 8017aae:	4618      	mov	r0, r3
 8017ab0:	371c      	adds	r7, #28
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab8:	4770      	bx	lr

08017aba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8017aba:	b480      	push	{r7}
 8017abc:	b083      	sub	sp, #12
 8017abe:	af00      	add	r7, sp, #0
 8017ac0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	695b      	ldr	r3, [r3, #20]
 8017ac6:	f003 0301 	and.w	r3, r3, #1
}
 8017aca:	4618      	mov	r0, r3
 8017acc:	370c      	adds	r7, #12
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad4:	4770      	bx	lr

08017ad6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8017ad6:	b480      	push	{r7}
 8017ad8:	b085      	sub	sp, #20
 8017ada:	af00      	add	r7, sp, #0
 8017adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	68fa      	ldr	r2, [r7, #12]
 8017aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017af0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8017af4:	f023 0307 	bic.w	r3, r3, #7
 8017af8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017b00:	685b      	ldr	r3, [r3, #4]
 8017b02:	68fa      	ldr	r2, [r7, #12]
 8017b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017b0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017b0e:	2300      	movs	r3, #0
}
 8017b10:	4618      	mov	r0, r3
 8017b12:	3714      	adds	r7, #20
 8017b14:	46bd      	mov	sp, r7
 8017b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1a:	4770      	bx	lr

08017b1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8017b1c:	b480      	push	{r7}
 8017b1e:	b087      	sub	sp, #28
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	60f8      	str	r0, [r7, #12]
 8017b24:	460b      	mov	r3, r1
 8017b26:	607a      	str	r2, [r7, #4]
 8017b28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	333c      	adds	r3, #60	; 0x3c
 8017b32:	3304      	adds	r3, #4
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8017b38:	693b      	ldr	r3, [r7, #16]
 8017b3a:	4a26      	ldr	r2, [pc, #152]	; (8017bd4 <USB_EP0_OutStart+0xb8>)
 8017b3c:	4293      	cmp	r3, r2
 8017b3e:	d90a      	bls.n	8017b56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017b40:	697b      	ldr	r3, [r7, #20]
 8017b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017b50:	d101      	bne.n	8017b56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8017b52:	2300      	movs	r3, #0
 8017b54:	e037      	b.n	8017bc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8017b56:	697b      	ldr	r3, [r7, #20]
 8017b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b5c:	461a      	mov	r2, r3
 8017b5e:	2300      	movs	r3, #0
 8017b60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017b62:	697b      	ldr	r3, [r7, #20]
 8017b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b68:	691b      	ldr	r3, [r3, #16]
 8017b6a:	697a      	ldr	r2, [r7, #20]
 8017b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017b74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b7c:	691b      	ldr	r3, [r3, #16]
 8017b7e:	697a      	ldr	r2, [r7, #20]
 8017b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017b84:	f043 0318 	orr.w	r3, r3, #24
 8017b88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8017b8a:	697b      	ldr	r3, [r7, #20]
 8017b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017b90:	691b      	ldr	r3, [r3, #16]
 8017b92:	697a      	ldr	r2, [r7, #20]
 8017b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017b98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8017b9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8017b9e:	7afb      	ldrb	r3, [r7, #11]
 8017ba0:	2b01      	cmp	r3, #1
 8017ba2:	d10f      	bne.n	8017bc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8017ba4:	697b      	ldr	r3, [r7, #20]
 8017ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017baa:	461a      	mov	r2, r3
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8017bb0:	697b      	ldr	r3, [r7, #20]
 8017bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	697a      	ldr	r2, [r7, #20]
 8017bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017bbe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8017bc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017bc4:	2300      	movs	r3, #0
}
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	371c      	adds	r7, #28
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd0:	4770      	bx	lr
 8017bd2:	bf00      	nop
 8017bd4:	4f54300a 	.word	0x4f54300a

08017bd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8017bd8:	b480      	push	{r7}
 8017bda:	b085      	sub	sp, #20
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8017be0:	2300      	movs	r3, #0
 8017be2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	3301      	adds	r3, #1
 8017be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	4a13      	ldr	r2, [pc, #76]	; (8017c3c <USB_CoreReset+0x64>)
 8017bee:	4293      	cmp	r3, r2
 8017bf0:	d901      	bls.n	8017bf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8017bf2:	2303      	movs	r3, #3
 8017bf4:	e01b      	b.n	8017c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	691b      	ldr	r3, [r3, #16]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	daf2      	bge.n	8017be4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8017bfe:	2300      	movs	r3, #0
 8017c00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	691b      	ldr	r3, [r3, #16]
 8017c06:	f043 0201 	orr.w	r2, r3, #1
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	3301      	adds	r3, #1
 8017c12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	4a09      	ldr	r2, [pc, #36]	; (8017c3c <USB_CoreReset+0x64>)
 8017c18:	4293      	cmp	r3, r2
 8017c1a:	d901      	bls.n	8017c20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8017c1c:	2303      	movs	r3, #3
 8017c1e:	e006      	b.n	8017c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	691b      	ldr	r3, [r3, #16]
 8017c24:	f003 0301 	and.w	r3, r3, #1
 8017c28:	2b01      	cmp	r3, #1
 8017c2a:	d0f0      	beq.n	8017c0e <USB_CoreReset+0x36>

  return HAL_OK;
 8017c2c:	2300      	movs	r3, #0
}
 8017c2e:	4618      	mov	r0, r3
 8017c30:	3714      	adds	r7, #20
 8017c32:	46bd      	mov	sp, r7
 8017c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c38:	4770      	bx	lr
 8017c3a:	bf00      	nop
 8017c3c:	00030d40 	.word	0x00030d40

08017c40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b084      	sub	sp, #16
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
 8017c48:	460b      	mov	r3, r1
 8017c4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017c4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8017c50:	f006 f848 	bl	801dce4 <USBD_static_malloc>
 8017c54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d109      	bne.n	8017c70 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	32b0      	adds	r2, #176	; 0xb0
 8017c66:	2100      	movs	r1, #0
 8017c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8017c6c:	2302      	movs	r3, #2
 8017c6e:	e0d4      	b.n	8017e1a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8017c70:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8017c74:	2100      	movs	r1, #0
 8017c76:	68f8      	ldr	r0, [r7, #12]
 8017c78:	f007 fbe0 	bl	801f43c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	32b0      	adds	r2, #176	; 0xb0
 8017c86:	68f9      	ldr	r1, [r7, #12]
 8017c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	32b0      	adds	r2, #176	; 0xb0
 8017c96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	7c1b      	ldrb	r3, [r3, #16]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d138      	bne.n	8017d1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8017ca8:	4b5e      	ldr	r3, [pc, #376]	; (8017e24 <USBD_CDC_Init+0x1e4>)
 8017caa:	7819      	ldrb	r1, [r3, #0]
 8017cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017cb0:	2202      	movs	r2, #2
 8017cb2:	6878      	ldr	r0, [r7, #4]
 8017cb4:	f005 fef3 	bl	801da9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8017cb8:	4b5a      	ldr	r3, [pc, #360]	; (8017e24 <USBD_CDC_Init+0x1e4>)
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	f003 020f 	and.w	r2, r3, #15
 8017cc0:	6879      	ldr	r1, [r7, #4]
 8017cc2:	4613      	mov	r3, r2
 8017cc4:	009b      	lsls	r3, r3, #2
 8017cc6:	4413      	add	r3, r2
 8017cc8:	009b      	lsls	r3, r3, #2
 8017cca:	440b      	add	r3, r1
 8017ccc:	3324      	adds	r3, #36	; 0x24
 8017cce:	2201      	movs	r2, #1
 8017cd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8017cd2:	4b55      	ldr	r3, [pc, #340]	; (8017e28 <USBD_CDC_Init+0x1e8>)
 8017cd4:	7819      	ldrb	r1, [r3, #0]
 8017cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017cda:	2202      	movs	r2, #2
 8017cdc:	6878      	ldr	r0, [r7, #4]
 8017cde:	f005 fede 	bl	801da9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8017ce2:	4b51      	ldr	r3, [pc, #324]	; (8017e28 <USBD_CDC_Init+0x1e8>)
 8017ce4:	781b      	ldrb	r3, [r3, #0]
 8017ce6:	f003 020f 	and.w	r2, r3, #15
 8017cea:	6879      	ldr	r1, [r7, #4]
 8017cec:	4613      	mov	r3, r2
 8017cee:	009b      	lsls	r3, r3, #2
 8017cf0:	4413      	add	r3, r2
 8017cf2:	009b      	lsls	r3, r3, #2
 8017cf4:	440b      	add	r3, r1
 8017cf6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8017cfa:	2201      	movs	r2, #1
 8017cfc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8017cfe:	4b4b      	ldr	r3, [pc, #300]	; (8017e2c <USBD_CDC_Init+0x1ec>)
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	f003 020f 	and.w	r2, r3, #15
 8017d06:	6879      	ldr	r1, [r7, #4]
 8017d08:	4613      	mov	r3, r2
 8017d0a:	009b      	lsls	r3, r3, #2
 8017d0c:	4413      	add	r3, r2
 8017d0e:	009b      	lsls	r3, r3, #2
 8017d10:	440b      	add	r3, r1
 8017d12:	3326      	adds	r3, #38	; 0x26
 8017d14:	2210      	movs	r2, #16
 8017d16:	801a      	strh	r2, [r3, #0]
 8017d18:	e035      	b.n	8017d86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8017d1a:	4b42      	ldr	r3, [pc, #264]	; (8017e24 <USBD_CDC_Init+0x1e4>)
 8017d1c:	7819      	ldrb	r1, [r3, #0]
 8017d1e:	2340      	movs	r3, #64	; 0x40
 8017d20:	2202      	movs	r2, #2
 8017d22:	6878      	ldr	r0, [r7, #4]
 8017d24:	f005 febb 	bl	801da9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8017d28:	4b3e      	ldr	r3, [pc, #248]	; (8017e24 <USBD_CDC_Init+0x1e4>)
 8017d2a:	781b      	ldrb	r3, [r3, #0]
 8017d2c:	f003 020f 	and.w	r2, r3, #15
 8017d30:	6879      	ldr	r1, [r7, #4]
 8017d32:	4613      	mov	r3, r2
 8017d34:	009b      	lsls	r3, r3, #2
 8017d36:	4413      	add	r3, r2
 8017d38:	009b      	lsls	r3, r3, #2
 8017d3a:	440b      	add	r3, r1
 8017d3c:	3324      	adds	r3, #36	; 0x24
 8017d3e:	2201      	movs	r2, #1
 8017d40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8017d42:	4b39      	ldr	r3, [pc, #228]	; (8017e28 <USBD_CDC_Init+0x1e8>)
 8017d44:	7819      	ldrb	r1, [r3, #0]
 8017d46:	2340      	movs	r3, #64	; 0x40
 8017d48:	2202      	movs	r2, #2
 8017d4a:	6878      	ldr	r0, [r7, #4]
 8017d4c:	f005 fea7 	bl	801da9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8017d50:	4b35      	ldr	r3, [pc, #212]	; (8017e28 <USBD_CDC_Init+0x1e8>)
 8017d52:	781b      	ldrb	r3, [r3, #0]
 8017d54:	f003 020f 	and.w	r2, r3, #15
 8017d58:	6879      	ldr	r1, [r7, #4]
 8017d5a:	4613      	mov	r3, r2
 8017d5c:	009b      	lsls	r3, r3, #2
 8017d5e:	4413      	add	r3, r2
 8017d60:	009b      	lsls	r3, r3, #2
 8017d62:	440b      	add	r3, r1
 8017d64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8017d68:	2201      	movs	r2, #1
 8017d6a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8017d6c:	4b2f      	ldr	r3, [pc, #188]	; (8017e2c <USBD_CDC_Init+0x1ec>)
 8017d6e:	781b      	ldrb	r3, [r3, #0]
 8017d70:	f003 020f 	and.w	r2, r3, #15
 8017d74:	6879      	ldr	r1, [r7, #4]
 8017d76:	4613      	mov	r3, r2
 8017d78:	009b      	lsls	r3, r3, #2
 8017d7a:	4413      	add	r3, r2
 8017d7c:	009b      	lsls	r3, r3, #2
 8017d7e:	440b      	add	r3, r1
 8017d80:	3326      	adds	r3, #38	; 0x26
 8017d82:	2210      	movs	r2, #16
 8017d84:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017d86:	4b29      	ldr	r3, [pc, #164]	; (8017e2c <USBD_CDC_Init+0x1ec>)
 8017d88:	7819      	ldrb	r1, [r3, #0]
 8017d8a:	2308      	movs	r3, #8
 8017d8c:	2203      	movs	r2, #3
 8017d8e:	6878      	ldr	r0, [r7, #4]
 8017d90:	f005 fe85 	bl	801da9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8017d94:	4b25      	ldr	r3, [pc, #148]	; (8017e2c <USBD_CDC_Init+0x1ec>)
 8017d96:	781b      	ldrb	r3, [r3, #0]
 8017d98:	f003 020f 	and.w	r2, r3, #15
 8017d9c:	6879      	ldr	r1, [r7, #4]
 8017d9e:	4613      	mov	r3, r2
 8017da0:	009b      	lsls	r3, r3, #2
 8017da2:	4413      	add	r3, r2
 8017da4:	009b      	lsls	r3, r3, #2
 8017da6:	440b      	add	r3, r1
 8017da8:	3324      	adds	r3, #36	; 0x24
 8017daa:	2201      	movs	r2, #1
 8017dac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	2200      	movs	r2, #0
 8017db2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8017dbc:	687a      	ldr	r2, [r7, #4]
 8017dbe:	33b0      	adds	r3, #176	; 0xb0
 8017dc0:	009b      	lsls	r3, r3, #2
 8017dc2:	4413      	add	r3, r2
 8017dc4:	685b      	ldr	r3, [r3, #4]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	2200      	movs	r2, #0
 8017dce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d101      	bne.n	8017de8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8017de4:	2302      	movs	r3, #2
 8017de6:	e018      	b.n	8017e1a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	7c1b      	ldrb	r3, [r3, #16]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d10a      	bne.n	8017e06 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017df0:	4b0d      	ldr	r3, [pc, #52]	; (8017e28 <USBD_CDC_Init+0x1e8>)
 8017df2:	7819      	ldrb	r1, [r3, #0]
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017dfe:	6878      	ldr	r0, [r7, #4]
 8017e00:	f005 ff3c 	bl	801dc7c <USBD_LL_PrepareReceive>
 8017e04:	e008      	b.n	8017e18 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017e06:	4b08      	ldr	r3, [pc, #32]	; (8017e28 <USBD_CDC_Init+0x1e8>)
 8017e08:	7819      	ldrb	r1, [r3, #0]
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017e10:	2340      	movs	r3, #64	; 0x40
 8017e12:	6878      	ldr	r0, [r7, #4]
 8017e14:	f005 ff32 	bl	801dc7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017e18:	2300      	movs	r3, #0
}
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	3710      	adds	r7, #16
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	bd80      	pop	{r7, pc}
 8017e22:	bf00      	nop
 8017e24:	20000093 	.word	0x20000093
 8017e28:	20000094 	.word	0x20000094
 8017e2c:	20000095 	.word	0x20000095

08017e30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b082      	sub	sp, #8
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
 8017e38:	460b      	mov	r3, r1
 8017e3a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8017e3c:	4b3a      	ldr	r3, [pc, #232]	; (8017f28 <USBD_CDC_DeInit+0xf8>)
 8017e3e:	781b      	ldrb	r3, [r3, #0]
 8017e40:	4619      	mov	r1, r3
 8017e42:	6878      	ldr	r0, [r7, #4]
 8017e44:	f005 fe51 	bl	801daea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8017e48:	4b37      	ldr	r3, [pc, #220]	; (8017f28 <USBD_CDC_DeInit+0xf8>)
 8017e4a:	781b      	ldrb	r3, [r3, #0]
 8017e4c:	f003 020f 	and.w	r2, r3, #15
 8017e50:	6879      	ldr	r1, [r7, #4]
 8017e52:	4613      	mov	r3, r2
 8017e54:	009b      	lsls	r3, r3, #2
 8017e56:	4413      	add	r3, r2
 8017e58:	009b      	lsls	r3, r3, #2
 8017e5a:	440b      	add	r3, r1
 8017e5c:	3324      	adds	r3, #36	; 0x24
 8017e5e:	2200      	movs	r2, #0
 8017e60:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8017e62:	4b32      	ldr	r3, [pc, #200]	; (8017f2c <USBD_CDC_DeInit+0xfc>)
 8017e64:	781b      	ldrb	r3, [r3, #0]
 8017e66:	4619      	mov	r1, r3
 8017e68:	6878      	ldr	r0, [r7, #4]
 8017e6a:	f005 fe3e 	bl	801daea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8017e6e:	4b2f      	ldr	r3, [pc, #188]	; (8017f2c <USBD_CDC_DeInit+0xfc>)
 8017e70:	781b      	ldrb	r3, [r3, #0]
 8017e72:	f003 020f 	and.w	r2, r3, #15
 8017e76:	6879      	ldr	r1, [r7, #4]
 8017e78:	4613      	mov	r3, r2
 8017e7a:	009b      	lsls	r3, r3, #2
 8017e7c:	4413      	add	r3, r2
 8017e7e:	009b      	lsls	r3, r3, #2
 8017e80:	440b      	add	r3, r1
 8017e82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8017e86:	2200      	movs	r2, #0
 8017e88:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8017e8a:	4b29      	ldr	r3, [pc, #164]	; (8017f30 <USBD_CDC_DeInit+0x100>)
 8017e8c:	781b      	ldrb	r3, [r3, #0]
 8017e8e:	4619      	mov	r1, r3
 8017e90:	6878      	ldr	r0, [r7, #4]
 8017e92:	f005 fe2a 	bl	801daea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8017e96:	4b26      	ldr	r3, [pc, #152]	; (8017f30 <USBD_CDC_DeInit+0x100>)
 8017e98:	781b      	ldrb	r3, [r3, #0]
 8017e9a:	f003 020f 	and.w	r2, r3, #15
 8017e9e:	6879      	ldr	r1, [r7, #4]
 8017ea0:	4613      	mov	r3, r2
 8017ea2:	009b      	lsls	r3, r3, #2
 8017ea4:	4413      	add	r3, r2
 8017ea6:	009b      	lsls	r3, r3, #2
 8017ea8:	440b      	add	r3, r1
 8017eaa:	3324      	adds	r3, #36	; 0x24
 8017eac:	2200      	movs	r2, #0
 8017eae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8017eb0:	4b1f      	ldr	r3, [pc, #124]	; (8017f30 <USBD_CDC_DeInit+0x100>)
 8017eb2:	781b      	ldrb	r3, [r3, #0]
 8017eb4:	f003 020f 	and.w	r2, r3, #15
 8017eb8:	6879      	ldr	r1, [r7, #4]
 8017eba:	4613      	mov	r3, r2
 8017ebc:	009b      	lsls	r3, r3, #2
 8017ebe:	4413      	add	r3, r2
 8017ec0:	009b      	lsls	r3, r3, #2
 8017ec2:	440b      	add	r3, r1
 8017ec4:	3326      	adds	r3, #38	; 0x26
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	32b0      	adds	r2, #176	; 0xb0
 8017ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d01f      	beq.n	8017f1c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8017ee2:	687a      	ldr	r2, [r7, #4]
 8017ee4:	33b0      	adds	r3, #176	; 0xb0
 8017ee6:	009b      	lsls	r3, r3, #2
 8017ee8:	4413      	add	r3, r2
 8017eea:	685b      	ldr	r3, [r3, #4]
 8017eec:	685b      	ldr	r3, [r3, #4]
 8017eee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	32b0      	adds	r2, #176	; 0xb0
 8017efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017efe:	4618      	mov	r0, r3
 8017f00:	f005 fefe 	bl	801dd00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	32b0      	adds	r2, #176	; 0xb0
 8017f0e:	2100      	movs	r1, #0
 8017f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	2200      	movs	r2, #0
 8017f18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8017f1c:	2300      	movs	r3, #0
}
 8017f1e:	4618      	mov	r0, r3
 8017f20:	3708      	adds	r7, #8
 8017f22:	46bd      	mov	sp, r7
 8017f24:	bd80      	pop	{r7, pc}
 8017f26:	bf00      	nop
 8017f28:	20000093 	.word	0x20000093
 8017f2c:	20000094 	.word	0x20000094
 8017f30:	20000095 	.word	0x20000095

08017f34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b086      	sub	sp, #24
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
 8017f3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	32b0      	adds	r2, #176	; 0xb0
 8017f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8017f52:	2300      	movs	r3, #0
 8017f54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8017f56:	2300      	movs	r3, #0
 8017f58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8017f5a:	693b      	ldr	r3, [r7, #16]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d101      	bne.n	8017f64 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8017f60:	2303      	movs	r3, #3
 8017f62:	e0bf      	b.n	80180e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017f64:	683b      	ldr	r3, [r7, #0]
 8017f66:	781b      	ldrb	r3, [r3, #0]
 8017f68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d050      	beq.n	8018012 <USBD_CDC_Setup+0xde>
 8017f70:	2b20      	cmp	r3, #32
 8017f72:	f040 80af 	bne.w	80180d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8017f76:	683b      	ldr	r3, [r7, #0]
 8017f78:	88db      	ldrh	r3, [r3, #6]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d03a      	beq.n	8017ff4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8017f7e:	683b      	ldr	r3, [r7, #0]
 8017f80:	781b      	ldrb	r3, [r3, #0]
 8017f82:	b25b      	sxtb	r3, r3
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	da1b      	bge.n	8017fc0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8017f8e:	687a      	ldr	r2, [r7, #4]
 8017f90:	33b0      	adds	r3, #176	; 0xb0
 8017f92:	009b      	lsls	r3, r3, #2
 8017f94:	4413      	add	r3, r2
 8017f96:	685b      	ldr	r3, [r3, #4]
 8017f98:	689b      	ldr	r3, [r3, #8]
 8017f9a:	683a      	ldr	r2, [r7, #0]
 8017f9c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8017f9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8017fa0:	683a      	ldr	r2, [r7, #0]
 8017fa2:	88d2      	ldrh	r2, [r2, #6]
 8017fa4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8017fa6:	683b      	ldr	r3, [r7, #0]
 8017fa8:	88db      	ldrh	r3, [r3, #6]
 8017faa:	2b07      	cmp	r3, #7
 8017fac:	bf28      	it	cs
 8017fae:	2307      	movcs	r3, #7
 8017fb0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8017fb2:	693b      	ldr	r3, [r7, #16]
 8017fb4:	89fa      	ldrh	r2, [r7, #14]
 8017fb6:	4619      	mov	r1, r3
 8017fb8:	6878      	ldr	r0, [r7, #4]
 8017fba:	f001 fd89 	bl	8019ad0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8017fbe:	e090      	b.n	80180e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	785a      	ldrb	r2, [r3, #1]
 8017fc4:	693b      	ldr	r3, [r7, #16]
 8017fc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8017fca:	683b      	ldr	r3, [r7, #0]
 8017fcc:	88db      	ldrh	r3, [r3, #6]
 8017fce:	2b3f      	cmp	r3, #63	; 0x3f
 8017fd0:	d803      	bhi.n	8017fda <USBD_CDC_Setup+0xa6>
 8017fd2:	683b      	ldr	r3, [r7, #0]
 8017fd4:	88db      	ldrh	r3, [r3, #6]
 8017fd6:	b2da      	uxtb	r2, r3
 8017fd8:	e000      	b.n	8017fdc <USBD_CDC_Setup+0xa8>
 8017fda:	2240      	movs	r2, #64	; 0x40
 8017fdc:	693b      	ldr	r3, [r7, #16]
 8017fde:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8017fe2:	6939      	ldr	r1, [r7, #16]
 8017fe4:	693b      	ldr	r3, [r7, #16]
 8017fe6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8017fea:	461a      	mov	r2, r3
 8017fec:	6878      	ldr	r0, [r7, #4]
 8017fee:	f001 fd9b 	bl	8019b28 <USBD_CtlPrepareRx>
      break;
 8017ff2:	e076      	b.n	80180e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8017ffa:	687a      	ldr	r2, [r7, #4]
 8017ffc:	33b0      	adds	r3, #176	; 0xb0
 8017ffe:	009b      	lsls	r3, r3, #2
 8018000:	4413      	add	r3, r2
 8018002:	685b      	ldr	r3, [r3, #4]
 8018004:	689b      	ldr	r3, [r3, #8]
 8018006:	683a      	ldr	r2, [r7, #0]
 8018008:	7850      	ldrb	r0, [r2, #1]
 801800a:	2200      	movs	r2, #0
 801800c:	6839      	ldr	r1, [r7, #0]
 801800e:	4798      	blx	r3
      break;
 8018010:	e067      	b.n	80180e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018012:	683b      	ldr	r3, [r7, #0]
 8018014:	785b      	ldrb	r3, [r3, #1]
 8018016:	2b0b      	cmp	r3, #11
 8018018:	d851      	bhi.n	80180be <USBD_CDC_Setup+0x18a>
 801801a:	a201      	add	r2, pc, #4	; (adr r2, 8018020 <USBD_CDC_Setup+0xec>)
 801801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018020:	08018051 	.word	0x08018051
 8018024:	080180cd 	.word	0x080180cd
 8018028:	080180bf 	.word	0x080180bf
 801802c:	080180bf 	.word	0x080180bf
 8018030:	080180bf 	.word	0x080180bf
 8018034:	080180bf 	.word	0x080180bf
 8018038:	080180bf 	.word	0x080180bf
 801803c:	080180bf 	.word	0x080180bf
 8018040:	080180bf 	.word	0x080180bf
 8018044:	080180bf 	.word	0x080180bf
 8018048:	0801807b 	.word	0x0801807b
 801804c:	080180a5 	.word	0x080180a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018056:	b2db      	uxtb	r3, r3
 8018058:	2b03      	cmp	r3, #3
 801805a:	d107      	bne.n	801806c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801805c:	f107 030a 	add.w	r3, r7, #10
 8018060:	2202      	movs	r2, #2
 8018062:	4619      	mov	r1, r3
 8018064:	6878      	ldr	r0, [r7, #4]
 8018066:	f001 fd33 	bl	8019ad0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801806a:	e032      	b.n	80180d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801806c:	6839      	ldr	r1, [r7, #0]
 801806e:	6878      	ldr	r0, [r7, #4]
 8018070:	f001 fcbd 	bl	80199ee <USBD_CtlError>
            ret = USBD_FAIL;
 8018074:	2303      	movs	r3, #3
 8018076:	75fb      	strb	r3, [r7, #23]
          break;
 8018078:	e02b      	b.n	80180d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018080:	b2db      	uxtb	r3, r3
 8018082:	2b03      	cmp	r3, #3
 8018084:	d107      	bne.n	8018096 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8018086:	f107 030d 	add.w	r3, r7, #13
 801808a:	2201      	movs	r2, #1
 801808c:	4619      	mov	r1, r3
 801808e:	6878      	ldr	r0, [r7, #4]
 8018090:	f001 fd1e 	bl	8019ad0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018094:	e01d      	b.n	80180d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8018096:	6839      	ldr	r1, [r7, #0]
 8018098:	6878      	ldr	r0, [r7, #4]
 801809a:	f001 fca8 	bl	80199ee <USBD_CtlError>
            ret = USBD_FAIL;
 801809e:	2303      	movs	r3, #3
 80180a0:	75fb      	strb	r3, [r7, #23]
          break;
 80180a2:	e016      	b.n	80180d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80180aa:	b2db      	uxtb	r3, r3
 80180ac:	2b03      	cmp	r3, #3
 80180ae:	d00f      	beq.n	80180d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80180b0:	6839      	ldr	r1, [r7, #0]
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	f001 fc9b 	bl	80199ee <USBD_CtlError>
            ret = USBD_FAIL;
 80180b8:	2303      	movs	r3, #3
 80180ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80180bc:	e008      	b.n	80180d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80180be:	6839      	ldr	r1, [r7, #0]
 80180c0:	6878      	ldr	r0, [r7, #4]
 80180c2:	f001 fc94 	bl	80199ee <USBD_CtlError>
          ret = USBD_FAIL;
 80180c6:	2303      	movs	r3, #3
 80180c8:	75fb      	strb	r3, [r7, #23]
          break;
 80180ca:	e002      	b.n	80180d2 <USBD_CDC_Setup+0x19e>
          break;
 80180cc:	bf00      	nop
 80180ce:	e008      	b.n	80180e2 <USBD_CDC_Setup+0x1ae>
          break;
 80180d0:	bf00      	nop
      }
      break;
 80180d2:	e006      	b.n	80180e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80180d4:	6839      	ldr	r1, [r7, #0]
 80180d6:	6878      	ldr	r0, [r7, #4]
 80180d8:	f001 fc89 	bl	80199ee <USBD_CtlError>
      ret = USBD_FAIL;
 80180dc:	2303      	movs	r3, #3
 80180de:	75fb      	strb	r3, [r7, #23]
      break;
 80180e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80180e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80180e4:	4618      	mov	r0, r3
 80180e6:	3718      	adds	r7, #24
 80180e8:	46bd      	mov	sp, r7
 80180ea:	bd80      	pop	{r7, pc}

080180ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b084      	sub	sp, #16
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
 80180f4:	460b      	mov	r3, r1
 80180f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80180fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	32b0      	adds	r2, #176	; 0xb0
 801810a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d101      	bne.n	8018116 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8018112:	2303      	movs	r3, #3
 8018114:	e065      	b.n	80181e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	32b0      	adds	r2, #176	; 0xb0
 8018120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018124:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8018126:	78fb      	ldrb	r3, [r7, #3]
 8018128:	f003 020f 	and.w	r2, r3, #15
 801812c:	6879      	ldr	r1, [r7, #4]
 801812e:	4613      	mov	r3, r2
 8018130:	009b      	lsls	r3, r3, #2
 8018132:	4413      	add	r3, r2
 8018134:	009b      	lsls	r3, r3, #2
 8018136:	440b      	add	r3, r1
 8018138:	3318      	adds	r3, #24
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d02f      	beq.n	80181a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8018140:	78fb      	ldrb	r3, [r7, #3]
 8018142:	f003 020f 	and.w	r2, r3, #15
 8018146:	6879      	ldr	r1, [r7, #4]
 8018148:	4613      	mov	r3, r2
 801814a:	009b      	lsls	r3, r3, #2
 801814c:	4413      	add	r3, r2
 801814e:	009b      	lsls	r3, r3, #2
 8018150:	440b      	add	r3, r1
 8018152:	3318      	adds	r3, #24
 8018154:	681a      	ldr	r2, [r3, #0]
 8018156:	78fb      	ldrb	r3, [r7, #3]
 8018158:	f003 010f 	and.w	r1, r3, #15
 801815c:	68f8      	ldr	r0, [r7, #12]
 801815e:	460b      	mov	r3, r1
 8018160:	00db      	lsls	r3, r3, #3
 8018162:	440b      	add	r3, r1
 8018164:	009b      	lsls	r3, r3, #2
 8018166:	4403      	add	r3, r0
 8018168:	3348      	adds	r3, #72	; 0x48
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	fbb2 f1f3 	udiv	r1, r2, r3
 8018170:	fb01 f303 	mul.w	r3, r1, r3
 8018174:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8018176:	2b00      	cmp	r3, #0
 8018178:	d112      	bne.n	80181a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801817a:	78fb      	ldrb	r3, [r7, #3]
 801817c:	f003 020f 	and.w	r2, r3, #15
 8018180:	6879      	ldr	r1, [r7, #4]
 8018182:	4613      	mov	r3, r2
 8018184:	009b      	lsls	r3, r3, #2
 8018186:	4413      	add	r3, r2
 8018188:	009b      	lsls	r3, r3, #2
 801818a:	440b      	add	r3, r1
 801818c:	3318      	adds	r3, #24
 801818e:	2200      	movs	r2, #0
 8018190:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8018192:	78f9      	ldrb	r1, [r7, #3]
 8018194:	2300      	movs	r3, #0
 8018196:	2200      	movs	r2, #0
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	f005 fd4e 	bl	801dc3a <USBD_LL_Transmit>
 801819e:	e01f      	b.n	80181e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80181a0:	68bb      	ldr	r3, [r7, #8]
 80181a2:	2200      	movs	r2, #0
 80181a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80181ae:	687a      	ldr	r2, [r7, #4]
 80181b0:	33b0      	adds	r3, #176	; 0xb0
 80181b2:	009b      	lsls	r3, r3, #2
 80181b4:	4413      	add	r3, r2
 80181b6:	685b      	ldr	r3, [r3, #4]
 80181b8:	691b      	ldr	r3, [r3, #16]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d010      	beq.n	80181e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80181c4:	687a      	ldr	r2, [r7, #4]
 80181c6:	33b0      	adds	r3, #176	; 0xb0
 80181c8:	009b      	lsls	r3, r3, #2
 80181ca:	4413      	add	r3, r2
 80181cc:	685b      	ldr	r3, [r3, #4]
 80181ce:	691b      	ldr	r3, [r3, #16]
 80181d0:	68ba      	ldr	r2, [r7, #8]
 80181d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80181d6:	68ba      	ldr	r2, [r7, #8]
 80181d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80181dc:	78fa      	ldrb	r2, [r7, #3]
 80181de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80181e0:	2300      	movs	r3, #0
}
 80181e2:	4618      	mov	r0, r3
 80181e4:	3710      	adds	r7, #16
 80181e6:	46bd      	mov	sp, r7
 80181e8:	bd80      	pop	{r7, pc}

080181ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80181ea:	b580      	push	{r7, lr}
 80181ec:	b084      	sub	sp, #16
 80181ee:	af00      	add	r7, sp, #0
 80181f0:	6078      	str	r0, [r7, #4]
 80181f2:	460b      	mov	r3, r1
 80181f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	32b0      	adds	r2, #176	; 0xb0
 8018200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018204:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	32b0      	adds	r2, #176	; 0xb0
 8018210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d101      	bne.n	801821c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8018218:	2303      	movs	r3, #3
 801821a:	e01a      	b.n	8018252 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801821c:	78fb      	ldrb	r3, [r7, #3]
 801821e:	4619      	mov	r1, r3
 8018220:	6878      	ldr	r0, [r7, #4]
 8018222:	f005 fd4c 	bl	801dcbe <USBD_LL_GetRxDataSize>
 8018226:	4602      	mov	r2, r0
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018234:	687a      	ldr	r2, [r7, #4]
 8018236:	33b0      	adds	r3, #176	; 0xb0
 8018238:	009b      	lsls	r3, r3, #2
 801823a:	4413      	add	r3, r2
 801823c:	685b      	ldr	r3, [r3, #4]
 801823e:	68db      	ldr	r3, [r3, #12]
 8018240:	68fa      	ldr	r2, [r7, #12]
 8018242:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8018246:	68fa      	ldr	r2, [r7, #12]
 8018248:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801824c:	4611      	mov	r1, r2
 801824e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8018250:	2300      	movs	r3, #0
}
 8018252:	4618      	mov	r0, r3
 8018254:	3710      	adds	r7, #16
 8018256:	46bd      	mov	sp, r7
 8018258:	bd80      	pop	{r7, pc}

0801825a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801825a:	b580      	push	{r7, lr}
 801825c:	b084      	sub	sp, #16
 801825e:	af00      	add	r7, sp, #0
 8018260:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	32b0      	adds	r2, #176	; 0xb0
 801826c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018270:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d101      	bne.n	801827c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8018278:	2303      	movs	r3, #3
 801827a:	e025      	b.n	80182c8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8018282:	687a      	ldr	r2, [r7, #4]
 8018284:	33b0      	adds	r3, #176	; 0xb0
 8018286:	009b      	lsls	r3, r3, #2
 8018288:	4413      	add	r3, r2
 801828a:	685b      	ldr	r3, [r3, #4]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d01a      	beq.n	80182c6 <USBD_CDC_EP0_RxReady+0x6c>
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8018296:	2bff      	cmp	r3, #255	; 0xff
 8018298:	d015      	beq.n	80182c6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80182a0:	687a      	ldr	r2, [r7, #4]
 80182a2:	33b0      	adds	r3, #176	; 0xb0
 80182a4:	009b      	lsls	r3, r3, #2
 80182a6:	4413      	add	r3, r2
 80182a8:	685b      	ldr	r3, [r3, #4]
 80182aa:	689b      	ldr	r3, [r3, #8]
 80182ac:	68fa      	ldr	r2, [r7, #12]
 80182ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80182b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80182b4:	68fa      	ldr	r2, [r7, #12]
 80182b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80182ba:	b292      	uxth	r2, r2
 80182bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	22ff      	movs	r2, #255	; 0xff
 80182c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80182c6:	2300      	movs	r3, #0
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	3710      	adds	r7, #16
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}

080182d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b086      	sub	sp, #24
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80182d8:	2182      	movs	r1, #130	; 0x82
 80182da:	4818      	ldr	r0, [pc, #96]	; (801833c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80182dc:	f000 fd4f 	bl	8018d7e <USBD_GetEpDesc>
 80182e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80182e2:	2101      	movs	r1, #1
 80182e4:	4815      	ldr	r0, [pc, #84]	; (801833c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80182e6:	f000 fd4a 	bl	8018d7e <USBD_GetEpDesc>
 80182ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80182ec:	2181      	movs	r1, #129	; 0x81
 80182ee:	4813      	ldr	r0, [pc, #76]	; (801833c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80182f0:	f000 fd45 	bl	8018d7e <USBD_GetEpDesc>
 80182f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80182f6:	697b      	ldr	r3, [r7, #20]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d002      	beq.n	8018302 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80182fc:	697b      	ldr	r3, [r7, #20]
 80182fe:	2210      	movs	r2, #16
 8018300:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8018302:	693b      	ldr	r3, [r7, #16]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d006      	beq.n	8018316 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018308:	693b      	ldr	r3, [r7, #16]
 801830a:	2200      	movs	r2, #0
 801830c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018310:	711a      	strb	r2, [r3, #4]
 8018312:	2200      	movs	r2, #0
 8018314:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d006      	beq.n	801832a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	2200      	movs	r2, #0
 8018320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018324:	711a      	strb	r2, [r3, #4]
 8018326:	2200      	movs	r2, #0
 8018328:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	2243      	movs	r2, #67	; 0x43
 801832e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018330:	4b02      	ldr	r3, [pc, #8]	; (801833c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8018332:	4618      	mov	r0, r3
 8018334:	3718      	adds	r7, #24
 8018336:	46bd      	mov	sp, r7
 8018338:	bd80      	pop	{r7, pc}
 801833a:	bf00      	nop
 801833c:	20000050 	.word	0x20000050

08018340 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b086      	sub	sp, #24
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018348:	2182      	movs	r1, #130	; 0x82
 801834a:	4818      	ldr	r0, [pc, #96]	; (80183ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 801834c:	f000 fd17 	bl	8018d7e <USBD_GetEpDesc>
 8018350:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8018352:	2101      	movs	r1, #1
 8018354:	4815      	ldr	r0, [pc, #84]	; (80183ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018356:	f000 fd12 	bl	8018d7e <USBD_GetEpDesc>
 801835a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801835c:	2181      	movs	r1, #129	; 0x81
 801835e:	4813      	ldr	r0, [pc, #76]	; (80183ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018360:	f000 fd0d 	bl	8018d7e <USBD_GetEpDesc>
 8018364:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018366:	697b      	ldr	r3, [r7, #20]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d002      	beq.n	8018372 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801836c:	697b      	ldr	r3, [r7, #20]
 801836e:	2210      	movs	r2, #16
 8018370:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8018372:	693b      	ldr	r3, [r7, #16]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d006      	beq.n	8018386 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8018378:	693b      	ldr	r3, [r7, #16]
 801837a:	2200      	movs	r2, #0
 801837c:	711a      	strb	r2, [r3, #4]
 801837e:	2200      	movs	r2, #0
 8018380:	f042 0202 	orr.w	r2, r2, #2
 8018384:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d006      	beq.n	801839a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	2200      	movs	r2, #0
 8018390:	711a      	strb	r2, [r3, #4]
 8018392:	2200      	movs	r2, #0
 8018394:	f042 0202 	orr.w	r2, r2, #2
 8018398:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2243      	movs	r2, #67	; 0x43
 801839e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80183a0:	4b02      	ldr	r3, [pc, #8]	; (80183ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80183a2:	4618      	mov	r0, r3
 80183a4:	3718      	adds	r7, #24
 80183a6:	46bd      	mov	sp, r7
 80183a8:	bd80      	pop	{r7, pc}
 80183aa:	bf00      	nop
 80183ac:	20000050 	.word	0x20000050

080183b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	b086      	sub	sp, #24
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80183b8:	2182      	movs	r1, #130	; 0x82
 80183ba:	4818      	ldr	r0, [pc, #96]	; (801841c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80183bc:	f000 fcdf 	bl	8018d7e <USBD_GetEpDesc>
 80183c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80183c2:	2101      	movs	r1, #1
 80183c4:	4815      	ldr	r0, [pc, #84]	; (801841c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80183c6:	f000 fcda 	bl	8018d7e <USBD_GetEpDesc>
 80183ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80183cc:	2181      	movs	r1, #129	; 0x81
 80183ce:	4813      	ldr	r0, [pc, #76]	; (801841c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80183d0:	f000 fcd5 	bl	8018d7e <USBD_GetEpDesc>
 80183d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80183d6:	697b      	ldr	r3, [r7, #20]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d002      	beq.n	80183e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80183dc:	697b      	ldr	r3, [r7, #20]
 80183de:	2210      	movs	r2, #16
 80183e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80183e2:	693b      	ldr	r3, [r7, #16]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d006      	beq.n	80183f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80183e8:	693b      	ldr	r3, [r7, #16]
 80183ea:	2200      	movs	r2, #0
 80183ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80183f0:	711a      	strb	r2, [r3, #4]
 80183f2:	2200      	movs	r2, #0
 80183f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d006      	beq.n	801840a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	2200      	movs	r2, #0
 8018400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018404:	711a      	strb	r2, [r3, #4]
 8018406:	2200      	movs	r2, #0
 8018408:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	2243      	movs	r2, #67	; 0x43
 801840e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018410:	4b02      	ldr	r3, [pc, #8]	; (801841c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8018412:	4618      	mov	r0, r3
 8018414:	3718      	adds	r7, #24
 8018416:	46bd      	mov	sp, r7
 8018418:	bd80      	pop	{r7, pc}
 801841a:	bf00      	nop
 801841c:	20000050 	.word	0x20000050

08018420 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018420:	b480      	push	{r7}
 8018422:	b083      	sub	sp, #12
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	220a      	movs	r2, #10
 801842c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801842e:	4b03      	ldr	r3, [pc, #12]	; (801843c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018430:	4618      	mov	r0, r3
 8018432:	370c      	adds	r7, #12
 8018434:	46bd      	mov	sp, r7
 8018436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801843a:	4770      	bx	lr
 801843c:	2000000c 	.word	0x2000000c

08018440 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8018440:	b480      	push	{r7}
 8018442:	b083      	sub	sp, #12
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
 8018448:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	2b00      	cmp	r3, #0
 801844e:	d101      	bne.n	8018454 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8018450:	2303      	movs	r3, #3
 8018452:	e009      	b.n	8018468 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801845a:	687a      	ldr	r2, [r7, #4]
 801845c:	33b0      	adds	r3, #176	; 0xb0
 801845e:	009b      	lsls	r3, r3, #2
 8018460:	4413      	add	r3, r2
 8018462:	683a      	ldr	r2, [r7, #0]
 8018464:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8018466:	2300      	movs	r3, #0
}
 8018468:	4618      	mov	r0, r3
 801846a:	370c      	adds	r7, #12
 801846c:	46bd      	mov	sp, r7
 801846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018472:	4770      	bx	lr

08018474 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8018474:	b480      	push	{r7}
 8018476:	b087      	sub	sp, #28
 8018478:	af00      	add	r7, sp, #0
 801847a:	60f8      	str	r0, [r7, #12]
 801847c:	60b9      	str	r1, [r7, #8]
 801847e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	32b0      	adds	r2, #176	; 0xb0
 801848a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801848e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d101      	bne.n	801849a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8018496:	2303      	movs	r3, #3
 8018498:	e008      	b.n	80184ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801849a:	697b      	ldr	r3, [r7, #20]
 801849c:	68ba      	ldr	r2, [r7, #8]
 801849e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80184a2:	697b      	ldr	r3, [r7, #20]
 80184a4:	687a      	ldr	r2, [r7, #4]
 80184a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80184aa:	2300      	movs	r3, #0
}
 80184ac:	4618      	mov	r0, r3
 80184ae:	371c      	adds	r7, #28
 80184b0:	46bd      	mov	sp, r7
 80184b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b6:	4770      	bx	lr

080184b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80184b8:	b480      	push	{r7}
 80184ba:	b085      	sub	sp, #20
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
 80184c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	32b0      	adds	r2, #176	; 0xb0
 80184cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80184d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d101      	bne.n	80184dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80184d8:	2303      	movs	r3, #3
 80184da:	e004      	b.n	80184e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	683a      	ldr	r2, [r7, #0]
 80184e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80184e4:	2300      	movs	r3, #0
}
 80184e6:	4618      	mov	r0, r3
 80184e8:	3714      	adds	r7, #20
 80184ea:	46bd      	mov	sp, r7
 80184ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f0:	4770      	bx	lr
	...

080184f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b084      	sub	sp, #16
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	32b0      	adds	r2, #176	; 0xb0
 8018506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801850a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801850c:	2301      	movs	r3, #1
 801850e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	32b0      	adds	r2, #176	; 0xb0
 801851a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d101      	bne.n	8018526 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8018522:	2303      	movs	r3, #3
 8018524:	e025      	b.n	8018572 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8018526:	68bb      	ldr	r3, [r7, #8]
 8018528:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801852c:	2b00      	cmp	r3, #0
 801852e:	d11f      	bne.n	8018570 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8018530:	68bb      	ldr	r3, [r7, #8]
 8018532:	2201      	movs	r2, #1
 8018534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8018538:	4b10      	ldr	r3, [pc, #64]	; (801857c <USBD_CDC_TransmitPacket+0x88>)
 801853a:	781b      	ldrb	r3, [r3, #0]
 801853c:	f003 020f 	and.w	r2, r3, #15
 8018540:	68bb      	ldr	r3, [r7, #8]
 8018542:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8018546:	6878      	ldr	r0, [r7, #4]
 8018548:	4613      	mov	r3, r2
 801854a:	009b      	lsls	r3, r3, #2
 801854c:	4413      	add	r3, r2
 801854e:	009b      	lsls	r3, r3, #2
 8018550:	4403      	add	r3, r0
 8018552:	3318      	adds	r3, #24
 8018554:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8018556:	4b09      	ldr	r3, [pc, #36]	; (801857c <USBD_CDC_TransmitPacket+0x88>)
 8018558:	7819      	ldrb	r1, [r3, #0]
 801855a:	68bb      	ldr	r3, [r7, #8]
 801855c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8018560:	68bb      	ldr	r3, [r7, #8]
 8018562:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8018566:	6878      	ldr	r0, [r7, #4]
 8018568:	f005 fb67 	bl	801dc3a <USBD_LL_Transmit>

    ret = USBD_OK;
 801856c:	2300      	movs	r3, #0
 801856e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8018570:	7bfb      	ldrb	r3, [r7, #15]
}
 8018572:	4618      	mov	r0, r3
 8018574:	3710      	adds	r7, #16
 8018576:	46bd      	mov	sp, r7
 8018578:	bd80      	pop	{r7, pc}
 801857a:	bf00      	nop
 801857c:	20000093 	.word	0x20000093

08018580 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b084      	sub	sp, #16
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	32b0      	adds	r2, #176	; 0xb0
 8018592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018596:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	32b0      	adds	r2, #176	; 0xb0
 80185a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d101      	bne.n	80185ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80185aa:	2303      	movs	r3, #3
 80185ac:	e018      	b.n	80185e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	7c1b      	ldrb	r3, [r3, #16]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d10a      	bne.n	80185cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80185b6:	4b0c      	ldr	r3, [pc, #48]	; (80185e8 <USBD_CDC_ReceivePacket+0x68>)
 80185b8:	7819      	ldrb	r1, [r3, #0]
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80185c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80185c4:	6878      	ldr	r0, [r7, #4]
 80185c6:	f005 fb59 	bl	801dc7c <USBD_LL_PrepareReceive>
 80185ca:	e008      	b.n	80185de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80185cc:	4b06      	ldr	r3, [pc, #24]	; (80185e8 <USBD_CDC_ReceivePacket+0x68>)
 80185ce:	7819      	ldrb	r1, [r3, #0]
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80185d6:	2340      	movs	r3, #64	; 0x40
 80185d8:	6878      	ldr	r0, [r7, #4]
 80185da:	f005 fb4f 	bl	801dc7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80185de:	2300      	movs	r3, #0
}
 80185e0:	4618      	mov	r0, r3
 80185e2:	3710      	adds	r7, #16
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}
 80185e8:	20000094 	.word	0x20000094

080185ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b086      	sub	sp, #24
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	60f8      	str	r0, [r7, #12]
 80185f4:	60b9      	str	r1, [r7, #8]
 80185f6:	4613      	mov	r3, r2
 80185f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d101      	bne.n	8018604 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018600:	2303      	movs	r3, #3
 8018602:	e01f      	b.n	8018644 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	2200      	movs	r2, #0
 8018608:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	2200      	movs	r2, #0
 8018610:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	2200      	movs	r2, #0
 8018618:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801861c:	68bb      	ldr	r3, [r7, #8]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d003      	beq.n	801862a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	68ba      	ldr	r2, [r7, #8]
 8018626:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	2201      	movs	r2, #1
 801862e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	79fa      	ldrb	r2, [r7, #7]
 8018636:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8018638:	68f8      	ldr	r0, [r7, #12]
 801863a:	f005 f9c9 	bl	801d9d0 <USBD_LL_Init>
 801863e:	4603      	mov	r3, r0
 8018640:	75fb      	strb	r3, [r7, #23]

  return ret;
 8018642:	7dfb      	ldrb	r3, [r7, #23]
}
 8018644:	4618      	mov	r0, r3
 8018646:	3718      	adds	r7, #24
 8018648:	46bd      	mov	sp, r7
 801864a:	bd80      	pop	{r7, pc}

0801864c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b084      	sub	sp, #16
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
 8018654:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018656:	2300      	movs	r3, #0
 8018658:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801865a:	683b      	ldr	r3, [r7, #0]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d101      	bne.n	8018664 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018660:	2303      	movs	r3, #3
 8018662:	e025      	b.n	80186b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	683a      	ldr	r2, [r7, #0]
 8018668:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	32ae      	adds	r2, #174	; 0xae
 8018676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801867c:	2b00      	cmp	r3, #0
 801867e:	d00f      	beq.n	80186a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	32ae      	adds	r2, #174	; 0xae
 801868a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018690:	f107 020e 	add.w	r2, r7, #14
 8018694:	4610      	mov	r0, r2
 8018696:	4798      	blx	r3
 8018698:	4602      	mov	r2, r0
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80186a6:	1c5a      	adds	r2, r3, #1
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80186ae:	2300      	movs	r3, #0
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	3710      	adds	r7, #16
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}

080186b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b082      	sub	sp, #8
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80186c0:	6878      	ldr	r0, [r7, #4]
 80186c2:	f005 f9d1 	bl	801da68 <USBD_LL_Start>
 80186c6:	4603      	mov	r3, r0
}
 80186c8:	4618      	mov	r0, r3
 80186ca:	3708      	adds	r7, #8
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd80      	pop	{r7, pc}

080186d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80186d0:	b480      	push	{r7}
 80186d2:	b083      	sub	sp, #12
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80186d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80186da:	4618      	mov	r0, r3
 80186dc:	370c      	adds	r7, #12
 80186de:	46bd      	mov	sp, r7
 80186e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e4:	4770      	bx	lr

080186e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80186e6:	b580      	push	{r7, lr}
 80186e8:	b084      	sub	sp, #16
 80186ea:	af00      	add	r7, sp, #0
 80186ec:	6078      	str	r0, [r7, #4]
 80186ee:	460b      	mov	r3, r1
 80186f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80186f2:	2300      	movs	r3, #0
 80186f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d009      	beq.n	8018714 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	78fa      	ldrb	r2, [r7, #3]
 801870a:	4611      	mov	r1, r2
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	4798      	blx	r3
 8018710:	4603      	mov	r3, r0
 8018712:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018714:	7bfb      	ldrb	r3, [r7, #15]
}
 8018716:	4618      	mov	r0, r3
 8018718:	3710      	adds	r7, #16
 801871a:	46bd      	mov	sp, r7
 801871c:	bd80      	pop	{r7, pc}

0801871e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801871e:	b580      	push	{r7, lr}
 8018720:	b084      	sub	sp, #16
 8018722:	af00      	add	r7, sp, #0
 8018724:	6078      	str	r0, [r7, #4]
 8018726:	460b      	mov	r3, r1
 8018728:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801872a:	2300      	movs	r3, #0
 801872c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018734:	685b      	ldr	r3, [r3, #4]
 8018736:	78fa      	ldrb	r2, [r7, #3]
 8018738:	4611      	mov	r1, r2
 801873a:	6878      	ldr	r0, [r7, #4]
 801873c:	4798      	blx	r3
 801873e:	4603      	mov	r3, r0
 8018740:	2b00      	cmp	r3, #0
 8018742:	d001      	beq.n	8018748 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8018744:	2303      	movs	r3, #3
 8018746:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018748:	7bfb      	ldrb	r3, [r7, #15]
}
 801874a:	4618      	mov	r0, r3
 801874c:	3710      	adds	r7, #16
 801874e:	46bd      	mov	sp, r7
 8018750:	bd80      	pop	{r7, pc}

08018752 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8018752:	b580      	push	{r7, lr}
 8018754:	b084      	sub	sp, #16
 8018756:	af00      	add	r7, sp, #0
 8018758:	6078      	str	r0, [r7, #4]
 801875a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018762:	6839      	ldr	r1, [r7, #0]
 8018764:	4618      	mov	r0, r3
 8018766:	f001 f908 	bl	801997a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	2201      	movs	r2, #1
 801876e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8018778:	461a      	mov	r2, r3
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8018786:	f003 031f 	and.w	r3, r3, #31
 801878a:	2b02      	cmp	r3, #2
 801878c:	d01a      	beq.n	80187c4 <USBD_LL_SetupStage+0x72>
 801878e:	2b02      	cmp	r3, #2
 8018790:	d822      	bhi.n	80187d8 <USBD_LL_SetupStage+0x86>
 8018792:	2b00      	cmp	r3, #0
 8018794:	d002      	beq.n	801879c <USBD_LL_SetupStage+0x4a>
 8018796:	2b01      	cmp	r3, #1
 8018798:	d00a      	beq.n	80187b0 <USBD_LL_SetupStage+0x5e>
 801879a:	e01d      	b.n	80187d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80187a2:	4619      	mov	r1, r3
 80187a4:	6878      	ldr	r0, [r7, #4]
 80187a6:	f000 fb5f 	bl	8018e68 <USBD_StdDevReq>
 80187aa:	4603      	mov	r3, r0
 80187ac:	73fb      	strb	r3, [r7, #15]
      break;
 80187ae:	e020      	b.n	80187f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80187b6:	4619      	mov	r1, r3
 80187b8:	6878      	ldr	r0, [r7, #4]
 80187ba:	f000 fbc7 	bl	8018f4c <USBD_StdItfReq>
 80187be:	4603      	mov	r3, r0
 80187c0:	73fb      	strb	r3, [r7, #15]
      break;
 80187c2:	e016      	b.n	80187f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80187ca:	4619      	mov	r1, r3
 80187cc:	6878      	ldr	r0, [r7, #4]
 80187ce:	f000 fc29 	bl	8019024 <USBD_StdEPReq>
 80187d2:	4603      	mov	r3, r0
 80187d4:	73fb      	strb	r3, [r7, #15]
      break;
 80187d6:	e00c      	b.n	80187f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80187de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80187e2:	b2db      	uxtb	r3, r3
 80187e4:	4619      	mov	r1, r3
 80187e6:	6878      	ldr	r0, [r7, #4]
 80187e8:	f005 f99e 	bl	801db28 <USBD_LL_StallEP>
 80187ec:	4603      	mov	r3, r0
 80187ee:	73fb      	strb	r3, [r7, #15]
      break;
 80187f0:	bf00      	nop
  }

  return ret;
 80187f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80187f4:	4618      	mov	r0, r3
 80187f6:	3710      	adds	r7, #16
 80187f8:	46bd      	mov	sp, r7
 80187fa:	bd80      	pop	{r7, pc}

080187fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b086      	sub	sp, #24
 8018800:	af00      	add	r7, sp, #0
 8018802:	60f8      	str	r0, [r7, #12]
 8018804:	460b      	mov	r3, r1
 8018806:	607a      	str	r2, [r7, #4]
 8018808:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801880a:	2300      	movs	r3, #0
 801880c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801880e:	7afb      	ldrb	r3, [r7, #11]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d16e      	bne.n	80188f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801881a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8018822:	2b03      	cmp	r3, #3
 8018824:	f040 8098 	bne.w	8018958 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8018828:	693b      	ldr	r3, [r7, #16]
 801882a:	689a      	ldr	r2, [r3, #8]
 801882c:	693b      	ldr	r3, [r7, #16]
 801882e:	68db      	ldr	r3, [r3, #12]
 8018830:	429a      	cmp	r2, r3
 8018832:	d913      	bls.n	801885c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8018834:	693b      	ldr	r3, [r7, #16]
 8018836:	689a      	ldr	r2, [r3, #8]
 8018838:	693b      	ldr	r3, [r7, #16]
 801883a:	68db      	ldr	r3, [r3, #12]
 801883c:	1ad2      	subs	r2, r2, r3
 801883e:	693b      	ldr	r3, [r7, #16]
 8018840:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8018842:	693b      	ldr	r3, [r7, #16]
 8018844:	68da      	ldr	r2, [r3, #12]
 8018846:	693b      	ldr	r3, [r7, #16]
 8018848:	689b      	ldr	r3, [r3, #8]
 801884a:	4293      	cmp	r3, r2
 801884c:	bf28      	it	cs
 801884e:	4613      	movcs	r3, r2
 8018850:	461a      	mov	r2, r3
 8018852:	6879      	ldr	r1, [r7, #4]
 8018854:	68f8      	ldr	r0, [r7, #12]
 8018856:	f001 f984 	bl	8019b62 <USBD_CtlContinueRx>
 801885a:	e07d      	b.n	8018958 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8018862:	f003 031f 	and.w	r3, r3, #31
 8018866:	2b02      	cmp	r3, #2
 8018868:	d014      	beq.n	8018894 <USBD_LL_DataOutStage+0x98>
 801886a:	2b02      	cmp	r3, #2
 801886c:	d81d      	bhi.n	80188aa <USBD_LL_DataOutStage+0xae>
 801886e:	2b00      	cmp	r3, #0
 8018870:	d002      	beq.n	8018878 <USBD_LL_DataOutStage+0x7c>
 8018872:	2b01      	cmp	r3, #1
 8018874:	d003      	beq.n	801887e <USBD_LL_DataOutStage+0x82>
 8018876:	e018      	b.n	80188aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8018878:	2300      	movs	r3, #0
 801887a:	75bb      	strb	r3, [r7, #22]
            break;
 801887c:	e018      	b.n	80188b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8018884:	b2db      	uxtb	r3, r3
 8018886:	4619      	mov	r1, r3
 8018888:	68f8      	ldr	r0, [r7, #12]
 801888a:	f000 fa5e 	bl	8018d4a <USBD_CoreFindIF>
 801888e:	4603      	mov	r3, r0
 8018890:	75bb      	strb	r3, [r7, #22]
            break;
 8018892:	e00d      	b.n	80188b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801889a:	b2db      	uxtb	r3, r3
 801889c:	4619      	mov	r1, r3
 801889e:	68f8      	ldr	r0, [r7, #12]
 80188a0:	f000 fa60 	bl	8018d64 <USBD_CoreFindEP>
 80188a4:	4603      	mov	r3, r0
 80188a6:	75bb      	strb	r3, [r7, #22]
            break;
 80188a8:	e002      	b.n	80188b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80188aa:	2300      	movs	r3, #0
 80188ac:	75bb      	strb	r3, [r7, #22]
            break;
 80188ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80188b0:	7dbb      	ldrb	r3, [r7, #22]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d119      	bne.n	80188ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80188bc:	b2db      	uxtb	r3, r3
 80188be:	2b03      	cmp	r3, #3
 80188c0:	d113      	bne.n	80188ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80188c2:	7dba      	ldrb	r2, [r7, #22]
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	32ae      	adds	r2, #174	; 0xae
 80188c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188cc:	691b      	ldr	r3, [r3, #16]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d00b      	beq.n	80188ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80188d2:	7dba      	ldrb	r2, [r7, #22]
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80188da:	7dba      	ldrb	r2, [r7, #22]
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	32ae      	adds	r2, #174	; 0xae
 80188e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188e4:	691b      	ldr	r3, [r3, #16]
 80188e6:	68f8      	ldr	r0, [r7, #12]
 80188e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80188ea:	68f8      	ldr	r0, [r7, #12]
 80188ec:	f001 f94a 	bl	8019b84 <USBD_CtlSendStatus>
 80188f0:	e032      	b.n	8018958 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80188f2:	7afb      	ldrb	r3, [r7, #11]
 80188f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80188f8:	b2db      	uxtb	r3, r3
 80188fa:	4619      	mov	r1, r3
 80188fc:	68f8      	ldr	r0, [r7, #12]
 80188fe:	f000 fa31 	bl	8018d64 <USBD_CoreFindEP>
 8018902:	4603      	mov	r3, r0
 8018904:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018906:	7dbb      	ldrb	r3, [r7, #22]
 8018908:	2bff      	cmp	r3, #255	; 0xff
 801890a:	d025      	beq.n	8018958 <USBD_LL_DataOutStage+0x15c>
 801890c:	7dbb      	ldrb	r3, [r7, #22]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d122      	bne.n	8018958 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018918:	b2db      	uxtb	r3, r3
 801891a:	2b03      	cmp	r3, #3
 801891c:	d117      	bne.n	801894e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801891e:	7dba      	ldrb	r2, [r7, #22]
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	32ae      	adds	r2, #174	; 0xae
 8018924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018928:	699b      	ldr	r3, [r3, #24]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d00f      	beq.n	801894e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801892e:	7dba      	ldrb	r2, [r7, #22]
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8018936:	7dba      	ldrb	r2, [r7, #22]
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	32ae      	adds	r2, #174	; 0xae
 801893c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018940:	699b      	ldr	r3, [r3, #24]
 8018942:	7afa      	ldrb	r2, [r7, #11]
 8018944:	4611      	mov	r1, r2
 8018946:	68f8      	ldr	r0, [r7, #12]
 8018948:	4798      	blx	r3
 801894a:	4603      	mov	r3, r0
 801894c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801894e:	7dfb      	ldrb	r3, [r7, #23]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d001      	beq.n	8018958 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8018954:	7dfb      	ldrb	r3, [r7, #23]
 8018956:	e000      	b.n	801895a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8018958:	2300      	movs	r3, #0
}
 801895a:	4618      	mov	r0, r3
 801895c:	3718      	adds	r7, #24
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}

08018962 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8018962:	b580      	push	{r7, lr}
 8018964:	b086      	sub	sp, #24
 8018966:	af00      	add	r7, sp, #0
 8018968:	60f8      	str	r0, [r7, #12]
 801896a:	460b      	mov	r3, r1
 801896c:	607a      	str	r2, [r7, #4]
 801896e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8018970:	7afb      	ldrb	r3, [r7, #11]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d16f      	bne.n	8018a56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	3314      	adds	r3, #20
 801897a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8018982:	2b02      	cmp	r3, #2
 8018984:	d15a      	bne.n	8018a3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8018986:	693b      	ldr	r3, [r7, #16]
 8018988:	689a      	ldr	r2, [r3, #8]
 801898a:	693b      	ldr	r3, [r7, #16]
 801898c:	68db      	ldr	r3, [r3, #12]
 801898e:	429a      	cmp	r2, r3
 8018990:	d914      	bls.n	80189bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018992:	693b      	ldr	r3, [r7, #16]
 8018994:	689a      	ldr	r2, [r3, #8]
 8018996:	693b      	ldr	r3, [r7, #16]
 8018998:	68db      	ldr	r3, [r3, #12]
 801899a:	1ad2      	subs	r2, r2, r3
 801899c:	693b      	ldr	r3, [r7, #16]
 801899e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80189a0:	693b      	ldr	r3, [r7, #16]
 80189a2:	689b      	ldr	r3, [r3, #8]
 80189a4:	461a      	mov	r2, r3
 80189a6:	6879      	ldr	r1, [r7, #4]
 80189a8:	68f8      	ldr	r0, [r7, #12]
 80189aa:	f001 f8ac 	bl	8019b06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80189ae:	2300      	movs	r3, #0
 80189b0:	2200      	movs	r2, #0
 80189b2:	2100      	movs	r1, #0
 80189b4:	68f8      	ldr	r0, [r7, #12]
 80189b6:	f005 f961 	bl	801dc7c <USBD_LL_PrepareReceive>
 80189ba:	e03f      	b.n	8018a3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80189bc:	693b      	ldr	r3, [r7, #16]
 80189be:	68da      	ldr	r2, [r3, #12]
 80189c0:	693b      	ldr	r3, [r7, #16]
 80189c2:	689b      	ldr	r3, [r3, #8]
 80189c4:	429a      	cmp	r2, r3
 80189c6:	d11c      	bne.n	8018a02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80189c8:	693b      	ldr	r3, [r7, #16]
 80189ca:	685a      	ldr	r2, [r3, #4]
 80189cc:	693b      	ldr	r3, [r7, #16]
 80189ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80189d0:	429a      	cmp	r2, r3
 80189d2:	d316      	bcc.n	8018a02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80189d4:	693b      	ldr	r3, [r7, #16]
 80189d6:	685a      	ldr	r2, [r3, #4]
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80189de:	429a      	cmp	r2, r3
 80189e0:	d20f      	bcs.n	8018a02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80189e2:	2200      	movs	r2, #0
 80189e4:	2100      	movs	r1, #0
 80189e6:	68f8      	ldr	r0, [r7, #12]
 80189e8:	f001 f88d 	bl	8019b06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	2200      	movs	r2, #0
 80189f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80189f4:	2300      	movs	r3, #0
 80189f6:	2200      	movs	r2, #0
 80189f8:	2100      	movs	r1, #0
 80189fa:	68f8      	ldr	r0, [r7, #12]
 80189fc:	f005 f93e 	bl	801dc7c <USBD_LL_PrepareReceive>
 8018a00:	e01c      	b.n	8018a3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a08:	b2db      	uxtb	r3, r3
 8018a0a:	2b03      	cmp	r3, #3
 8018a0c:	d10f      	bne.n	8018a2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a14:	68db      	ldr	r3, [r3, #12]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d009      	beq.n	8018a2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	2200      	movs	r2, #0
 8018a1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a28:	68db      	ldr	r3, [r3, #12]
 8018a2a:	68f8      	ldr	r0, [r7, #12]
 8018a2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8018a2e:	2180      	movs	r1, #128	; 0x80
 8018a30:	68f8      	ldr	r0, [r7, #12]
 8018a32:	f005 f879 	bl	801db28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8018a36:	68f8      	ldr	r0, [r7, #12]
 8018a38:	f001 f8b7 	bl	8019baa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d03a      	beq.n	8018abc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8018a46:	68f8      	ldr	r0, [r7, #12]
 8018a48:	f7ff fe42 	bl	80186d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	2200      	movs	r2, #0
 8018a50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8018a54:	e032      	b.n	8018abc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8018a56:	7afb      	ldrb	r3, [r7, #11]
 8018a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018a5c:	b2db      	uxtb	r3, r3
 8018a5e:	4619      	mov	r1, r3
 8018a60:	68f8      	ldr	r0, [r7, #12]
 8018a62:	f000 f97f 	bl	8018d64 <USBD_CoreFindEP>
 8018a66:	4603      	mov	r3, r0
 8018a68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018a6a:	7dfb      	ldrb	r3, [r7, #23]
 8018a6c:	2bff      	cmp	r3, #255	; 0xff
 8018a6e:	d025      	beq.n	8018abc <USBD_LL_DataInStage+0x15a>
 8018a70:	7dfb      	ldrb	r3, [r7, #23]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d122      	bne.n	8018abc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018a7c:	b2db      	uxtb	r3, r3
 8018a7e:	2b03      	cmp	r3, #3
 8018a80:	d11c      	bne.n	8018abc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8018a82:	7dfa      	ldrb	r2, [r7, #23]
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	32ae      	adds	r2, #174	; 0xae
 8018a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a8c:	695b      	ldr	r3, [r3, #20]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d014      	beq.n	8018abc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8018a92:	7dfa      	ldrb	r2, [r7, #23]
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8018a9a:	7dfa      	ldrb	r2, [r7, #23]
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	32ae      	adds	r2, #174	; 0xae
 8018aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018aa4:	695b      	ldr	r3, [r3, #20]
 8018aa6:	7afa      	ldrb	r2, [r7, #11]
 8018aa8:	4611      	mov	r1, r2
 8018aaa:	68f8      	ldr	r0, [r7, #12]
 8018aac:	4798      	blx	r3
 8018aae:	4603      	mov	r3, r0
 8018ab0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8018ab2:	7dbb      	ldrb	r3, [r7, #22]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d001      	beq.n	8018abc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8018ab8:	7dbb      	ldrb	r3, [r7, #22]
 8018aba:	e000      	b.n	8018abe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8018abc:	2300      	movs	r3, #0
}
 8018abe:	4618      	mov	r0, r3
 8018ac0:	3718      	adds	r7, #24
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	bd80      	pop	{r7, pc}

08018ac6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018ac6:	b580      	push	{r7, lr}
 8018ac8:	b084      	sub	sp, #16
 8018aca:	af00      	add	r7, sp, #0
 8018acc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8018ace:	2300      	movs	r3, #0
 8018ad0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	2201      	movs	r2, #1
 8018ad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	2200      	movs	r2, #0
 8018ade:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	2200      	movs	r2, #0
 8018aec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	2200      	movs	r2, #0
 8018af4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d014      	beq.n	8018b2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b08:	685b      	ldr	r3, [r3, #4]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d00e      	beq.n	8018b2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018b14:	685b      	ldr	r3, [r3, #4]
 8018b16:	687a      	ldr	r2, [r7, #4]
 8018b18:	6852      	ldr	r2, [r2, #4]
 8018b1a:	b2d2      	uxtb	r2, r2
 8018b1c:	4611      	mov	r1, r2
 8018b1e:	6878      	ldr	r0, [r7, #4]
 8018b20:	4798      	blx	r3
 8018b22:	4603      	mov	r3, r0
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d001      	beq.n	8018b2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8018b28:	2303      	movs	r3, #3
 8018b2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018b2c:	2340      	movs	r3, #64	; 0x40
 8018b2e:	2200      	movs	r2, #0
 8018b30:	2100      	movs	r1, #0
 8018b32:	6878      	ldr	r0, [r7, #4]
 8018b34:	f004 ffb3 	bl	801da9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	2201      	movs	r2, #1
 8018b3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	2240      	movs	r2, #64	; 0x40
 8018b44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018b48:	2340      	movs	r3, #64	; 0x40
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	2180      	movs	r1, #128	; 0x80
 8018b4e:	6878      	ldr	r0, [r7, #4]
 8018b50:	f004 ffa5 	bl	801da9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	2201      	movs	r2, #1
 8018b58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2240      	movs	r2, #64	; 0x40
 8018b5e:	621a      	str	r2, [r3, #32]

  return ret;
 8018b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b62:	4618      	mov	r0, r3
 8018b64:	3710      	adds	r7, #16
 8018b66:	46bd      	mov	sp, r7
 8018b68:	bd80      	pop	{r7, pc}

08018b6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8018b6a:	b480      	push	{r7}
 8018b6c:	b083      	sub	sp, #12
 8018b6e:	af00      	add	r7, sp, #0
 8018b70:	6078      	str	r0, [r7, #4]
 8018b72:	460b      	mov	r3, r1
 8018b74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	78fa      	ldrb	r2, [r7, #3]
 8018b7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018b7c:	2300      	movs	r3, #0
}
 8018b7e:	4618      	mov	r0, r3
 8018b80:	370c      	adds	r7, #12
 8018b82:	46bd      	mov	sp, r7
 8018b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b88:	4770      	bx	lr

08018b8a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018b8a:	b480      	push	{r7}
 8018b8c:	b083      	sub	sp, #12
 8018b8e:	af00      	add	r7, sp, #0
 8018b90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018b98:	b2da      	uxtb	r2, r3
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	2204      	movs	r2, #4
 8018ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8018ba8:	2300      	movs	r3, #0
}
 8018baa:	4618      	mov	r0, r3
 8018bac:	370c      	adds	r7, #12
 8018bae:	46bd      	mov	sp, r7
 8018bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bb4:	4770      	bx	lr

08018bb6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018bb6:	b480      	push	{r7}
 8018bb8:	b083      	sub	sp, #12
 8018bba:	af00      	add	r7, sp, #0
 8018bbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018bc4:	b2db      	uxtb	r3, r3
 8018bc6:	2b04      	cmp	r3, #4
 8018bc8:	d106      	bne.n	8018bd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8018bd0:	b2da      	uxtb	r2, r3
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8018bd8:	2300      	movs	r3, #0
}
 8018bda:	4618      	mov	r0, r3
 8018bdc:	370c      	adds	r7, #12
 8018bde:	46bd      	mov	sp, r7
 8018be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be4:	4770      	bx	lr

08018be6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018be6:	b580      	push	{r7, lr}
 8018be8:	b082      	sub	sp, #8
 8018bea:	af00      	add	r7, sp, #0
 8018bec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018bf4:	b2db      	uxtb	r3, r3
 8018bf6:	2b03      	cmp	r3, #3
 8018bf8:	d110      	bne.n	8018c1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d00b      	beq.n	8018c1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c0a:	69db      	ldr	r3, [r3, #28]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d005      	beq.n	8018c1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c16:	69db      	ldr	r3, [r3, #28]
 8018c18:	6878      	ldr	r0, [r7, #4]
 8018c1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8018c1c:	2300      	movs	r3, #0
}
 8018c1e:	4618      	mov	r0, r3
 8018c20:	3708      	adds	r7, #8
 8018c22:	46bd      	mov	sp, r7
 8018c24:	bd80      	pop	{r7, pc}

08018c26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8018c26:	b580      	push	{r7, lr}
 8018c28:	b082      	sub	sp, #8
 8018c2a:	af00      	add	r7, sp, #0
 8018c2c:	6078      	str	r0, [r7, #4]
 8018c2e:	460b      	mov	r3, r1
 8018c30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	32ae      	adds	r2, #174	; 0xae
 8018c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d101      	bne.n	8018c48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8018c44:	2303      	movs	r3, #3
 8018c46:	e01c      	b.n	8018c82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018c4e:	b2db      	uxtb	r3, r3
 8018c50:	2b03      	cmp	r3, #3
 8018c52:	d115      	bne.n	8018c80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	32ae      	adds	r2, #174	; 0xae
 8018c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018c62:	6a1b      	ldr	r3, [r3, #32]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d00b      	beq.n	8018c80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	32ae      	adds	r2, #174	; 0xae
 8018c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018c76:	6a1b      	ldr	r3, [r3, #32]
 8018c78:	78fa      	ldrb	r2, [r7, #3]
 8018c7a:	4611      	mov	r1, r2
 8018c7c:	6878      	ldr	r0, [r7, #4]
 8018c7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018c80:	2300      	movs	r3, #0
}
 8018c82:	4618      	mov	r0, r3
 8018c84:	3708      	adds	r7, #8
 8018c86:	46bd      	mov	sp, r7
 8018c88:	bd80      	pop	{r7, pc}

08018c8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8018c8a:	b580      	push	{r7, lr}
 8018c8c:	b082      	sub	sp, #8
 8018c8e:	af00      	add	r7, sp, #0
 8018c90:	6078      	str	r0, [r7, #4]
 8018c92:	460b      	mov	r3, r1
 8018c94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	32ae      	adds	r2, #174	; 0xae
 8018ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d101      	bne.n	8018cac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8018ca8:	2303      	movs	r3, #3
 8018caa:	e01c      	b.n	8018ce6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018cb2:	b2db      	uxtb	r3, r3
 8018cb4:	2b03      	cmp	r3, #3
 8018cb6:	d115      	bne.n	8018ce4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	32ae      	adds	r2, #174	; 0xae
 8018cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d00b      	beq.n	8018ce4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	32ae      	adds	r2, #174	; 0xae
 8018cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cdc:	78fa      	ldrb	r2, [r7, #3]
 8018cde:	4611      	mov	r1, r2
 8018ce0:	6878      	ldr	r0, [r7, #4]
 8018ce2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018ce4:	2300      	movs	r3, #0
}
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	3708      	adds	r7, #8
 8018cea:	46bd      	mov	sp, r7
 8018cec:	bd80      	pop	{r7, pc}

08018cee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018cee:	b480      	push	{r7}
 8018cf0:	b083      	sub	sp, #12
 8018cf2:	af00      	add	r7, sp, #0
 8018cf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018cf6:	2300      	movs	r3, #0
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	370c      	adds	r7, #12
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d02:	4770      	bx	lr

08018d04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b084      	sub	sp, #16
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2201      	movs	r2, #1
 8018d14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d00e      	beq.n	8018d40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018d28:	685b      	ldr	r3, [r3, #4]
 8018d2a:	687a      	ldr	r2, [r7, #4]
 8018d2c:	6852      	ldr	r2, [r2, #4]
 8018d2e:	b2d2      	uxtb	r2, r2
 8018d30:	4611      	mov	r1, r2
 8018d32:	6878      	ldr	r0, [r7, #4]
 8018d34:	4798      	blx	r3
 8018d36:	4603      	mov	r3, r0
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d001      	beq.n	8018d40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8018d3c:	2303      	movs	r3, #3
 8018d3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d42:	4618      	mov	r0, r3
 8018d44:	3710      	adds	r7, #16
 8018d46:	46bd      	mov	sp, r7
 8018d48:	bd80      	pop	{r7, pc}

08018d4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018d4a:	b480      	push	{r7}
 8018d4c:	b083      	sub	sp, #12
 8018d4e:	af00      	add	r7, sp, #0
 8018d50:	6078      	str	r0, [r7, #4]
 8018d52:	460b      	mov	r3, r1
 8018d54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018d56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	370c      	adds	r7, #12
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d62:	4770      	bx	lr

08018d64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018d64:	b480      	push	{r7}
 8018d66:	b083      	sub	sp, #12
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
 8018d6c:	460b      	mov	r3, r1
 8018d6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018d70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018d72:	4618      	mov	r0, r3
 8018d74:	370c      	adds	r7, #12
 8018d76:	46bd      	mov	sp, r7
 8018d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7c:	4770      	bx	lr

08018d7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8018d7e:	b580      	push	{r7, lr}
 8018d80:	b086      	sub	sp, #24
 8018d82:	af00      	add	r7, sp, #0
 8018d84:	6078      	str	r0, [r7, #4]
 8018d86:	460b      	mov	r3, r1
 8018d88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8018d92:	2300      	movs	r3, #0
 8018d94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	885b      	ldrh	r3, [r3, #2]
 8018d9a:	b29a      	uxth	r2, r3
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	781b      	ldrb	r3, [r3, #0]
 8018da0:	b29b      	uxth	r3, r3
 8018da2:	429a      	cmp	r2, r3
 8018da4:	d920      	bls.n	8018de8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	781b      	ldrb	r3, [r3, #0]
 8018daa:	b29b      	uxth	r3, r3
 8018dac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8018dae:	e013      	b.n	8018dd8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8018db0:	f107 030a 	add.w	r3, r7, #10
 8018db4:	4619      	mov	r1, r3
 8018db6:	6978      	ldr	r0, [r7, #20]
 8018db8:	f000 f81b 	bl	8018df2 <USBD_GetNextDesc>
 8018dbc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8018dbe:	697b      	ldr	r3, [r7, #20]
 8018dc0:	785b      	ldrb	r3, [r3, #1]
 8018dc2:	2b05      	cmp	r3, #5
 8018dc4:	d108      	bne.n	8018dd8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8018dc6:	697b      	ldr	r3, [r7, #20]
 8018dc8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8018dca:	693b      	ldr	r3, [r7, #16]
 8018dcc:	789b      	ldrb	r3, [r3, #2]
 8018dce:	78fa      	ldrb	r2, [r7, #3]
 8018dd0:	429a      	cmp	r2, r3
 8018dd2:	d008      	beq.n	8018de6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	885b      	ldrh	r3, [r3, #2]
 8018ddc:	b29a      	uxth	r2, r3
 8018dde:	897b      	ldrh	r3, [r7, #10]
 8018de0:	429a      	cmp	r2, r3
 8018de2:	d8e5      	bhi.n	8018db0 <USBD_GetEpDesc+0x32>
 8018de4:	e000      	b.n	8018de8 <USBD_GetEpDesc+0x6a>
          break;
 8018de6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8018de8:	693b      	ldr	r3, [r7, #16]
}
 8018dea:	4618      	mov	r0, r3
 8018dec:	3718      	adds	r7, #24
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}

08018df2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8018df2:	b480      	push	{r7}
 8018df4:	b085      	sub	sp, #20
 8018df6:	af00      	add	r7, sp, #0
 8018df8:	6078      	str	r0, [r7, #4]
 8018dfa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8018e00:	683b      	ldr	r3, [r7, #0]
 8018e02:	881a      	ldrh	r2, [r3, #0]
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	781b      	ldrb	r3, [r3, #0]
 8018e08:	b29b      	uxth	r3, r3
 8018e0a:	4413      	add	r3, r2
 8018e0c:	b29a      	uxth	r2, r3
 8018e0e:	683b      	ldr	r3, [r7, #0]
 8018e10:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	781b      	ldrb	r3, [r3, #0]
 8018e16:	461a      	mov	r2, r3
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	4413      	add	r3, r2
 8018e1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8018e1e:	68fb      	ldr	r3, [r7, #12]
}
 8018e20:	4618      	mov	r0, r3
 8018e22:	3714      	adds	r7, #20
 8018e24:	46bd      	mov	sp, r7
 8018e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2a:	4770      	bx	lr

08018e2c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8018e2c:	b480      	push	{r7}
 8018e2e:	b087      	sub	sp, #28
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018e38:	697b      	ldr	r3, [r7, #20]
 8018e3a:	781b      	ldrb	r3, [r3, #0]
 8018e3c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018e3e:	697b      	ldr	r3, [r7, #20]
 8018e40:	3301      	adds	r3, #1
 8018e42:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8018e44:	697b      	ldr	r3, [r7, #20]
 8018e46:	781b      	ldrb	r3, [r3, #0]
 8018e48:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018e4a:	8a3b      	ldrh	r3, [r7, #16]
 8018e4c:	021b      	lsls	r3, r3, #8
 8018e4e:	b21a      	sxth	r2, r3
 8018e50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018e54:	4313      	orrs	r3, r2
 8018e56:	b21b      	sxth	r3, r3
 8018e58:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018e5a:	89fb      	ldrh	r3, [r7, #14]
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	371c      	adds	r7, #28
 8018e60:	46bd      	mov	sp, r7
 8018e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e66:	4770      	bx	lr

08018e68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b084      	sub	sp, #16
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
 8018e70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018e72:	2300      	movs	r3, #0
 8018e74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018e76:	683b      	ldr	r3, [r7, #0]
 8018e78:	781b      	ldrb	r3, [r3, #0]
 8018e7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018e7e:	2b40      	cmp	r3, #64	; 0x40
 8018e80:	d005      	beq.n	8018e8e <USBD_StdDevReq+0x26>
 8018e82:	2b40      	cmp	r3, #64	; 0x40
 8018e84:	d857      	bhi.n	8018f36 <USBD_StdDevReq+0xce>
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d00f      	beq.n	8018eaa <USBD_StdDevReq+0x42>
 8018e8a:	2b20      	cmp	r3, #32
 8018e8c:	d153      	bne.n	8018f36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	32ae      	adds	r2, #174	; 0xae
 8018e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e9c:	689b      	ldr	r3, [r3, #8]
 8018e9e:	6839      	ldr	r1, [r7, #0]
 8018ea0:	6878      	ldr	r0, [r7, #4]
 8018ea2:	4798      	blx	r3
 8018ea4:	4603      	mov	r3, r0
 8018ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8018ea8:	e04a      	b.n	8018f40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018eaa:	683b      	ldr	r3, [r7, #0]
 8018eac:	785b      	ldrb	r3, [r3, #1]
 8018eae:	2b09      	cmp	r3, #9
 8018eb0:	d83b      	bhi.n	8018f2a <USBD_StdDevReq+0xc2>
 8018eb2:	a201      	add	r2, pc, #4	; (adr r2, 8018eb8 <USBD_StdDevReq+0x50>)
 8018eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018eb8:	08018f0d 	.word	0x08018f0d
 8018ebc:	08018f21 	.word	0x08018f21
 8018ec0:	08018f2b 	.word	0x08018f2b
 8018ec4:	08018f17 	.word	0x08018f17
 8018ec8:	08018f2b 	.word	0x08018f2b
 8018ecc:	08018eeb 	.word	0x08018eeb
 8018ed0:	08018ee1 	.word	0x08018ee1
 8018ed4:	08018f2b 	.word	0x08018f2b
 8018ed8:	08018f03 	.word	0x08018f03
 8018edc:	08018ef5 	.word	0x08018ef5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018ee0:	6839      	ldr	r1, [r7, #0]
 8018ee2:	6878      	ldr	r0, [r7, #4]
 8018ee4:	f000 fa3c 	bl	8019360 <USBD_GetDescriptor>
          break;
 8018ee8:	e024      	b.n	8018f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8018eea:	6839      	ldr	r1, [r7, #0]
 8018eec:	6878      	ldr	r0, [r7, #4]
 8018eee:	f000 fba1 	bl	8019634 <USBD_SetAddress>
          break;
 8018ef2:	e01f      	b.n	8018f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018ef4:	6839      	ldr	r1, [r7, #0]
 8018ef6:	6878      	ldr	r0, [r7, #4]
 8018ef8:	f000 fbe0 	bl	80196bc <USBD_SetConfig>
 8018efc:	4603      	mov	r3, r0
 8018efe:	73fb      	strb	r3, [r7, #15]
          break;
 8018f00:	e018      	b.n	8018f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8018f02:	6839      	ldr	r1, [r7, #0]
 8018f04:	6878      	ldr	r0, [r7, #4]
 8018f06:	f000 fc83 	bl	8019810 <USBD_GetConfig>
          break;
 8018f0a:	e013      	b.n	8018f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018f0c:	6839      	ldr	r1, [r7, #0]
 8018f0e:	6878      	ldr	r0, [r7, #4]
 8018f10:	f000 fcb4 	bl	801987c <USBD_GetStatus>
          break;
 8018f14:	e00e      	b.n	8018f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8018f16:	6839      	ldr	r1, [r7, #0]
 8018f18:	6878      	ldr	r0, [r7, #4]
 8018f1a:	f000 fce3 	bl	80198e4 <USBD_SetFeature>
          break;
 8018f1e:	e009      	b.n	8018f34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8018f20:	6839      	ldr	r1, [r7, #0]
 8018f22:	6878      	ldr	r0, [r7, #4]
 8018f24:	f000 fd07 	bl	8019936 <USBD_ClrFeature>
          break;
 8018f28:	e004      	b.n	8018f34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8018f2a:	6839      	ldr	r1, [r7, #0]
 8018f2c:	6878      	ldr	r0, [r7, #4]
 8018f2e:	f000 fd5e 	bl	80199ee <USBD_CtlError>
          break;
 8018f32:	bf00      	nop
      }
      break;
 8018f34:	e004      	b.n	8018f40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8018f36:	6839      	ldr	r1, [r7, #0]
 8018f38:	6878      	ldr	r0, [r7, #4]
 8018f3a:	f000 fd58 	bl	80199ee <USBD_CtlError>
      break;
 8018f3e:	bf00      	nop
  }

  return ret;
 8018f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f42:	4618      	mov	r0, r3
 8018f44:	3710      	adds	r7, #16
 8018f46:	46bd      	mov	sp, r7
 8018f48:	bd80      	pop	{r7, pc}
 8018f4a:	bf00      	nop

08018f4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f4c:	b580      	push	{r7, lr}
 8018f4e:	b084      	sub	sp, #16
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	6078      	str	r0, [r7, #4]
 8018f54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018f56:	2300      	movs	r3, #0
 8018f58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018f5a:	683b      	ldr	r3, [r7, #0]
 8018f5c:	781b      	ldrb	r3, [r3, #0]
 8018f5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018f62:	2b40      	cmp	r3, #64	; 0x40
 8018f64:	d005      	beq.n	8018f72 <USBD_StdItfReq+0x26>
 8018f66:	2b40      	cmp	r3, #64	; 0x40
 8018f68:	d852      	bhi.n	8019010 <USBD_StdItfReq+0xc4>
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d001      	beq.n	8018f72 <USBD_StdItfReq+0x26>
 8018f6e:	2b20      	cmp	r3, #32
 8018f70:	d14e      	bne.n	8019010 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018f78:	b2db      	uxtb	r3, r3
 8018f7a:	3b01      	subs	r3, #1
 8018f7c:	2b02      	cmp	r3, #2
 8018f7e:	d840      	bhi.n	8019002 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018f80:	683b      	ldr	r3, [r7, #0]
 8018f82:	889b      	ldrh	r3, [r3, #4]
 8018f84:	b2db      	uxtb	r3, r3
 8018f86:	2b01      	cmp	r3, #1
 8018f88:	d836      	bhi.n	8018ff8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	889b      	ldrh	r3, [r3, #4]
 8018f8e:	b2db      	uxtb	r3, r3
 8018f90:	4619      	mov	r1, r3
 8018f92:	6878      	ldr	r0, [r7, #4]
 8018f94:	f7ff fed9 	bl	8018d4a <USBD_CoreFindIF>
 8018f98:	4603      	mov	r3, r0
 8018f9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018f9c:	7bbb      	ldrb	r3, [r7, #14]
 8018f9e:	2bff      	cmp	r3, #255	; 0xff
 8018fa0:	d01d      	beq.n	8018fde <USBD_StdItfReq+0x92>
 8018fa2:	7bbb      	ldrb	r3, [r7, #14]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d11a      	bne.n	8018fde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8018fa8:	7bba      	ldrb	r2, [r7, #14]
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	32ae      	adds	r2, #174	; 0xae
 8018fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018fb2:	689b      	ldr	r3, [r3, #8]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d00f      	beq.n	8018fd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8018fb8:	7bba      	ldrb	r2, [r7, #14]
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8018fc0:	7bba      	ldrb	r2, [r7, #14]
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	32ae      	adds	r2, #174	; 0xae
 8018fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018fca:	689b      	ldr	r3, [r3, #8]
 8018fcc:	6839      	ldr	r1, [r7, #0]
 8018fce:	6878      	ldr	r0, [r7, #4]
 8018fd0:	4798      	blx	r3
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8018fd6:	e004      	b.n	8018fe2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8018fd8:	2303      	movs	r3, #3
 8018fda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8018fdc:	e001      	b.n	8018fe2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8018fde:	2303      	movs	r3, #3
 8018fe0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018fe2:	683b      	ldr	r3, [r7, #0]
 8018fe4:	88db      	ldrh	r3, [r3, #6]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d110      	bne.n	801900c <USBD_StdItfReq+0xc0>
 8018fea:	7bfb      	ldrb	r3, [r7, #15]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d10d      	bne.n	801900c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8018ff0:	6878      	ldr	r0, [r7, #4]
 8018ff2:	f000 fdc7 	bl	8019b84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8018ff6:	e009      	b.n	801900c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8018ff8:	6839      	ldr	r1, [r7, #0]
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	f000 fcf7 	bl	80199ee <USBD_CtlError>
          break;
 8019000:	e004      	b.n	801900c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8019002:	6839      	ldr	r1, [r7, #0]
 8019004:	6878      	ldr	r0, [r7, #4]
 8019006:	f000 fcf2 	bl	80199ee <USBD_CtlError>
          break;
 801900a:	e000      	b.n	801900e <USBD_StdItfReq+0xc2>
          break;
 801900c:	bf00      	nop
      }
      break;
 801900e:	e004      	b.n	801901a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8019010:	6839      	ldr	r1, [r7, #0]
 8019012:	6878      	ldr	r0, [r7, #4]
 8019014:	f000 fceb 	bl	80199ee <USBD_CtlError>
      break;
 8019018:	bf00      	nop
  }

  return ret;
 801901a:	7bfb      	ldrb	r3, [r7, #15]
}
 801901c:	4618      	mov	r0, r3
 801901e:	3710      	adds	r7, #16
 8019020:	46bd      	mov	sp, r7
 8019022:	bd80      	pop	{r7, pc}

08019024 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b084      	sub	sp, #16
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
 801902c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801902e:	2300      	movs	r3, #0
 8019030:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8019032:	683b      	ldr	r3, [r7, #0]
 8019034:	889b      	ldrh	r3, [r3, #4]
 8019036:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019038:	683b      	ldr	r3, [r7, #0]
 801903a:	781b      	ldrb	r3, [r3, #0]
 801903c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019040:	2b40      	cmp	r3, #64	; 0x40
 8019042:	d007      	beq.n	8019054 <USBD_StdEPReq+0x30>
 8019044:	2b40      	cmp	r3, #64	; 0x40
 8019046:	f200 817f 	bhi.w	8019348 <USBD_StdEPReq+0x324>
 801904a:	2b00      	cmp	r3, #0
 801904c:	d02a      	beq.n	80190a4 <USBD_StdEPReq+0x80>
 801904e:	2b20      	cmp	r3, #32
 8019050:	f040 817a 	bne.w	8019348 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8019054:	7bbb      	ldrb	r3, [r7, #14]
 8019056:	4619      	mov	r1, r3
 8019058:	6878      	ldr	r0, [r7, #4]
 801905a:	f7ff fe83 	bl	8018d64 <USBD_CoreFindEP>
 801905e:	4603      	mov	r3, r0
 8019060:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019062:	7b7b      	ldrb	r3, [r7, #13]
 8019064:	2bff      	cmp	r3, #255	; 0xff
 8019066:	f000 8174 	beq.w	8019352 <USBD_StdEPReq+0x32e>
 801906a:	7b7b      	ldrb	r3, [r7, #13]
 801906c:	2b00      	cmp	r3, #0
 801906e:	f040 8170 	bne.w	8019352 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8019072:	7b7a      	ldrb	r2, [r7, #13]
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801907a:	7b7a      	ldrb	r2, [r7, #13]
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	32ae      	adds	r2, #174	; 0xae
 8019080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019084:	689b      	ldr	r3, [r3, #8]
 8019086:	2b00      	cmp	r3, #0
 8019088:	f000 8163 	beq.w	8019352 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801908c:	7b7a      	ldrb	r2, [r7, #13]
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	32ae      	adds	r2, #174	; 0xae
 8019092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019096:	689b      	ldr	r3, [r3, #8]
 8019098:	6839      	ldr	r1, [r7, #0]
 801909a:	6878      	ldr	r0, [r7, #4]
 801909c:	4798      	blx	r3
 801909e:	4603      	mov	r3, r0
 80190a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80190a2:	e156      	b.n	8019352 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80190a4:	683b      	ldr	r3, [r7, #0]
 80190a6:	785b      	ldrb	r3, [r3, #1]
 80190a8:	2b03      	cmp	r3, #3
 80190aa:	d008      	beq.n	80190be <USBD_StdEPReq+0x9a>
 80190ac:	2b03      	cmp	r3, #3
 80190ae:	f300 8145 	bgt.w	801933c <USBD_StdEPReq+0x318>
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	f000 809b 	beq.w	80191ee <USBD_StdEPReq+0x1ca>
 80190b8:	2b01      	cmp	r3, #1
 80190ba:	d03c      	beq.n	8019136 <USBD_StdEPReq+0x112>
 80190bc:	e13e      	b.n	801933c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80190c4:	b2db      	uxtb	r3, r3
 80190c6:	2b02      	cmp	r3, #2
 80190c8:	d002      	beq.n	80190d0 <USBD_StdEPReq+0xac>
 80190ca:	2b03      	cmp	r3, #3
 80190cc:	d016      	beq.n	80190fc <USBD_StdEPReq+0xd8>
 80190ce:	e02c      	b.n	801912a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80190d0:	7bbb      	ldrb	r3, [r7, #14]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d00d      	beq.n	80190f2 <USBD_StdEPReq+0xce>
 80190d6:	7bbb      	ldrb	r3, [r7, #14]
 80190d8:	2b80      	cmp	r3, #128	; 0x80
 80190da:	d00a      	beq.n	80190f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80190dc:	7bbb      	ldrb	r3, [r7, #14]
 80190de:	4619      	mov	r1, r3
 80190e0:	6878      	ldr	r0, [r7, #4]
 80190e2:	f004 fd21 	bl	801db28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80190e6:	2180      	movs	r1, #128	; 0x80
 80190e8:	6878      	ldr	r0, [r7, #4]
 80190ea:	f004 fd1d 	bl	801db28 <USBD_LL_StallEP>
 80190ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80190f0:	e020      	b.n	8019134 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80190f2:	6839      	ldr	r1, [r7, #0]
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	f000 fc7a 	bl	80199ee <USBD_CtlError>
              break;
 80190fa:	e01b      	b.n	8019134 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80190fc:	683b      	ldr	r3, [r7, #0]
 80190fe:	885b      	ldrh	r3, [r3, #2]
 8019100:	2b00      	cmp	r3, #0
 8019102:	d10e      	bne.n	8019122 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8019104:	7bbb      	ldrb	r3, [r7, #14]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d00b      	beq.n	8019122 <USBD_StdEPReq+0xfe>
 801910a:	7bbb      	ldrb	r3, [r7, #14]
 801910c:	2b80      	cmp	r3, #128	; 0x80
 801910e:	d008      	beq.n	8019122 <USBD_StdEPReq+0xfe>
 8019110:	683b      	ldr	r3, [r7, #0]
 8019112:	88db      	ldrh	r3, [r3, #6]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d104      	bne.n	8019122 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8019118:	7bbb      	ldrb	r3, [r7, #14]
 801911a:	4619      	mov	r1, r3
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	f004 fd03 	bl	801db28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8019122:	6878      	ldr	r0, [r7, #4]
 8019124:	f000 fd2e 	bl	8019b84 <USBD_CtlSendStatus>

              break;
 8019128:	e004      	b.n	8019134 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801912a:	6839      	ldr	r1, [r7, #0]
 801912c:	6878      	ldr	r0, [r7, #4]
 801912e:	f000 fc5e 	bl	80199ee <USBD_CtlError>
              break;
 8019132:	bf00      	nop
          }
          break;
 8019134:	e107      	b.n	8019346 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801913c:	b2db      	uxtb	r3, r3
 801913e:	2b02      	cmp	r3, #2
 8019140:	d002      	beq.n	8019148 <USBD_StdEPReq+0x124>
 8019142:	2b03      	cmp	r3, #3
 8019144:	d016      	beq.n	8019174 <USBD_StdEPReq+0x150>
 8019146:	e04b      	b.n	80191e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019148:	7bbb      	ldrb	r3, [r7, #14]
 801914a:	2b00      	cmp	r3, #0
 801914c:	d00d      	beq.n	801916a <USBD_StdEPReq+0x146>
 801914e:	7bbb      	ldrb	r3, [r7, #14]
 8019150:	2b80      	cmp	r3, #128	; 0x80
 8019152:	d00a      	beq.n	801916a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8019154:	7bbb      	ldrb	r3, [r7, #14]
 8019156:	4619      	mov	r1, r3
 8019158:	6878      	ldr	r0, [r7, #4]
 801915a:	f004 fce5 	bl	801db28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801915e:	2180      	movs	r1, #128	; 0x80
 8019160:	6878      	ldr	r0, [r7, #4]
 8019162:	f004 fce1 	bl	801db28 <USBD_LL_StallEP>
 8019166:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019168:	e040      	b.n	80191ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801916a:	6839      	ldr	r1, [r7, #0]
 801916c:	6878      	ldr	r0, [r7, #4]
 801916e:	f000 fc3e 	bl	80199ee <USBD_CtlError>
              break;
 8019172:	e03b      	b.n	80191ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8019174:	683b      	ldr	r3, [r7, #0]
 8019176:	885b      	ldrh	r3, [r3, #2]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d136      	bne.n	80191ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801917c:	7bbb      	ldrb	r3, [r7, #14]
 801917e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019182:	2b00      	cmp	r3, #0
 8019184:	d004      	beq.n	8019190 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8019186:	7bbb      	ldrb	r3, [r7, #14]
 8019188:	4619      	mov	r1, r3
 801918a:	6878      	ldr	r0, [r7, #4]
 801918c:	f004 fceb 	bl	801db66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8019190:	6878      	ldr	r0, [r7, #4]
 8019192:	f000 fcf7 	bl	8019b84 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8019196:	7bbb      	ldrb	r3, [r7, #14]
 8019198:	4619      	mov	r1, r3
 801919a:	6878      	ldr	r0, [r7, #4]
 801919c:	f7ff fde2 	bl	8018d64 <USBD_CoreFindEP>
 80191a0:	4603      	mov	r3, r0
 80191a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80191a4:	7b7b      	ldrb	r3, [r7, #13]
 80191a6:	2bff      	cmp	r3, #255	; 0xff
 80191a8:	d01f      	beq.n	80191ea <USBD_StdEPReq+0x1c6>
 80191aa:	7b7b      	ldrb	r3, [r7, #13]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d11c      	bne.n	80191ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80191b0:	7b7a      	ldrb	r2, [r7, #13]
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80191b8:	7b7a      	ldrb	r2, [r7, #13]
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	32ae      	adds	r2, #174	; 0xae
 80191be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191c2:	689b      	ldr	r3, [r3, #8]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d010      	beq.n	80191ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80191c8:	7b7a      	ldrb	r2, [r7, #13]
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	32ae      	adds	r2, #174	; 0xae
 80191ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191d2:	689b      	ldr	r3, [r3, #8]
 80191d4:	6839      	ldr	r1, [r7, #0]
 80191d6:	6878      	ldr	r0, [r7, #4]
 80191d8:	4798      	blx	r3
 80191da:	4603      	mov	r3, r0
 80191dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80191de:	e004      	b.n	80191ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80191e0:	6839      	ldr	r1, [r7, #0]
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f000 fc03 	bl	80199ee <USBD_CtlError>
              break;
 80191e8:	e000      	b.n	80191ec <USBD_StdEPReq+0x1c8>
              break;
 80191ea:	bf00      	nop
          }
          break;
 80191ec:	e0ab      	b.n	8019346 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80191f4:	b2db      	uxtb	r3, r3
 80191f6:	2b02      	cmp	r3, #2
 80191f8:	d002      	beq.n	8019200 <USBD_StdEPReq+0x1dc>
 80191fa:	2b03      	cmp	r3, #3
 80191fc:	d032      	beq.n	8019264 <USBD_StdEPReq+0x240>
 80191fe:	e097      	b.n	8019330 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019200:	7bbb      	ldrb	r3, [r7, #14]
 8019202:	2b00      	cmp	r3, #0
 8019204:	d007      	beq.n	8019216 <USBD_StdEPReq+0x1f2>
 8019206:	7bbb      	ldrb	r3, [r7, #14]
 8019208:	2b80      	cmp	r3, #128	; 0x80
 801920a:	d004      	beq.n	8019216 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801920c:	6839      	ldr	r1, [r7, #0]
 801920e:	6878      	ldr	r0, [r7, #4]
 8019210:	f000 fbed 	bl	80199ee <USBD_CtlError>
                break;
 8019214:	e091      	b.n	801933a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801921a:	2b00      	cmp	r3, #0
 801921c:	da0b      	bge.n	8019236 <USBD_StdEPReq+0x212>
 801921e:	7bbb      	ldrb	r3, [r7, #14]
 8019220:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019224:	4613      	mov	r3, r2
 8019226:	009b      	lsls	r3, r3, #2
 8019228:	4413      	add	r3, r2
 801922a:	009b      	lsls	r3, r3, #2
 801922c:	3310      	adds	r3, #16
 801922e:	687a      	ldr	r2, [r7, #4]
 8019230:	4413      	add	r3, r2
 8019232:	3304      	adds	r3, #4
 8019234:	e00b      	b.n	801924e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8019236:	7bbb      	ldrb	r3, [r7, #14]
 8019238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801923c:	4613      	mov	r3, r2
 801923e:	009b      	lsls	r3, r3, #2
 8019240:	4413      	add	r3, r2
 8019242:	009b      	lsls	r3, r3, #2
 8019244:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8019248:	687a      	ldr	r2, [r7, #4]
 801924a:	4413      	add	r3, r2
 801924c:	3304      	adds	r3, #4
 801924e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8019250:	68bb      	ldr	r3, [r7, #8]
 8019252:	2200      	movs	r2, #0
 8019254:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8019256:	68bb      	ldr	r3, [r7, #8]
 8019258:	2202      	movs	r2, #2
 801925a:	4619      	mov	r1, r3
 801925c:	6878      	ldr	r0, [r7, #4]
 801925e:	f000 fc37 	bl	8019ad0 <USBD_CtlSendData>
              break;
 8019262:	e06a      	b.n	801933a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8019264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019268:	2b00      	cmp	r3, #0
 801926a:	da11      	bge.n	8019290 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801926c:	7bbb      	ldrb	r3, [r7, #14]
 801926e:	f003 020f 	and.w	r2, r3, #15
 8019272:	6879      	ldr	r1, [r7, #4]
 8019274:	4613      	mov	r3, r2
 8019276:	009b      	lsls	r3, r3, #2
 8019278:	4413      	add	r3, r2
 801927a:	009b      	lsls	r3, r3, #2
 801927c:	440b      	add	r3, r1
 801927e:	3324      	adds	r3, #36	; 0x24
 8019280:	881b      	ldrh	r3, [r3, #0]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d117      	bne.n	80192b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8019286:	6839      	ldr	r1, [r7, #0]
 8019288:	6878      	ldr	r0, [r7, #4]
 801928a:	f000 fbb0 	bl	80199ee <USBD_CtlError>
                  break;
 801928e:	e054      	b.n	801933a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8019290:	7bbb      	ldrb	r3, [r7, #14]
 8019292:	f003 020f 	and.w	r2, r3, #15
 8019296:	6879      	ldr	r1, [r7, #4]
 8019298:	4613      	mov	r3, r2
 801929a:	009b      	lsls	r3, r3, #2
 801929c:	4413      	add	r3, r2
 801929e:	009b      	lsls	r3, r3, #2
 80192a0:	440b      	add	r3, r1
 80192a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80192a6:	881b      	ldrh	r3, [r3, #0]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d104      	bne.n	80192b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80192ac:	6839      	ldr	r1, [r7, #0]
 80192ae:	6878      	ldr	r0, [r7, #4]
 80192b0:	f000 fb9d 	bl	80199ee <USBD_CtlError>
                  break;
 80192b4:	e041      	b.n	801933a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80192b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	da0b      	bge.n	80192d6 <USBD_StdEPReq+0x2b2>
 80192be:	7bbb      	ldrb	r3, [r7, #14]
 80192c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80192c4:	4613      	mov	r3, r2
 80192c6:	009b      	lsls	r3, r3, #2
 80192c8:	4413      	add	r3, r2
 80192ca:	009b      	lsls	r3, r3, #2
 80192cc:	3310      	adds	r3, #16
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	4413      	add	r3, r2
 80192d2:	3304      	adds	r3, #4
 80192d4:	e00b      	b.n	80192ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80192d6:	7bbb      	ldrb	r3, [r7, #14]
 80192d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80192dc:	4613      	mov	r3, r2
 80192de:	009b      	lsls	r3, r3, #2
 80192e0:	4413      	add	r3, r2
 80192e2:	009b      	lsls	r3, r3, #2
 80192e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80192e8:	687a      	ldr	r2, [r7, #4]
 80192ea:	4413      	add	r3, r2
 80192ec:	3304      	adds	r3, #4
 80192ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80192f0:	7bbb      	ldrb	r3, [r7, #14]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d002      	beq.n	80192fc <USBD_StdEPReq+0x2d8>
 80192f6:	7bbb      	ldrb	r3, [r7, #14]
 80192f8:	2b80      	cmp	r3, #128	; 0x80
 80192fa:	d103      	bne.n	8019304 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80192fc:	68bb      	ldr	r3, [r7, #8]
 80192fe:	2200      	movs	r2, #0
 8019300:	601a      	str	r2, [r3, #0]
 8019302:	e00e      	b.n	8019322 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8019304:	7bbb      	ldrb	r3, [r7, #14]
 8019306:	4619      	mov	r1, r3
 8019308:	6878      	ldr	r0, [r7, #4]
 801930a:	f004 fc4b 	bl	801dba4 <USBD_LL_IsStallEP>
 801930e:	4603      	mov	r3, r0
 8019310:	2b00      	cmp	r3, #0
 8019312:	d003      	beq.n	801931c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8019314:	68bb      	ldr	r3, [r7, #8]
 8019316:	2201      	movs	r2, #1
 8019318:	601a      	str	r2, [r3, #0]
 801931a:	e002      	b.n	8019322 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801931c:	68bb      	ldr	r3, [r7, #8]
 801931e:	2200      	movs	r2, #0
 8019320:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8019322:	68bb      	ldr	r3, [r7, #8]
 8019324:	2202      	movs	r2, #2
 8019326:	4619      	mov	r1, r3
 8019328:	6878      	ldr	r0, [r7, #4]
 801932a:	f000 fbd1 	bl	8019ad0 <USBD_CtlSendData>
              break;
 801932e:	e004      	b.n	801933a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8019330:	6839      	ldr	r1, [r7, #0]
 8019332:	6878      	ldr	r0, [r7, #4]
 8019334:	f000 fb5b 	bl	80199ee <USBD_CtlError>
              break;
 8019338:	bf00      	nop
          }
          break;
 801933a:	e004      	b.n	8019346 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801933c:	6839      	ldr	r1, [r7, #0]
 801933e:	6878      	ldr	r0, [r7, #4]
 8019340:	f000 fb55 	bl	80199ee <USBD_CtlError>
          break;
 8019344:	bf00      	nop
      }
      break;
 8019346:	e005      	b.n	8019354 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8019348:	6839      	ldr	r1, [r7, #0]
 801934a:	6878      	ldr	r0, [r7, #4]
 801934c:	f000 fb4f 	bl	80199ee <USBD_CtlError>
      break;
 8019350:	e000      	b.n	8019354 <USBD_StdEPReq+0x330>
      break;
 8019352:	bf00      	nop
  }

  return ret;
 8019354:	7bfb      	ldrb	r3, [r7, #15]
}
 8019356:	4618      	mov	r0, r3
 8019358:	3710      	adds	r7, #16
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}
	...

08019360 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b084      	sub	sp, #16
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
 8019368:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801936a:	2300      	movs	r3, #0
 801936c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801936e:	2300      	movs	r3, #0
 8019370:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8019372:	2300      	movs	r3, #0
 8019374:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8019376:	683b      	ldr	r3, [r7, #0]
 8019378:	885b      	ldrh	r3, [r3, #2]
 801937a:	0a1b      	lsrs	r3, r3, #8
 801937c:	b29b      	uxth	r3, r3
 801937e:	3b01      	subs	r3, #1
 8019380:	2b06      	cmp	r3, #6
 8019382:	f200 8128 	bhi.w	80195d6 <USBD_GetDescriptor+0x276>
 8019386:	a201      	add	r2, pc, #4	; (adr r2, 801938c <USBD_GetDescriptor+0x2c>)
 8019388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801938c:	080193a9 	.word	0x080193a9
 8019390:	080193c1 	.word	0x080193c1
 8019394:	08019401 	.word	0x08019401
 8019398:	080195d7 	.word	0x080195d7
 801939c:	080195d7 	.word	0x080195d7
 80193a0:	08019577 	.word	0x08019577
 80193a4:	080195a3 	.word	0x080195a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	687a      	ldr	r2, [r7, #4]
 80193b2:	7c12      	ldrb	r2, [r2, #16]
 80193b4:	f107 0108 	add.w	r1, r7, #8
 80193b8:	4610      	mov	r0, r2
 80193ba:	4798      	blx	r3
 80193bc:	60f8      	str	r0, [r7, #12]
      break;
 80193be:	e112      	b.n	80195e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	7c1b      	ldrb	r3, [r3, #16]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d10d      	bne.n	80193e4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80193ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80193d0:	f107 0208 	add.w	r2, r7, #8
 80193d4:	4610      	mov	r0, r2
 80193d6:	4798      	blx	r3
 80193d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	3301      	adds	r3, #1
 80193de:	2202      	movs	r2, #2
 80193e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80193e2:	e100      	b.n	80195e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80193ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193ec:	f107 0208 	add.w	r2, r7, #8
 80193f0:	4610      	mov	r0, r2
 80193f2:	4798      	blx	r3
 80193f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	3301      	adds	r3, #1
 80193fa:	2202      	movs	r2, #2
 80193fc:	701a      	strb	r2, [r3, #0]
      break;
 80193fe:	e0f2      	b.n	80195e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8019400:	683b      	ldr	r3, [r7, #0]
 8019402:	885b      	ldrh	r3, [r3, #2]
 8019404:	b2db      	uxtb	r3, r3
 8019406:	2b05      	cmp	r3, #5
 8019408:	f200 80ac 	bhi.w	8019564 <USBD_GetDescriptor+0x204>
 801940c:	a201      	add	r2, pc, #4	; (adr r2, 8019414 <USBD_GetDescriptor+0xb4>)
 801940e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019412:	bf00      	nop
 8019414:	0801942d 	.word	0x0801942d
 8019418:	08019461 	.word	0x08019461
 801941c:	08019495 	.word	0x08019495
 8019420:	080194c9 	.word	0x080194c9
 8019424:	080194fd 	.word	0x080194fd
 8019428:	08019531 	.word	0x08019531
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019432:	685b      	ldr	r3, [r3, #4]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d00b      	beq.n	8019450 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801943e:	685b      	ldr	r3, [r3, #4]
 8019440:	687a      	ldr	r2, [r7, #4]
 8019442:	7c12      	ldrb	r2, [r2, #16]
 8019444:	f107 0108 	add.w	r1, r7, #8
 8019448:	4610      	mov	r0, r2
 801944a:	4798      	blx	r3
 801944c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801944e:	e091      	b.n	8019574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019450:	6839      	ldr	r1, [r7, #0]
 8019452:	6878      	ldr	r0, [r7, #4]
 8019454:	f000 facb 	bl	80199ee <USBD_CtlError>
            err++;
 8019458:	7afb      	ldrb	r3, [r7, #11]
 801945a:	3301      	adds	r3, #1
 801945c:	72fb      	strb	r3, [r7, #11]
          break;
 801945e:	e089      	b.n	8019574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019466:	689b      	ldr	r3, [r3, #8]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d00b      	beq.n	8019484 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019472:	689b      	ldr	r3, [r3, #8]
 8019474:	687a      	ldr	r2, [r7, #4]
 8019476:	7c12      	ldrb	r2, [r2, #16]
 8019478:	f107 0108 	add.w	r1, r7, #8
 801947c:	4610      	mov	r0, r2
 801947e:	4798      	blx	r3
 8019480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019482:	e077      	b.n	8019574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019484:	6839      	ldr	r1, [r7, #0]
 8019486:	6878      	ldr	r0, [r7, #4]
 8019488:	f000 fab1 	bl	80199ee <USBD_CtlError>
            err++;
 801948c:	7afb      	ldrb	r3, [r7, #11]
 801948e:	3301      	adds	r3, #1
 8019490:	72fb      	strb	r3, [r7, #11]
          break;
 8019492:	e06f      	b.n	8019574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801949a:	68db      	ldr	r3, [r3, #12]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d00b      	beq.n	80194b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80194a6:	68db      	ldr	r3, [r3, #12]
 80194a8:	687a      	ldr	r2, [r7, #4]
 80194aa:	7c12      	ldrb	r2, [r2, #16]
 80194ac:	f107 0108 	add.w	r1, r7, #8
 80194b0:	4610      	mov	r0, r2
 80194b2:	4798      	blx	r3
 80194b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80194b6:	e05d      	b.n	8019574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80194b8:	6839      	ldr	r1, [r7, #0]
 80194ba:	6878      	ldr	r0, [r7, #4]
 80194bc:	f000 fa97 	bl	80199ee <USBD_CtlError>
            err++;
 80194c0:	7afb      	ldrb	r3, [r7, #11]
 80194c2:	3301      	adds	r3, #1
 80194c4:	72fb      	strb	r3, [r7, #11]
          break;
 80194c6:	e055      	b.n	8019574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80194ce:	691b      	ldr	r3, [r3, #16]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d00b      	beq.n	80194ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80194da:	691b      	ldr	r3, [r3, #16]
 80194dc:	687a      	ldr	r2, [r7, #4]
 80194de:	7c12      	ldrb	r2, [r2, #16]
 80194e0:	f107 0108 	add.w	r1, r7, #8
 80194e4:	4610      	mov	r0, r2
 80194e6:	4798      	blx	r3
 80194e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80194ea:	e043      	b.n	8019574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80194ec:	6839      	ldr	r1, [r7, #0]
 80194ee:	6878      	ldr	r0, [r7, #4]
 80194f0:	f000 fa7d 	bl	80199ee <USBD_CtlError>
            err++;
 80194f4:	7afb      	ldrb	r3, [r7, #11]
 80194f6:	3301      	adds	r3, #1
 80194f8:	72fb      	strb	r3, [r7, #11]
          break;
 80194fa:	e03b      	b.n	8019574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019502:	695b      	ldr	r3, [r3, #20]
 8019504:	2b00      	cmp	r3, #0
 8019506:	d00b      	beq.n	8019520 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801950e:	695b      	ldr	r3, [r3, #20]
 8019510:	687a      	ldr	r2, [r7, #4]
 8019512:	7c12      	ldrb	r2, [r2, #16]
 8019514:	f107 0108 	add.w	r1, r7, #8
 8019518:	4610      	mov	r0, r2
 801951a:	4798      	blx	r3
 801951c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801951e:	e029      	b.n	8019574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019520:	6839      	ldr	r1, [r7, #0]
 8019522:	6878      	ldr	r0, [r7, #4]
 8019524:	f000 fa63 	bl	80199ee <USBD_CtlError>
            err++;
 8019528:	7afb      	ldrb	r3, [r7, #11]
 801952a:	3301      	adds	r3, #1
 801952c:	72fb      	strb	r3, [r7, #11]
          break;
 801952e:	e021      	b.n	8019574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019536:	699b      	ldr	r3, [r3, #24]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d00b      	beq.n	8019554 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019542:	699b      	ldr	r3, [r3, #24]
 8019544:	687a      	ldr	r2, [r7, #4]
 8019546:	7c12      	ldrb	r2, [r2, #16]
 8019548:	f107 0108 	add.w	r1, r7, #8
 801954c:	4610      	mov	r0, r2
 801954e:	4798      	blx	r3
 8019550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019552:	e00f      	b.n	8019574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8019554:	6839      	ldr	r1, [r7, #0]
 8019556:	6878      	ldr	r0, [r7, #4]
 8019558:	f000 fa49 	bl	80199ee <USBD_CtlError>
            err++;
 801955c:	7afb      	ldrb	r3, [r7, #11]
 801955e:	3301      	adds	r3, #1
 8019560:	72fb      	strb	r3, [r7, #11]
          break;
 8019562:	e007      	b.n	8019574 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8019564:	6839      	ldr	r1, [r7, #0]
 8019566:	6878      	ldr	r0, [r7, #4]
 8019568:	f000 fa41 	bl	80199ee <USBD_CtlError>
          err++;
 801956c:	7afb      	ldrb	r3, [r7, #11]
 801956e:	3301      	adds	r3, #1
 8019570:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8019572:	bf00      	nop
      }
      break;
 8019574:	e037      	b.n	80195e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	7c1b      	ldrb	r3, [r3, #16]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d109      	bne.n	8019592 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019586:	f107 0208 	add.w	r2, r7, #8
 801958a:	4610      	mov	r0, r2
 801958c:	4798      	blx	r3
 801958e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019590:	e029      	b.n	80195e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8019592:	6839      	ldr	r1, [r7, #0]
 8019594:	6878      	ldr	r0, [r7, #4]
 8019596:	f000 fa2a 	bl	80199ee <USBD_CtlError>
        err++;
 801959a:	7afb      	ldrb	r3, [r7, #11]
 801959c:	3301      	adds	r3, #1
 801959e:	72fb      	strb	r3, [r7, #11]
      break;
 80195a0:	e021      	b.n	80195e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	7c1b      	ldrb	r3, [r3, #16]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d10d      	bne.n	80195c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80195b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195b2:	f107 0208 	add.w	r2, r7, #8
 80195b6:	4610      	mov	r0, r2
 80195b8:	4798      	blx	r3
 80195ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	3301      	adds	r3, #1
 80195c0:	2207      	movs	r2, #7
 80195c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80195c4:	e00f      	b.n	80195e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80195c6:	6839      	ldr	r1, [r7, #0]
 80195c8:	6878      	ldr	r0, [r7, #4]
 80195ca:	f000 fa10 	bl	80199ee <USBD_CtlError>
        err++;
 80195ce:	7afb      	ldrb	r3, [r7, #11]
 80195d0:	3301      	adds	r3, #1
 80195d2:	72fb      	strb	r3, [r7, #11]
      break;
 80195d4:	e007      	b.n	80195e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80195d6:	6839      	ldr	r1, [r7, #0]
 80195d8:	6878      	ldr	r0, [r7, #4]
 80195da:	f000 fa08 	bl	80199ee <USBD_CtlError>
      err++;
 80195de:	7afb      	ldrb	r3, [r7, #11]
 80195e0:	3301      	adds	r3, #1
 80195e2:	72fb      	strb	r3, [r7, #11]
      break;
 80195e4:	bf00      	nop
  }

  if (err != 0U)
 80195e6:	7afb      	ldrb	r3, [r7, #11]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d11e      	bne.n	801962a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80195ec:	683b      	ldr	r3, [r7, #0]
 80195ee:	88db      	ldrh	r3, [r3, #6]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d016      	beq.n	8019622 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80195f4:	893b      	ldrh	r3, [r7, #8]
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d00e      	beq.n	8019618 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	88da      	ldrh	r2, [r3, #6]
 80195fe:	893b      	ldrh	r3, [r7, #8]
 8019600:	4293      	cmp	r3, r2
 8019602:	bf28      	it	cs
 8019604:	4613      	movcs	r3, r2
 8019606:	b29b      	uxth	r3, r3
 8019608:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801960a:	893b      	ldrh	r3, [r7, #8]
 801960c:	461a      	mov	r2, r3
 801960e:	68f9      	ldr	r1, [r7, #12]
 8019610:	6878      	ldr	r0, [r7, #4]
 8019612:	f000 fa5d 	bl	8019ad0 <USBD_CtlSendData>
 8019616:	e009      	b.n	801962c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8019618:	6839      	ldr	r1, [r7, #0]
 801961a:	6878      	ldr	r0, [r7, #4]
 801961c:	f000 f9e7 	bl	80199ee <USBD_CtlError>
 8019620:	e004      	b.n	801962c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8019622:	6878      	ldr	r0, [r7, #4]
 8019624:	f000 faae 	bl	8019b84 <USBD_CtlSendStatus>
 8019628:	e000      	b.n	801962c <USBD_GetDescriptor+0x2cc>
    return;
 801962a:	bf00      	nop
  }
}
 801962c:	3710      	adds	r7, #16
 801962e:	46bd      	mov	sp, r7
 8019630:	bd80      	pop	{r7, pc}
 8019632:	bf00      	nop

08019634 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b084      	sub	sp, #16
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
 801963c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	889b      	ldrh	r3, [r3, #4]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d131      	bne.n	80196aa <USBD_SetAddress+0x76>
 8019646:	683b      	ldr	r3, [r7, #0]
 8019648:	88db      	ldrh	r3, [r3, #6]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d12d      	bne.n	80196aa <USBD_SetAddress+0x76>
 801964e:	683b      	ldr	r3, [r7, #0]
 8019650:	885b      	ldrh	r3, [r3, #2]
 8019652:	2b7f      	cmp	r3, #127	; 0x7f
 8019654:	d829      	bhi.n	80196aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8019656:	683b      	ldr	r3, [r7, #0]
 8019658:	885b      	ldrh	r3, [r3, #2]
 801965a:	b2db      	uxtb	r3, r3
 801965c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019668:	b2db      	uxtb	r3, r3
 801966a:	2b03      	cmp	r3, #3
 801966c:	d104      	bne.n	8019678 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801966e:	6839      	ldr	r1, [r7, #0]
 8019670:	6878      	ldr	r0, [r7, #4]
 8019672:	f000 f9bc 	bl	80199ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019676:	e01d      	b.n	80196b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	7bfa      	ldrb	r2, [r7, #15]
 801967c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8019680:	7bfb      	ldrb	r3, [r7, #15]
 8019682:	4619      	mov	r1, r3
 8019684:	6878      	ldr	r0, [r7, #4]
 8019686:	f004 fab9 	bl	801dbfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801968a:	6878      	ldr	r0, [r7, #4]
 801968c:	f000 fa7a 	bl	8019b84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8019690:	7bfb      	ldrb	r3, [r7, #15]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d004      	beq.n	80196a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	2202      	movs	r2, #2
 801969a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801969e:	e009      	b.n	80196b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	2201      	movs	r2, #1
 80196a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80196a8:	e004      	b.n	80196b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80196aa:	6839      	ldr	r1, [r7, #0]
 80196ac:	6878      	ldr	r0, [r7, #4]
 80196ae:	f000 f99e 	bl	80199ee <USBD_CtlError>
  }
}
 80196b2:	bf00      	nop
 80196b4:	bf00      	nop
 80196b6:	3710      	adds	r7, #16
 80196b8:	46bd      	mov	sp, r7
 80196ba:	bd80      	pop	{r7, pc}

080196bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80196bc:	b580      	push	{r7, lr}
 80196be:	b084      	sub	sp, #16
 80196c0:	af00      	add	r7, sp, #0
 80196c2:	6078      	str	r0, [r7, #4]
 80196c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80196c6:	2300      	movs	r3, #0
 80196c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80196ca:	683b      	ldr	r3, [r7, #0]
 80196cc:	885b      	ldrh	r3, [r3, #2]
 80196ce:	b2da      	uxtb	r2, r3
 80196d0:	4b4e      	ldr	r3, [pc, #312]	; (801980c <USBD_SetConfig+0x150>)
 80196d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80196d4:	4b4d      	ldr	r3, [pc, #308]	; (801980c <USBD_SetConfig+0x150>)
 80196d6:	781b      	ldrb	r3, [r3, #0]
 80196d8:	2b01      	cmp	r3, #1
 80196da:	d905      	bls.n	80196e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80196dc:	6839      	ldr	r1, [r7, #0]
 80196de:	6878      	ldr	r0, [r7, #4]
 80196e0:	f000 f985 	bl	80199ee <USBD_CtlError>
    return USBD_FAIL;
 80196e4:	2303      	movs	r3, #3
 80196e6:	e08c      	b.n	8019802 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80196ee:	b2db      	uxtb	r3, r3
 80196f0:	2b02      	cmp	r3, #2
 80196f2:	d002      	beq.n	80196fa <USBD_SetConfig+0x3e>
 80196f4:	2b03      	cmp	r3, #3
 80196f6:	d029      	beq.n	801974c <USBD_SetConfig+0x90>
 80196f8:	e075      	b.n	80197e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80196fa:	4b44      	ldr	r3, [pc, #272]	; (801980c <USBD_SetConfig+0x150>)
 80196fc:	781b      	ldrb	r3, [r3, #0]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d020      	beq.n	8019744 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8019702:	4b42      	ldr	r3, [pc, #264]	; (801980c <USBD_SetConfig+0x150>)
 8019704:	781b      	ldrb	r3, [r3, #0]
 8019706:	461a      	mov	r2, r3
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801970c:	4b3f      	ldr	r3, [pc, #252]	; (801980c <USBD_SetConfig+0x150>)
 801970e:	781b      	ldrb	r3, [r3, #0]
 8019710:	4619      	mov	r1, r3
 8019712:	6878      	ldr	r0, [r7, #4]
 8019714:	f7fe ffe7 	bl	80186e6 <USBD_SetClassConfig>
 8019718:	4603      	mov	r3, r0
 801971a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801971c:	7bfb      	ldrb	r3, [r7, #15]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d008      	beq.n	8019734 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8019722:	6839      	ldr	r1, [r7, #0]
 8019724:	6878      	ldr	r0, [r7, #4]
 8019726:	f000 f962 	bl	80199ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	2202      	movs	r2, #2
 801972e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8019732:	e065      	b.n	8019800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8019734:	6878      	ldr	r0, [r7, #4]
 8019736:	f000 fa25 	bl	8019b84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	2203      	movs	r2, #3
 801973e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8019742:	e05d      	b.n	8019800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8019744:	6878      	ldr	r0, [r7, #4]
 8019746:	f000 fa1d 	bl	8019b84 <USBD_CtlSendStatus>
      break;
 801974a:	e059      	b.n	8019800 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801974c:	4b2f      	ldr	r3, [pc, #188]	; (801980c <USBD_SetConfig+0x150>)
 801974e:	781b      	ldrb	r3, [r3, #0]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d112      	bne.n	801977a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	2202      	movs	r2, #2
 8019758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801975c:	4b2b      	ldr	r3, [pc, #172]	; (801980c <USBD_SetConfig+0x150>)
 801975e:	781b      	ldrb	r3, [r3, #0]
 8019760:	461a      	mov	r2, r3
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8019766:	4b29      	ldr	r3, [pc, #164]	; (801980c <USBD_SetConfig+0x150>)
 8019768:	781b      	ldrb	r3, [r3, #0]
 801976a:	4619      	mov	r1, r3
 801976c:	6878      	ldr	r0, [r7, #4]
 801976e:	f7fe ffd6 	bl	801871e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8019772:	6878      	ldr	r0, [r7, #4]
 8019774:	f000 fa06 	bl	8019b84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8019778:	e042      	b.n	8019800 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801977a:	4b24      	ldr	r3, [pc, #144]	; (801980c <USBD_SetConfig+0x150>)
 801977c:	781b      	ldrb	r3, [r3, #0]
 801977e:	461a      	mov	r2, r3
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	685b      	ldr	r3, [r3, #4]
 8019784:	429a      	cmp	r2, r3
 8019786:	d02a      	beq.n	80197de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	685b      	ldr	r3, [r3, #4]
 801978c:	b2db      	uxtb	r3, r3
 801978e:	4619      	mov	r1, r3
 8019790:	6878      	ldr	r0, [r7, #4]
 8019792:	f7fe ffc4 	bl	801871e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8019796:	4b1d      	ldr	r3, [pc, #116]	; (801980c <USBD_SetConfig+0x150>)
 8019798:	781b      	ldrb	r3, [r3, #0]
 801979a:	461a      	mov	r2, r3
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80197a0:	4b1a      	ldr	r3, [pc, #104]	; (801980c <USBD_SetConfig+0x150>)
 80197a2:	781b      	ldrb	r3, [r3, #0]
 80197a4:	4619      	mov	r1, r3
 80197a6:	6878      	ldr	r0, [r7, #4]
 80197a8:	f7fe ff9d 	bl	80186e6 <USBD_SetClassConfig>
 80197ac:	4603      	mov	r3, r0
 80197ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80197b0:	7bfb      	ldrb	r3, [r7, #15]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d00f      	beq.n	80197d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80197b6:	6839      	ldr	r1, [r7, #0]
 80197b8:	6878      	ldr	r0, [r7, #4]
 80197ba:	f000 f918 	bl	80199ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	685b      	ldr	r3, [r3, #4]
 80197c2:	b2db      	uxtb	r3, r3
 80197c4:	4619      	mov	r1, r3
 80197c6:	6878      	ldr	r0, [r7, #4]
 80197c8:	f7fe ffa9 	bl	801871e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	2202      	movs	r2, #2
 80197d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80197d4:	e014      	b.n	8019800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80197d6:	6878      	ldr	r0, [r7, #4]
 80197d8:	f000 f9d4 	bl	8019b84 <USBD_CtlSendStatus>
      break;
 80197dc:	e010      	b.n	8019800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80197de:	6878      	ldr	r0, [r7, #4]
 80197e0:	f000 f9d0 	bl	8019b84 <USBD_CtlSendStatus>
      break;
 80197e4:	e00c      	b.n	8019800 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80197e6:	6839      	ldr	r1, [r7, #0]
 80197e8:	6878      	ldr	r0, [r7, #4]
 80197ea:	f000 f900 	bl	80199ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80197ee:	4b07      	ldr	r3, [pc, #28]	; (801980c <USBD_SetConfig+0x150>)
 80197f0:	781b      	ldrb	r3, [r3, #0]
 80197f2:	4619      	mov	r1, r3
 80197f4:	6878      	ldr	r0, [r7, #4]
 80197f6:	f7fe ff92 	bl	801871e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80197fa:	2303      	movs	r3, #3
 80197fc:	73fb      	strb	r3, [r7, #15]
      break;
 80197fe:	bf00      	nop
  }

  return ret;
 8019800:	7bfb      	ldrb	r3, [r7, #15]
}
 8019802:	4618      	mov	r0, r3
 8019804:	3710      	adds	r7, #16
 8019806:	46bd      	mov	sp, r7
 8019808:	bd80      	pop	{r7, pc}
 801980a:	bf00      	nop
 801980c:	2000ccdc 	.word	0x2000ccdc

08019810 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019810:	b580      	push	{r7, lr}
 8019812:	b082      	sub	sp, #8
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]
 8019818:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801981a:	683b      	ldr	r3, [r7, #0]
 801981c:	88db      	ldrh	r3, [r3, #6]
 801981e:	2b01      	cmp	r3, #1
 8019820:	d004      	beq.n	801982c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8019822:	6839      	ldr	r1, [r7, #0]
 8019824:	6878      	ldr	r0, [r7, #4]
 8019826:	f000 f8e2 	bl	80199ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801982a:	e023      	b.n	8019874 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019832:	b2db      	uxtb	r3, r3
 8019834:	2b02      	cmp	r3, #2
 8019836:	dc02      	bgt.n	801983e <USBD_GetConfig+0x2e>
 8019838:	2b00      	cmp	r3, #0
 801983a:	dc03      	bgt.n	8019844 <USBD_GetConfig+0x34>
 801983c:	e015      	b.n	801986a <USBD_GetConfig+0x5a>
 801983e:	2b03      	cmp	r3, #3
 8019840:	d00b      	beq.n	801985a <USBD_GetConfig+0x4a>
 8019842:	e012      	b.n	801986a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	2200      	movs	r2, #0
 8019848:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	3308      	adds	r3, #8
 801984e:	2201      	movs	r2, #1
 8019850:	4619      	mov	r1, r3
 8019852:	6878      	ldr	r0, [r7, #4]
 8019854:	f000 f93c 	bl	8019ad0 <USBD_CtlSendData>
        break;
 8019858:	e00c      	b.n	8019874 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	3304      	adds	r3, #4
 801985e:	2201      	movs	r2, #1
 8019860:	4619      	mov	r1, r3
 8019862:	6878      	ldr	r0, [r7, #4]
 8019864:	f000 f934 	bl	8019ad0 <USBD_CtlSendData>
        break;
 8019868:	e004      	b.n	8019874 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801986a:	6839      	ldr	r1, [r7, #0]
 801986c:	6878      	ldr	r0, [r7, #4]
 801986e:	f000 f8be 	bl	80199ee <USBD_CtlError>
        break;
 8019872:	bf00      	nop
}
 8019874:	bf00      	nop
 8019876:	3708      	adds	r7, #8
 8019878:	46bd      	mov	sp, r7
 801987a:	bd80      	pop	{r7, pc}

0801987c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b082      	sub	sp, #8
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
 8019884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801988c:	b2db      	uxtb	r3, r3
 801988e:	3b01      	subs	r3, #1
 8019890:	2b02      	cmp	r3, #2
 8019892:	d81e      	bhi.n	80198d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8019894:	683b      	ldr	r3, [r7, #0]
 8019896:	88db      	ldrh	r3, [r3, #6]
 8019898:	2b02      	cmp	r3, #2
 801989a:	d004      	beq.n	80198a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801989c:	6839      	ldr	r1, [r7, #0]
 801989e:	6878      	ldr	r0, [r7, #4]
 80198a0:	f000 f8a5 	bl	80199ee <USBD_CtlError>
        break;
 80198a4:	e01a      	b.n	80198dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	2201      	movs	r2, #1
 80198aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d005      	beq.n	80198c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	68db      	ldr	r3, [r3, #12]
 80198ba:	f043 0202 	orr.w	r2, r3, #2
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	330c      	adds	r3, #12
 80198c6:	2202      	movs	r2, #2
 80198c8:	4619      	mov	r1, r3
 80198ca:	6878      	ldr	r0, [r7, #4]
 80198cc:	f000 f900 	bl	8019ad0 <USBD_CtlSendData>
      break;
 80198d0:	e004      	b.n	80198dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80198d2:	6839      	ldr	r1, [r7, #0]
 80198d4:	6878      	ldr	r0, [r7, #4]
 80198d6:	f000 f88a 	bl	80199ee <USBD_CtlError>
      break;
 80198da:	bf00      	nop
  }
}
 80198dc:	bf00      	nop
 80198de:	3708      	adds	r7, #8
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bd80      	pop	{r7, pc}

080198e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b082      	sub	sp, #8
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
 80198ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80198ee:	683b      	ldr	r3, [r7, #0]
 80198f0:	885b      	ldrh	r3, [r3, #2]
 80198f2:	2b01      	cmp	r3, #1
 80198f4:	d107      	bne.n	8019906 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	2201      	movs	r2, #1
 80198fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80198fe:	6878      	ldr	r0, [r7, #4]
 8019900:	f000 f940 	bl	8019b84 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8019904:	e013      	b.n	801992e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8019906:	683b      	ldr	r3, [r7, #0]
 8019908:	885b      	ldrh	r3, [r3, #2]
 801990a:	2b02      	cmp	r3, #2
 801990c:	d10b      	bne.n	8019926 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801990e:	683b      	ldr	r3, [r7, #0]
 8019910:	889b      	ldrh	r3, [r3, #4]
 8019912:	0a1b      	lsrs	r3, r3, #8
 8019914:	b29b      	uxth	r3, r3
 8019916:	b2da      	uxtb	r2, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801991e:	6878      	ldr	r0, [r7, #4]
 8019920:	f000 f930 	bl	8019b84 <USBD_CtlSendStatus>
}
 8019924:	e003      	b.n	801992e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8019926:	6839      	ldr	r1, [r7, #0]
 8019928:	6878      	ldr	r0, [r7, #4]
 801992a:	f000 f860 	bl	80199ee <USBD_CtlError>
}
 801992e:	bf00      	nop
 8019930:	3708      	adds	r7, #8
 8019932:	46bd      	mov	sp, r7
 8019934:	bd80      	pop	{r7, pc}

08019936 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019936:	b580      	push	{r7, lr}
 8019938:	b082      	sub	sp, #8
 801993a:	af00      	add	r7, sp, #0
 801993c:	6078      	str	r0, [r7, #4]
 801993e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019946:	b2db      	uxtb	r3, r3
 8019948:	3b01      	subs	r3, #1
 801994a:	2b02      	cmp	r3, #2
 801994c:	d80b      	bhi.n	8019966 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801994e:	683b      	ldr	r3, [r7, #0]
 8019950:	885b      	ldrh	r3, [r3, #2]
 8019952:	2b01      	cmp	r3, #1
 8019954:	d10c      	bne.n	8019970 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	2200      	movs	r2, #0
 801995a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801995e:	6878      	ldr	r0, [r7, #4]
 8019960:	f000 f910 	bl	8019b84 <USBD_CtlSendStatus>
      }
      break;
 8019964:	e004      	b.n	8019970 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8019966:	6839      	ldr	r1, [r7, #0]
 8019968:	6878      	ldr	r0, [r7, #4]
 801996a:	f000 f840 	bl	80199ee <USBD_CtlError>
      break;
 801996e:	e000      	b.n	8019972 <USBD_ClrFeature+0x3c>
      break;
 8019970:	bf00      	nop
  }
}
 8019972:	bf00      	nop
 8019974:	3708      	adds	r7, #8
 8019976:	46bd      	mov	sp, r7
 8019978:	bd80      	pop	{r7, pc}

0801997a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801997a:	b580      	push	{r7, lr}
 801997c:	b084      	sub	sp, #16
 801997e:	af00      	add	r7, sp, #0
 8019980:	6078      	str	r0, [r7, #4]
 8019982:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	781a      	ldrb	r2, [r3, #0]
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	3301      	adds	r3, #1
 8019994:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	781a      	ldrb	r2, [r3, #0]
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	3301      	adds	r3, #1
 80199a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80199a4:	68f8      	ldr	r0, [r7, #12]
 80199a6:	f7ff fa41 	bl	8018e2c <SWAPBYTE>
 80199aa:	4603      	mov	r3, r0
 80199ac:	461a      	mov	r2, r3
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	3301      	adds	r3, #1
 80199b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	3301      	adds	r3, #1
 80199bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80199be:	68f8      	ldr	r0, [r7, #12]
 80199c0:	f7ff fa34 	bl	8018e2c <SWAPBYTE>
 80199c4:	4603      	mov	r3, r0
 80199c6:	461a      	mov	r2, r3
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	3301      	adds	r3, #1
 80199d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	3301      	adds	r3, #1
 80199d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80199d8:	68f8      	ldr	r0, [r7, #12]
 80199da:	f7ff fa27 	bl	8018e2c <SWAPBYTE>
 80199de:	4603      	mov	r3, r0
 80199e0:	461a      	mov	r2, r3
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	80da      	strh	r2, [r3, #6]
}
 80199e6:	bf00      	nop
 80199e8:	3710      	adds	r7, #16
 80199ea:	46bd      	mov	sp, r7
 80199ec:	bd80      	pop	{r7, pc}

080199ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80199ee:	b580      	push	{r7, lr}
 80199f0:	b082      	sub	sp, #8
 80199f2:	af00      	add	r7, sp, #0
 80199f4:	6078      	str	r0, [r7, #4]
 80199f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80199f8:	2180      	movs	r1, #128	; 0x80
 80199fa:	6878      	ldr	r0, [r7, #4]
 80199fc:	f004 f894 	bl	801db28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8019a00:	2100      	movs	r1, #0
 8019a02:	6878      	ldr	r0, [r7, #4]
 8019a04:	f004 f890 	bl	801db28 <USBD_LL_StallEP>
}
 8019a08:	bf00      	nop
 8019a0a:	3708      	adds	r7, #8
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bd80      	pop	{r7, pc}

08019a10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8019a10:	b580      	push	{r7, lr}
 8019a12:	b086      	sub	sp, #24
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	60f8      	str	r0, [r7, #12]
 8019a18:	60b9      	str	r1, [r7, #8]
 8019a1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d036      	beq.n	8019a94 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8019a2a:	6938      	ldr	r0, [r7, #16]
 8019a2c:	f000 f836 	bl	8019a9c <USBD_GetLen>
 8019a30:	4603      	mov	r3, r0
 8019a32:	3301      	adds	r3, #1
 8019a34:	b29b      	uxth	r3, r3
 8019a36:	005b      	lsls	r3, r3, #1
 8019a38:	b29a      	uxth	r2, r3
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8019a3e:	7dfb      	ldrb	r3, [r7, #23]
 8019a40:	68ba      	ldr	r2, [r7, #8]
 8019a42:	4413      	add	r3, r2
 8019a44:	687a      	ldr	r2, [r7, #4]
 8019a46:	7812      	ldrb	r2, [r2, #0]
 8019a48:	701a      	strb	r2, [r3, #0]
  idx++;
 8019a4a:	7dfb      	ldrb	r3, [r7, #23]
 8019a4c:	3301      	adds	r3, #1
 8019a4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8019a50:	7dfb      	ldrb	r3, [r7, #23]
 8019a52:	68ba      	ldr	r2, [r7, #8]
 8019a54:	4413      	add	r3, r2
 8019a56:	2203      	movs	r2, #3
 8019a58:	701a      	strb	r2, [r3, #0]
  idx++;
 8019a5a:	7dfb      	ldrb	r3, [r7, #23]
 8019a5c:	3301      	adds	r3, #1
 8019a5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8019a60:	e013      	b.n	8019a8a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8019a62:	7dfb      	ldrb	r3, [r7, #23]
 8019a64:	68ba      	ldr	r2, [r7, #8]
 8019a66:	4413      	add	r3, r2
 8019a68:	693a      	ldr	r2, [r7, #16]
 8019a6a:	7812      	ldrb	r2, [r2, #0]
 8019a6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8019a6e:	693b      	ldr	r3, [r7, #16]
 8019a70:	3301      	adds	r3, #1
 8019a72:	613b      	str	r3, [r7, #16]
    idx++;
 8019a74:	7dfb      	ldrb	r3, [r7, #23]
 8019a76:	3301      	adds	r3, #1
 8019a78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8019a7a:	7dfb      	ldrb	r3, [r7, #23]
 8019a7c:	68ba      	ldr	r2, [r7, #8]
 8019a7e:	4413      	add	r3, r2
 8019a80:	2200      	movs	r2, #0
 8019a82:	701a      	strb	r2, [r3, #0]
    idx++;
 8019a84:	7dfb      	ldrb	r3, [r7, #23]
 8019a86:	3301      	adds	r3, #1
 8019a88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8019a8a:	693b      	ldr	r3, [r7, #16]
 8019a8c:	781b      	ldrb	r3, [r3, #0]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d1e7      	bne.n	8019a62 <USBD_GetString+0x52>
 8019a92:	e000      	b.n	8019a96 <USBD_GetString+0x86>
    return;
 8019a94:	bf00      	nop
  }
}
 8019a96:	3718      	adds	r7, #24
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	bd80      	pop	{r7, pc}

08019a9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019a9c:	b480      	push	{r7}
 8019a9e:	b085      	sub	sp, #20
 8019aa0:	af00      	add	r7, sp, #0
 8019aa2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019aac:	e005      	b.n	8019aba <USBD_GetLen+0x1e>
  {
    len++;
 8019aae:	7bfb      	ldrb	r3, [r7, #15]
 8019ab0:	3301      	adds	r3, #1
 8019ab2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019ab4:	68bb      	ldr	r3, [r7, #8]
 8019ab6:	3301      	adds	r3, #1
 8019ab8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8019aba:	68bb      	ldr	r3, [r7, #8]
 8019abc:	781b      	ldrb	r3, [r3, #0]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d1f5      	bne.n	8019aae <USBD_GetLen+0x12>
  }

  return len;
 8019ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	3714      	adds	r7, #20
 8019ac8:	46bd      	mov	sp, r7
 8019aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ace:	4770      	bx	lr

08019ad0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	b084      	sub	sp, #16
 8019ad4:	af00      	add	r7, sp, #0
 8019ad6:	60f8      	str	r0, [r7, #12]
 8019ad8:	60b9      	str	r1, [r7, #8]
 8019ada:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	2202      	movs	r2, #2
 8019ae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	687a      	ldr	r2, [r7, #4]
 8019ae8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	687a      	ldr	r2, [r7, #4]
 8019aee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	68ba      	ldr	r2, [r7, #8]
 8019af4:	2100      	movs	r1, #0
 8019af6:	68f8      	ldr	r0, [r7, #12]
 8019af8:	f004 f89f 	bl	801dc3a <USBD_LL_Transmit>

  return USBD_OK;
 8019afc:	2300      	movs	r3, #0
}
 8019afe:	4618      	mov	r0, r3
 8019b00:	3710      	adds	r7, #16
 8019b02:	46bd      	mov	sp, r7
 8019b04:	bd80      	pop	{r7, pc}

08019b06 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019b06:	b580      	push	{r7, lr}
 8019b08:	b084      	sub	sp, #16
 8019b0a:	af00      	add	r7, sp, #0
 8019b0c:	60f8      	str	r0, [r7, #12]
 8019b0e:	60b9      	str	r1, [r7, #8]
 8019b10:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	68ba      	ldr	r2, [r7, #8]
 8019b16:	2100      	movs	r1, #0
 8019b18:	68f8      	ldr	r0, [r7, #12]
 8019b1a:	f004 f88e 	bl	801dc3a <USBD_LL_Transmit>

  return USBD_OK;
 8019b1e:	2300      	movs	r3, #0
}
 8019b20:	4618      	mov	r0, r3
 8019b22:	3710      	adds	r7, #16
 8019b24:	46bd      	mov	sp, r7
 8019b26:	bd80      	pop	{r7, pc}

08019b28 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	b084      	sub	sp, #16
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	60f8      	str	r0, [r7, #12]
 8019b30:	60b9      	str	r1, [r7, #8]
 8019b32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	2203      	movs	r2, #3
 8019b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	687a      	ldr	r2, [r7, #4]
 8019b40:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	687a      	ldr	r2, [r7, #4]
 8019b48:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	68ba      	ldr	r2, [r7, #8]
 8019b50:	2100      	movs	r1, #0
 8019b52:	68f8      	ldr	r0, [r7, #12]
 8019b54:	f004 f892 	bl	801dc7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019b58:	2300      	movs	r3, #0
}
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	3710      	adds	r7, #16
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	bd80      	pop	{r7, pc}

08019b62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8019b62:	b580      	push	{r7, lr}
 8019b64:	b084      	sub	sp, #16
 8019b66:	af00      	add	r7, sp, #0
 8019b68:	60f8      	str	r0, [r7, #12]
 8019b6a:	60b9      	str	r1, [r7, #8]
 8019b6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	68ba      	ldr	r2, [r7, #8]
 8019b72:	2100      	movs	r1, #0
 8019b74:	68f8      	ldr	r0, [r7, #12]
 8019b76:	f004 f881 	bl	801dc7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019b7a:	2300      	movs	r3, #0
}
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	3710      	adds	r7, #16
 8019b80:	46bd      	mov	sp, r7
 8019b82:	bd80      	pop	{r7, pc}

08019b84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b082      	sub	sp, #8
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	2204      	movs	r2, #4
 8019b90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019b94:	2300      	movs	r3, #0
 8019b96:	2200      	movs	r2, #0
 8019b98:	2100      	movs	r1, #0
 8019b9a:	6878      	ldr	r0, [r7, #4]
 8019b9c:	f004 f84d 	bl	801dc3a <USBD_LL_Transmit>

  return USBD_OK;
 8019ba0:	2300      	movs	r3, #0
}
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	3708      	adds	r7, #8
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	bd80      	pop	{r7, pc}

08019baa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019baa:	b580      	push	{r7, lr}
 8019bac:	b082      	sub	sp, #8
 8019bae:	af00      	add	r7, sp, #0
 8019bb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	2205      	movs	r2, #5
 8019bb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019bba:	2300      	movs	r3, #0
 8019bbc:	2200      	movs	r2, #0
 8019bbe:	2100      	movs	r1, #0
 8019bc0:	6878      	ldr	r0, [r7, #4]
 8019bc2:	f004 f85b 	bl	801dc7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019bc6:	2300      	movs	r3, #0
}
 8019bc8:	4618      	mov	r0, r3
 8019bca:	3708      	adds	r7, #8
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	bd80      	pop	{r7, pc}

08019bd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8019bd0:	b480      	push	{r7}
 8019bd2:	b085      	sub	sp, #20
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	4603      	mov	r3, r0
 8019bd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8019bda:	2300      	movs	r3, #0
 8019bdc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8019bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019be2:	2b84      	cmp	r3, #132	; 0x84
 8019be4:	d005      	beq.n	8019bf2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8019be6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	4413      	add	r3, r2
 8019bee:	3303      	adds	r3, #3
 8019bf0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8019bf2:	68fb      	ldr	r3, [r7, #12]
}
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	3714      	adds	r7, #20
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bfe:	4770      	bx	lr

08019c00 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8019c00:	b480      	push	{r7}
 8019c02:	b083      	sub	sp, #12
 8019c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019c06:	f3ef 8305 	mrs	r3, IPSR
 8019c0a:	607b      	str	r3, [r7, #4]
  return(result);
 8019c0c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	bf14      	ite	ne
 8019c12:	2301      	movne	r3, #1
 8019c14:	2300      	moveq	r3, #0
 8019c16:	b2db      	uxtb	r3, r3
}
 8019c18:	4618      	mov	r0, r3
 8019c1a:	370c      	adds	r7, #12
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c22:	4770      	bx	lr

08019c24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8019c28:	f001 fc94 	bl	801b554 <vTaskStartScheduler>
  
  return osOK;
 8019c2c:	2300      	movs	r3, #0
}
 8019c2e:	4618      	mov	r0, r3
 8019c30:	bd80      	pop	{r7, pc}

08019c32 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8019c32:	b580      	push	{r7, lr}
 8019c34:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8019c36:	f002 f8ff 	bl	801be38 <xTaskGetSchedulerState>
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	2b01      	cmp	r3, #1
 8019c3e:	d101      	bne.n	8019c44 <osKernelRunning+0x12>
    return 0;
 8019c40:	2300      	movs	r3, #0
 8019c42:	e000      	b.n	8019c46 <osKernelRunning+0x14>
  else
    return 1;
 8019c44:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8019c46:	4618      	mov	r0, r3
 8019c48:	bd80      	pop	{r7, pc}

08019c4a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8019c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c4c:	b089      	sub	sp, #36	; 0x24
 8019c4e:	af04      	add	r7, sp, #16
 8019c50:	6078      	str	r0, [r7, #4]
 8019c52:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	695b      	ldr	r3, [r3, #20]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d020      	beq.n	8019c9e <osThreadCreate+0x54>
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	699b      	ldr	r3, [r3, #24]
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d01c      	beq.n	8019c9e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	685c      	ldr	r4, [r3, #4]
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	681d      	ldr	r5, [r3, #0]
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	691e      	ldr	r6, [r3, #16]
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019c76:	4618      	mov	r0, r3
 8019c78:	f7ff ffaa 	bl	8019bd0 <makeFreeRtosPriority>
 8019c7c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	695b      	ldr	r3, [r3, #20]
 8019c82:	687a      	ldr	r2, [r7, #4]
 8019c84:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8019c86:	9202      	str	r2, [sp, #8]
 8019c88:	9301      	str	r3, [sp, #4]
 8019c8a:	9100      	str	r1, [sp, #0]
 8019c8c:	683b      	ldr	r3, [r7, #0]
 8019c8e:	4632      	mov	r2, r6
 8019c90:	4629      	mov	r1, r5
 8019c92:	4620      	mov	r0, r4
 8019c94:	f001 fa7c 	bl	801b190 <xTaskCreateStatic>
 8019c98:	4603      	mov	r3, r0
 8019c9a:	60fb      	str	r3, [r7, #12]
 8019c9c:	e01c      	b.n	8019cd8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	685c      	ldr	r4, [r3, #4]
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8019caa:	b29e      	uxth	r6, r3
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f7ff ff8c 	bl	8019bd0 <makeFreeRtosPriority>
 8019cb8:	4602      	mov	r2, r0
 8019cba:	f107 030c 	add.w	r3, r7, #12
 8019cbe:	9301      	str	r3, [sp, #4]
 8019cc0:	9200      	str	r2, [sp, #0]
 8019cc2:	683b      	ldr	r3, [r7, #0]
 8019cc4:	4632      	mov	r2, r6
 8019cc6:	4629      	mov	r1, r5
 8019cc8:	4620      	mov	r0, r4
 8019cca:	f001 fabe 	bl	801b24a <xTaskCreate>
 8019cce:	4603      	mov	r3, r0
 8019cd0:	2b01      	cmp	r3, #1
 8019cd2:	d001      	beq.n	8019cd8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	e000      	b.n	8019cda <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8019cd8:	68fb      	ldr	r3, [r7, #12]
}
 8019cda:	4618      	mov	r0, r3
 8019cdc:	3714      	adds	r7, #20
 8019cde:	46bd      	mov	sp, r7
 8019ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019ce2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8019ce2:	b580      	push	{r7, lr}
 8019ce4:	b084      	sub	sp, #16
 8019ce6:	af00      	add	r7, sp, #0
 8019ce8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8019cee:	68fb      	ldr	r3, [r7, #12]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d001      	beq.n	8019cf8 <osDelay+0x16>
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	e000      	b.n	8019cfa <osDelay+0x18>
 8019cf8:	2301      	movs	r3, #1
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	f001 fbf6 	bl	801b4ec <vTaskDelay>
  
  return osOK;
 8019d00:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8019d02:	4618      	mov	r0, r3
 8019d04:	3710      	adds	r7, #16
 8019d06:	46bd      	mov	sp, r7
 8019d08:	bd80      	pop	{r7, pc}
	...

08019d0c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8019d0c:	b580      	push	{r7, lr}
 8019d0e:	b086      	sub	sp, #24
 8019d10:	af02      	add	r7, sp, #8
 8019d12:	60f8      	str	r0, [r7, #12]
 8019d14:	460b      	mov	r3, r1
 8019d16:	607a      	str	r2, [r7, #4]
 8019d18:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	685b      	ldr	r3, [r3, #4]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d013      	beq.n	8019d4a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8019d22:	7afb      	ldrb	r3, [r7, #11]
 8019d24:	2b01      	cmp	r3, #1
 8019d26:	d101      	bne.n	8019d2c <osTimerCreate+0x20>
 8019d28:	2101      	movs	r1, #1
 8019d2a:	e000      	b.n	8019d2e <osTimerCreate+0x22>
 8019d2c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8019d32:	68fa      	ldr	r2, [r7, #12]
 8019d34:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8019d36:	9201      	str	r2, [sp, #4]
 8019d38:	9300      	str	r3, [sp, #0]
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	460a      	mov	r2, r1
 8019d3e:	2101      	movs	r1, #1
 8019d40:	480b      	ldr	r0, [pc, #44]	; (8019d70 <osTimerCreate+0x64>)
 8019d42:	f002 fd06 	bl	801c752 <xTimerCreateStatic>
 8019d46:	4603      	mov	r3, r0
 8019d48:	e00e      	b.n	8019d68 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8019d4a:	7afb      	ldrb	r3, [r7, #11]
 8019d4c:	2b01      	cmp	r3, #1
 8019d4e:	d101      	bne.n	8019d54 <osTimerCreate+0x48>
 8019d50:	2201      	movs	r2, #1
 8019d52:	e000      	b.n	8019d56 <osTimerCreate+0x4a>
 8019d54:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8019d5a:	9300      	str	r3, [sp, #0]
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	2101      	movs	r1, #1
 8019d60:	4803      	ldr	r0, [pc, #12]	; (8019d70 <osTimerCreate+0x64>)
 8019d62:	f002 fcd5 	bl	801c710 <xTimerCreate>
 8019d66:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8019d68:	4618      	mov	r0, r3
 8019d6a:	3710      	adds	r7, #16
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}
 8019d70:	08022258 	.word	0x08022258

08019d74 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8019d74:	b580      	push	{r7, lr}
 8019d76:	b088      	sub	sp, #32
 8019d78:	af02      	add	r7, sp, #8
 8019d7a:	6078      	str	r0, [r7, #4]
 8019d7c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8019d7e:	2300      	movs	r3, #0
 8019d80:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8019d82:	2300      	movs	r3, #0
 8019d84:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8019d86:	683b      	ldr	r3, [r7, #0]
 8019d88:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8019d8a:	693b      	ldr	r3, [r7, #16]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d101      	bne.n	8019d94 <osTimerStart+0x20>
    ticks = 1;
 8019d90:	2301      	movs	r3, #1
 8019d92:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8019d94:	f7ff ff34 	bl	8019c00 <inHandlerMode>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d01a      	beq.n	8019dd4 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8019d9e:	f107 030c 	add.w	r3, r7, #12
 8019da2:	2200      	movs	r2, #0
 8019da4:	9200      	str	r2, [sp, #0]
 8019da6:	693a      	ldr	r2, [r7, #16]
 8019da8:	2109      	movs	r1, #9
 8019daa:	6878      	ldr	r0, [r7, #4]
 8019dac:	f002 fd4a 	bl	801c844 <xTimerGenericCommand>
 8019db0:	4603      	mov	r3, r0
 8019db2:	2b01      	cmp	r3, #1
 8019db4:	d002      	beq.n	8019dbc <osTimerStart+0x48>
    {
      result = osErrorOS;
 8019db6:	23ff      	movs	r3, #255	; 0xff
 8019db8:	617b      	str	r3, [r7, #20]
 8019dba:	e018      	b.n	8019dee <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d015      	beq.n	8019dee <osTimerStart+0x7a>
 8019dc2:	4b0d      	ldr	r3, [pc, #52]	; (8019df8 <osTimerStart+0x84>)
 8019dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019dc8:	601a      	str	r2, [r3, #0]
 8019dca:	f3bf 8f4f 	dsb	sy
 8019dce:	f3bf 8f6f 	isb	sy
 8019dd2:	e00c      	b.n	8019dee <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	9300      	str	r3, [sp, #0]
 8019dd8:	2300      	movs	r3, #0
 8019dda:	693a      	ldr	r2, [r7, #16]
 8019ddc:	2104      	movs	r1, #4
 8019dde:	6878      	ldr	r0, [r7, #4]
 8019de0:	f002 fd30 	bl	801c844 <xTimerGenericCommand>
 8019de4:	4603      	mov	r3, r0
 8019de6:	2b01      	cmp	r3, #1
 8019de8:	d001      	beq.n	8019dee <osTimerStart+0x7a>
      result = osErrorOS;
 8019dea:	23ff      	movs	r3, #255	; 0xff
 8019dec:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8019dee:	697b      	ldr	r3, [r7, #20]
}
 8019df0:	4618      	mov	r0, r3
 8019df2:	3718      	adds	r7, #24
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd80      	pop	{r7, pc}
 8019df8:	e000ed04 	.word	0xe000ed04

08019dfc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8019dfc:	b580      	push	{r7, lr}
 8019dfe:	b082      	sub	sp, #8
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	685b      	ldr	r3, [r3, #4]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d007      	beq.n	8019e1c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	685b      	ldr	r3, [r3, #4]
 8019e10:	4619      	mov	r1, r3
 8019e12:	2001      	movs	r0, #1
 8019e14:	f000 fb63 	bl	801a4de <xQueueCreateMutexStatic>
 8019e18:	4603      	mov	r3, r0
 8019e1a:	e003      	b.n	8019e24 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8019e1c:	2001      	movs	r0, #1
 8019e1e:	f000 fb46 	bl	801a4ae <xQueueCreateMutex>
 8019e22:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8019e24:	4618      	mov	r0, r3
 8019e26:	3708      	adds	r7, #8
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	bd80      	pop	{r7, pc}

08019e2c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b084      	sub	sp, #16
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
 8019e34:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8019e36:	2300      	movs	r3, #0
 8019e38:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d101      	bne.n	8019e44 <osMutexWait+0x18>
    return osErrorParameter;
 8019e40:	2380      	movs	r3, #128	; 0x80
 8019e42:	e03a      	b.n	8019eba <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8019e44:	2300      	movs	r3, #0
 8019e46:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8019e48:	683b      	ldr	r3, [r7, #0]
 8019e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e4e:	d103      	bne.n	8019e58 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8019e50:	f04f 33ff 	mov.w	r3, #4294967295
 8019e54:	60fb      	str	r3, [r7, #12]
 8019e56:	e009      	b.n	8019e6c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8019e58:	683b      	ldr	r3, [r7, #0]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d006      	beq.n	8019e6c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8019e5e:	683b      	ldr	r3, [r7, #0]
 8019e60:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d101      	bne.n	8019e6c <osMutexWait+0x40>
      ticks = 1;
 8019e68:	2301      	movs	r3, #1
 8019e6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8019e6c:	f7ff fec8 	bl	8019c00 <inHandlerMode>
 8019e70:	4603      	mov	r3, r0
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d017      	beq.n	8019ea6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8019e76:	f107 0308 	add.w	r3, r7, #8
 8019e7a:	461a      	mov	r2, r3
 8019e7c:	2100      	movs	r1, #0
 8019e7e:	6878      	ldr	r0, [r7, #4]
 8019e80:	f000 ff5a 	bl	801ad38 <xQueueReceiveFromISR>
 8019e84:	4603      	mov	r3, r0
 8019e86:	2b01      	cmp	r3, #1
 8019e88:	d001      	beq.n	8019e8e <osMutexWait+0x62>
      return osErrorOS;
 8019e8a:	23ff      	movs	r3, #255	; 0xff
 8019e8c:	e015      	b.n	8019eba <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8019e8e:	68bb      	ldr	r3, [r7, #8]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d011      	beq.n	8019eb8 <osMutexWait+0x8c>
 8019e94:	4b0b      	ldr	r3, [pc, #44]	; (8019ec4 <osMutexWait+0x98>)
 8019e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e9a:	601a      	str	r2, [r3, #0]
 8019e9c:	f3bf 8f4f 	dsb	sy
 8019ea0:	f3bf 8f6f 	isb	sy
 8019ea4:	e008      	b.n	8019eb8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8019ea6:	68f9      	ldr	r1, [r7, #12]
 8019ea8:	6878      	ldr	r0, [r7, #4]
 8019eaa:	f000 fe39 	bl	801ab20 <xQueueSemaphoreTake>
 8019eae:	4603      	mov	r3, r0
 8019eb0:	2b01      	cmp	r3, #1
 8019eb2:	d001      	beq.n	8019eb8 <osMutexWait+0x8c>
    return osErrorOS;
 8019eb4:	23ff      	movs	r3, #255	; 0xff
 8019eb6:	e000      	b.n	8019eba <osMutexWait+0x8e>
  }
  
  return osOK;
 8019eb8:	2300      	movs	r3, #0
}
 8019eba:	4618      	mov	r0, r3
 8019ebc:	3710      	adds	r7, #16
 8019ebe:	46bd      	mov	sp, r7
 8019ec0:	bd80      	pop	{r7, pc}
 8019ec2:	bf00      	nop
 8019ec4:	e000ed04 	.word	0xe000ed04

08019ec8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8019ec8:	b580      	push	{r7, lr}
 8019eca:	b084      	sub	sp, #16
 8019ecc:	af00      	add	r7, sp, #0
 8019ece:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8019ed0:	2300      	movs	r3, #0
 8019ed2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8019ed8:	f7ff fe92 	bl	8019c00 <inHandlerMode>
 8019edc:	4603      	mov	r3, r0
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d016      	beq.n	8019f10 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8019ee2:	f107 0308 	add.w	r3, r7, #8
 8019ee6:	4619      	mov	r1, r3
 8019ee8:	6878      	ldr	r0, [r7, #4]
 8019eea:	f000 fcac 	bl	801a846 <xQueueGiveFromISR>
 8019eee:	4603      	mov	r3, r0
 8019ef0:	2b01      	cmp	r3, #1
 8019ef2:	d001      	beq.n	8019ef8 <osMutexRelease+0x30>
      return osErrorOS;
 8019ef4:	23ff      	movs	r3, #255	; 0xff
 8019ef6:	e017      	b.n	8019f28 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8019ef8:	68bb      	ldr	r3, [r7, #8]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d013      	beq.n	8019f26 <osMutexRelease+0x5e>
 8019efe:	4b0c      	ldr	r3, [pc, #48]	; (8019f30 <osMutexRelease+0x68>)
 8019f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f04:	601a      	str	r2, [r3, #0]
 8019f06:	f3bf 8f4f 	dsb	sy
 8019f0a:	f3bf 8f6f 	isb	sy
 8019f0e:	e00a      	b.n	8019f26 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8019f10:	2300      	movs	r3, #0
 8019f12:	2200      	movs	r2, #0
 8019f14:	2100      	movs	r1, #0
 8019f16:	6878      	ldr	r0, [r7, #4]
 8019f18:	f000 fafc 	bl	801a514 <xQueueGenericSend>
 8019f1c:	4603      	mov	r3, r0
 8019f1e:	2b01      	cmp	r3, #1
 8019f20:	d001      	beq.n	8019f26 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8019f22:	23ff      	movs	r3, #255	; 0xff
 8019f24:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8019f26:	68fb      	ldr	r3, [r7, #12]
}
 8019f28:	4618      	mov	r0, r3
 8019f2a:	3710      	adds	r7, #16
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	bd80      	pop	{r7, pc}
 8019f30:	e000ed04 	.word	0xe000ed04

08019f34 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b086      	sub	sp, #24
 8019f38:	af02      	add	r7, sp, #8
 8019f3a:	6078      	str	r0, [r7, #4]
 8019f3c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	685b      	ldr	r3, [r3, #4]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d00f      	beq.n	8019f66 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8019f46:	683b      	ldr	r3, [r7, #0]
 8019f48:	2b01      	cmp	r3, #1
 8019f4a:	d10a      	bne.n	8019f62 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	685b      	ldr	r3, [r3, #4]
 8019f50:	2203      	movs	r2, #3
 8019f52:	9200      	str	r2, [sp, #0]
 8019f54:	2200      	movs	r2, #0
 8019f56:	2100      	movs	r1, #0
 8019f58:	2001      	movs	r0, #1
 8019f5a:	f000 f9bd 	bl	801a2d8 <xQueueGenericCreateStatic>
 8019f5e:	4603      	mov	r3, r0
 8019f60:	e016      	b.n	8019f90 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8019f62:	2300      	movs	r3, #0
 8019f64:	e014      	b.n	8019f90 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8019f66:	683b      	ldr	r3, [r7, #0]
 8019f68:	2b01      	cmp	r3, #1
 8019f6a:	d110      	bne.n	8019f8e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8019f6c:	2203      	movs	r2, #3
 8019f6e:	2100      	movs	r1, #0
 8019f70:	2001      	movs	r0, #1
 8019f72:	f000 fa29 	bl	801a3c8 <xQueueGenericCreate>
 8019f76:	60f8      	str	r0, [r7, #12]
 8019f78:	68fb      	ldr	r3, [r7, #12]
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d005      	beq.n	8019f8a <osSemaphoreCreate+0x56>
 8019f7e:	2300      	movs	r3, #0
 8019f80:	2200      	movs	r2, #0
 8019f82:	2100      	movs	r1, #0
 8019f84:	68f8      	ldr	r0, [r7, #12]
 8019f86:	f000 fac5 	bl	801a514 <xQueueGenericSend>
      return sema;
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	e000      	b.n	8019f90 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8019f8e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8019f90:	4618      	mov	r0, r3
 8019f92:	3710      	adds	r7, #16
 8019f94:	46bd      	mov	sp, r7
 8019f96:	bd80      	pop	{r7, pc}

08019f98 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8019f98:	b580      	push	{r7, lr}
 8019f9a:	b084      	sub	sp, #16
 8019f9c:	af00      	add	r7, sp, #0
 8019f9e:	6078      	str	r0, [r7, #4]
 8019fa0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d101      	bne.n	8019fb0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8019fac:	2380      	movs	r3, #128	; 0x80
 8019fae:	e03a      	b.n	801a026 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8019fb4:	683b      	ldr	r3, [r7, #0]
 8019fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fba:	d103      	bne.n	8019fc4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8019fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8019fc0:	60fb      	str	r3, [r7, #12]
 8019fc2:	e009      	b.n	8019fd8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8019fc4:	683b      	ldr	r3, [r7, #0]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d006      	beq.n	8019fd8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8019fca:	683b      	ldr	r3, [r7, #0]
 8019fcc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d101      	bne.n	8019fd8 <osSemaphoreWait+0x40>
      ticks = 1;
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8019fd8:	f7ff fe12 	bl	8019c00 <inHandlerMode>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d017      	beq.n	801a012 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8019fe2:	f107 0308 	add.w	r3, r7, #8
 8019fe6:	461a      	mov	r2, r3
 8019fe8:	2100      	movs	r1, #0
 8019fea:	6878      	ldr	r0, [r7, #4]
 8019fec:	f000 fea4 	bl	801ad38 <xQueueReceiveFromISR>
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	2b01      	cmp	r3, #1
 8019ff4:	d001      	beq.n	8019ffa <osSemaphoreWait+0x62>
      return osErrorOS;
 8019ff6:	23ff      	movs	r3, #255	; 0xff
 8019ff8:	e015      	b.n	801a026 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8019ffa:	68bb      	ldr	r3, [r7, #8]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d011      	beq.n	801a024 <osSemaphoreWait+0x8c>
 801a000:	4b0b      	ldr	r3, [pc, #44]	; (801a030 <osSemaphoreWait+0x98>)
 801a002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a006:	601a      	str	r2, [r3, #0]
 801a008:	f3bf 8f4f 	dsb	sy
 801a00c:	f3bf 8f6f 	isb	sy
 801a010:	e008      	b.n	801a024 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801a012:	68f9      	ldr	r1, [r7, #12]
 801a014:	6878      	ldr	r0, [r7, #4]
 801a016:	f000 fd83 	bl	801ab20 <xQueueSemaphoreTake>
 801a01a:	4603      	mov	r3, r0
 801a01c:	2b01      	cmp	r3, #1
 801a01e:	d001      	beq.n	801a024 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801a020:	23ff      	movs	r3, #255	; 0xff
 801a022:	e000      	b.n	801a026 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 801a024:	2300      	movs	r3, #0
}
 801a026:	4618      	mov	r0, r3
 801a028:	3710      	adds	r7, #16
 801a02a:	46bd      	mov	sp, r7
 801a02c:	bd80      	pop	{r7, pc}
 801a02e:	bf00      	nop
 801a030:	e000ed04 	.word	0xe000ed04

0801a034 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801a034:	b580      	push	{r7, lr}
 801a036:	b084      	sub	sp, #16
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801a03c:	2300      	movs	r3, #0
 801a03e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801a040:	2300      	movs	r3, #0
 801a042:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801a044:	f7ff fddc 	bl	8019c00 <inHandlerMode>
 801a048:	4603      	mov	r3, r0
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d016      	beq.n	801a07c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801a04e:	f107 0308 	add.w	r3, r7, #8
 801a052:	4619      	mov	r1, r3
 801a054:	6878      	ldr	r0, [r7, #4]
 801a056:	f000 fbf6 	bl	801a846 <xQueueGiveFromISR>
 801a05a:	4603      	mov	r3, r0
 801a05c:	2b01      	cmp	r3, #1
 801a05e:	d001      	beq.n	801a064 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801a060:	23ff      	movs	r3, #255	; 0xff
 801a062:	e017      	b.n	801a094 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d013      	beq.n	801a092 <osSemaphoreRelease+0x5e>
 801a06a:	4b0c      	ldr	r3, [pc, #48]	; (801a09c <osSemaphoreRelease+0x68>)
 801a06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a070:	601a      	str	r2, [r3, #0]
 801a072:	f3bf 8f4f 	dsb	sy
 801a076:	f3bf 8f6f 	isb	sy
 801a07a:	e00a      	b.n	801a092 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801a07c:	2300      	movs	r3, #0
 801a07e:	2200      	movs	r2, #0
 801a080:	2100      	movs	r1, #0
 801a082:	6878      	ldr	r0, [r7, #4]
 801a084:	f000 fa46 	bl	801a514 <xQueueGenericSend>
 801a088:	4603      	mov	r3, r0
 801a08a:	2b01      	cmp	r3, #1
 801a08c:	d001      	beq.n	801a092 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801a08e:	23ff      	movs	r3, #255	; 0xff
 801a090:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801a092:	68fb      	ldr	r3, [r7, #12]
}
 801a094:	4618      	mov	r0, r3
 801a096:	3710      	adds	r7, #16
 801a098:	46bd      	mov	sp, r7
 801a09a:	bd80      	pop	{r7, pc}
 801a09c:	e000ed04 	.word	0xe000ed04

0801a0a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801a0a0:	b480      	push	{r7}
 801a0a2:	b083      	sub	sp, #12
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	f103 0208 	add.w	r2, r3, #8
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	f04f 32ff 	mov.w	r2, #4294967295
 801a0b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	f103 0208 	add.w	r2, r3, #8
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	f103 0208 	add.w	r2, r3, #8
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	2200      	movs	r2, #0
 801a0d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801a0d4:	bf00      	nop
 801a0d6:	370c      	adds	r7, #12
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0de:	4770      	bx	lr

0801a0e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801a0e0:	b480      	push	{r7}
 801a0e2:	b083      	sub	sp, #12
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	2200      	movs	r2, #0
 801a0ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801a0ee:	bf00      	nop
 801a0f0:	370c      	adds	r7, #12
 801a0f2:	46bd      	mov	sp, r7
 801a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0f8:	4770      	bx	lr

0801a0fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a0fa:	b480      	push	{r7}
 801a0fc:	b085      	sub	sp, #20
 801a0fe:	af00      	add	r7, sp, #0
 801a100:	6078      	str	r0, [r7, #4]
 801a102:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	685b      	ldr	r3, [r3, #4]
 801a108:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801a10a:	683b      	ldr	r3, [r7, #0]
 801a10c:	68fa      	ldr	r2, [r7, #12]
 801a10e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	689a      	ldr	r2, [r3, #8]
 801a114:	683b      	ldr	r3, [r7, #0]
 801a116:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	689b      	ldr	r3, [r3, #8]
 801a11c:	683a      	ldr	r2, [r7, #0]
 801a11e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	683a      	ldr	r2, [r7, #0]
 801a124:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801a126:	683b      	ldr	r3, [r7, #0]
 801a128:	687a      	ldr	r2, [r7, #4]
 801a12a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	1c5a      	adds	r2, r3, #1
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	601a      	str	r2, [r3, #0]
}
 801a136:	bf00      	nop
 801a138:	3714      	adds	r7, #20
 801a13a:	46bd      	mov	sp, r7
 801a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a140:	4770      	bx	lr

0801a142 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a142:	b480      	push	{r7}
 801a144:	b085      	sub	sp, #20
 801a146:	af00      	add	r7, sp, #0
 801a148:	6078      	str	r0, [r7, #4]
 801a14a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801a14c:	683b      	ldr	r3, [r7, #0]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801a152:	68bb      	ldr	r3, [r7, #8]
 801a154:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a158:	d103      	bne.n	801a162 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	691b      	ldr	r3, [r3, #16]
 801a15e:	60fb      	str	r3, [r7, #12]
 801a160:	e00c      	b.n	801a17c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	3308      	adds	r3, #8
 801a166:	60fb      	str	r3, [r7, #12]
 801a168:	e002      	b.n	801a170 <vListInsert+0x2e>
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	685b      	ldr	r3, [r3, #4]
 801a16e:	60fb      	str	r3, [r7, #12]
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	685b      	ldr	r3, [r3, #4]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	68ba      	ldr	r2, [r7, #8]
 801a178:	429a      	cmp	r2, r3
 801a17a:	d2f6      	bcs.n	801a16a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	685a      	ldr	r2, [r3, #4]
 801a180:	683b      	ldr	r3, [r7, #0]
 801a182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801a184:	683b      	ldr	r3, [r7, #0]
 801a186:	685b      	ldr	r3, [r3, #4]
 801a188:	683a      	ldr	r2, [r7, #0]
 801a18a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801a18c:	683b      	ldr	r3, [r7, #0]
 801a18e:	68fa      	ldr	r2, [r7, #12]
 801a190:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	683a      	ldr	r2, [r7, #0]
 801a196:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801a198:	683b      	ldr	r3, [r7, #0]
 801a19a:	687a      	ldr	r2, [r7, #4]
 801a19c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	1c5a      	adds	r2, r3, #1
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	601a      	str	r2, [r3, #0]
}
 801a1a8:	bf00      	nop
 801a1aa:	3714      	adds	r7, #20
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1b2:	4770      	bx	lr

0801a1b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801a1b4:	b480      	push	{r7}
 801a1b6:	b085      	sub	sp, #20
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	691b      	ldr	r3, [r3, #16]
 801a1c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	685b      	ldr	r3, [r3, #4]
 801a1c6:	687a      	ldr	r2, [r7, #4]
 801a1c8:	6892      	ldr	r2, [r2, #8]
 801a1ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	689b      	ldr	r3, [r3, #8]
 801a1d0:	687a      	ldr	r2, [r7, #4]
 801a1d2:	6852      	ldr	r2, [r2, #4]
 801a1d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	685b      	ldr	r3, [r3, #4]
 801a1da:	687a      	ldr	r2, [r7, #4]
 801a1dc:	429a      	cmp	r2, r3
 801a1de:	d103      	bne.n	801a1e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	689a      	ldr	r2, [r3, #8]
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	1e5a      	subs	r2, r3, #1
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	681b      	ldr	r3, [r3, #0]
}
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	3714      	adds	r7, #20
 801a200:	46bd      	mov	sp, r7
 801a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a206:	4770      	bx	lr

0801a208 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801a208:	b580      	push	{r7, lr}
 801a20a:	b084      	sub	sp, #16
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	6078      	str	r0, [r7, #4]
 801a210:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d10a      	bne.n	801a232 <xQueueGenericReset+0x2a>
	__asm volatile
 801a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a220:	f383 8811 	msr	BASEPRI, r3
 801a224:	f3bf 8f6f 	isb	sy
 801a228:	f3bf 8f4f 	dsb	sy
 801a22c:	60bb      	str	r3, [r7, #8]
}
 801a22e:	bf00      	nop
 801a230:	e7fe      	b.n	801a230 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801a232:	f002 ff1f 	bl	801d074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	681a      	ldr	r2, [r3, #0]
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a23e:	68f9      	ldr	r1, [r7, #12]
 801a240:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a242:	fb01 f303 	mul.w	r3, r1, r3
 801a246:	441a      	add	r2, r3
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	2200      	movs	r2, #0
 801a250:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	681a      	ldr	r2, [r3, #0]
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	681a      	ldr	r2, [r3, #0]
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a262:	3b01      	subs	r3, #1
 801a264:	68f9      	ldr	r1, [r7, #12]
 801a266:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a268:	fb01 f303 	mul.w	r3, r1, r3
 801a26c:	441a      	add	r2, r3
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	22ff      	movs	r2, #255	; 0xff
 801a276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	22ff      	movs	r2, #255	; 0xff
 801a27e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801a282:	683b      	ldr	r3, [r7, #0]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d114      	bne.n	801a2b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	691b      	ldr	r3, [r3, #16]
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d01a      	beq.n	801a2c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	3310      	adds	r3, #16
 801a294:	4618      	mov	r0, r3
 801a296:	f001 fc0f 	bl	801bab8 <xTaskRemoveFromEventList>
 801a29a:	4603      	mov	r3, r0
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d012      	beq.n	801a2c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801a2a0:	4b0c      	ldr	r3, [pc, #48]	; (801a2d4 <xQueueGenericReset+0xcc>)
 801a2a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a2a6:	601a      	str	r2, [r3, #0]
 801a2a8:	f3bf 8f4f 	dsb	sy
 801a2ac:	f3bf 8f6f 	isb	sy
 801a2b0:	e009      	b.n	801a2c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	3310      	adds	r3, #16
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f7ff fef2 	bl	801a0a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	3324      	adds	r3, #36	; 0x24
 801a2c0:	4618      	mov	r0, r3
 801a2c2:	f7ff feed 	bl	801a0a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801a2c6:	f002 ff05 	bl	801d0d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801a2ca:	2301      	movs	r3, #1
}
 801a2cc:	4618      	mov	r0, r3
 801a2ce:	3710      	adds	r7, #16
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	bd80      	pop	{r7, pc}
 801a2d4:	e000ed04 	.word	0xe000ed04

0801a2d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b08e      	sub	sp, #56	; 0x38
 801a2dc:	af02      	add	r7, sp, #8
 801a2de:	60f8      	str	r0, [r7, #12]
 801a2e0:	60b9      	str	r1, [r7, #8]
 801a2e2:	607a      	str	r2, [r7, #4]
 801a2e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d10a      	bne.n	801a302 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2f0:	f383 8811 	msr	BASEPRI, r3
 801a2f4:	f3bf 8f6f 	isb	sy
 801a2f8:	f3bf 8f4f 	dsb	sy
 801a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a2fe:	bf00      	nop
 801a300:	e7fe      	b.n	801a300 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801a302:	683b      	ldr	r3, [r7, #0]
 801a304:	2b00      	cmp	r3, #0
 801a306:	d10a      	bne.n	801a31e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a30c:	f383 8811 	msr	BASEPRI, r3
 801a310:	f3bf 8f6f 	isb	sy
 801a314:	f3bf 8f4f 	dsb	sy
 801a318:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a31a:	bf00      	nop
 801a31c:	e7fe      	b.n	801a31c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d002      	beq.n	801a32a <xQueueGenericCreateStatic+0x52>
 801a324:	68bb      	ldr	r3, [r7, #8]
 801a326:	2b00      	cmp	r3, #0
 801a328:	d001      	beq.n	801a32e <xQueueGenericCreateStatic+0x56>
 801a32a:	2301      	movs	r3, #1
 801a32c:	e000      	b.n	801a330 <xQueueGenericCreateStatic+0x58>
 801a32e:	2300      	movs	r3, #0
 801a330:	2b00      	cmp	r3, #0
 801a332:	d10a      	bne.n	801a34a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a338:	f383 8811 	msr	BASEPRI, r3
 801a33c:	f3bf 8f6f 	isb	sy
 801a340:	f3bf 8f4f 	dsb	sy
 801a344:	623b      	str	r3, [r7, #32]
}
 801a346:	bf00      	nop
 801a348:	e7fe      	b.n	801a348 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d102      	bne.n	801a356 <xQueueGenericCreateStatic+0x7e>
 801a350:	68bb      	ldr	r3, [r7, #8]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d101      	bne.n	801a35a <xQueueGenericCreateStatic+0x82>
 801a356:	2301      	movs	r3, #1
 801a358:	e000      	b.n	801a35c <xQueueGenericCreateStatic+0x84>
 801a35a:	2300      	movs	r3, #0
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d10a      	bne.n	801a376 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a364:	f383 8811 	msr	BASEPRI, r3
 801a368:	f3bf 8f6f 	isb	sy
 801a36c:	f3bf 8f4f 	dsb	sy
 801a370:	61fb      	str	r3, [r7, #28]
}
 801a372:	bf00      	nop
 801a374:	e7fe      	b.n	801a374 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801a376:	2348      	movs	r3, #72	; 0x48
 801a378:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801a37a:	697b      	ldr	r3, [r7, #20]
 801a37c:	2b48      	cmp	r3, #72	; 0x48
 801a37e:	d00a      	beq.n	801a396 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a384:	f383 8811 	msr	BASEPRI, r3
 801a388:	f3bf 8f6f 	isb	sy
 801a38c:	f3bf 8f4f 	dsb	sy
 801a390:	61bb      	str	r3, [r7, #24]
}
 801a392:	bf00      	nop
 801a394:	e7fe      	b.n	801a394 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801a396:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a398:	683b      	ldr	r3, [r7, #0]
 801a39a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d00d      	beq.n	801a3be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3a4:	2201      	movs	r2, #1
 801a3a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a3aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3b0:	9300      	str	r3, [sp, #0]
 801a3b2:	4613      	mov	r3, r2
 801a3b4:	687a      	ldr	r2, [r7, #4]
 801a3b6:	68b9      	ldr	r1, [r7, #8]
 801a3b8:	68f8      	ldr	r0, [r7, #12]
 801a3ba:	f000 f83f 	bl	801a43c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	3730      	adds	r7, #48	; 0x30
 801a3c4:	46bd      	mov	sp, r7
 801a3c6:	bd80      	pop	{r7, pc}

0801a3c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801a3c8:	b580      	push	{r7, lr}
 801a3ca:	b08a      	sub	sp, #40	; 0x28
 801a3cc:	af02      	add	r7, sp, #8
 801a3ce:	60f8      	str	r0, [r7, #12]
 801a3d0:	60b9      	str	r1, [r7, #8]
 801a3d2:	4613      	mov	r3, r2
 801a3d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d10a      	bne.n	801a3f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 801a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3e0:	f383 8811 	msr	BASEPRI, r3
 801a3e4:	f3bf 8f6f 	isb	sy
 801a3e8:	f3bf 8f4f 	dsb	sy
 801a3ec:	613b      	str	r3, [r7, #16]
}
 801a3ee:	bf00      	nop
 801a3f0:	e7fe      	b.n	801a3f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	68ba      	ldr	r2, [r7, #8]
 801a3f6:	fb02 f303 	mul.w	r3, r2, r3
 801a3fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801a3fc:	69fb      	ldr	r3, [r7, #28]
 801a3fe:	3348      	adds	r3, #72	; 0x48
 801a400:	4618      	mov	r0, r3
 801a402:	f002 ff59 	bl	801d2b8 <pvPortMalloc>
 801a406:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801a408:	69bb      	ldr	r3, [r7, #24]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d011      	beq.n	801a432 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801a40e:	69bb      	ldr	r3, [r7, #24]
 801a410:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a412:	697b      	ldr	r3, [r7, #20]
 801a414:	3348      	adds	r3, #72	; 0x48
 801a416:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801a418:	69bb      	ldr	r3, [r7, #24]
 801a41a:	2200      	movs	r2, #0
 801a41c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a420:	79fa      	ldrb	r2, [r7, #7]
 801a422:	69bb      	ldr	r3, [r7, #24]
 801a424:	9300      	str	r3, [sp, #0]
 801a426:	4613      	mov	r3, r2
 801a428:	697a      	ldr	r2, [r7, #20]
 801a42a:	68b9      	ldr	r1, [r7, #8]
 801a42c:	68f8      	ldr	r0, [r7, #12]
 801a42e:	f000 f805 	bl	801a43c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a432:	69bb      	ldr	r3, [r7, #24]
	}
 801a434:	4618      	mov	r0, r3
 801a436:	3720      	adds	r7, #32
 801a438:	46bd      	mov	sp, r7
 801a43a:	bd80      	pop	{r7, pc}

0801a43c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b084      	sub	sp, #16
 801a440:	af00      	add	r7, sp, #0
 801a442:	60f8      	str	r0, [r7, #12]
 801a444:	60b9      	str	r1, [r7, #8]
 801a446:	607a      	str	r2, [r7, #4]
 801a448:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801a44a:	68bb      	ldr	r3, [r7, #8]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d103      	bne.n	801a458 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801a450:	69bb      	ldr	r3, [r7, #24]
 801a452:	69ba      	ldr	r2, [r7, #24]
 801a454:	601a      	str	r2, [r3, #0]
 801a456:	e002      	b.n	801a45e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801a458:	69bb      	ldr	r3, [r7, #24]
 801a45a:	687a      	ldr	r2, [r7, #4]
 801a45c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801a45e:	69bb      	ldr	r3, [r7, #24]
 801a460:	68fa      	ldr	r2, [r7, #12]
 801a462:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801a464:	69bb      	ldr	r3, [r7, #24]
 801a466:	68ba      	ldr	r2, [r7, #8]
 801a468:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801a46a:	2101      	movs	r1, #1
 801a46c:	69b8      	ldr	r0, [r7, #24]
 801a46e:	f7ff fecb 	bl	801a208 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801a472:	bf00      	nop
 801a474:	3710      	adds	r7, #16
 801a476:	46bd      	mov	sp, r7
 801a478:	bd80      	pop	{r7, pc}

0801a47a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801a47a:	b580      	push	{r7, lr}
 801a47c:	b082      	sub	sp, #8
 801a47e:	af00      	add	r7, sp, #0
 801a480:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d00e      	beq.n	801a4a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	2200      	movs	r2, #0
 801a48c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	2200      	movs	r2, #0
 801a492:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	2200      	movs	r2, #0
 801a498:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801a49a:	2300      	movs	r3, #0
 801a49c:	2200      	movs	r2, #0
 801a49e:	2100      	movs	r1, #0
 801a4a0:	6878      	ldr	r0, [r7, #4]
 801a4a2:	f000 f837 	bl	801a514 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801a4a6:	bf00      	nop
 801a4a8:	3708      	adds	r7, #8
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	bd80      	pop	{r7, pc}

0801a4ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801a4ae:	b580      	push	{r7, lr}
 801a4b0:	b086      	sub	sp, #24
 801a4b2:	af00      	add	r7, sp, #0
 801a4b4:	4603      	mov	r3, r0
 801a4b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801a4b8:	2301      	movs	r3, #1
 801a4ba:	617b      	str	r3, [r7, #20]
 801a4bc:	2300      	movs	r3, #0
 801a4be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801a4c0:	79fb      	ldrb	r3, [r7, #7]
 801a4c2:	461a      	mov	r2, r3
 801a4c4:	6939      	ldr	r1, [r7, #16]
 801a4c6:	6978      	ldr	r0, [r7, #20]
 801a4c8:	f7ff ff7e 	bl	801a3c8 <xQueueGenericCreate>
 801a4cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801a4ce:	68f8      	ldr	r0, [r7, #12]
 801a4d0:	f7ff ffd3 	bl	801a47a <prvInitialiseMutex>

		return xNewQueue;
 801a4d4:	68fb      	ldr	r3, [r7, #12]
	}
 801a4d6:	4618      	mov	r0, r3
 801a4d8:	3718      	adds	r7, #24
 801a4da:	46bd      	mov	sp, r7
 801a4dc:	bd80      	pop	{r7, pc}

0801a4de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801a4de:	b580      	push	{r7, lr}
 801a4e0:	b088      	sub	sp, #32
 801a4e2:	af02      	add	r7, sp, #8
 801a4e4:	4603      	mov	r3, r0
 801a4e6:	6039      	str	r1, [r7, #0]
 801a4e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801a4ea:	2301      	movs	r3, #1
 801a4ec:	617b      	str	r3, [r7, #20]
 801a4ee:	2300      	movs	r3, #0
 801a4f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801a4f2:	79fb      	ldrb	r3, [r7, #7]
 801a4f4:	9300      	str	r3, [sp, #0]
 801a4f6:	683b      	ldr	r3, [r7, #0]
 801a4f8:	2200      	movs	r2, #0
 801a4fa:	6939      	ldr	r1, [r7, #16]
 801a4fc:	6978      	ldr	r0, [r7, #20]
 801a4fe:	f7ff feeb 	bl	801a2d8 <xQueueGenericCreateStatic>
 801a502:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801a504:	68f8      	ldr	r0, [r7, #12]
 801a506:	f7ff ffb8 	bl	801a47a <prvInitialiseMutex>

		return xNewQueue;
 801a50a:	68fb      	ldr	r3, [r7, #12]
	}
 801a50c:	4618      	mov	r0, r3
 801a50e:	3718      	adds	r7, #24
 801a510:	46bd      	mov	sp, r7
 801a512:	bd80      	pop	{r7, pc}

0801a514 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801a514:	b580      	push	{r7, lr}
 801a516:	b08e      	sub	sp, #56	; 0x38
 801a518:	af00      	add	r7, sp, #0
 801a51a:	60f8      	str	r0, [r7, #12]
 801a51c:	60b9      	str	r1, [r7, #8]
 801a51e:	607a      	str	r2, [r7, #4]
 801a520:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801a522:	2300      	movs	r3, #0
 801a524:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d10a      	bne.n	801a546 <xQueueGenericSend+0x32>
	__asm volatile
 801a530:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a534:	f383 8811 	msr	BASEPRI, r3
 801a538:	f3bf 8f6f 	isb	sy
 801a53c:	f3bf 8f4f 	dsb	sy
 801a540:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a542:	bf00      	nop
 801a544:	e7fe      	b.n	801a544 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a546:	68bb      	ldr	r3, [r7, #8]
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d103      	bne.n	801a554 <xQueueGenericSend+0x40>
 801a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a550:	2b00      	cmp	r3, #0
 801a552:	d101      	bne.n	801a558 <xQueueGenericSend+0x44>
 801a554:	2301      	movs	r3, #1
 801a556:	e000      	b.n	801a55a <xQueueGenericSend+0x46>
 801a558:	2300      	movs	r3, #0
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d10a      	bne.n	801a574 <xQueueGenericSend+0x60>
	__asm volatile
 801a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a562:	f383 8811 	msr	BASEPRI, r3
 801a566:	f3bf 8f6f 	isb	sy
 801a56a:	f3bf 8f4f 	dsb	sy
 801a56e:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a570:	bf00      	nop
 801a572:	e7fe      	b.n	801a572 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a574:	683b      	ldr	r3, [r7, #0]
 801a576:	2b02      	cmp	r3, #2
 801a578:	d103      	bne.n	801a582 <xQueueGenericSend+0x6e>
 801a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a57e:	2b01      	cmp	r3, #1
 801a580:	d101      	bne.n	801a586 <xQueueGenericSend+0x72>
 801a582:	2301      	movs	r3, #1
 801a584:	e000      	b.n	801a588 <xQueueGenericSend+0x74>
 801a586:	2300      	movs	r3, #0
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d10a      	bne.n	801a5a2 <xQueueGenericSend+0x8e>
	__asm volatile
 801a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a590:	f383 8811 	msr	BASEPRI, r3
 801a594:	f3bf 8f6f 	isb	sy
 801a598:	f3bf 8f4f 	dsb	sy
 801a59c:	623b      	str	r3, [r7, #32]
}
 801a59e:	bf00      	nop
 801a5a0:	e7fe      	b.n	801a5a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a5a2:	f001 fc49 	bl	801be38 <xTaskGetSchedulerState>
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d102      	bne.n	801a5b2 <xQueueGenericSend+0x9e>
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d101      	bne.n	801a5b6 <xQueueGenericSend+0xa2>
 801a5b2:	2301      	movs	r3, #1
 801a5b4:	e000      	b.n	801a5b8 <xQueueGenericSend+0xa4>
 801a5b6:	2300      	movs	r3, #0
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d10a      	bne.n	801a5d2 <xQueueGenericSend+0xbe>
	__asm volatile
 801a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5c0:	f383 8811 	msr	BASEPRI, r3
 801a5c4:	f3bf 8f6f 	isb	sy
 801a5c8:	f3bf 8f4f 	dsb	sy
 801a5cc:	61fb      	str	r3, [r7, #28]
}
 801a5ce:	bf00      	nop
 801a5d0:	e7fe      	b.n	801a5d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a5d2:	f002 fd4f 	bl	801d074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a5de:	429a      	cmp	r2, r3
 801a5e0:	d302      	bcc.n	801a5e8 <xQueueGenericSend+0xd4>
 801a5e2:	683b      	ldr	r3, [r7, #0]
 801a5e4:	2b02      	cmp	r3, #2
 801a5e6:	d129      	bne.n	801a63c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a5e8:	683a      	ldr	r2, [r7, #0]
 801a5ea:	68b9      	ldr	r1, [r7, #8]
 801a5ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5ee:	f000 fc3b 	bl	801ae68 <prvCopyDataToQueue>
 801a5f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d010      	beq.n	801a61e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5fe:	3324      	adds	r3, #36	; 0x24
 801a600:	4618      	mov	r0, r3
 801a602:	f001 fa59 	bl	801bab8 <xTaskRemoveFromEventList>
 801a606:	4603      	mov	r3, r0
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d013      	beq.n	801a634 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801a60c:	4b3f      	ldr	r3, [pc, #252]	; (801a70c <xQueueGenericSend+0x1f8>)
 801a60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a612:	601a      	str	r2, [r3, #0]
 801a614:	f3bf 8f4f 	dsb	sy
 801a618:	f3bf 8f6f 	isb	sy
 801a61c:	e00a      	b.n	801a634 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801a61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a620:	2b00      	cmp	r3, #0
 801a622:	d007      	beq.n	801a634 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801a624:	4b39      	ldr	r3, [pc, #228]	; (801a70c <xQueueGenericSend+0x1f8>)
 801a626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a62a:	601a      	str	r2, [r3, #0]
 801a62c:	f3bf 8f4f 	dsb	sy
 801a630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a634:	f002 fd4e 	bl	801d0d4 <vPortExitCritical>
				return pdPASS;
 801a638:	2301      	movs	r3, #1
 801a63a:	e063      	b.n	801a704 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d103      	bne.n	801a64a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a642:	f002 fd47 	bl	801d0d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a646:	2300      	movs	r3, #0
 801a648:	e05c      	b.n	801a704 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d106      	bne.n	801a65e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a650:	f107 0314 	add.w	r3, r7, #20
 801a654:	4618      	mov	r0, r3
 801a656:	f001 fa91 	bl	801bb7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a65a:	2301      	movs	r3, #1
 801a65c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a65e:	f002 fd39 	bl	801d0d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a662:	f000 ffe9 	bl	801b638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a666:	f002 fd05 	bl	801d074 <vPortEnterCritical>
 801a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a66c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a670:	b25b      	sxtb	r3, r3
 801a672:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a676:	d103      	bne.n	801a680 <xQueueGenericSend+0x16c>
 801a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a67a:	2200      	movs	r2, #0
 801a67c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a686:	b25b      	sxtb	r3, r3
 801a688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a68c:	d103      	bne.n	801a696 <xQueueGenericSend+0x182>
 801a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a690:	2200      	movs	r2, #0
 801a692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a696:	f002 fd1d 	bl	801d0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a69a:	1d3a      	adds	r2, r7, #4
 801a69c:	f107 0314 	add.w	r3, r7, #20
 801a6a0:	4611      	mov	r1, r2
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	f001 fa80 	bl	801bba8 <xTaskCheckForTimeOut>
 801a6a8:	4603      	mov	r3, r0
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d124      	bne.n	801a6f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a6ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6b0:	f000 fcd2 	bl	801b058 <prvIsQueueFull>
 801a6b4:	4603      	mov	r3, r0
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d018      	beq.n	801a6ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6bc:	3310      	adds	r3, #16
 801a6be:	687a      	ldr	r2, [r7, #4]
 801a6c0:	4611      	mov	r1, r2
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	f001 f9a8 	bl	801ba18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a6c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6ca:	f000 fc5d 	bl	801af88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a6ce:	f000 ffc1 	bl	801b654 <xTaskResumeAll>
 801a6d2:	4603      	mov	r3, r0
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	f47f af7c 	bne.w	801a5d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801a6da:	4b0c      	ldr	r3, [pc, #48]	; (801a70c <xQueueGenericSend+0x1f8>)
 801a6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a6e0:	601a      	str	r2, [r3, #0]
 801a6e2:	f3bf 8f4f 	dsb	sy
 801a6e6:	f3bf 8f6f 	isb	sy
 801a6ea:	e772      	b.n	801a5d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a6ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6ee:	f000 fc4b 	bl	801af88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a6f2:	f000 ffaf 	bl	801b654 <xTaskResumeAll>
 801a6f6:	e76c      	b.n	801a5d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a6f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6fa:	f000 fc45 	bl	801af88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a6fe:	f000 ffa9 	bl	801b654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a702:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a704:	4618      	mov	r0, r3
 801a706:	3738      	adds	r7, #56	; 0x38
 801a708:	46bd      	mov	sp, r7
 801a70a:	bd80      	pop	{r7, pc}
 801a70c:	e000ed04 	.word	0xe000ed04

0801a710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b090      	sub	sp, #64	; 0x40
 801a714:	af00      	add	r7, sp, #0
 801a716:	60f8      	str	r0, [r7, #12]
 801a718:	60b9      	str	r1, [r7, #8]
 801a71a:	607a      	str	r2, [r7, #4]
 801a71c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a71e:	68fb      	ldr	r3, [r7, #12]
 801a720:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801a722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a724:	2b00      	cmp	r3, #0
 801a726:	d10a      	bne.n	801a73e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a72c:	f383 8811 	msr	BASEPRI, r3
 801a730:	f3bf 8f6f 	isb	sy
 801a734:	f3bf 8f4f 	dsb	sy
 801a738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a73a:	bf00      	nop
 801a73c:	e7fe      	b.n	801a73c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a73e:	68bb      	ldr	r3, [r7, #8]
 801a740:	2b00      	cmp	r3, #0
 801a742:	d103      	bne.n	801a74c <xQueueGenericSendFromISR+0x3c>
 801a744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d101      	bne.n	801a750 <xQueueGenericSendFromISR+0x40>
 801a74c:	2301      	movs	r3, #1
 801a74e:	e000      	b.n	801a752 <xQueueGenericSendFromISR+0x42>
 801a750:	2300      	movs	r3, #0
 801a752:	2b00      	cmp	r3, #0
 801a754:	d10a      	bne.n	801a76c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801a756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a75a:	f383 8811 	msr	BASEPRI, r3
 801a75e:	f3bf 8f6f 	isb	sy
 801a762:	f3bf 8f4f 	dsb	sy
 801a766:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a768:	bf00      	nop
 801a76a:	e7fe      	b.n	801a76a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a76c:	683b      	ldr	r3, [r7, #0]
 801a76e:	2b02      	cmp	r3, #2
 801a770:	d103      	bne.n	801a77a <xQueueGenericSendFromISR+0x6a>
 801a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a776:	2b01      	cmp	r3, #1
 801a778:	d101      	bne.n	801a77e <xQueueGenericSendFromISR+0x6e>
 801a77a:	2301      	movs	r3, #1
 801a77c:	e000      	b.n	801a780 <xQueueGenericSendFromISR+0x70>
 801a77e:	2300      	movs	r3, #0
 801a780:	2b00      	cmp	r3, #0
 801a782:	d10a      	bne.n	801a79a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a788:	f383 8811 	msr	BASEPRI, r3
 801a78c:	f3bf 8f6f 	isb	sy
 801a790:	f3bf 8f4f 	dsb	sy
 801a794:	623b      	str	r3, [r7, #32]
}
 801a796:	bf00      	nop
 801a798:	e7fe      	b.n	801a798 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a79a:	f002 fd4d 	bl	801d238 <vPortValidateInterruptPriority>
	__asm volatile
 801a79e:	f3ef 8211 	mrs	r2, BASEPRI
 801a7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7a6:	f383 8811 	msr	BASEPRI, r3
 801a7aa:	f3bf 8f6f 	isb	sy
 801a7ae:	f3bf 8f4f 	dsb	sy
 801a7b2:	61fa      	str	r2, [r7, #28]
 801a7b4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801a7b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a7b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a7c2:	429a      	cmp	r2, r3
 801a7c4:	d302      	bcc.n	801a7cc <xQueueGenericSendFromISR+0xbc>
 801a7c6:	683b      	ldr	r3, [r7, #0]
 801a7c8:	2b02      	cmp	r3, #2
 801a7ca:	d12f      	bne.n	801a82c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a7dc:	683a      	ldr	r2, [r7, #0]
 801a7de:	68b9      	ldr	r1, [r7, #8]
 801a7e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a7e2:	f000 fb41 	bl	801ae68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a7e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7ee:	d112      	bne.n	801a816 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d016      	beq.n	801a826 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7fa:	3324      	adds	r3, #36	; 0x24
 801a7fc:	4618      	mov	r0, r3
 801a7fe:	f001 f95b 	bl	801bab8 <xTaskRemoveFromEventList>
 801a802:	4603      	mov	r3, r0
 801a804:	2b00      	cmp	r3, #0
 801a806:	d00e      	beq.n	801a826 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d00b      	beq.n	801a826 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	2201      	movs	r2, #1
 801a812:	601a      	str	r2, [r3, #0]
 801a814:	e007      	b.n	801a826 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801a81a:	3301      	adds	r3, #1
 801a81c:	b2db      	uxtb	r3, r3
 801a81e:	b25a      	sxtb	r2, r3
 801a820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a826:	2301      	movs	r3, #1
 801a828:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801a82a:	e001      	b.n	801a830 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a82c:	2300      	movs	r3, #0
 801a82e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a832:	617b      	str	r3, [r7, #20]
	__asm volatile
 801a834:	697b      	ldr	r3, [r7, #20]
 801a836:	f383 8811 	msr	BASEPRI, r3
}
 801a83a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a83e:	4618      	mov	r0, r3
 801a840:	3740      	adds	r7, #64	; 0x40
 801a842:	46bd      	mov	sp, r7
 801a844:	bd80      	pop	{r7, pc}

0801a846 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a846:	b580      	push	{r7, lr}
 801a848:	b08e      	sub	sp, #56	; 0x38
 801a84a:	af00      	add	r7, sp, #0
 801a84c:	6078      	str	r0, [r7, #4]
 801a84e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a856:	2b00      	cmp	r3, #0
 801a858:	d10a      	bne.n	801a870 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a85e:	f383 8811 	msr	BASEPRI, r3
 801a862:	f3bf 8f6f 	isb	sy
 801a866:	f3bf 8f4f 	dsb	sy
 801a86a:	623b      	str	r3, [r7, #32]
}
 801a86c:	bf00      	nop
 801a86e:	e7fe      	b.n	801a86e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a874:	2b00      	cmp	r3, #0
 801a876:	d00a      	beq.n	801a88e <xQueueGiveFromISR+0x48>
	__asm volatile
 801a878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a87c:	f383 8811 	msr	BASEPRI, r3
 801a880:	f3bf 8f6f 	isb	sy
 801a884:	f3bf 8f4f 	dsb	sy
 801a888:	61fb      	str	r3, [r7, #28]
}
 801a88a:	bf00      	nop
 801a88c:	e7fe      	b.n	801a88c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	2b00      	cmp	r3, #0
 801a894:	d103      	bne.n	801a89e <xQueueGiveFromISR+0x58>
 801a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a898:	689b      	ldr	r3, [r3, #8]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d101      	bne.n	801a8a2 <xQueueGiveFromISR+0x5c>
 801a89e:	2301      	movs	r3, #1
 801a8a0:	e000      	b.n	801a8a4 <xQueueGiveFromISR+0x5e>
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d10a      	bne.n	801a8be <xQueueGiveFromISR+0x78>
	__asm volatile
 801a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8ac:	f383 8811 	msr	BASEPRI, r3
 801a8b0:	f3bf 8f6f 	isb	sy
 801a8b4:	f3bf 8f4f 	dsb	sy
 801a8b8:	61bb      	str	r3, [r7, #24]
}
 801a8ba:	bf00      	nop
 801a8bc:	e7fe      	b.n	801a8bc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a8be:	f002 fcbb 	bl	801d238 <vPortValidateInterruptPriority>
	__asm volatile
 801a8c2:	f3ef 8211 	mrs	r2, BASEPRI
 801a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8ca:	f383 8811 	msr	BASEPRI, r3
 801a8ce:	f3bf 8f6f 	isb	sy
 801a8d2:	f3bf 8f4f 	dsb	sy
 801a8d6:	617a      	str	r2, [r7, #20]
 801a8d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801a8da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801a8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a8e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a8ea:	429a      	cmp	r2, r3
 801a8ec:	d22b      	bcs.n	801a946 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8fa:	1c5a      	adds	r2, r3, #1
 801a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a900:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a904:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a908:	d112      	bne.n	801a930 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d016      	beq.n	801a940 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a914:	3324      	adds	r3, #36	; 0x24
 801a916:	4618      	mov	r0, r3
 801a918:	f001 f8ce 	bl	801bab8 <xTaskRemoveFromEventList>
 801a91c:	4603      	mov	r3, r0
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d00e      	beq.n	801a940 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a922:	683b      	ldr	r3, [r7, #0]
 801a924:	2b00      	cmp	r3, #0
 801a926:	d00b      	beq.n	801a940 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a928:	683b      	ldr	r3, [r7, #0]
 801a92a:	2201      	movs	r2, #1
 801a92c:	601a      	str	r2, [r3, #0]
 801a92e:	e007      	b.n	801a940 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a934:	3301      	adds	r3, #1
 801a936:	b2db      	uxtb	r3, r3
 801a938:	b25a      	sxtb	r2, r3
 801a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a93c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a940:	2301      	movs	r3, #1
 801a942:	637b      	str	r3, [r7, #52]	; 0x34
 801a944:	e001      	b.n	801a94a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a946:	2300      	movs	r3, #0
 801a948:	637b      	str	r3, [r7, #52]	; 0x34
 801a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a94c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	f383 8811 	msr	BASEPRI, r3
}
 801a954:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a958:	4618      	mov	r0, r3
 801a95a:	3738      	adds	r7, #56	; 0x38
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}

0801a960 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a960:	b580      	push	{r7, lr}
 801a962:	b08c      	sub	sp, #48	; 0x30
 801a964:	af00      	add	r7, sp, #0
 801a966:	60f8      	str	r0, [r7, #12]
 801a968:	60b9      	str	r1, [r7, #8]
 801a96a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a96c:	2300      	movs	r3, #0
 801a96e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a970:	68fb      	ldr	r3, [r7, #12]
 801a972:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a976:	2b00      	cmp	r3, #0
 801a978:	d10a      	bne.n	801a990 <xQueueReceive+0x30>
	__asm volatile
 801a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a97e:	f383 8811 	msr	BASEPRI, r3
 801a982:	f3bf 8f6f 	isb	sy
 801a986:	f3bf 8f4f 	dsb	sy
 801a98a:	623b      	str	r3, [r7, #32]
}
 801a98c:	bf00      	nop
 801a98e:	e7fe      	b.n	801a98e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a990:	68bb      	ldr	r3, [r7, #8]
 801a992:	2b00      	cmp	r3, #0
 801a994:	d103      	bne.n	801a99e <xQueueReceive+0x3e>
 801a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d101      	bne.n	801a9a2 <xQueueReceive+0x42>
 801a99e:	2301      	movs	r3, #1
 801a9a0:	e000      	b.n	801a9a4 <xQueueReceive+0x44>
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d10a      	bne.n	801a9be <xQueueReceive+0x5e>
	__asm volatile
 801a9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9ac:	f383 8811 	msr	BASEPRI, r3
 801a9b0:	f3bf 8f6f 	isb	sy
 801a9b4:	f3bf 8f4f 	dsb	sy
 801a9b8:	61fb      	str	r3, [r7, #28]
}
 801a9ba:	bf00      	nop
 801a9bc:	e7fe      	b.n	801a9bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a9be:	f001 fa3b 	bl	801be38 <xTaskGetSchedulerState>
 801a9c2:	4603      	mov	r3, r0
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d102      	bne.n	801a9ce <xQueueReceive+0x6e>
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d101      	bne.n	801a9d2 <xQueueReceive+0x72>
 801a9ce:	2301      	movs	r3, #1
 801a9d0:	e000      	b.n	801a9d4 <xQueueReceive+0x74>
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d10a      	bne.n	801a9ee <xQueueReceive+0x8e>
	__asm volatile
 801a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9dc:	f383 8811 	msr	BASEPRI, r3
 801a9e0:	f3bf 8f6f 	isb	sy
 801a9e4:	f3bf 8f4f 	dsb	sy
 801a9e8:	61bb      	str	r3, [r7, #24]
}
 801a9ea:	bf00      	nop
 801a9ec:	e7fe      	b.n	801a9ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a9ee:	f002 fb41 	bl	801d074 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d01f      	beq.n	801aa3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a9fe:	68b9      	ldr	r1, [r7, #8]
 801aa00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa02:	f000 fa9b 	bl	801af3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa08:	1e5a      	subs	r2, r3, #1
 801aa0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa10:	691b      	ldr	r3, [r3, #16]
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d00f      	beq.n	801aa36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa18:	3310      	adds	r3, #16
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	f001 f84c 	bl	801bab8 <xTaskRemoveFromEventList>
 801aa20:	4603      	mov	r3, r0
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d007      	beq.n	801aa36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801aa26:	4b3d      	ldr	r3, [pc, #244]	; (801ab1c <xQueueReceive+0x1bc>)
 801aa28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aa2c:	601a      	str	r2, [r3, #0]
 801aa2e:	f3bf 8f4f 	dsb	sy
 801aa32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801aa36:	f002 fb4d 	bl	801d0d4 <vPortExitCritical>
				return pdPASS;
 801aa3a:	2301      	movs	r3, #1
 801aa3c:	e069      	b.n	801ab12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d103      	bne.n	801aa4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801aa44:	f002 fb46 	bl	801d0d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801aa48:	2300      	movs	r3, #0
 801aa4a:	e062      	b.n	801ab12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801aa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d106      	bne.n	801aa60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801aa52:	f107 0310 	add.w	r3, r7, #16
 801aa56:	4618      	mov	r0, r3
 801aa58:	f001 f890 	bl	801bb7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801aa5c:	2301      	movs	r3, #1
 801aa5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801aa60:	f002 fb38 	bl	801d0d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801aa64:	f000 fde8 	bl	801b638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801aa68:	f002 fb04 	bl	801d074 <vPortEnterCritical>
 801aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801aa72:	b25b      	sxtb	r3, r3
 801aa74:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa78:	d103      	bne.n	801aa82 <xQueueReceive+0x122>
 801aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801aa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aa88:	b25b      	sxtb	r3, r3
 801aa8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa8e:	d103      	bne.n	801aa98 <xQueueReceive+0x138>
 801aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa92:	2200      	movs	r2, #0
 801aa94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801aa98:	f002 fb1c 	bl	801d0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801aa9c:	1d3a      	adds	r2, r7, #4
 801aa9e:	f107 0310 	add.w	r3, r7, #16
 801aaa2:	4611      	mov	r1, r2
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	f001 f87f 	bl	801bba8 <xTaskCheckForTimeOut>
 801aaaa:	4603      	mov	r3, r0
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d123      	bne.n	801aaf8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801aab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aab2:	f000 fabb 	bl	801b02c <prvIsQueueEmpty>
 801aab6:	4603      	mov	r3, r0
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d017      	beq.n	801aaec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aabe:	3324      	adds	r3, #36	; 0x24
 801aac0:	687a      	ldr	r2, [r7, #4]
 801aac2:	4611      	mov	r1, r2
 801aac4:	4618      	mov	r0, r3
 801aac6:	f000 ffa7 	bl	801ba18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801aaca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aacc:	f000 fa5c 	bl	801af88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801aad0:	f000 fdc0 	bl	801b654 <xTaskResumeAll>
 801aad4:	4603      	mov	r3, r0
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d189      	bne.n	801a9ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801aada:	4b10      	ldr	r3, [pc, #64]	; (801ab1c <xQueueReceive+0x1bc>)
 801aadc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aae0:	601a      	str	r2, [r3, #0]
 801aae2:	f3bf 8f4f 	dsb	sy
 801aae6:	f3bf 8f6f 	isb	sy
 801aaea:	e780      	b.n	801a9ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801aaec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aaee:	f000 fa4b 	bl	801af88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801aaf2:	f000 fdaf 	bl	801b654 <xTaskResumeAll>
 801aaf6:	e77a      	b.n	801a9ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801aaf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aafa:	f000 fa45 	bl	801af88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801aafe:	f000 fda9 	bl	801b654 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ab02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ab04:	f000 fa92 	bl	801b02c <prvIsQueueEmpty>
 801ab08:	4603      	mov	r3, r0
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	f43f af6f 	beq.w	801a9ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801ab10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801ab12:	4618      	mov	r0, r3
 801ab14:	3730      	adds	r7, #48	; 0x30
 801ab16:	46bd      	mov	sp, r7
 801ab18:	bd80      	pop	{r7, pc}
 801ab1a:	bf00      	nop
 801ab1c:	e000ed04 	.word	0xe000ed04

0801ab20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	b08e      	sub	sp, #56	; 0x38
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
 801ab28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801ab32:	2300      	movs	r3, #0
 801ab34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801ab36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d10a      	bne.n	801ab52 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab40:	f383 8811 	msr	BASEPRI, r3
 801ab44:	f3bf 8f6f 	isb	sy
 801ab48:	f3bf 8f4f 	dsb	sy
 801ab4c:	623b      	str	r3, [r7, #32]
}
 801ab4e:	bf00      	nop
 801ab50:	e7fe      	b.n	801ab50 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801ab52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d00a      	beq.n	801ab70 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab5e:	f383 8811 	msr	BASEPRI, r3
 801ab62:	f3bf 8f6f 	isb	sy
 801ab66:	f3bf 8f4f 	dsb	sy
 801ab6a:	61fb      	str	r3, [r7, #28]
}
 801ab6c:	bf00      	nop
 801ab6e:	e7fe      	b.n	801ab6e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801ab70:	f001 f962 	bl	801be38 <xTaskGetSchedulerState>
 801ab74:	4603      	mov	r3, r0
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d102      	bne.n	801ab80 <xQueueSemaphoreTake+0x60>
 801ab7a:	683b      	ldr	r3, [r7, #0]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d101      	bne.n	801ab84 <xQueueSemaphoreTake+0x64>
 801ab80:	2301      	movs	r3, #1
 801ab82:	e000      	b.n	801ab86 <xQueueSemaphoreTake+0x66>
 801ab84:	2300      	movs	r3, #0
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d10a      	bne.n	801aba0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801ab8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab8e:	f383 8811 	msr	BASEPRI, r3
 801ab92:	f3bf 8f6f 	isb	sy
 801ab96:	f3bf 8f4f 	dsb	sy
 801ab9a:	61bb      	str	r3, [r7, #24]
}
 801ab9c:	bf00      	nop
 801ab9e:	e7fe      	b.n	801ab9e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801aba0:	f002 fa68 	bl	801d074 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aba8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801abaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abac:	2b00      	cmp	r3, #0
 801abae:	d024      	beq.n	801abfa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abb2:	1e5a      	subs	r2, r3, #1
 801abb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abb6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d104      	bne.n	801abca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801abc0:	f001 fae2 	bl	801c188 <pvTaskIncrementMutexHeldCount>
 801abc4:	4602      	mov	r2, r0
 801abc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abc8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abcc:	691b      	ldr	r3, [r3, #16]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d00f      	beq.n	801abf2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801abd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abd4:	3310      	adds	r3, #16
 801abd6:	4618      	mov	r0, r3
 801abd8:	f000 ff6e 	bl	801bab8 <xTaskRemoveFromEventList>
 801abdc:	4603      	mov	r3, r0
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d007      	beq.n	801abf2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801abe2:	4b54      	ldr	r3, [pc, #336]	; (801ad34 <xQueueSemaphoreTake+0x214>)
 801abe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801abe8:	601a      	str	r2, [r3, #0]
 801abea:	f3bf 8f4f 	dsb	sy
 801abee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801abf2:	f002 fa6f 	bl	801d0d4 <vPortExitCritical>
				return pdPASS;
 801abf6:	2301      	movs	r3, #1
 801abf8:	e097      	b.n	801ad2a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801abfa:	683b      	ldr	r3, [r7, #0]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d111      	bne.n	801ac24 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801ac00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d00a      	beq.n	801ac1c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801ac06:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac0a:	f383 8811 	msr	BASEPRI, r3
 801ac0e:	f3bf 8f6f 	isb	sy
 801ac12:	f3bf 8f4f 	dsb	sy
 801ac16:	617b      	str	r3, [r7, #20]
}
 801ac18:	bf00      	nop
 801ac1a:	e7fe      	b.n	801ac1a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801ac1c:	f002 fa5a 	bl	801d0d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801ac20:	2300      	movs	r3, #0
 801ac22:	e082      	b.n	801ad2a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ac24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d106      	bne.n	801ac38 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ac2a:	f107 030c 	add.w	r3, r7, #12
 801ac2e:	4618      	mov	r0, r3
 801ac30:	f000 ffa4 	bl	801bb7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ac34:	2301      	movs	r3, #1
 801ac36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ac38:	f002 fa4c 	bl	801d0d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ac3c:	f000 fcfc 	bl	801b638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ac40:	f002 fa18 	bl	801d074 <vPortEnterCritical>
 801ac44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ac4a:	b25b      	sxtb	r3, r3
 801ac4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac50:	d103      	bne.n	801ac5a <xQueueSemaphoreTake+0x13a>
 801ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac54:	2200      	movs	r2, #0
 801ac56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ac5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ac60:	b25b      	sxtb	r3, r3
 801ac62:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac66:	d103      	bne.n	801ac70 <xQueueSemaphoreTake+0x150>
 801ac68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ac70:	f002 fa30 	bl	801d0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801ac74:	463a      	mov	r2, r7
 801ac76:	f107 030c 	add.w	r3, r7, #12
 801ac7a:	4611      	mov	r1, r2
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	f000 ff93 	bl	801bba8 <xTaskCheckForTimeOut>
 801ac82:	4603      	mov	r3, r0
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d132      	bne.n	801acee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ac88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ac8a:	f000 f9cf 	bl	801b02c <prvIsQueueEmpty>
 801ac8e:	4603      	mov	r3, r0
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d026      	beq.n	801ace2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801ac94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d109      	bne.n	801acb0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801ac9c:	f002 f9ea 	bl	801d074 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801aca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aca2:	689b      	ldr	r3, [r3, #8]
 801aca4:	4618      	mov	r0, r3
 801aca6:	f001 f8e5 	bl	801be74 <xTaskPriorityInherit>
 801acaa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801acac:	f002 fa12 	bl	801d0d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acb2:	3324      	adds	r3, #36	; 0x24
 801acb4:	683a      	ldr	r2, [r7, #0]
 801acb6:	4611      	mov	r1, r2
 801acb8:	4618      	mov	r0, r3
 801acba:	f000 fead 	bl	801ba18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801acbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801acc0:	f000 f962 	bl	801af88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801acc4:	f000 fcc6 	bl	801b654 <xTaskResumeAll>
 801acc8:	4603      	mov	r3, r0
 801acca:	2b00      	cmp	r3, #0
 801accc:	f47f af68 	bne.w	801aba0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801acd0:	4b18      	ldr	r3, [pc, #96]	; (801ad34 <xQueueSemaphoreTake+0x214>)
 801acd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801acd6:	601a      	str	r2, [r3, #0]
 801acd8:	f3bf 8f4f 	dsb	sy
 801acdc:	f3bf 8f6f 	isb	sy
 801ace0:	e75e      	b.n	801aba0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801ace2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ace4:	f000 f950 	bl	801af88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801ace8:	f000 fcb4 	bl	801b654 <xTaskResumeAll>
 801acec:	e758      	b.n	801aba0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801acee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801acf0:	f000 f94a 	bl	801af88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801acf4:	f000 fcae 	bl	801b654 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801acf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801acfa:	f000 f997 	bl	801b02c <prvIsQueueEmpty>
 801acfe:	4603      	mov	r3, r0
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	f43f af4d 	beq.w	801aba0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d00d      	beq.n	801ad28 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801ad0c:	f002 f9b2 	bl	801d074 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801ad10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ad12:	f000 f891 	bl	801ae38 <prvGetDisinheritPriorityAfterTimeout>
 801ad16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad1a:	689b      	ldr	r3, [r3, #8]
 801ad1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ad1e:	4618      	mov	r0, r3
 801ad20:	f001 f9a4 	bl	801c06c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801ad24:	f002 f9d6 	bl	801d0d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801ad28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801ad2a:	4618      	mov	r0, r3
 801ad2c:	3738      	adds	r7, #56	; 0x38
 801ad2e:	46bd      	mov	sp, r7
 801ad30:	bd80      	pop	{r7, pc}
 801ad32:	bf00      	nop
 801ad34:	e000ed04 	.word	0xe000ed04

0801ad38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801ad38:	b580      	push	{r7, lr}
 801ad3a:	b08e      	sub	sp, #56	; 0x38
 801ad3c:	af00      	add	r7, sp, #0
 801ad3e:	60f8      	str	r0, [r7, #12]
 801ad40:	60b9      	str	r1, [r7, #8]
 801ad42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801ad44:	68fb      	ldr	r3, [r7, #12]
 801ad46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d10a      	bne.n	801ad64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad52:	f383 8811 	msr	BASEPRI, r3
 801ad56:	f3bf 8f6f 	isb	sy
 801ad5a:	f3bf 8f4f 	dsb	sy
 801ad5e:	623b      	str	r3, [r7, #32]
}
 801ad60:	bf00      	nop
 801ad62:	e7fe      	b.n	801ad62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ad64:	68bb      	ldr	r3, [r7, #8]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d103      	bne.n	801ad72 <xQueueReceiveFromISR+0x3a>
 801ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d101      	bne.n	801ad76 <xQueueReceiveFromISR+0x3e>
 801ad72:	2301      	movs	r3, #1
 801ad74:	e000      	b.n	801ad78 <xQueueReceiveFromISR+0x40>
 801ad76:	2300      	movs	r3, #0
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d10a      	bne.n	801ad92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801ad7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad80:	f383 8811 	msr	BASEPRI, r3
 801ad84:	f3bf 8f6f 	isb	sy
 801ad88:	f3bf 8f4f 	dsb	sy
 801ad8c:	61fb      	str	r3, [r7, #28]
}
 801ad8e:	bf00      	nop
 801ad90:	e7fe      	b.n	801ad90 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801ad92:	f002 fa51 	bl	801d238 <vPortValidateInterruptPriority>
	__asm volatile
 801ad96:	f3ef 8211 	mrs	r2, BASEPRI
 801ad9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad9e:	f383 8811 	msr	BASEPRI, r3
 801ada2:	f3bf 8f6f 	isb	sy
 801ada6:	f3bf 8f4f 	dsb	sy
 801adaa:	61ba      	str	r2, [r7, #24]
 801adac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801adae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801adb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801adb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801adb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d02f      	beq.n	801ae1e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801adc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801adc8:	68b9      	ldr	r1, [r7, #8]
 801adca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801adcc:	f000 f8b6 	bl	801af3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801add0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801add2:	1e5a      	subs	r2, r3, #1
 801add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801add6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801add8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801addc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ade0:	d112      	bne.n	801ae08 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ade4:	691b      	ldr	r3, [r3, #16]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d016      	beq.n	801ae18 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adec:	3310      	adds	r3, #16
 801adee:	4618      	mov	r0, r3
 801adf0:	f000 fe62 	bl	801bab8 <xTaskRemoveFromEventList>
 801adf4:	4603      	mov	r3, r0
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d00e      	beq.n	801ae18 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d00b      	beq.n	801ae18 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	2201      	movs	r2, #1
 801ae04:	601a      	str	r2, [r3, #0]
 801ae06:	e007      	b.n	801ae18 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801ae08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ae0c:	3301      	adds	r3, #1
 801ae0e:	b2db      	uxtb	r3, r3
 801ae10:	b25a      	sxtb	r2, r3
 801ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801ae18:	2301      	movs	r3, #1
 801ae1a:	637b      	str	r3, [r7, #52]	; 0x34
 801ae1c:	e001      	b.n	801ae22 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801ae1e:	2300      	movs	r3, #0
 801ae20:	637b      	str	r3, [r7, #52]	; 0x34
 801ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae24:	613b      	str	r3, [r7, #16]
	__asm volatile
 801ae26:	693b      	ldr	r3, [r7, #16]
 801ae28:	f383 8811 	msr	BASEPRI, r3
}
 801ae2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801ae2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801ae30:	4618      	mov	r0, r3
 801ae32:	3738      	adds	r7, #56	; 0x38
 801ae34:	46bd      	mov	sp, r7
 801ae36:	bd80      	pop	{r7, pc}

0801ae38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801ae38:	b480      	push	{r7}
 801ae3a:	b085      	sub	sp, #20
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d006      	beq.n	801ae56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	f1c3 0307 	rsb	r3, r3, #7
 801ae52:	60fb      	str	r3, [r7, #12]
 801ae54:	e001      	b.n	801ae5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801ae56:	2300      	movs	r3, #0
 801ae58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801ae5a:	68fb      	ldr	r3, [r7, #12]
	}
 801ae5c:	4618      	mov	r0, r3
 801ae5e:	3714      	adds	r7, #20
 801ae60:	46bd      	mov	sp, r7
 801ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae66:	4770      	bx	lr

0801ae68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b086      	sub	sp, #24
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	60f8      	str	r0, [r7, #12]
 801ae70:	60b9      	str	r1, [r7, #8]
 801ae72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801ae74:	2300      	movs	r3, #0
 801ae76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d10d      	bne.n	801aea2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d14d      	bne.n	801af2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	689b      	ldr	r3, [r3, #8]
 801ae92:	4618      	mov	r0, r3
 801ae94:	f001 f864 	bl	801bf60 <xTaskPriorityDisinherit>
 801ae98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801ae9a:	68fb      	ldr	r3, [r7, #12]
 801ae9c:	2200      	movs	r2, #0
 801ae9e:	609a      	str	r2, [r3, #8]
 801aea0:	e043      	b.n	801af2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d119      	bne.n	801aedc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	6858      	ldr	r0, [r3, #4]
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aeb0:	461a      	mov	r2, r3
 801aeb2:	68b9      	ldr	r1, [r7, #8]
 801aeb4:	f004 fa9a 	bl	801f3ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	685a      	ldr	r2, [r3, #4]
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aec0:	441a      	add	r2, r3
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	685a      	ldr	r2, [r3, #4]
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	689b      	ldr	r3, [r3, #8]
 801aece:	429a      	cmp	r2, r3
 801aed0:	d32b      	bcc.n	801af2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	681a      	ldr	r2, [r3, #0]
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	605a      	str	r2, [r3, #4]
 801aeda:	e026      	b.n	801af2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	68d8      	ldr	r0, [r3, #12]
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aee4:	461a      	mov	r2, r3
 801aee6:	68b9      	ldr	r1, [r7, #8]
 801aee8:	f004 fa80 	bl	801f3ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801aeec:	68fb      	ldr	r3, [r7, #12]
 801aeee:	68da      	ldr	r2, [r3, #12]
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aef4:	425b      	negs	r3, r3
 801aef6:	441a      	add	r2, r3
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	68da      	ldr	r2, [r3, #12]
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	429a      	cmp	r2, r3
 801af06:	d207      	bcs.n	801af18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	689a      	ldr	r2, [r3, #8]
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af10:	425b      	negs	r3, r3
 801af12:	441a      	add	r2, r3
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	2b02      	cmp	r3, #2
 801af1c:	d105      	bne.n	801af2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801af1e:	693b      	ldr	r3, [r7, #16]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d002      	beq.n	801af2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801af24:	693b      	ldr	r3, [r7, #16]
 801af26:	3b01      	subs	r3, #1
 801af28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801af2a:	693b      	ldr	r3, [r7, #16]
 801af2c:	1c5a      	adds	r2, r3, #1
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801af32:	697b      	ldr	r3, [r7, #20]
}
 801af34:	4618      	mov	r0, r3
 801af36:	3718      	adds	r7, #24
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}

0801af3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801af3c:	b580      	push	{r7, lr}
 801af3e:	b082      	sub	sp, #8
 801af40:	af00      	add	r7, sp, #0
 801af42:	6078      	str	r0, [r7, #4]
 801af44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d018      	beq.n	801af80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	68da      	ldr	r2, [r3, #12]
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af56:	441a      	add	r2, r3
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	68da      	ldr	r2, [r3, #12]
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	689b      	ldr	r3, [r3, #8]
 801af64:	429a      	cmp	r2, r3
 801af66:	d303      	bcc.n	801af70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	681a      	ldr	r2, [r3, #0]
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	68d9      	ldr	r1, [r3, #12]
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af78:	461a      	mov	r2, r3
 801af7a:	6838      	ldr	r0, [r7, #0]
 801af7c:	f004 fa36 	bl	801f3ec <memcpy>
	}
}
 801af80:	bf00      	nop
 801af82:	3708      	adds	r7, #8
 801af84:	46bd      	mov	sp, r7
 801af86:	bd80      	pop	{r7, pc}

0801af88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801af88:	b580      	push	{r7, lr}
 801af8a:	b084      	sub	sp, #16
 801af8c:	af00      	add	r7, sp, #0
 801af8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801af90:	f002 f870 	bl	801d074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801af9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801af9c:	e011      	b.n	801afc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d012      	beq.n	801afcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	3324      	adds	r3, #36	; 0x24
 801afaa:	4618      	mov	r0, r3
 801afac:	f000 fd84 	bl	801bab8 <xTaskRemoveFromEventList>
 801afb0:	4603      	mov	r3, r0
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d001      	beq.n	801afba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801afb6:	f000 fe59 	bl	801bc6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801afba:	7bfb      	ldrb	r3, [r7, #15]
 801afbc:	3b01      	subs	r3, #1
 801afbe:	b2db      	uxtb	r3, r3
 801afc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801afc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	dce9      	bgt.n	801af9e <prvUnlockQueue+0x16>
 801afca:	e000      	b.n	801afce <prvUnlockQueue+0x46>
					break;
 801afcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	22ff      	movs	r2, #255	; 0xff
 801afd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801afd6:	f002 f87d 	bl	801d0d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801afda:	f002 f84b 	bl	801d074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801afe4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801afe6:	e011      	b.n	801b00c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	691b      	ldr	r3, [r3, #16]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d012      	beq.n	801b016 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	3310      	adds	r3, #16
 801aff4:	4618      	mov	r0, r3
 801aff6:	f000 fd5f 	bl	801bab8 <xTaskRemoveFromEventList>
 801affa:	4603      	mov	r3, r0
 801affc:	2b00      	cmp	r3, #0
 801affe:	d001      	beq.n	801b004 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801b000:	f000 fe34 	bl	801bc6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801b004:	7bbb      	ldrb	r3, [r7, #14]
 801b006:	3b01      	subs	r3, #1
 801b008:	b2db      	uxtb	r3, r3
 801b00a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801b00c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b010:	2b00      	cmp	r3, #0
 801b012:	dce9      	bgt.n	801afe8 <prvUnlockQueue+0x60>
 801b014:	e000      	b.n	801b018 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801b016:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	22ff      	movs	r2, #255	; 0xff
 801b01c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801b020:	f002 f858 	bl	801d0d4 <vPortExitCritical>
}
 801b024:	bf00      	nop
 801b026:	3710      	adds	r7, #16
 801b028:	46bd      	mov	sp, r7
 801b02a:	bd80      	pop	{r7, pc}

0801b02c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b084      	sub	sp, #16
 801b030:	af00      	add	r7, sp, #0
 801b032:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801b034:	f002 f81e 	bl	801d074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d102      	bne.n	801b046 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801b040:	2301      	movs	r3, #1
 801b042:	60fb      	str	r3, [r7, #12]
 801b044:	e001      	b.n	801b04a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801b046:	2300      	movs	r3, #0
 801b048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801b04a:	f002 f843 	bl	801d0d4 <vPortExitCritical>

	return xReturn;
 801b04e:	68fb      	ldr	r3, [r7, #12]
}
 801b050:	4618      	mov	r0, r3
 801b052:	3710      	adds	r7, #16
 801b054:	46bd      	mov	sp, r7
 801b056:	bd80      	pop	{r7, pc}

0801b058 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801b058:	b580      	push	{r7, lr}
 801b05a:	b084      	sub	sp, #16
 801b05c:	af00      	add	r7, sp, #0
 801b05e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801b060:	f002 f808 	bl	801d074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b06c:	429a      	cmp	r2, r3
 801b06e:	d102      	bne.n	801b076 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801b070:	2301      	movs	r3, #1
 801b072:	60fb      	str	r3, [r7, #12]
 801b074:	e001      	b.n	801b07a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801b076:	2300      	movs	r3, #0
 801b078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801b07a:	f002 f82b 	bl	801d0d4 <vPortExitCritical>

	return xReturn;
 801b07e:	68fb      	ldr	r3, [r7, #12]
}
 801b080:	4618      	mov	r0, r3
 801b082:	3710      	adds	r7, #16
 801b084:	46bd      	mov	sp, r7
 801b086:	bd80      	pop	{r7, pc}

0801b088 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 801b088:	b480      	push	{r7}
 801b08a:	b087      	sub	sp, #28
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 801b094:	693b      	ldr	r3, [r7, #16]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d10a      	bne.n	801b0b0 <xQueueIsQueueFullFromISR+0x28>
	__asm volatile
 801b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b09e:	f383 8811 	msr	BASEPRI, r3
 801b0a2:	f3bf 8f6f 	isb	sy
 801b0a6:	f3bf 8f4f 	dsb	sy
 801b0aa:	60fb      	str	r3, [r7, #12]
}
 801b0ac:	bf00      	nop
 801b0ae:	e7fe      	b.n	801b0ae <xQueueIsQueueFullFromISR+0x26>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801b0b0:	693b      	ldr	r3, [r7, #16]
 801b0b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b0b4:	693b      	ldr	r3, [r7, #16]
 801b0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b0b8:	429a      	cmp	r2, r3
 801b0ba:	d102      	bne.n	801b0c2 <xQueueIsQueueFullFromISR+0x3a>
	{
		xReturn = pdTRUE;
 801b0bc:	2301      	movs	r3, #1
 801b0be:	617b      	str	r3, [r7, #20]
 801b0c0:	e001      	b.n	801b0c6 <xQueueIsQueueFullFromISR+0x3e>
	}
	else
	{
		xReturn = pdFALSE;
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b0c6:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	371c      	adds	r7, #28
 801b0cc:	46bd      	mov	sp, r7
 801b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0d2:	4770      	bx	lr

0801b0d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801b0d4:	b480      	push	{r7}
 801b0d6:	b085      	sub	sp, #20
 801b0d8:	af00      	add	r7, sp, #0
 801b0da:	6078      	str	r0, [r7, #4]
 801b0dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801b0de:	2300      	movs	r3, #0
 801b0e0:	60fb      	str	r3, [r7, #12]
 801b0e2:	e014      	b.n	801b10e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801b0e4:	4a0f      	ldr	r2, [pc, #60]	; (801b124 <vQueueAddToRegistry+0x50>)
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d10b      	bne.n	801b108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801b0f0:	490c      	ldr	r1, [pc, #48]	; (801b124 <vQueueAddToRegistry+0x50>)
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	683a      	ldr	r2, [r7, #0]
 801b0f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801b0fa:	4a0a      	ldr	r2, [pc, #40]	; (801b124 <vQueueAddToRegistry+0x50>)
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	00db      	lsls	r3, r3, #3
 801b100:	4413      	add	r3, r2
 801b102:	687a      	ldr	r2, [r7, #4]
 801b104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801b106:	e006      	b.n	801b116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	3301      	adds	r3, #1
 801b10c:	60fb      	str	r3, [r7, #12]
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	2b07      	cmp	r3, #7
 801b112:	d9e7      	bls.n	801b0e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801b114:	bf00      	nop
 801b116:	bf00      	nop
 801b118:	3714      	adds	r7, #20
 801b11a:	46bd      	mov	sp, r7
 801b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b120:	4770      	bx	lr
 801b122:	bf00      	nop
 801b124:	2000cce0 	.word	0x2000cce0

0801b128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b128:	b580      	push	{r7, lr}
 801b12a:	b086      	sub	sp, #24
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	60f8      	str	r0, [r7, #12]
 801b130:	60b9      	str	r1, [r7, #8]
 801b132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801b138:	f001 ff9c 	bl	801d074 <vPortEnterCritical>
 801b13c:	697b      	ldr	r3, [r7, #20]
 801b13e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b142:	b25b      	sxtb	r3, r3
 801b144:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b148:	d103      	bne.n	801b152 <vQueueWaitForMessageRestricted+0x2a>
 801b14a:	697b      	ldr	r3, [r7, #20]
 801b14c:	2200      	movs	r2, #0
 801b14e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b152:	697b      	ldr	r3, [r7, #20]
 801b154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801b158:	b25b      	sxtb	r3, r3
 801b15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b15e:	d103      	bne.n	801b168 <vQueueWaitForMessageRestricted+0x40>
 801b160:	697b      	ldr	r3, [r7, #20]
 801b162:	2200      	movs	r2, #0
 801b164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801b168:	f001 ffb4 	bl	801d0d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801b16c:	697b      	ldr	r3, [r7, #20]
 801b16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b170:	2b00      	cmp	r3, #0
 801b172:	d106      	bne.n	801b182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801b174:	697b      	ldr	r3, [r7, #20]
 801b176:	3324      	adds	r3, #36	; 0x24
 801b178:	687a      	ldr	r2, [r7, #4]
 801b17a:	68b9      	ldr	r1, [r7, #8]
 801b17c:	4618      	mov	r0, r3
 801b17e:	f000 fc6f 	bl	801ba60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801b182:	6978      	ldr	r0, [r7, #20]
 801b184:	f7ff ff00 	bl	801af88 <prvUnlockQueue>
	}
 801b188:	bf00      	nop
 801b18a:	3718      	adds	r7, #24
 801b18c:	46bd      	mov	sp, r7
 801b18e:	bd80      	pop	{r7, pc}

0801b190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801b190:	b580      	push	{r7, lr}
 801b192:	b08e      	sub	sp, #56	; 0x38
 801b194:	af04      	add	r7, sp, #16
 801b196:	60f8      	str	r0, [r7, #12]
 801b198:	60b9      	str	r1, [r7, #8]
 801b19a:	607a      	str	r2, [r7, #4]
 801b19c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801b19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d10a      	bne.n	801b1ba <xTaskCreateStatic+0x2a>
	__asm volatile
 801b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1a8:	f383 8811 	msr	BASEPRI, r3
 801b1ac:	f3bf 8f6f 	isb	sy
 801b1b0:	f3bf 8f4f 	dsb	sy
 801b1b4:	623b      	str	r3, [r7, #32]
}
 801b1b6:	bf00      	nop
 801b1b8:	e7fe      	b.n	801b1b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801b1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d10a      	bne.n	801b1d6 <xTaskCreateStatic+0x46>
	__asm volatile
 801b1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1c4:	f383 8811 	msr	BASEPRI, r3
 801b1c8:	f3bf 8f6f 	isb	sy
 801b1cc:	f3bf 8f4f 	dsb	sy
 801b1d0:	61fb      	str	r3, [r7, #28]
}
 801b1d2:	bf00      	nop
 801b1d4:	e7fe      	b.n	801b1d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801b1d6:	23b8      	movs	r3, #184	; 0xb8
 801b1d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801b1da:	693b      	ldr	r3, [r7, #16]
 801b1dc:	2bb8      	cmp	r3, #184	; 0xb8
 801b1de:	d00a      	beq.n	801b1f6 <xTaskCreateStatic+0x66>
	__asm volatile
 801b1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1e4:	f383 8811 	msr	BASEPRI, r3
 801b1e8:	f3bf 8f6f 	isb	sy
 801b1ec:	f3bf 8f4f 	dsb	sy
 801b1f0:	61bb      	str	r3, [r7, #24]
}
 801b1f2:	bf00      	nop
 801b1f4:	e7fe      	b.n	801b1f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801b1f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d01e      	beq.n	801b23c <xTaskCreateStatic+0xac>
 801b1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b200:	2b00      	cmp	r3, #0
 801b202:	d01b      	beq.n	801b23c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b20a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b20c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b210:	2202      	movs	r2, #2
 801b212:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801b216:	2300      	movs	r3, #0
 801b218:	9303      	str	r3, [sp, #12]
 801b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b21c:	9302      	str	r3, [sp, #8]
 801b21e:	f107 0314 	add.w	r3, r7, #20
 801b222:	9301      	str	r3, [sp, #4]
 801b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b226:	9300      	str	r3, [sp, #0]
 801b228:	683b      	ldr	r3, [r7, #0]
 801b22a:	687a      	ldr	r2, [r7, #4]
 801b22c:	68b9      	ldr	r1, [r7, #8]
 801b22e:	68f8      	ldr	r0, [r7, #12]
 801b230:	f000 f850 	bl	801b2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b236:	f000 f8ef 	bl	801b418 <prvAddNewTaskToReadyList>
 801b23a:	e001      	b.n	801b240 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801b23c:	2300      	movs	r3, #0
 801b23e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801b240:	697b      	ldr	r3, [r7, #20]
	}
 801b242:	4618      	mov	r0, r3
 801b244:	3728      	adds	r7, #40	; 0x28
 801b246:	46bd      	mov	sp, r7
 801b248:	bd80      	pop	{r7, pc}

0801b24a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801b24a:	b580      	push	{r7, lr}
 801b24c:	b08c      	sub	sp, #48	; 0x30
 801b24e:	af04      	add	r7, sp, #16
 801b250:	60f8      	str	r0, [r7, #12]
 801b252:	60b9      	str	r1, [r7, #8]
 801b254:	603b      	str	r3, [r7, #0]
 801b256:	4613      	mov	r3, r2
 801b258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801b25a:	88fb      	ldrh	r3, [r7, #6]
 801b25c:	009b      	lsls	r3, r3, #2
 801b25e:	4618      	mov	r0, r3
 801b260:	f002 f82a 	bl	801d2b8 <pvPortMalloc>
 801b264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801b266:	697b      	ldr	r3, [r7, #20]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d00e      	beq.n	801b28a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801b26c:	20b8      	movs	r0, #184	; 0xb8
 801b26e:	f002 f823 	bl	801d2b8 <pvPortMalloc>
 801b272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801b274:	69fb      	ldr	r3, [r7, #28]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d003      	beq.n	801b282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801b27a:	69fb      	ldr	r3, [r7, #28]
 801b27c:	697a      	ldr	r2, [r7, #20]
 801b27e:	631a      	str	r2, [r3, #48]	; 0x30
 801b280:	e005      	b.n	801b28e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801b282:	6978      	ldr	r0, [r7, #20]
 801b284:	f002 f82a 	bl	801d2dc <vPortFree>
 801b288:	e001      	b.n	801b28e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801b28a:	2300      	movs	r3, #0
 801b28c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801b28e:	69fb      	ldr	r3, [r7, #28]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d017      	beq.n	801b2c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801b294:	69fb      	ldr	r3, [r7, #28]
 801b296:	2200      	movs	r2, #0
 801b298:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801b29c:	88fa      	ldrh	r2, [r7, #6]
 801b29e:	2300      	movs	r3, #0
 801b2a0:	9303      	str	r3, [sp, #12]
 801b2a2:	69fb      	ldr	r3, [r7, #28]
 801b2a4:	9302      	str	r3, [sp, #8]
 801b2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2a8:	9301      	str	r3, [sp, #4]
 801b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2ac:	9300      	str	r3, [sp, #0]
 801b2ae:	683b      	ldr	r3, [r7, #0]
 801b2b0:	68b9      	ldr	r1, [r7, #8]
 801b2b2:	68f8      	ldr	r0, [r7, #12]
 801b2b4:	f000 f80e 	bl	801b2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b2b8:	69f8      	ldr	r0, [r7, #28]
 801b2ba:	f000 f8ad 	bl	801b418 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801b2be:	2301      	movs	r3, #1
 801b2c0:	61bb      	str	r3, [r7, #24]
 801b2c2:	e002      	b.n	801b2ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801b2c4:	f04f 33ff 	mov.w	r3, #4294967295
 801b2c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801b2ca:	69bb      	ldr	r3, [r7, #24]
	}
 801b2cc:	4618      	mov	r0, r3
 801b2ce:	3720      	adds	r7, #32
 801b2d0:	46bd      	mov	sp, r7
 801b2d2:	bd80      	pop	{r7, pc}

0801b2d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	b088      	sub	sp, #32
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	60f8      	str	r0, [r7, #12]
 801b2dc:	60b9      	str	r1, [r7, #8]
 801b2de:	607a      	str	r2, [r7, #4]
 801b2e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b2ec:	3b01      	subs	r3, #1
 801b2ee:	009b      	lsls	r3, r3, #2
 801b2f0:	4413      	add	r3, r2
 801b2f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801b2f4:	69bb      	ldr	r3, [r7, #24]
 801b2f6:	f023 0307 	bic.w	r3, r3, #7
 801b2fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801b2fc:	69bb      	ldr	r3, [r7, #24]
 801b2fe:	f003 0307 	and.w	r3, r3, #7
 801b302:	2b00      	cmp	r3, #0
 801b304:	d00a      	beq.n	801b31c <prvInitialiseNewTask+0x48>
	__asm volatile
 801b306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b30a:	f383 8811 	msr	BASEPRI, r3
 801b30e:	f3bf 8f6f 	isb	sy
 801b312:	f3bf 8f4f 	dsb	sy
 801b316:	617b      	str	r3, [r7, #20]
}
 801b318:	bf00      	nop
 801b31a:	e7fe      	b.n	801b31a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801b31c:	68bb      	ldr	r3, [r7, #8]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d01f      	beq.n	801b362 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b322:	2300      	movs	r3, #0
 801b324:	61fb      	str	r3, [r7, #28]
 801b326:	e012      	b.n	801b34e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801b328:	68ba      	ldr	r2, [r7, #8]
 801b32a:	69fb      	ldr	r3, [r7, #28]
 801b32c:	4413      	add	r3, r2
 801b32e:	7819      	ldrb	r1, [r3, #0]
 801b330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b332:	69fb      	ldr	r3, [r7, #28]
 801b334:	4413      	add	r3, r2
 801b336:	3334      	adds	r3, #52	; 0x34
 801b338:	460a      	mov	r2, r1
 801b33a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801b33c:	68ba      	ldr	r2, [r7, #8]
 801b33e:	69fb      	ldr	r3, [r7, #28]
 801b340:	4413      	add	r3, r2
 801b342:	781b      	ldrb	r3, [r3, #0]
 801b344:	2b00      	cmp	r3, #0
 801b346:	d006      	beq.n	801b356 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b348:	69fb      	ldr	r3, [r7, #28]
 801b34a:	3301      	adds	r3, #1
 801b34c:	61fb      	str	r3, [r7, #28]
 801b34e:	69fb      	ldr	r3, [r7, #28]
 801b350:	2b0f      	cmp	r3, #15
 801b352:	d9e9      	bls.n	801b328 <prvInitialiseNewTask+0x54>
 801b354:	e000      	b.n	801b358 <prvInitialiseNewTask+0x84>
			{
				break;
 801b356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b35a:	2200      	movs	r2, #0
 801b35c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801b360:	e003      	b.n	801b36a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b364:	2200      	movs	r2, #0
 801b366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b36c:	2b06      	cmp	r3, #6
 801b36e:	d901      	bls.n	801b374 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801b370:	2306      	movs	r3, #6
 801b372:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b378:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b37c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b37e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b382:	2200      	movs	r2, #0
 801b384:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b388:	3304      	adds	r3, #4
 801b38a:	4618      	mov	r0, r3
 801b38c:	f7fe fea8 	bl	801a0e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801b390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b392:	3318      	adds	r3, #24
 801b394:	4618      	mov	r0, r3
 801b396:	f7fe fea3 	bl	801a0e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b39e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3a2:	f1c3 0207 	rsb	r2, r3, #7
 801b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b3ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 801b3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3b2:	2200      	movs	r2, #0
 801b3b4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3b8:	2200      	movs	r2, #0
 801b3ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3c0:	2200      	movs	r2, #0
 801b3c2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801b3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3c8:	3350      	adds	r3, #80	; 0x50
 801b3ca:	2260      	movs	r2, #96	; 0x60
 801b3cc:	2100      	movs	r1, #0
 801b3ce:	4618      	mov	r0, r3
 801b3d0:	f004 f834 	bl	801f43c <memset>
 801b3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3d6:	4a0d      	ldr	r2, [pc, #52]	; (801b40c <prvInitialiseNewTask+0x138>)
 801b3d8:	655a      	str	r2, [r3, #84]	; 0x54
 801b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3dc:	4a0c      	ldr	r2, [pc, #48]	; (801b410 <prvInitialiseNewTask+0x13c>)
 801b3de:	659a      	str	r2, [r3, #88]	; 0x58
 801b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3e2:	4a0c      	ldr	r2, [pc, #48]	; (801b414 <prvInitialiseNewTask+0x140>)
 801b3e4:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801b3e6:	683a      	ldr	r2, [r7, #0]
 801b3e8:	68f9      	ldr	r1, [r7, #12]
 801b3ea:	69b8      	ldr	r0, [r7, #24]
 801b3ec:	f001 fd14 	bl	801ce18 <pxPortInitialiseStack>
 801b3f0:	4602      	mov	r2, r0
 801b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801b3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d002      	beq.n	801b402 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b402:	bf00      	nop
 801b404:	3720      	adds	r7, #32
 801b406:	46bd      	mov	sp, r7
 801b408:	bd80      	pop	{r7, pc}
 801b40a:	bf00      	nop
 801b40c:	080353e4 	.word	0x080353e4
 801b410:	08035404 	.word	0x08035404
 801b414:	080353c4 	.word	0x080353c4

0801b418 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801b418:	b580      	push	{r7, lr}
 801b41a:	b082      	sub	sp, #8
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801b420:	f001 fe28 	bl	801d074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801b424:	4b2a      	ldr	r3, [pc, #168]	; (801b4d0 <prvAddNewTaskToReadyList+0xb8>)
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	3301      	adds	r3, #1
 801b42a:	4a29      	ldr	r2, [pc, #164]	; (801b4d0 <prvAddNewTaskToReadyList+0xb8>)
 801b42c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801b42e:	4b29      	ldr	r3, [pc, #164]	; (801b4d4 <prvAddNewTaskToReadyList+0xbc>)
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	2b00      	cmp	r3, #0
 801b434:	d109      	bne.n	801b44a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801b436:	4a27      	ldr	r2, [pc, #156]	; (801b4d4 <prvAddNewTaskToReadyList+0xbc>)
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801b43c:	4b24      	ldr	r3, [pc, #144]	; (801b4d0 <prvAddNewTaskToReadyList+0xb8>)
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	2b01      	cmp	r3, #1
 801b442:	d110      	bne.n	801b466 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801b444:	f000 fc36 	bl	801bcb4 <prvInitialiseTaskLists>
 801b448:	e00d      	b.n	801b466 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801b44a:	4b23      	ldr	r3, [pc, #140]	; (801b4d8 <prvAddNewTaskToReadyList+0xc0>)
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d109      	bne.n	801b466 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801b452:	4b20      	ldr	r3, [pc, #128]	; (801b4d4 <prvAddNewTaskToReadyList+0xbc>)
 801b454:	681b      	ldr	r3, [r3, #0]
 801b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b45c:	429a      	cmp	r2, r3
 801b45e:	d802      	bhi.n	801b466 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801b460:	4a1c      	ldr	r2, [pc, #112]	; (801b4d4 <prvAddNewTaskToReadyList+0xbc>)
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801b466:	4b1d      	ldr	r3, [pc, #116]	; (801b4dc <prvAddNewTaskToReadyList+0xc4>)
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	3301      	adds	r3, #1
 801b46c:	4a1b      	ldr	r2, [pc, #108]	; (801b4dc <prvAddNewTaskToReadyList+0xc4>)
 801b46e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b474:	2201      	movs	r2, #1
 801b476:	409a      	lsls	r2, r3
 801b478:	4b19      	ldr	r3, [pc, #100]	; (801b4e0 <prvAddNewTaskToReadyList+0xc8>)
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	4313      	orrs	r3, r2
 801b47e:	4a18      	ldr	r2, [pc, #96]	; (801b4e0 <prvAddNewTaskToReadyList+0xc8>)
 801b480:	6013      	str	r3, [r2, #0]
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b486:	4613      	mov	r3, r2
 801b488:	009b      	lsls	r3, r3, #2
 801b48a:	4413      	add	r3, r2
 801b48c:	009b      	lsls	r3, r3, #2
 801b48e:	4a15      	ldr	r2, [pc, #84]	; (801b4e4 <prvAddNewTaskToReadyList+0xcc>)
 801b490:	441a      	add	r2, r3
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	3304      	adds	r3, #4
 801b496:	4619      	mov	r1, r3
 801b498:	4610      	mov	r0, r2
 801b49a:	f7fe fe2e 	bl	801a0fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801b49e:	f001 fe19 	bl	801d0d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801b4a2:	4b0d      	ldr	r3, [pc, #52]	; (801b4d8 <prvAddNewTaskToReadyList+0xc0>)
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d00e      	beq.n	801b4c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801b4aa:	4b0a      	ldr	r3, [pc, #40]	; (801b4d4 <prvAddNewTaskToReadyList+0xbc>)
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4b4:	429a      	cmp	r2, r3
 801b4b6:	d207      	bcs.n	801b4c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801b4b8:	4b0b      	ldr	r3, [pc, #44]	; (801b4e8 <prvAddNewTaskToReadyList+0xd0>)
 801b4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b4be:	601a      	str	r2, [r3, #0]
 801b4c0:	f3bf 8f4f 	dsb	sy
 801b4c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b4c8:	bf00      	nop
 801b4ca:	3708      	adds	r7, #8
 801b4cc:	46bd      	mov	sp, r7
 801b4ce:	bd80      	pop	{r7, pc}
 801b4d0:	2000ce20 	.word	0x2000ce20
 801b4d4:	2000cd20 	.word	0x2000cd20
 801b4d8:	2000ce2c 	.word	0x2000ce2c
 801b4dc:	2000ce3c 	.word	0x2000ce3c
 801b4e0:	2000ce28 	.word	0x2000ce28
 801b4e4:	2000cd24 	.word	0x2000cd24
 801b4e8:	e000ed04 	.word	0xe000ed04

0801b4ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	b084      	sub	sp, #16
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b4f4:	2300      	movs	r3, #0
 801b4f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d017      	beq.n	801b52e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b4fe:	4b13      	ldr	r3, [pc, #76]	; (801b54c <vTaskDelay+0x60>)
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	2b00      	cmp	r3, #0
 801b504:	d00a      	beq.n	801b51c <vTaskDelay+0x30>
	__asm volatile
 801b506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b50a:	f383 8811 	msr	BASEPRI, r3
 801b50e:	f3bf 8f6f 	isb	sy
 801b512:	f3bf 8f4f 	dsb	sy
 801b516:	60bb      	str	r3, [r7, #8]
}
 801b518:	bf00      	nop
 801b51a:	e7fe      	b.n	801b51a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801b51c:	f000 f88c 	bl	801b638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b520:	2100      	movs	r1, #0
 801b522:	6878      	ldr	r0, [r7, #4]
 801b524:	f001 f846 	bl	801c5b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b528:	f000 f894 	bl	801b654 <xTaskResumeAll>
 801b52c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	2b00      	cmp	r3, #0
 801b532:	d107      	bne.n	801b544 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801b534:	4b06      	ldr	r3, [pc, #24]	; (801b550 <vTaskDelay+0x64>)
 801b536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b53a:	601a      	str	r2, [r3, #0]
 801b53c:	f3bf 8f4f 	dsb	sy
 801b540:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b544:	bf00      	nop
 801b546:	3710      	adds	r7, #16
 801b548:	46bd      	mov	sp, r7
 801b54a:	bd80      	pop	{r7, pc}
 801b54c:	2000ce48 	.word	0x2000ce48
 801b550:	e000ed04 	.word	0xe000ed04

0801b554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b554:	b580      	push	{r7, lr}
 801b556:	b08a      	sub	sp, #40	; 0x28
 801b558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b55a:	2300      	movs	r3, #0
 801b55c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b55e:	2300      	movs	r3, #0
 801b560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b562:	463a      	mov	r2, r7
 801b564:	1d39      	adds	r1, r7, #4
 801b566:	f107 0308 	add.w	r3, r7, #8
 801b56a:	4618      	mov	r0, r3
 801b56c:	f7f1 ff02 	bl	800d374 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b570:	6839      	ldr	r1, [r7, #0]
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	68ba      	ldr	r2, [r7, #8]
 801b576:	9202      	str	r2, [sp, #8]
 801b578:	9301      	str	r3, [sp, #4]
 801b57a:	2300      	movs	r3, #0
 801b57c:	9300      	str	r3, [sp, #0]
 801b57e:	2300      	movs	r3, #0
 801b580:	460a      	mov	r2, r1
 801b582:	4925      	ldr	r1, [pc, #148]	; (801b618 <vTaskStartScheduler+0xc4>)
 801b584:	4825      	ldr	r0, [pc, #148]	; (801b61c <vTaskStartScheduler+0xc8>)
 801b586:	f7ff fe03 	bl	801b190 <xTaskCreateStatic>
 801b58a:	4603      	mov	r3, r0
 801b58c:	4a24      	ldr	r2, [pc, #144]	; (801b620 <vTaskStartScheduler+0xcc>)
 801b58e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801b590:	4b23      	ldr	r3, [pc, #140]	; (801b620 <vTaskStartScheduler+0xcc>)
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	2b00      	cmp	r3, #0
 801b596:	d002      	beq.n	801b59e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801b598:	2301      	movs	r3, #1
 801b59a:	617b      	str	r3, [r7, #20]
 801b59c:	e001      	b.n	801b5a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801b59e:	2300      	movs	r3, #0
 801b5a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801b5a2:	697b      	ldr	r3, [r7, #20]
 801b5a4:	2b01      	cmp	r3, #1
 801b5a6:	d102      	bne.n	801b5ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801b5a8:	f001 f86a 	bl	801c680 <xTimerCreateTimerTask>
 801b5ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b5ae:	697b      	ldr	r3, [r7, #20]
 801b5b0:	2b01      	cmp	r3, #1
 801b5b2:	d11d      	bne.n	801b5f0 <vTaskStartScheduler+0x9c>
	__asm volatile
 801b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5b8:	f383 8811 	msr	BASEPRI, r3
 801b5bc:	f3bf 8f6f 	isb	sy
 801b5c0:	f3bf 8f4f 	dsb	sy
 801b5c4:	613b      	str	r3, [r7, #16]
}
 801b5c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b5c8:	4b16      	ldr	r3, [pc, #88]	; (801b624 <vTaskStartScheduler+0xd0>)
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	3350      	adds	r3, #80	; 0x50
 801b5ce:	4a16      	ldr	r2, [pc, #88]	; (801b628 <vTaskStartScheduler+0xd4>)
 801b5d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b5d2:	4b16      	ldr	r3, [pc, #88]	; (801b62c <vTaskStartScheduler+0xd8>)
 801b5d4:	f04f 32ff 	mov.w	r2, #4294967295
 801b5d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b5da:	4b15      	ldr	r3, [pc, #84]	; (801b630 <vTaskStartScheduler+0xdc>)
 801b5dc:	2201      	movs	r2, #1
 801b5de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b5e0:	4b14      	ldr	r3, [pc, #80]	; (801b634 <vTaskStartScheduler+0xe0>)
 801b5e2:	2200      	movs	r2, #0
 801b5e4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801b5e6:	f7f1 febd 	bl	800d364 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b5ea:	f001 fca1 	bl	801cf30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b5ee:	e00e      	b.n	801b60e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b5f0:	697b      	ldr	r3, [r7, #20]
 801b5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5f6:	d10a      	bne.n	801b60e <vTaskStartScheduler+0xba>
	__asm volatile
 801b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5fc:	f383 8811 	msr	BASEPRI, r3
 801b600:	f3bf 8f6f 	isb	sy
 801b604:	f3bf 8f4f 	dsb	sy
 801b608:	60fb      	str	r3, [r7, #12]
}
 801b60a:	bf00      	nop
 801b60c:	e7fe      	b.n	801b60c <vTaskStartScheduler+0xb8>
}
 801b60e:	bf00      	nop
 801b610:	3718      	adds	r7, #24
 801b612:	46bd      	mov	sp, r7
 801b614:	bd80      	pop	{r7, pc}
 801b616:	bf00      	nop
 801b618:	0802225c 	.word	0x0802225c
 801b61c:	0801bc85 	.word	0x0801bc85
 801b620:	2000ce44 	.word	0x2000ce44
 801b624:	2000cd20 	.word	0x2000cd20
 801b628:	20000100 	.word	0x20000100
 801b62c:	2000ce40 	.word	0x2000ce40
 801b630:	2000ce2c 	.word	0x2000ce2c
 801b634:	2000ce24 	.word	0x2000ce24

0801b638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b638:	b480      	push	{r7}
 801b63a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801b63c:	4b04      	ldr	r3, [pc, #16]	; (801b650 <vTaskSuspendAll+0x18>)
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	3301      	adds	r3, #1
 801b642:	4a03      	ldr	r2, [pc, #12]	; (801b650 <vTaskSuspendAll+0x18>)
 801b644:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801b646:	bf00      	nop
 801b648:	46bd      	mov	sp, r7
 801b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b64e:	4770      	bx	lr
 801b650:	2000ce48 	.word	0x2000ce48

0801b654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b654:	b580      	push	{r7, lr}
 801b656:	b084      	sub	sp, #16
 801b658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b65a:	2300      	movs	r3, #0
 801b65c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b65e:	2300      	movs	r3, #0
 801b660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b662:	4b41      	ldr	r3, [pc, #260]	; (801b768 <xTaskResumeAll+0x114>)
 801b664:	681b      	ldr	r3, [r3, #0]
 801b666:	2b00      	cmp	r3, #0
 801b668:	d10a      	bne.n	801b680 <xTaskResumeAll+0x2c>
	__asm volatile
 801b66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b66e:	f383 8811 	msr	BASEPRI, r3
 801b672:	f3bf 8f6f 	isb	sy
 801b676:	f3bf 8f4f 	dsb	sy
 801b67a:	603b      	str	r3, [r7, #0]
}
 801b67c:	bf00      	nop
 801b67e:	e7fe      	b.n	801b67e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b680:	f001 fcf8 	bl	801d074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b684:	4b38      	ldr	r3, [pc, #224]	; (801b768 <xTaskResumeAll+0x114>)
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	3b01      	subs	r3, #1
 801b68a:	4a37      	ldr	r2, [pc, #220]	; (801b768 <xTaskResumeAll+0x114>)
 801b68c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b68e:	4b36      	ldr	r3, [pc, #216]	; (801b768 <xTaskResumeAll+0x114>)
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d161      	bne.n	801b75a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b696:	4b35      	ldr	r3, [pc, #212]	; (801b76c <xTaskResumeAll+0x118>)
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d05d      	beq.n	801b75a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b69e:	e02e      	b.n	801b6fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b6a0:	4b33      	ldr	r3, [pc, #204]	; (801b770 <xTaskResumeAll+0x11c>)
 801b6a2:	68db      	ldr	r3, [r3, #12]
 801b6a4:	68db      	ldr	r3, [r3, #12]
 801b6a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	3318      	adds	r3, #24
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	f7fe fd81 	bl	801a1b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	3304      	adds	r3, #4
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	f7fe fd7c 	bl	801a1b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b6bc:	68fb      	ldr	r3, [r7, #12]
 801b6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6c0:	2201      	movs	r2, #1
 801b6c2:	409a      	lsls	r2, r3
 801b6c4:	4b2b      	ldr	r3, [pc, #172]	; (801b774 <xTaskResumeAll+0x120>)
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	4313      	orrs	r3, r2
 801b6ca:	4a2a      	ldr	r2, [pc, #168]	; (801b774 <xTaskResumeAll+0x120>)
 801b6cc:	6013      	str	r3, [r2, #0]
 801b6ce:	68fb      	ldr	r3, [r7, #12]
 801b6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b6d2:	4613      	mov	r3, r2
 801b6d4:	009b      	lsls	r3, r3, #2
 801b6d6:	4413      	add	r3, r2
 801b6d8:	009b      	lsls	r3, r3, #2
 801b6da:	4a27      	ldr	r2, [pc, #156]	; (801b778 <xTaskResumeAll+0x124>)
 801b6dc:	441a      	add	r2, r3
 801b6de:	68fb      	ldr	r3, [r7, #12]
 801b6e0:	3304      	adds	r3, #4
 801b6e2:	4619      	mov	r1, r3
 801b6e4:	4610      	mov	r0, r2
 801b6e6:	f7fe fd08 	bl	801a0fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b6ea:	68fb      	ldr	r3, [r7, #12]
 801b6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b6ee:	4b23      	ldr	r3, [pc, #140]	; (801b77c <xTaskResumeAll+0x128>)
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6f4:	429a      	cmp	r2, r3
 801b6f6:	d302      	bcc.n	801b6fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801b6f8:	4b21      	ldr	r3, [pc, #132]	; (801b780 <xTaskResumeAll+0x12c>)
 801b6fa:	2201      	movs	r2, #1
 801b6fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b6fe:	4b1c      	ldr	r3, [pc, #112]	; (801b770 <xTaskResumeAll+0x11c>)
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d1cc      	bne.n	801b6a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d001      	beq.n	801b710 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b70c:	f000 fb74 	bl	801bdf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b710:	4b1c      	ldr	r3, [pc, #112]	; (801b784 <xTaskResumeAll+0x130>)
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d010      	beq.n	801b73e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b71c:	f000 f846 	bl	801b7ac <xTaskIncrementTick>
 801b720:	4603      	mov	r3, r0
 801b722:	2b00      	cmp	r3, #0
 801b724:	d002      	beq.n	801b72c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801b726:	4b16      	ldr	r3, [pc, #88]	; (801b780 <xTaskResumeAll+0x12c>)
 801b728:	2201      	movs	r2, #1
 801b72a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	3b01      	subs	r3, #1
 801b730:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	2b00      	cmp	r3, #0
 801b736:	d1f1      	bne.n	801b71c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801b738:	4b12      	ldr	r3, [pc, #72]	; (801b784 <xTaskResumeAll+0x130>)
 801b73a:	2200      	movs	r2, #0
 801b73c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b73e:	4b10      	ldr	r3, [pc, #64]	; (801b780 <xTaskResumeAll+0x12c>)
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	2b00      	cmp	r3, #0
 801b744:	d009      	beq.n	801b75a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b746:	2301      	movs	r3, #1
 801b748:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b74a:	4b0f      	ldr	r3, [pc, #60]	; (801b788 <xTaskResumeAll+0x134>)
 801b74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b750:	601a      	str	r2, [r3, #0]
 801b752:	f3bf 8f4f 	dsb	sy
 801b756:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b75a:	f001 fcbb 	bl	801d0d4 <vPortExitCritical>

	return xAlreadyYielded;
 801b75e:	68bb      	ldr	r3, [r7, #8]
}
 801b760:	4618      	mov	r0, r3
 801b762:	3710      	adds	r7, #16
 801b764:	46bd      	mov	sp, r7
 801b766:	bd80      	pop	{r7, pc}
 801b768:	2000ce48 	.word	0x2000ce48
 801b76c:	2000ce20 	.word	0x2000ce20
 801b770:	2000cde0 	.word	0x2000cde0
 801b774:	2000ce28 	.word	0x2000ce28
 801b778:	2000cd24 	.word	0x2000cd24
 801b77c:	2000cd20 	.word	0x2000cd20
 801b780:	2000ce34 	.word	0x2000ce34
 801b784:	2000ce30 	.word	0x2000ce30
 801b788:	e000ed04 	.word	0xe000ed04

0801b78c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b78c:	b480      	push	{r7}
 801b78e:	b083      	sub	sp, #12
 801b790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b792:	4b05      	ldr	r3, [pc, #20]	; (801b7a8 <xTaskGetTickCount+0x1c>)
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b798:	687b      	ldr	r3, [r7, #4]
}
 801b79a:	4618      	mov	r0, r3
 801b79c:	370c      	adds	r7, #12
 801b79e:	46bd      	mov	sp, r7
 801b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7a4:	4770      	bx	lr
 801b7a6:	bf00      	nop
 801b7a8:	2000ce24 	.word	0x2000ce24

0801b7ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b7ac:	b580      	push	{r7, lr}
 801b7ae:	b086      	sub	sp, #24
 801b7b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b7b2:	2300      	movs	r3, #0
 801b7b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b7b6:	4b4e      	ldr	r3, [pc, #312]	; (801b8f0 <xTaskIncrementTick+0x144>)
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	f040 808e 	bne.w	801b8dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b7c0:	4b4c      	ldr	r3, [pc, #304]	; (801b8f4 <xTaskIncrementTick+0x148>)
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	3301      	adds	r3, #1
 801b7c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b7c8:	4a4a      	ldr	r2, [pc, #296]	; (801b8f4 <xTaskIncrementTick+0x148>)
 801b7ca:	693b      	ldr	r3, [r7, #16]
 801b7cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b7ce:	693b      	ldr	r3, [r7, #16]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d120      	bne.n	801b816 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801b7d4:	4b48      	ldr	r3, [pc, #288]	; (801b8f8 <xTaskIncrementTick+0x14c>)
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	681b      	ldr	r3, [r3, #0]
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	d00a      	beq.n	801b7f4 <xTaskIncrementTick+0x48>
	__asm volatile
 801b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7e2:	f383 8811 	msr	BASEPRI, r3
 801b7e6:	f3bf 8f6f 	isb	sy
 801b7ea:	f3bf 8f4f 	dsb	sy
 801b7ee:	603b      	str	r3, [r7, #0]
}
 801b7f0:	bf00      	nop
 801b7f2:	e7fe      	b.n	801b7f2 <xTaskIncrementTick+0x46>
 801b7f4:	4b40      	ldr	r3, [pc, #256]	; (801b8f8 <xTaskIncrementTick+0x14c>)
 801b7f6:	681b      	ldr	r3, [r3, #0]
 801b7f8:	60fb      	str	r3, [r7, #12]
 801b7fa:	4b40      	ldr	r3, [pc, #256]	; (801b8fc <xTaskIncrementTick+0x150>)
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	4a3e      	ldr	r2, [pc, #248]	; (801b8f8 <xTaskIncrementTick+0x14c>)
 801b800:	6013      	str	r3, [r2, #0]
 801b802:	4a3e      	ldr	r2, [pc, #248]	; (801b8fc <xTaskIncrementTick+0x150>)
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	6013      	str	r3, [r2, #0]
 801b808:	4b3d      	ldr	r3, [pc, #244]	; (801b900 <xTaskIncrementTick+0x154>)
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	3301      	adds	r3, #1
 801b80e:	4a3c      	ldr	r2, [pc, #240]	; (801b900 <xTaskIncrementTick+0x154>)
 801b810:	6013      	str	r3, [r2, #0]
 801b812:	f000 faf1 	bl	801bdf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b816:	4b3b      	ldr	r3, [pc, #236]	; (801b904 <xTaskIncrementTick+0x158>)
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	693a      	ldr	r2, [r7, #16]
 801b81c:	429a      	cmp	r2, r3
 801b81e:	d348      	bcc.n	801b8b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b820:	4b35      	ldr	r3, [pc, #212]	; (801b8f8 <xTaskIncrementTick+0x14c>)
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d104      	bne.n	801b834 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b82a:	4b36      	ldr	r3, [pc, #216]	; (801b904 <xTaskIncrementTick+0x158>)
 801b82c:	f04f 32ff 	mov.w	r2, #4294967295
 801b830:	601a      	str	r2, [r3, #0]
					break;
 801b832:	e03e      	b.n	801b8b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b834:	4b30      	ldr	r3, [pc, #192]	; (801b8f8 <xTaskIncrementTick+0x14c>)
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	68db      	ldr	r3, [r3, #12]
 801b83a:	68db      	ldr	r3, [r3, #12]
 801b83c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b83e:	68bb      	ldr	r3, [r7, #8]
 801b840:	685b      	ldr	r3, [r3, #4]
 801b842:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b844:	693a      	ldr	r2, [r7, #16]
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	429a      	cmp	r2, r3
 801b84a:	d203      	bcs.n	801b854 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b84c:	4a2d      	ldr	r2, [pc, #180]	; (801b904 <xTaskIncrementTick+0x158>)
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b852:	e02e      	b.n	801b8b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b854:	68bb      	ldr	r3, [r7, #8]
 801b856:	3304      	adds	r3, #4
 801b858:	4618      	mov	r0, r3
 801b85a:	f7fe fcab 	bl	801a1b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b85e:	68bb      	ldr	r3, [r7, #8]
 801b860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b862:	2b00      	cmp	r3, #0
 801b864:	d004      	beq.n	801b870 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b866:	68bb      	ldr	r3, [r7, #8]
 801b868:	3318      	adds	r3, #24
 801b86a:	4618      	mov	r0, r3
 801b86c:	f7fe fca2 	bl	801a1b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b870:	68bb      	ldr	r3, [r7, #8]
 801b872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b874:	2201      	movs	r2, #1
 801b876:	409a      	lsls	r2, r3
 801b878:	4b23      	ldr	r3, [pc, #140]	; (801b908 <xTaskIncrementTick+0x15c>)
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	4313      	orrs	r3, r2
 801b87e:	4a22      	ldr	r2, [pc, #136]	; (801b908 <xTaskIncrementTick+0x15c>)
 801b880:	6013      	str	r3, [r2, #0]
 801b882:	68bb      	ldr	r3, [r7, #8]
 801b884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b886:	4613      	mov	r3, r2
 801b888:	009b      	lsls	r3, r3, #2
 801b88a:	4413      	add	r3, r2
 801b88c:	009b      	lsls	r3, r3, #2
 801b88e:	4a1f      	ldr	r2, [pc, #124]	; (801b90c <xTaskIncrementTick+0x160>)
 801b890:	441a      	add	r2, r3
 801b892:	68bb      	ldr	r3, [r7, #8]
 801b894:	3304      	adds	r3, #4
 801b896:	4619      	mov	r1, r3
 801b898:	4610      	mov	r0, r2
 801b89a:	f7fe fc2e 	bl	801a0fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b89e:	68bb      	ldr	r3, [r7, #8]
 801b8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b8a2:	4b1b      	ldr	r3, [pc, #108]	; (801b910 <xTaskIncrementTick+0x164>)
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8a8:	429a      	cmp	r2, r3
 801b8aa:	d3b9      	bcc.n	801b820 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801b8ac:	2301      	movs	r3, #1
 801b8ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b8b0:	e7b6      	b.n	801b820 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b8b2:	4b17      	ldr	r3, [pc, #92]	; (801b910 <xTaskIncrementTick+0x164>)
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b8b8:	4914      	ldr	r1, [pc, #80]	; (801b90c <xTaskIncrementTick+0x160>)
 801b8ba:	4613      	mov	r3, r2
 801b8bc:	009b      	lsls	r3, r3, #2
 801b8be:	4413      	add	r3, r2
 801b8c0:	009b      	lsls	r3, r3, #2
 801b8c2:	440b      	add	r3, r1
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	2b01      	cmp	r3, #1
 801b8c8:	d901      	bls.n	801b8ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801b8ca:	2301      	movs	r3, #1
 801b8cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b8ce:	4b11      	ldr	r3, [pc, #68]	; (801b914 <xTaskIncrementTick+0x168>)
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d007      	beq.n	801b8e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801b8d6:	2301      	movs	r3, #1
 801b8d8:	617b      	str	r3, [r7, #20]
 801b8da:	e004      	b.n	801b8e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b8dc:	4b0e      	ldr	r3, [pc, #56]	; (801b918 <xTaskIncrementTick+0x16c>)
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	3301      	adds	r3, #1
 801b8e2:	4a0d      	ldr	r2, [pc, #52]	; (801b918 <xTaskIncrementTick+0x16c>)
 801b8e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b8e6:	697b      	ldr	r3, [r7, #20]
}
 801b8e8:	4618      	mov	r0, r3
 801b8ea:	3718      	adds	r7, #24
 801b8ec:	46bd      	mov	sp, r7
 801b8ee:	bd80      	pop	{r7, pc}
 801b8f0:	2000ce48 	.word	0x2000ce48
 801b8f4:	2000ce24 	.word	0x2000ce24
 801b8f8:	2000cdd8 	.word	0x2000cdd8
 801b8fc:	2000cddc 	.word	0x2000cddc
 801b900:	2000ce38 	.word	0x2000ce38
 801b904:	2000ce40 	.word	0x2000ce40
 801b908:	2000ce28 	.word	0x2000ce28
 801b90c:	2000cd24 	.word	0x2000cd24
 801b910:	2000cd20 	.word	0x2000cd20
 801b914:	2000ce34 	.word	0x2000ce34
 801b918:	2000ce30 	.word	0x2000ce30

0801b91c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b91c:	b580      	push	{r7, lr}
 801b91e:	b086      	sub	sp, #24
 801b920:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b922:	4b35      	ldr	r3, [pc, #212]	; (801b9f8 <vTaskSwitchContext+0xdc>)
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	2b00      	cmp	r3, #0
 801b928:	d003      	beq.n	801b932 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b92a:	4b34      	ldr	r3, [pc, #208]	; (801b9fc <vTaskSwitchContext+0xe0>)
 801b92c:	2201      	movs	r2, #1
 801b92e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b930:	e05d      	b.n	801b9ee <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 801b932:	4b32      	ldr	r3, [pc, #200]	; (801b9fc <vTaskSwitchContext+0xe0>)
 801b934:	2200      	movs	r2, #0
 801b936:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801b938:	f7f2 fb0c 	bl	800df54 <getRunTimeCounterValue>
 801b93c:	4603      	mov	r3, r0
 801b93e:	4a30      	ldr	r2, [pc, #192]	; (801ba00 <vTaskSwitchContext+0xe4>)
 801b940:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801b942:	4b2f      	ldr	r3, [pc, #188]	; (801ba00 <vTaskSwitchContext+0xe4>)
 801b944:	681a      	ldr	r2, [r3, #0]
 801b946:	4b2f      	ldr	r3, [pc, #188]	; (801ba04 <vTaskSwitchContext+0xe8>)
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	429a      	cmp	r2, r3
 801b94c:	d909      	bls.n	801b962 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801b94e:	4b2e      	ldr	r3, [pc, #184]	; (801ba08 <vTaskSwitchContext+0xec>)
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801b954:	4a2a      	ldr	r2, [pc, #168]	; (801ba00 <vTaskSwitchContext+0xe4>)
 801b956:	6810      	ldr	r0, [r2, #0]
 801b958:	4a2a      	ldr	r2, [pc, #168]	; (801ba04 <vTaskSwitchContext+0xe8>)
 801b95a:	6812      	ldr	r2, [r2, #0]
 801b95c:	1a82      	subs	r2, r0, r2
 801b95e:	440a      	add	r2, r1
 801b960:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 801b962:	4b27      	ldr	r3, [pc, #156]	; (801ba00 <vTaskSwitchContext+0xe4>)
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	4a27      	ldr	r2, [pc, #156]	; (801ba04 <vTaskSwitchContext+0xe8>)
 801b968:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b96a:	4b28      	ldr	r3, [pc, #160]	; (801ba0c <vTaskSwitchContext+0xf0>)
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	fab3 f383 	clz	r3, r3
 801b976:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801b978:	7afb      	ldrb	r3, [r7, #11]
 801b97a:	f1c3 031f 	rsb	r3, r3, #31
 801b97e:	617b      	str	r3, [r7, #20]
 801b980:	4923      	ldr	r1, [pc, #140]	; (801ba10 <vTaskSwitchContext+0xf4>)
 801b982:	697a      	ldr	r2, [r7, #20]
 801b984:	4613      	mov	r3, r2
 801b986:	009b      	lsls	r3, r3, #2
 801b988:	4413      	add	r3, r2
 801b98a:	009b      	lsls	r3, r3, #2
 801b98c:	440b      	add	r3, r1
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d10a      	bne.n	801b9aa <vTaskSwitchContext+0x8e>
	__asm volatile
 801b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b998:	f383 8811 	msr	BASEPRI, r3
 801b99c:	f3bf 8f6f 	isb	sy
 801b9a0:	f3bf 8f4f 	dsb	sy
 801b9a4:	607b      	str	r3, [r7, #4]
}
 801b9a6:	bf00      	nop
 801b9a8:	e7fe      	b.n	801b9a8 <vTaskSwitchContext+0x8c>
 801b9aa:	697a      	ldr	r2, [r7, #20]
 801b9ac:	4613      	mov	r3, r2
 801b9ae:	009b      	lsls	r3, r3, #2
 801b9b0:	4413      	add	r3, r2
 801b9b2:	009b      	lsls	r3, r3, #2
 801b9b4:	4a16      	ldr	r2, [pc, #88]	; (801ba10 <vTaskSwitchContext+0xf4>)
 801b9b6:	4413      	add	r3, r2
 801b9b8:	613b      	str	r3, [r7, #16]
 801b9ba:	693b      	ldr	r3, [r7, #16]
 801b9bc:	685b      	ldr	r3, [r3, #4]
 801b9be:	685a      	ldr	r2, [r3, #4]
 801b9c0:	693b      	ldr	r3, [r7, #16]
 801b9c2:	605a      	str	r2, [r3, #4]
 801b9c4:	693b      	ldr	r3, [r7, #16]
 801b9c6:	685a      	ldr	r2, [r3, #4]
 801b9c8:	693b      	ldr	r3, [r7, #16]
 801b9ca:	3308      	adds	r3, #8
 801b9cc:	429a      	cmp	r2, r3
 801b9ce:	d104      	bne.n	801b9da <vTaskSwitchContext+0xbe>
 801b9d0:	693b      	ldr	r3, [r7, #16]
 801b9d2:	685b      	ldr	r3, [r3, #4]
 801b9d4:	685a      	ldr	r2, [r3, #4]
 801b9d6:	693b      	ldr	r3, [r7, #16]
 801b9d8:	605a      	str	r2, [r3, #4]
 801b9da:	693b      	ldr	r3, [r7, #16]
 801b9dc:	685b      	ldr	r3, [r3, #4]
 801b9de:	68db      	ldr	r3, [r3, #12]
 801b9e0:	4a09      	ldr	r2, [pc, #36]	; (801ba08 <vTaskSwitchContext+0xec>)
 801b9e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b9e4:	4b08      	ldr	r3, [pc, #32]	; (801ba08 <vTaskSwitchContext+0xec>)
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	3350      	adds	r3, #80	; 0x50
 801b9ea:	4a0a      	ldr	r2, [pc, #40]	; (801ba14 <vTaskSwitchContext+0xf8>)
 801b9ec:	6013      	str	r3, [r2, #0]
}
 801b9ee:	bf00      	nop
 801b9f0:	3718      	adds	r7, #24
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	bd80      	pop	{r7, pc}
 801b9f6:	bf00      	nop
 801b9f8:	2000ce48 	.word	0x2000ce48
 801b9fc:	2000ce34 	.word	0x2000ce34
 801ba00:	2000ce50 	.word	0x2000ce50
 801ba04:	2000ce4c 	.word	0x2000ce4c
 801ba08:	2000cd20 	.word	0x2000cd20
 801ba0c:	2000ce28 	.word	0x2000ce28
 801ba10:	2000cd24 	.word	0x2000cd24
 801ba14:	20000100 	.word	0x20000100

0801ba18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	b084      	sub	sp, #16
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
 801ba20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d10a      	bne.n	801ba3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801ba28:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba2c:	f383 8811 	msr	BASEPRI, r3
 801ba30:	f3bf 8f6f 	isb	sy
 801ba34:	f3bf 8f4f 	dsb	sy
 801ba38:	60fb      	str	r3, [r7, #12]
}
 801ba3a:	bf00      	nop
 801ba3c:	e7fe      	b.n	801ba3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ba3e:	4b07      	ldr	r3, [pc, #28]	; (801ba5c <vTaskPlaceOnEventList+0x44>)
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	3318      	adds	r3, #24
 801ba44:	4619      	mov	r1, r3
 801ba46:	6878      	ldr	r0, [r7, #4]
 801ba48:	f7fe fb7b 	bl	801a142 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801ba4c:	2101      	movs	r1, #1
 801ba4e:	6838      	ldr	r0, [r7, #0]
 801ba50:	f000 fdb0 	bl	801c5b4 <prvAddCurrentTaskToDelayedList>
}
 801ba54:	bf00      	nop
 801ba56:	3710      	adds	r7, #16
 801ba58:	46bd      	mov	sp, r7
 801ba5a:	bd80      	pop	{r7, pc}
 801ba5c:	2000cd20 	.word	0x2000cd20

0801ba60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ba60:	b580      	push	{r7, lr}
 801ba62:	b086      	sub	sp, #24
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	60f8      	str	r0, [r7, #12]
 801ba68:	60b9      	str	r1, [r7, #8]
 801ba6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d10a      	bne.n	801ba88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801ba72:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba76:	f383 8811 	msr	BASEPRI, r3
 801ba7a:	f3bf 8f6f 	isb	sy
 801ba7e:	f3bf 8f4f 	dsb	sy
 801ba82:	617b      	str	r3, [r7, #20]
}
 801ba84:	bf00      	nop
 801ba86:	e7fe      	b.n	801ba86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ba88:	4b0a      	ldr	r3, [pc, #40]	; (801bab4 <vTaskPlaceOnEventListRestricted+0x54>)
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	3318      	adds	r3, #24
 801ba8e:	4619      	mov	r1, r3
 801ba90:	68f8      	ldr	r0, [r7, #12]
 801ba92:	f7fe fb32 	bl	801a0fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d002      	beq.n	801baa2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801ba9c:	f04f 33ff 	mov.w	r3, #4294967295
 801baa0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801baa2:	6879      	ldr	r1, [r7, #4]
 801baa4:	68b8      	ldr	r0, [r7, #8]
 801baa6:	f000 fd85 	bl	801c5b4 <prvAddCurrentTaskToDelayedList>
	}
 801baaa:	bf00      	nop
 801baac:	3718      	adds	r7, #24
 801baae:	46bd      	mov	sp, r7
 801bab0:	bd80      	pop	{r7, pc}
 801bab2:	bf00      	nop
 801bab4:	2000cd20 	.word	0x2000cd20

0801bab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801bab8:	b580      	push	{r7, lr}
 801baba:	b086      	sub	sp, #24
 801babc:	af00      	add	r7, sp, #0
 801babe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	68db      	ldr	r3, [r3, #12]
 801bac4:	68db      	ldr	r3, [r3, #12]
 801bac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801bac8:	693b      	ldr	r3, [r7, #16]
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d10a      	bne.n	801bae4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bad2:	f383 8811 	msr	BASEPRI, r3
 801bad6:	f3bf 8f6f 	isb	sy
 801bada:	f3bf 8f4f 	dsb	sy
 801bade:	60fb      	str	r3, [r7, #12]
}
 801bae0:	bf00      	nop
 801bae2:	e7fe      	b.n	801bae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801bae4:	693b      	ldr	r3, [r7, #16]
 801bae6:	3318      	adds	r3, #24
 801bae8:	4618      	mov	r0, r3
 801baea:	f7fe fb63 	bl	801a1b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801baee:	4b1d      	ldr	r3, [pc, #116]	; (801bb64 <xTaskRemoveFromEventList+0xac>)
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d11c      	bne.n	801bb30 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801baf6:	693b      	ldr	r3, [r7, #16]
 801baf8:	3304      	adds	r3, #4
 801bafa:	4618      	mov	r0, r3
 801bafc:	f7fe fb5a 	bl	801a1b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801bb00:	693b      	ldr	r3, [r7, #16]
 801bb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb04:	2201      	movs	r2, #1
 801bb06:	409a      	lsls	r2, r3
 801bb08:	4b17      	ldr	r3, [pc, #92]	; (801bb68 <xTaskRemoveFromEventList+0xb0>)
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	4313      	orrs	r3, r2
 801bb0e:	4a16      	ldr	r2, [pc, #88]	; (801bb68 <xTaskRemoveFromEventList+0xb0>)
 801bb10:	6013      	str	r3, [r2, #0]
 801bb12:	693b      	ldr	r3, [r7, #16]
 801bb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb16:	4613      	mov	r3, r2
 801bb18:	009b      	lsls	r3, r3, #2
 801bb1a:	4413      	add	r3, r2
 801bb1c:	009b      	lsls	r3, r3, #2
 801bb1e:	4a13      	ldr	r2, [pc, #76]	; (801bb6c <xTaskRemoveFromEventList+0xb4>)
 801bb20:	441a      	add	r2, r3
 801bb22:	693b      	ldr	r3, [r7, #16]
 801bb24:	3304      	adds	r3, #4
 801bb26:	4619      	mov	r1, r3
 801bb28:	4610      	mov	r0, r2
 801bb2a:	f7fe fae6 	bl	801a0fa <vListInsertEnd>
 801bb2e:	e005      	b.n	801bb3c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801bb30:	693b      	ldr	r3, [r7, #16]
 801bb32:	3318      	adds	r3, #24
 801bb34:	4619      	mov	r1, r3
 801bb36:	480e      	ldr	r0, [pc, #56]	; (801bb70 <xTaskRemoveFromEventList+0xb8>)
 801bb38:	f7fe fadf 	bl	801a0fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801bb3c:	693b      	ldr	r3, [r7, #16]
 801bb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb40:	4b0c      	ldr	r3, [pc, #48]	; (801bb74 <xTaskRemoveFromEventList+0xbc>)
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb46:	429a      	cmp	r2, r3
 801bb48:	d905      	bls.n	801bb56 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801bb4a:	2301      	movs	r3, #1
 801bb4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801bb4e:	4b0a      	ldr	r3, [pc, #40]	; (801bb78 <xTaskRemoveFromEventList+0xc0>)
 801bb50:	2201      	movs	r2, #1
 801bb52:	601a      	str	r2, [r3, #0]
 801bb54:	e001      	b.n	801bb5a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801bb56:	2300      	movs	r3, #0
 801bb58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801bb5a:	697b      	ldr	r3, [r7, #20]
}
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	3718      	adds	r7, #24
 801bb60:	46bd      	mov	sp, r7
 801bb62:	bd80      	pop	{r7, pc}
 801bb64:	2000ce48 	.word	0x2000ce48
 801bb68:	2000ce28 	.word	0x2000ce28
 801bb6c:	2000cd24 	.word	0x2000cd24
 801bb70:	2000cde0 	.word	0x2000cde0
 801bb74:	2000cd20 	.word	0x2000cd20
 801bb78:	2000ce34 	.word	0x2000ce34

0801bb7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801bb7c:	b480      	push	{r7}
 801bb7e:	b083      	sub	sp, #12
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801bb84:	4b06      	ldr	r3, [pc, #24]	; (801bba0 <vTaskInternalSetTimeOutState+0x24>)
 801bb86:	681a      	ldr	r2, [r3, #0]
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801bb8c:	4b05      	ldr	r3, [pc, #20]	; (801bba4 <vTaskInternalSetTimeOutState+0x28>)
 801bb8e:	681a      	ldr	r2, [r3, #0]
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	605a      	str	r2, [r3, #4]
}
 801bb94:	bf00      	nop
 801bb96:	370c      	adds	r7, #12
 801bb98:	46bd      	mov	sp, r7
 801bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb9e:	4770      	bx	lr
 801bba0:	2000ce38 	.word	0x2000ce38
 801bba4:	2000ce24 	.word	0x2000ce24

0801bba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801bba8:	b580      	push	{r7, lr}
 801bbaa:	b088      	sub	sp, #32
 801bbac:	af00      	add	r7, sp, #0
 801bbae:	6078      	str	r0, [r7, #4]
 801bbb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d10a      	bne.n	801bbce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801bbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbbc:	f383 8811 	msr	BASEPRI, r3
 801bbc0:	f3bf 8f6f 	isb	sy
 801bbc4:	f3bf 8f4f 	dsb	sy
 801bbc8:	613b      	str	r3, [r7, #16]
}
 801bbca:	bf00      	nop
 801bbcc:	e7fe      	b.n	801bbcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801bbce:	683b      	ldr	r3, [r7, #0]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	d10a      	bne.n	801bbea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbd8:	f383 8811 	msr	BASEPRI, r3
 801bbdc:	f3bf 8f6f 	isb	sy
 801bbe0:	f3bf 8f4f 	dsb	sy
 801bbe4:	60fb      	str	r3, [r7, #12]
}
 801bbe6:	bf00      	nop
 801bbe8:	e7fe      	b.n	801bbe8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801bbea:	f001 fa43 	bl	801d074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801bbee:	4b1d      	ldr	r3, [pc, #116]	; (801bc64 <xTaskCheckForTimeOut+0xbc>)
 801bbf0:	681b      	ldr	r3, [r3, #0]
 801bbf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	685b      	ldr	r3, [r3, #4]
 801bbf8:	69ba      	ldr	r2, [r7, #24]
 801bbfa:	1ad3      	subs	r3, r2, r3
 801bbfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801bbfe:	683b      	ldr	r3, [r7, #0]
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc06:	d102      	bne.n	801bc0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801bc08:	2300      	movs	r3, #0
 801bc0a:	61fb      	str	r3, [r7, #28]
 801bc0c:	e023      	b.n	801bc56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	681a      	ldr	r2, [r3, #0]
 801bc12:	4b15      	ldr	r3, [pc, #84]	; (801bc68 <xTaskCheckForTimeOut+0xc0>)
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	429a      	cmp	r2, r3
 801bc18:	d007      	beq.n	801bc2a <xTaskCheckForTimeOut+0x82>
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	685b      	ldr	r3, [r3, #4]
 801bc1e:	69ba      	ldr	r2, [r7, #24]
 801bc20:	429a      	cmp	r2, r3
 801bc22:	d302      	bcc.n	801bc2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801bc24:	2301      	movs	r3, #1
 801bc26:	61fb      	str	r3, [r7, #28]
 801bc28:	e015      	b.n	801bc56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801bc2a:	683b      	ldr	r3, [r7, #0]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	697a      	ldr	r2, [r7, #20]
 801bc30:	429a      	cmp	r2, r3
 801bc32:	d20b      	bcs.n	801bc4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801bc34:	683b      	ldr	r3, [r7, #0]
 801bc36:	681a      	ldr	r2, [r3, #0]
 801bc38:	697b      	ldr	r3, [r7, #20]
 801bc3a:	1ad2      	subs	r2, r2, r3
 801bc3c:	683b      	ldr	r3, [r7, #0]
 801bc3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801bc40:	6878      	ldr	r0, [r7, #4]
 801bc42:	f7ff ff9b 	bl	801bb7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801bc46:	2300      	movs	r3, #0
 801bc48:	61fb      	str	r3, [r7, #28]
 801bc4a:	e004      	b.n	801bc56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801bc4c:	683b      	ldr	r3, [r7, #0]
 801bc4e:	2200      	movs	r2, #0
 801bc50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801bc52:	2301      	movs	r3, #1
 801bc54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801bc56:	f001 fa3d 	bl	801d0d4 <vPortExitCritical>

	return xReturn;
 801bc5a:	69fb      	ldr	r3, [r7, #28]
}
 801bc5c:	4618      	mov	r0, r3
 801bc5e:	3720      	adds	r7, #32
 801bc60:	46bd      	mov	sp, r7
 801bc62:	bd80      	pop	{r7, pc}
 801bc64:	2000ce24 	.word	0x2000ce24
 801bc68:	2000ce38 	.word	0x2000ce38

0801bc6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801bc6c:	b480      	push	{r7}
 801bc6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801bc70:	4b03      	ldr	r3, [pc, #12]	; (801bc80 <vTaskMissedYield+0x14>)
 801bc72:	2201      	movs	r2, #1
 801bc74:	601a      	str	r2, [r3, #0]
}
 801bc76:	bf00      	nop
 801bc78:	46bd      	mov	sp, r7
 801bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc7e:	4770      	bx	lr
 801bc80:	2000ce34 	.word	0x2000ce34

0801bc84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801bc84:	b580      	push	{r7, lr}
 801bc86:	b082      	sub	sp, #8
 801bc88:	af00      	add	r7, sp, #0
 801bc8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801bc8c:	f000 f852 	bl	801bd34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801bc90:	4b06      	ldr	r3, [pc, #24]	; (801bcac <prvIdleTask+0x28>)
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	2b01      	cmp	r3, #1
 801bc96:	d9f9      	bls.n	801bc8c <prvIdleTask+0x8>
			{
				taskYIELD();
 801bc98:	4b05      	ldr	r3, [pc, #20]	; (801bcb0 <prvIdleTask+0x2c>)
 801bc9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bc9e:	601a      	str	r2, [r3, #0]
 801bca0:	f3bf 8f4f 	dsb	sy
 801bca4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801bca8:	e7f0      	b.n	801bc8c <prvIdleTask+0x8>
 801bcaa:	bf00      	nop
 801bcac:	2000cd24 	.word	0x2000cd24
 801bcb0:	e000ed04 	.word	0xe000ed04

0801bcb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b082      	sub	sp, #8
 801bcb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801bcba:	2300      	movs	r3, #0
 801bcbc:	607b      	str	r3, [r7, #4]
 801bcbe:	e00c      	b.n	801bcda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801bcc0:	687a      	ldr	r2, [r7, #4]
 801bcc2:	4613      	mov	r3, r2
 801bcc4:	009b      	lsls	r3, r3, #2
 801bcc6:	4413      	add	r3, r2
 801bcc8:	009b      	lsls	r3, r3, #2
 801bcca:	4a12      	ldr	r2, [pc, #72]	; (801bd14 <prvInitialiseTaskLists+0x60>)
 801bccc:	4413      	add	r3, r2
 801bcce:	4618      	mov	r0, r3
 801bcd0:	f7fe f9e6 	bl	801a0a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	3301      	adds	r3, #1
 801bcd8:	607b      	str	r3, [r7, #4]
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	2b06      	cmp	r3, #6
 801bcde:	d9ef      	bls.n	801bcc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801bce0:	480d      	ldr	r0, [pc, #52]	; (801bd18 <prvInitialiseTaskLists+0x64>)
 801bce2:	f7fe f9dd 	bl	801a0a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801bce6:	480d      	ldr	r0, [pc, #52]	; (801bd1c <prvInitialiseTaskLists+0x68>)
 801bce8:	f7fe f9da 	bl	801a0a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801bcec:	480c      	ldr	r0, [pc, #48]	; (801bd20 <prvInitialiseTaskLists+0x6c>)
 801bcee:	f7fe f9d7 	bl	801a0a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801bcf2:	480c      	ldr	r0, [pc, #48]	; (801bd24 <prvInitialiseTaskLists+0x70>)
 801bcf4:	f7fe f9d4 	bl	801a0a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801bcf8:	480b      	ldr	r0, [pc, #44]	; (801bd28 <prvInitialiseTaskLists+0x74>)
 801bcfa:	f7fe f9d1 	bl	801a0a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801bcfe:	4b0b      	ldr	r3, [pc, #44]	; (801bd2c <prvInitialiseTaskLists+0x78>)
 801bd00:	4a05      	ldr	r2, [pc, #20]	; (801bd18 <prvInitialiseTaskLists+0x64>)
 801bd02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801bd04:	4b0a      	ldr	r3, [pc, #40]	; (801bd30 <prvInitialiseTaskLists+0x7c>)
 801bd06:	4a05      	ldr	r2, [pc, #20]	; (801bd1c <prvInitialiseTaskLists+0x68>)
 801bd08:	601a      	str	r2, [r3, #0]
}
 801bd0a:	bf00      	nop
 801bd0c:	3708      	adds	r7, #8
 801bd0e:	46bd      	mov	sp, r7
 801bd10:	bd80      	pop	{r7, pc}
 801bd12:	bf00      	nop
 801bd14:	2000cd24 	.word	0x2000cd24
 801bd18:	2000cdb0 	.word	0x2000cdb0
 801bd1c:	2000cdc4 	.word	0x2000cdc4
 801bd20:	2000cde0 	.word	0x2000cde0
 801bd24:	2000cdf4 	.word	0x2000cdf4
 801bd28:	2000ce0c 	.word	0x2000ce0c
 801bd2c:	2000cdd8 	.word	0x2000cdd8
 801bd30:	2000cddc 	.word	0x2000cddc

0801bd34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b082      	sub	sp, #8
 801bd38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801bd3a:	e019      	b.n	801bd70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801bd3c:	f001 f99a 	bl	801d074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bd40:	4b10      	ldr	r3, [pc, #64]	; (801bd84 <prvCheckTasksWaitingTermination+0x50>)
 801bd42:	68db      	ldr	r3, [r3, #12]
 801bd44:	68db      	ldr	r3, [r3, #12]
 801bd46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	3304      	adds	r3, #4
 801bd4c:	4618      	mov	r0, r3
 801bd4e:	f7fe fa31 	bl	801a1b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801bd52:	4b0d      	ldr	r3, [pc, #52]	; (801bd88 <prvCheckTasksWaitingTermination+0x54>)
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	3b01      	subs	r3, #1
 801bd58:	4a0b      	ldr	r2, [pc, #44]	; (801bd88 <prvCheckTasksWaitingTermination+0x54>)
 801bd5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801bd5c:	4b0b      	ldr	r3, [pc, #44]	; (801bd8c <prvCheckTasksWaitingTermination+0x58>)
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	3b01      	subs	r3, #1
 801bd62:	4a0a      	ldr	r2, [pc, #40]	; (801bd8c <prvCheckTasksWaitingTermination+0x58>)
 801bd64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801bd66:	f001 f9b5 	bl	801d0d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801bd6a:	6878      	ldr	r0, [r7, #4]
 801bd6c:	f000 f810 	bl	801bd90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801bd70:	4b06      	ldr	r3, [pc, #24]	; (801bd8c <prvCheckTasksWaitingTermination+0x58>)
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d1e1      	bne.n	801bd3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801bd78:	bf00      	nop
 801bd7a:	bf00      	nop
 801bd7c:	3708      	adds	r7, #8
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	bd80      	pop	{r7, pc}
 801bd82:	bf00      	nop
 801bd84:	2000cdf4 	.word	0x2000cdf4
 801bd88:	2000ce20 	.word	0x2000ce20
 801bd8c:	2000ce08 	.word	0x2000ce08

0801bd90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801bd90:	b580      	push	{r7, lr}
 801bd92:	b084      	sub	sp, #16
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	3350      	adds	r3, #80	; 0x50
 801bd9c:	4618      	mov	r0, r3
 801bd9e:	f004 f8b5 	bl	801ff0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d108      	bne.n	801bdbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bdb0:	4618      	mov	r0, r3
 801bdb2:	f001 fa93 	bl	801d2dc <vPortFree>
				vPortFree( pxTCB );
 801bdb6:	6878      	ldr	r0, [r7, #4]
 801bdb8:	f001 fa90 	bl	801d2dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801bdbc:	e018      	b.n	801bdf0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 801bdc4:	2b01      	cmp	r3, #1
 801bdc6:	d103      	bne.n	801bdd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801bdc8:	6878      	ldr	r0, [r7, #4]
 801bdca:	f001 fa87 	bl	801d2dc <vPortFree>
	}
 801bdce:	e00f      	b.n	801bdf0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 801bdd6:	2b02      	cmp	r3, #2
 801bdd8:	d00a      	beq.n	801bdf0 <prvDeleteTCB+0x60>
	__asm volatile
 801bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bdde:	f383 8811 	msr	BASEPRI, r3
 801bde2:	f3bf 8f6f 	isb	sy
 801bde6:	f3bf 8f4f 	dsb	sy
 801bdea:	60fb      	str	r3, [r7, #12]
}
 801bdec:	bf00      	nop
 801bdee:	e7fe      	b.n	801bdee <prvDeleteTCB+0x5e>
	}
 801bdf0:	bf00      	nop
 801bdf2:	3710      	adds	r7, #16
 801bdf4:	46bd      	mov	sp, r7
 801bdf6:	bd80      	pop	{r7, pc}

0801bdf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801bdf8:	b480      	push	{r7}
 801bdfa:	b083      	sub	sp, #12
 801bdfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801bdfe:	4b0c      	ldr	r3, [pc, #48]	; (801be30 <prvResetNextTaskUnblockTime+0x38>)
 801be00:	681b      	ldr	r3, [r3, #0]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d104      	bne.n	801be12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801be08:	4b0a      	ldr	r3, [pc, #40]	; (801be34 <prvResetNextTaskUnblockTime+0x3c>)
 801be0a:	f04f 32ff 	mov.w	r2, #4294967295
 801be0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801be10:	e008      	b.n	801be24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801be12:	4b07      	ldr	r3, [pc, #28]	; (801be30 <prvResetNextTaskUnblockTime+0x38>)
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	68db      	ldr	r3, [r3, #12]
 801be18:	68db      	ldr	r3, [r3, #12]
 801be1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	685b      	ldr	r3, [r3, #4]
 801be20:	4a04      	ldr	r2, [pc, #16]	; (801be34 <prvResetNextTaskUnblockTime+0x3c>)
 801be22:	6013      	str	r3, [r2, #0]
}
 801be24:	bf00      	nop
 801be26:	370c      	adds	r7, #12
 801be28:	46bd      	mov	sp, r7
 801be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be2e:	4770      	bx	lr
 801be30:	2000cdd8 	.word	0x2000cdd8
 801be34:	2000ce40 	.word	0x2000ce40

0801be38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801be38:	b480      	push	{r7}
 801be3a:	b083      	sub	sp, #12
 801be3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801be3e:	4b0b      	ldr	r3, [pc, #44]	; (801be6c <xTaskGetSchedulerState+0x34>)
 801be40:	681b      	ldr	r3, [r3, #0]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d102      	bne.n	801be4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801be46:	2301      	movs	r3, #1
 801be48:	607b      	str	r3, [r7, #4]
 801be4a:	e008      	b.n	801be5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801be4c:	4b08      	ldr	r3, [pc, #32]	; (801be70 <xTaskGetSchedulerState+0x38>)
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	2b00      	cmp	r3, #0
 801be52:	d102      	bne.n	801be5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801be54:	2302      	movs	r3, #2
 801be56:	607b      	str	r3, [r7, #4]
 801be58:	e001      	b.n	801be5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801be5a:	2300      	movs	r3, #0
 801be5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801be5e:	687b      	ldr	r3, [r7, #4]
	}
 801be60:	4618      	mov	r0, r3
 801be62:	370c      	adds	r7, #12
 801be64:	46bd      	mov	sp, r7
 801be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be6a:	4770      	bx	lr
 801be6c:	2000ce2c 	.word	0x2000ce2c
 801be70:	2000ce48 	.word	0x2000ce48

0801be74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801be74:	b580      	push	{r7, lr}
 801be76:	b084      	sub	sp, #16
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801be80:	2300      	movs	r3, #0
 801be82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d05e      	beq.n	801bf48 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801be8a:	68bb      	ldr	r3, [r7, #8]
 801be8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be8e:	4b31      	ldr	r3, [pc, #196]	; (801bf54 <xTaskPriorityInherit+0xe0>)
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be94:	429a      	cmp	r2, r3
 801be96:	d24e      	bcs.n	801bf36 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801be98:	68bb      	ldr	r3, [r7, #8]
 801be9a:	699b      	ldr	r3, [r3, #24]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	db06      	blt.n	801beae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bea0:	4b2c      	ldr	r3, [pc, #176]	; (801bf54 <xTaskPriorityInherit+0xe0>)
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bea6:	f1c3 0207 	rsb	r2, r3, #7
 801beaa:	68bb      	ldr	r3, [r7, #8]
 801beac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801beae:	68bb      	ldr	r3, [r7, #8]
 801beb0:	6959      	ldr	r1, [r3, #20]
 801beb2:	68bb      	ldr	r3, [r7, #8]
 801beb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801beb6:	4613      	mov	r3, r2
 801beb8:	009b      	lsls	r3, r3, #2
 801beba:	4413      	add	r3, r2
 801bebc:	009b      	lsls	r3, r3, #2
 801bebe:	4a26      	ldr	r2, [pc, #152]	; (801bf58 <xTaskPriorityInherit+0xe4>)
 801bec0:	4413      	add	r3, r2
 801bec2:	4299      	cmp	r1, r3
 801bec4:	d12f      	bne.n	801bf26 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bec6:	68bb      	ldr	r3, [r7, #8]
 801bec8:	3304      	adds	r3, #4
 801beca:	4618      	mov	r0, r3
 801becc:	f7fe f972 	bl	801a1b4 <uxListRemove>
 801bed0:	4603      	mov	r3, r0
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d10a      	bne.n	801beec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801bed6:	68bb      	ldr	r3, [r7, #8]
 801bed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801beda:	2201      	movs	r2, #1
 801bedc:	fa02 f303 	lsl.w	r3, r2, r3
 801bee0:	43da      	mvns	r2, r3
 801bee2:	4b1e      	ldr	r3, [pc, #120]	; (801bf5c <xTaskPriorityInherit+0xe8>)
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	4013      	ands	r3, r2
 801bee8:	4a1c      	ldr	r2, [pc, #112]	; (801bf5c <xTaskPriorityInherit+0xe8>)
 801beea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801beec:	4b19      	ldr	r3, [pc, #100]	; (801bf54 <xTaskPriorityInherit+0xe0>)
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bef2:	68bb      	ldr	r3, [r7, #8]
 801bef4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801bef6:	68bb      	ldr	r3, [r7, #8]
 801bef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801befa:	2201      	movs	r2, #1
 801befc:	409a      	lsls	r2, r3
 801befe:	4b17      	ldr	r3, [pc, #92]	; (801bf5c <xTaskPriorityInherit+0xe8>)
 801bf00:	681b      	ldr	r3, [r3, #0]
 801bf02:	4313      	orrs	r3, r2
 801bf04:	4a15      	ldr	r2, [pc, #84]	; (801bf5c <xTaskPriorityInherit+0xe8>)
 801bf06:	6013      	str	r3, [r2, #0]
 801bf08:	68bb      	ldr	r3, [r7, #8]
 801bf0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bf0c:	4613      	mov	r3, r2
 801bf0e:	009b      	lsls	r3, r3, #2
 801bf10:	4413      	add	r3, r2
 801bf12:	009b      	lsls	r3, r3, #2
 801bf14:	4a10      	ldr	r2, [pc, #64]	; (801bf58 <xTaskPriorityInherit+0xe4>)
 801bf16:	441a      	add	r2, r3
 801bf18:	68bb      	ldr	r3, [r7, #8]
 801bf1a:	3304      	adds	r3, #4
 801bf1c:	4619      	mov	r1, r3
 801bf1e:	4610      	mov	r0, r2
 801bf20:	f7fe f8eb 	bl	801a0fa <vListInsertEnd>
 801bf24:	e004      	b.n	801bf30 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801bf26:	4b0b      	ldr	r3, [pc, #44]	; (801bf54 <xTaskPriorityInherit+0xe0>)
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bf2c:	68bb      	ldr	r3, [r7, #8]
 801bf2e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801bf30:	2301      	movs	r3, #1
 801bf32:	60fb      	str	r3, [r7, #12]
 801bf34:	e008      	b.n	801bf48 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801bf36:	68bb      	ldr	r3, [r7, #8]
 801bf38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bf3a:	4b06      	ldr	r3, [pc, #24]	; (801bf54 <xTaskPriorityInherit+0xe0>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf40:	429a      	cmp	r2, r3
 801bf42:	d201      	bcs.n	801bf48 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801bf44:	2301      	movs	r3, #1
 801bf46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bf48:	68fb      	ldr	r3, [r7, #12]
	}
 801bf4a:	4618      	mov	r0, r3
 801bf4c:	3710      	adds	r7, #16
 801bf4e:	46bd      	mov	sp, r7
 801bf50:	bd80      	pop	{r7, pc}
 801bf52:	bf00      	nop
 801bf54:	2000cd20 	.word	0x2000cd20
 801bf58:	2000cd24 	.word	0x2000cd24
 801bf5c:	2000ce28 	.word	0x2000ce28

0801bf60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801bf60:	b580      	push	{r7, lr}
 801bf62:	b086      	sub	sp, #24
 801bf64:	af00      	add	r7, sp, #0
 801bf66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801bf6c:	2300      	movs	r3, #0
 801bf6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d06e      	beq.n	801c054 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801bf76:	4b3a      	ldr	r3, [pc, #232]	; (801c060 <xTaskPriorityDisinherit+0x100>)
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	693a      	ldr	r2, [r7, #16]
 801bf7c:	429a      	cmp	r2, r3
 801bf7e:	d00a      	beq.n	801bf96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf84:	f383 8811 	msr	BASEPRI, r3
 801bf88:	f3bf 8f6f 	isb	sy
 801bf8c:	f3bf 8f4f 	dsb	sy
 801bf90:	60fb      	str	r3, [r7, #12]
}
 801bf92:	bf00      	nop
 801bf94:	e7fe      	b.n	801bf94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801bf96:	693b      	ldr	r3, [r7, #16]
 801bf98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d10a      	bne.n	801bfb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801bf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bfa2:	f383 8811 	msr	BASEPRI, r3
 801bfa6:	f3bf 8f6f 	isb	sy
 801bfaa:	f3bf 8f4f 	dsb	sy
 801bfae:	60bb      	str	r3, [r7, #8]
}
 801bfb0:	bf00      	nop
 801bfb2:	e7fe      	b.n	801bfb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801bfb4:	693b      	ldr	r3, [r7, #16]
 801bfb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bfb8:	1e5a      	subs	r2, r3, #1
 801bfba:	693b      	ldr	r3, [r7, #16]
 801bfbc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801bfbe:	693b      	ldr	r3, [r7, #16]
 801bfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bfc2:	693b      	ldr	r3, [r7, #16]
 801bfc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bfc6:	429a      	cmp	r2, r3
 801bfc8:	d044      	beq.n	801c054 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801bfca:	693b      	ldr	r3, [r7, #16]
 801bfcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d140      	bne.n	801c054 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bfd2:	693b      	ldr	r3, [r7, #16]
 801bfd4:	3304      	adds	r3, #4
 801bfd6:	4618      	mov	r0, r3
 801bfd8:	f7fe f8ec 	bl	801a1b4 <uxListRemove>
 801bfdc:	4603      	mov	r3, r0
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d115      	bne.n	801c00e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801bfe2:	693b      	ldr	r3, [r7, #16]
 801bfe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bfe6:	491f      	ldr	r1, [pc, #124]	; (801c064 <xTaskPriorityDisinherit+0x104>)
 801bfe8:	4613      	mov	r3, r2
 801bfea:	009b      	lsls	r3, r3, #2
 801bfec:	4413      	add	r3, r2
 801bfee:	009b      	lsls	r3, r3, #2
 801bff0:	440b      	add	r3, r1
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d10a      	bne.n	801c00e <xTaskPriorityDisinherit+0xae>
 801bff8:	693b      	ldr	r3, [r7, #16]
 801bffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bffc:	2201      	movs	r2, #1
 801bffe:	fa02 f303 	lsl.w	r3, r2, r3
 801c002:	43da      	mvns	r2, r3
 801c004:	4b18      	ldr	r3, [pc, #96]	; (801c068 <xTaskPriorityDisinherit+0x108>)
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	4013      	ands	r3, r2
 801c00a:	4a17      	ldr	r2, [pc, #92]	; (801c068 <xTaskPriorityDisinherit+0x108>)
 801c00c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801c00e:	693b      	ldr	r3, [r7, #16]
 801c010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c012:	693b      	ldr	r3, [r7, #16]
 801c014:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c016:	693b      	ldr	r3, [r7, #16]
 801c018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c01a:	f1c3 0207 	rsb	r2, r3, #7
 801c01e:	693b      	ldr	r3, [r7, #16]
 801c020:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801c022:	693b      	ldr	r3, [r7, #16]
 801c024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c026:	2201      	movs	r2, #1
 801c028:	409a      	lsls	r2, r3
 801c02a:	4b0f      	ldr	r3, [pc, #60]	; (801c068 <xTaskPriorityDisinherit+0x108>)
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	4313      	orrs	r3, r2
 801c030:	4a0d      	ldr	r2, [pc, #52]	; (801c068 <xTaskPriorityDisinherit+0x108>)
 801c032:	6013      	str	r3, [r2, #0]
 801c034:	693b      	ldr	r3, [r7, #16]
 801c036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c038:	4613      	mov	r3, r2
 801c03a:	009b      	lsls	r3, r3, #2
 801c03c:	4413      	add	r3, r2
 801c03e:	009b      	lsls	r3, r3, #2
 801c040:	4a08      	ldr	r2, [pc, #32]	; (801c064 <xTaskPriorityDisinherit+0x104>)
 801c042:	441a      	add	r2, r3
 801c044:	693b      	ldr	r3, [r7, #16]
 801c046:	3304      	adds	r3, #4
 801c048:	4619      	mov	r1, r3
 801c04a:	4610      	mov	r0, r2
 801c04c:	f7fe f855 	bl	801a0fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801c050:	2301      	movs	r3, #1
 801c052:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801c054:	697b      	ldr	r3, [r7, #20]
	}
 801c056:	4618      	mov	r0, r3
 801c058:	3718      	adds	r7, #24
 801c05a:	46bd      	mov	sp, r7
 801c05c:	bd80      	pop	{r7, pc}
 801c05e:	bf00      	nop
 801c060:	2000cd20 	.word	0x2000cd20
 801c064:	2000cd24 	.word	0x2000cd24
 801c068:	2000ce28 	.word	0x2000ce28

0801c06c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801c06c:	b580      	push	{r7, lr}
 801c06e:	b088      	sub	sp, #32
 801c070:	af00      	add	r7, sp, #0
 801c072:	6078      	str	r0, [r7, #4]
 801c074:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801c07a:	2301      	movs	r3, #1
 801c07c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	2b00      	cmp	r3, #0
 801c082:	d077      	beq.n	801c174 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801c084:	69bb      	ldr	r3, [r7, #24]
 801c086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d10a      	bne.n	801c0a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801c08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c090:	f383 8811 	msr	BASEPRI, r3
 801c094:	f3bf 8f6f 	isb	sy
 801c098:	f3bf 8f4f 	dsb	sy
 801c09c:	60fb      	str	r3, [r7, #12]
}
 801c09e:	bf00      	nop
 801c0a0:	e7fe      	b.n	801c0a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801c0a2:	69bb      	ldr	r3, [r7, #24]
 801c0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0a6:	683a      	ldr	r2, [r7, #0]
 801c0a8:	429a      	cmp	r2, r3
 801c0aa:	d902      	bls.n	801c0b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801c0ac:	683b      	ldr	r3, [r7, #0]
 801c0ae:	61fb      	str	r3, [r7, #28]
 801c0b0:	e002      	b.n	801c0b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801c0b2:	69bb      	ldr	r3, [r7, #24]
 801c0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801c0b8:	69bb      	ldr	r3, [r7, #24]
 801c0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0bc:	69fa      	ldr	r2, [r7, #28]
 801c0be:	429a      	cmp	r2, r3
 801c0c0:	d058      	beq.n	801c174 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801c0c2:	69bb      	ldr	r3, [r7, #24]
 801c0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c0c6:	697a      	ldr	r2, [r7, #20]
 801c0c8:	429a      	cmp	r2, r3
 801c0ca:	d153      	bne.n	801c174 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801c0cc:	4b2b      	ldr	r3, [pc, #172]	; (801c17c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	69ba      	ldr	r2, [r7, #24]
 801c0d2:	429a      	cmp	r2, r3
 801c0d4:	d10a      	bne.n	801c0ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801c0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c0da:	f383 8811 	msr	BASEPRI, r3
 801c0de:	f3bf 8f6f 	isb	sy
 801c0e2:	f3bf 8f4f 	dsb	sy
 801c0e6:	60bb      	str	r3, [r7, #8]
}
 801c0e8:	bf00      	nop
 801c0ea:	e7fe      	b.n	801c0ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801c0ec:	69bb      	ldr	r3, [r7, #24]
 801c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801c0f2:	69bb      	ldr	r3, [r7, #24]
 801c0f4:	69fa      	ldr	r2, [r7, #28]
 801c0f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801c0f8:	69bb      	ldr	r3, [r7, #24]
 801c0fa:	699b      	ldr	r3, [r3, #24]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	db04      	blt.n	801c10a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c100:	69fb      	ldr	r3, [r7, #28]
 801c102:	f1c3 0207 	rsb	r2, r3, #7
 801c106:	69bb      	ldr	r3, [r7, #24]
 801c108:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801c10a:	69bb      	ldr	r3, [r7, #24]
 801c10c:	6959      	ldr	r1, [r3, #20]
 801c10e:	693a      	ldr	r2, [r7, #16]
 801c110:	4613      	mov	r3, r2
 801c112:	009b      	lsls	r3, r3, #2
 801c114:	4413      	add	r3, r2
 801c116:	009b      	lsls	r3, r3, #2
 801c118:	4a19      	ldr	r2, [pc, #100]	; (801c180 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801c11a:	4413      	add	r3, r2
 801c11c:	4299      	cmp	r1, r3
 801c11e:	d129      	bne.n	801c174 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c120:	69bb      	ldr	r3, [r7, #24]
 801c122:	3304      	adds	r3, #4
 801c124:	4618      	mov	r0, r3
 801c126:	f7fe f845 	bl	801a1b4 <uxListRemove>
 801c12a:	4603      	mov	r3, r0
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d10a      	bne.n	801c146 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801c130:	69bb      	ldr	r3, [r7, #24]
 801c132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c134:	2201      	movs	r2, #1
 801c136:	fa02 f303 	lsl.w	r3, r2, r3
 801c13a:	43da      	mvns	r2, r3
 801c13c:	4b11      	ldr	r3, [pc, #68]	; (801c184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	4013      	ands	r3, r2
 801c142:	4a10      	ldr	r2, [pc, #64]	; (801c184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801c144:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801c146:	69bb      	ldr	r3, [r7, #24]
 801c148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c14a:	2201      	movs	r2, #1
 801c14c:	409a      	lsls	r2, r3
 801c14e:	4b0d      	ldr	r3, [pc, #52]	; (801c184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	4313      	orrs	r3, r2
 801c154:	4a0b      	ldr	r2, [pc, #44]	; (801c184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801c156:	6013      	str	r3, [r2, #0]
 801c158:	69bb      	ldr	r3, [r7, #24]
 801c15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c15c:	4613      	mov	r3, r2
 801c15e:	009b      	lsls	r3, r3, #2
 801c160:	4413      	add	r3, r2
 801c162:	009b      	lsls	r3, r3, #2
 801c164:	4a06      	ldr	r2, [pc, #24]	; (801c180 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801c166:	441a      	add	r2, r3
 801c168:	69bb      	ldr	r3, [r7, #24]
 801c16a:	3304      	adds	r3, #4
 801c16c:	4619      	mov	r1, r3
 801c16e:	4610      	mov	r0, r2
 801c170:	f7fd ffc3 	bl	801a0fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801c174:	bf00      	nop
 801c176:	3720      	adds	r7, #32
 801c178:	46bd      	mov	sp, r7
 801c17a:	bd80      	pop	{r7, pc}
 801c17c:	2000cd20 	.word	0x2000cd20
 801c180:	2000cd24 	.word	0x2000cd24
 801c184:	2000ce28 	.word	0x2000ce28

0801c188 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801c188:	b480      	push	{r7}
 801c18a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801c18c:	4b07      	ldr	r3, [pc, #28]	; (801c1ac <pvTaskIncrementMutexHeldCount+0x24>)
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d004      	beq.n	801c19e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801c194:	4b05      	ldr	r3, [pc, #20]	; (801c1ac <pvTaskIncrementMutexHeldCount+0x24>)
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801c19a:	3201      	adds	r2, #1
 801c19c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801c19e:	4b03      	ldr	r3, [pc, #12]	; (801c1ac <pvTaskIncrementMutexHeldCount+0x24>)
 801c1a0:	681b      	ldr	r3, [r3, #0]
	}
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	46bd      	mov	sp, r7
 801c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1aa:	4770      	bx	lr
 801c1ac:	2000cd20 	.word	0x2000cd20

0801c1b0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801c1b0:	b580      	push	{r7, lr}
 801c1b2:	b086      	sub	sp, #24
 801c1b4:	af00      	add	r7, sp, #0
 801c1b6:	60f8      	str	r0, [r7, #12]
 801c1b8:	60b9      	str	r1, [r7, #8]
 801c1ba:	607a      	str	r2, [r7, #4]
 801c1bc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801c1be:	f000 ff59 	bl	801d074 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801c1c2:	4b29      	ldr	r3, [pc, #164]	; (801c268 <xTaskNotifyWait+0xb8>)
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 801c1ca:	b2db      	uxtb	r3, r3
 801c1cc:	2b02      	cmp	r3, #2
 801c1ce:	d01c      	beq.n	801c20a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801c1d0:	4b25      	ldr	r3, [pc, #148]	; (801c268 <xTaskNotifyWait+0xb8>)
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 801c1d8:	68fa      	ldr	r2, [r7, #12]
 801c1da:	43d2      	mvns	r2, r2
 801c1dc:	400a      	ands	r2, r1
 801c1de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801c1e2:	4b21      	ldr	r3, [pc, #132]	; (801c268 <xTaskNotifyWait+0xb8>)
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	2201      	movs	r2, #1
 801c1e8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 801c1ec:	683b      	ldr	r3, [r7, #0]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d00b      	beq.n	801c20a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801c1f2:	2101      	movs	r1, #1
 801c1f4:	6838      	ldr	r0, [r7, #0]
 801c1f6:	f000 f9dd 	bl	801c5b4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801c1fa:	4b1c      	ldr	r3, [pc, #112]	; (801c26c <xTaskNotifyWait+0xbc>)
 801c1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c200:	601a      	str	r2, [r3, #0]
 801c202:	f3bf 8f4f 	dsb	sy
 801c206:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801c20a:	f000 ff63 	bl	801d0d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 801c20e:	f000 ff31 	bl	801d074 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	2b00      	cmp	r3, #0
 801c216:	d005      	beq.n	801c224 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801c218:	4b13      	ldr	r3, [pc, #76]	; (801c268 <xTaskNotifyWait+0xb8>)
 801c21a:	681b      	ldr	r3, [r3, #0]
 801c21c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801c224:	4b10      	ldr	r3, [pc, #64]	; (801c268 <xTaskNotifyWait+0xb8>)
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 801c22c:	b2db      	uxtb	r3, r3
 801c22e:	2b02      	cmp	r3, #2
 801c230:	d002      	beq.n	801c238 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801c232:	2300      	movs	r3, #0
 801c234:	617b      	str	r3, [r7, #20]
 801c236:	e00a      	b.n	801c24e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801c238:	4b0b      	ldr	r3, [pc, #44]	; (801c268 <xTaskNotifyWait+0xb8>)
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 801c240:	68ba      	ldr	r2, [r7, #8]
 801c242:	43d2      	mvns	r2, r2
 801c244:	400a      	ands	r2, r1
 801c246:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 801c24a:	2301      	movs	r3, #1
 801c24c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801c24e:	4b06      	ldr	r3, [pc, #24]	; (801c268 <xTaskNotifyWait+0xb8>)
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	2200      	movs	r2, #0
 801c254:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 801c258:	f000 ff3c 	bl	801d0d4 <vPortExitCritical>

		return xReturn;
 801c25c:	697b      	ldr	r3, [r7, #20]
	}
 801c25e:	4618      	mov	r0, r3
 801c260:	3718      	adds	r7, #24
 801c262:	46bd      	mov	sp, r7
 801c264:	bd80      	pop	{r7, pc}
 801c266:	bf00      	nop
 801c268:	2000cd20 	.word	0x2000cd20
 801c26c:	e000ed04 	.word	0xe000ed04

0801c270 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801c270:	b580      	push	{r7, lr}
 801c272:	b08a      	sub	sp, #40	; 0x28
 801c274:	af00      	add	r7, sp, #0
 801c276:	60f8      	str	r0, [r7, #12]
 801c278:	60b9      	str	r1, [r7, #8]
 801c27a:	603b      	str	r3, [r7, #0]
 801c27c:	4613      	mov	r3, r2
 801c27e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801c280:	2301      	movs	r3, #1
 801c282:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	2b00      	cmp	r3, #0
 801c288:	d10a      	bne.n	801c2a0 <xTaskGenericNotify+0x30>
	__asm volatile
 801c28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c28e:	f383 8811 	msr	BASEPRI, r3
 801c292:	f3bf 8f6f 	isb	sy
 801c296:	f3bf 8f4f 	dsb	sy
 801c29a:	61bb      	str	r3, [r7, #24]
}
 801c29c:	bf00      	nop
 801c29e:	e7fe      	b.n	801c29e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801c2a0:	68fb      	ldr	r3, [r7, #12]
 801c2a2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801c2a4:	f000 fee6 	bl	801d074 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801c2a8:	683b      	ldr	r3, [r7, #0]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d004      	beq.n	801c2b8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801c2ae:	6a3b      	ldr	r3, [r7, #32]
 801c2b0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801c2b4:	683b      	ldr	r3, [r7, #0]
 801c2b6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801c2b8:	6a3b      	ldr	r3, [r7, #32]
 801c2ba:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 801c2be:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801c2c0:	6a3b      	ldr	r3, [r7, #32]
 801c2c2:	2202      	movs	r2, #2
 801c2c4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

			switch( eAction )
 801c2c8:	79fb      	ldrb	r3, [r7, #7]
 801c2ca:	2b04      	cmp	r3, #4
 801c2cc:	d82d      	bhi.n	801c32a <xTaskGenericNotify+0xba>
 801c2ce:	a201      	add	r2, pc, #4	; (adr r2, 801c2d4 <xTaskGenericNotify+0x64>)
 801c2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c2d4:	0801c34d 	.word	0x0801c34d
 801c2d8:	0801c2e9 	.word	0x0801c2e9
 801c2dc:	0801c2fb 	.word	0x0801c2fb
 801c2e0:	0801c30b 	.word	0x0801c30b
 801c2e4:	0801c315 	.word	0x0801c315
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801c2e8:	6a3b      	ldr	r3, [r7, #32]
 801c2ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801c2ee:	68bb      	ldr	r3, [r7, #8]
 801c2f0:	431a      	orrs	r2, r3
 801c2f2:	6a3b      	ldr	r3, [r7, #32]
 801c2f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 801c2f8:	e02b      	b.n	801c352 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801c2fa:	6a3b      	ldr	r3, [r7, #32]
 801c2fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c300:	1c5a      	adds	r2, r3, #1
 801c302:	6a3b      	ldr	r3, [r7, #32]
 801c304:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 801c308:	e023      	b.n	801c352 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801c30a:	6a3b      	ldr	r3, [r7, #32]
 801c30c:	68ba      	ldr	r2, [r7, #8]
 801c30e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 801c312:	e01e      	b.n	801c352 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801c314:	7ffb      	ldrb	r3, [r7, #31]
 801c316:	2b02      	cmp	r3, #2
 801c318:	d004      	beq.n	801c324 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801c31a:	6a3b      	ldr	r3, [r7, #32]
 801c31c:	68ba      	ldr	r2, [r7, #8]
 801c31e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801c322:	e016      	b.n	801c352 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 801c324:	2300      	movs	r3, #0
 801c326:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801c328:	e013      	b.n	801c352 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801c32a:	6a3b      	ldr	r3, [r7, #32]
 801c32c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c330:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c334:	d00c      	beq.n	801c350 <xTaskGenericNotify+0xe0>
	__asm volatile
 801c336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c33a:	f383 8811 	msr	BASEPRI, r3
 801c33e:	f3bf 8f6f 	isb	sy
 801c342:	f3bf 8f4f 	dsb	sy
 801c346:	617b      	str	r3, [r7, #20]
}
 801c348:	bf00      	nop
 801c34a:	e7fe      	b.n	801c34a <xTaskGenericNotify+0xda>
					break;
 801c34c:	bf00      	nop
 801c34e:	e000      	b.n	801c352 <xTaskGenericNotify+0xe2>

					break;
 801c350:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801c352:	7ffb      	ldrb	r3, [r7, #31]
 801c354:	2b01      	cmp	r3, #1
 801c356:	d139      	bne.n	801c3cc <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801c358:	6a3b      	ldr	r3, [r7, #32]
 801c35a:	3304      	adds	r3, #4
 801c35c:	4618      	mov	r0, r3
 801c35e:	f7fd ff29 	bl	801a1b4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801c362:	6a3b      	ldr	r3, [r7, #32]
 801c364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c366:	2201      	movs	r2, #1
 801c368:	409a      	lsls	r2, r3
 801c36a:	4b1c      	ldr	r3, [pc, #112]	; (801c3dc <xTaskGenericNotify+0x16c>)
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	4313      	orrs	r3, r2
 801c370:	4a1a      	ldr	r2, [pc, #104]	; (801c3dc <xTaskGenericNotify+0x16c>)
 801c372:	6013      	str	r3, [r2, #0]
 801c374:	6a3b      	ldr	r3, [r7, #32]
 801c376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c378:	4613      	mov	r3, r2
 801c37a:	009b      	lsls	r3, r3, #2
 801c37c:	4413      	add	r3, r2
 801c37e:	009b      	lsls	r3, r3, #2
 801c380:	4a17      	ldr	r2, [pc, #92]	; (801c3e0 <xTaskGenericNotify+0x170>)
 801c382:	441a      	add	r2, r3
 801c384:	6a3b      	ldr	r3, [r7, #32]
 801c386:	3304      	adds	r3, #4
 801c388:	4619      	mov	r1, r3
 801c38a:	4610      	mov	r0, r2
 801c38c:	f7fd feb5 	bl	801a0fa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801c390:	6a3b      	ldr	r3, [r7, #32]
 801c392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c394:	2b00      	cmp	r3, #0
 801c396:	d00a      	beq.n	801c3ae <xTaskGenericNotify+0x13e>
	__asm volatile
 801c398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c39c:	f383 8811 	msr	BASEPRI, r3
 801c3a0:	f3bf 8f6f 	isb	sy
 801c3a4:	f3bf 8f4f 	dsb	sy
 801c3a8:	613b      	str	r3, [r7, #16]
}
 801c3aa:	bf00      	nop
 801c3ac:	e7fe      	b.n	801c3ac <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801c3ae:	6a3b      	ldr	r3, [r7, #32]
 801c3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c3b2:	4b0c      	ldr	r3, [pc, #48]	; (801c3e4 <xTaskGenericNotify+0x174>)
 801c3b4:	681b      	ldr	r3, [r3, #0]
 801c3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3b8:	429a      	cmp	r2, r3
 801c3ba:	d907      	bls.n	801c3cc <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801c3bc:	4b0a      	ldr	r3, [pc, #40]	; (801c3e8 <xTaskGenericNotify+0x178>)
 801c3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c3c2:	601a      	str	r2, [r3, #0]
 801c3c4:	f3bf 8f4f 	dsb	sy
 801c3c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801c3cc:	f000 fe82 	bl	801d0d4 <vPortExitCritical>

		return xReturn;
 801c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801c3d2:	4618      	mov	r0, r3
 801c3d4:	3728      	adds	r7, #40	; 0x28
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	bd80      	pop	{r7, pc}
 801c3da:	bf00      	nop
 801c3dc:	2000ce28 	.word	0x2000ce28
 801c3e0:	2000cd24 	.word	0x2000cd24
 801c3e4:	2000cd20 	.word	0x2000cd20
 801c3e8:	e000ed04 	.word	0xe000ed04

0801c3ec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801c3ec:	b580      	push	{r7, lr}
 801c3ee:	b08e      	sub	sp, #56	; 0x38
 801c3f0:	af00      	add	r7, sp, #0
 801c3f2:	60f8      	str	r0, [r7, #12]
 801c3f4:	60b9      	str	r1, [r7, #8]
 801c3f6:	603b      	str	r3, [r7, #0]
 801c3f8:	4613      	mov	r3, r2
 801c3fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801c3fc:	2301      	movs	r3, #1
 801c3fe:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801c400:	68fb      	ldr	r3, [r7, #12]
 801c402:	2b00      	cmp	r3, #0
 801c404:	d10a      	bne.n	801c41c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 801c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c40a:	f383 8811 	msr	BASEPRI, r3
 801c40e:	f3bf 8f6f 	isb	sy
 801c412:	f3bf 8f4f 	dsb	sy
 801c416:	627b      	str	r3, [r7, #36]	; 0x24
}
 801c418:	bf00      	nop
 801c41a:	e7fe      	b.n	801c41a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801c41c:	f000 ff0c 	bl	801d238 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801c424:	f3ef 8211 	mrs	r2, BASEPRI
 801c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c42c:	f383 8811 	msr	BASEPRI, r3
 801c430:	f3bf 8f6f 	isb	sy
 801c434:	f3bf 8f4f 	dsb	sy
 801c438:	623a      	str	r2, [r7, #32]
 801c43a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801c43c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801c43e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801c440:	683b      	ldr	r3, [r7, #0]
 801c442:	2b00      	cmp	r3, #0
 801c444:	d004      	beq.n	801c450 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c448:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801c44c:	683b      	ldr	r3, [r7, #0]
 801c44e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801c450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c452:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 801c456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c45c:	2202      	movs	r2, #2
 801c45e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

			switch( eAction )
 801c462:	79fb      	ldrb	r3, [r7, #7]
 801c464:	2b04      	cmp	r3, #4
 801c466:	d82f      	bhi.n	801c4c8 <xTaskGenericNotifyFromISR+0xdc>
 801c468:	a201      	add	r2, pc, #4	; (adr r2, 801c470 <xTaskGenericNotifyFromISR+0x84>)
 801c46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c46e:	bf00      	nop
 801c470:	0801c4eb 	.word	0x0801c4eb
 801c474:	0801c485 	.word	0x0801c485
 801c478:	0801c497 	.word	0x0801c497
 801c47c:	0801c4a7 	.word	0x0801c4a7
 801c480:	0801c4b1 	.word	0x0801c4b1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801c484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c486:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801c48a:	68bb      	ldr	r3, [r7, #8]
 801c48c:	431a      	orrs	r2, r3
 801c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c490:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 801c494:	e02c      	b.n	801c4f0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c498:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c49c:	1c5a      	adds	r2, r3, #1
 801c49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 801c4a4:	e024      	b.n	801c4f0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801c4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4a8:	68ba      	ldr	r2, [r7, #8]
 801c4aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 801c4ae:	e01f      	b.n	801c4f0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801c4b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c4b4:	2b02      	cmp	r3, #2
 801c4b6:	d004      	beq.n	801c4c2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801c4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4ba:	68ba      	ldr	r2, [r7, #8]
 801c4bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801c4c0:	e016      	b.n	801c4f0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 801c4c2:	2300      	movs	r3, #0
 801c4c4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801c4c6:	e013      	b.n	801c4f0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801c4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4d2:	d00c      	beq.n	801c4ee <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 801c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c4d8:	f383 8811 	msr	BASEPRI, r3
 801c4dc:	f3bf 8f6f 	isb	sy
 801c4e0:	f3bf 8f4f 	dsb	sy
 801c4e4:	61bb      	str	r3, [r7, #24]
}
 801c4e6:	bf00      	nop
 801c4e8:	e7fe      	b.n	801c4e8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 801c4ea:	bf00      	nop
 801c4ec:	e000      	b.n	801c4f0 <xTaskGenericNotifyFromISR+0x104>
					break;
 801c4ee:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801c4f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c4f4:	2b01      	cmp	r3, #1
 801c4f6:	d145      	bne.n	801c584 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801c4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d00a      	beq.n	801c516 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 801c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c504:	f383 8811 	msr	BASEPRI, r3
 801c508:	f3bf 8f6f 	isb	sy
 801c50c:	f3bf 8f4f 	dsb	sy
 801c510:	617b      	str	r3, [r7, #20]
}
 801c512:	bf00      	nop
 801c514:	e7fe      	b.n	801c514 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801c516:	4b21      	ldr	r3, [pc, #132]	; (801c59c <xTaskGenericNotifyFromISR+0x1b0>)
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d11c      	bne.n	801c558 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c520:	3304      	adds	r3, #4
 801c522:	4618      	mov	r0, r3
 801c524:	f7fd fe46 	bl	801a1b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801c528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c52c:	2201      	movs	r2, #1
 801c52e:	409a      	lsls	r2, r3
 801c530:	4b1b      	ldr	r3, [pc, #108]	; (801c5a0 <xTaskGenericNotifyFromISR+0x1b4>)
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	4313      	orrs	r3, r2
 801c536:	4a1a      	ldr	r2, [pc, #104]	; (801c5a0 <xTaskGenericNotifyFromISR+0x1b4>)
 801c538:	6013      	str	r3, [r2, #0]
 801c53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c53e:	4613      	mov	r3, r2
 801c540:	009b      	lsls	r3, r3, #2
 801c542:	4413      	add	r3, r2
 801c544:	009b      	lsls	r3, r3, #2
 801c546:	4a17      	ldr	r2, [pc, #92]	; (801c5a4 <xTaskGenericNotifyFromISR+0x1b8>)
 801c548:	441a      	add	r2, r3
 801c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c54c:	3304      	adds	r3, #4
 801c54e:	4619      	mov	r1, r3
 801c550:	4610      	mov	r0, r2
 801c552:	f7fd fdd2 	bl	801a0fa <vListInsertEnd>
 801c556:	e005      	b.n	801c564 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c55a:	3318      	adds	r3, #24
 801c55c:	4619      	mov	r1, r3
 801c55e:	4812      	ldr	r0, [pc, #72]	; (801c5a8 <xTaskGenericNotifyFromISR+0x1bc>)
 801c560:	f7fd fdcb 	bl	801a0fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c568:	4b10      	ldr	r3, [pc, #64]	; (801c5ac <xTaskGenericNotifyFromISR+0x1c0>)
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c56e:	429a      	cmp	r2, r3
 801c570:	d908      	bls.n	801c584 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801c572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c574:	2b00      	cmp	r3, #0
 801c576:	d002      	beq.n	801c57e <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801c578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c57a:	2201      	movs	r2, #1
 801c57c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801c57e:	4b0c      	ldr	r3, [pc, #48]	; (801c5b0 <xTaskGenericNotifyFromISR+0x1c4>)
 801c580:	2201      	movs	r2, #1
 801c582:	601a      	str	r2, [r3, #0]
 801c584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c586:	613b      	str	r3, [r7, #16]
	__asm volatile
 801c588:	693b      	ldr	r3, [r7, #16]
 801c58a:	f383 8811 	msr	BASEPRI, r3
}
 801c58e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801c590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801c592:	4618      	mov	r0, r3
 801c594:	3738      	adds	r7, #56	; 0x38
 801c596:	46bd      	mov	sp, r7
 801c598:	bd80      	pop	{r7, pc}
 801c59a:	bf00      	nop
 801c59c:	2000ce48 	.word	0x2000ce48
 801c5a0:	2000ce28 	.word	0x2000ce28
 801c5a4:	2000cd24 	.word	0x2000cd24
 801c5a8:	2000cde0 	.word	0x2000cde0
 801c5ac:	2000cd20 	.word	0x2000cd20
 801c5b0:	2000ce34 	.word	0x2000ce34

0801c5b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801c5b4:	b580      	push	{r7, lr}
 801c5b6:	b084      	sub	sp, #16
 801c5b8:	af00      	add	r7, sp, #0
 801c5ba:	6078      	str	r0, [r7, #4]
 801c5bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801c5be:	4b29      	ldr	r3, [pc, #164]	; (801c664 <prvAddCurrentTaskToDelayedList+0xb0>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c5c4:	4b28      	ldr	r3, [pc, #160]	; (801c668 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	3304      	adds	r3, #4
 801c5ca:	4618      	mov	r0, r3
 801c5cc:	f7fd fdf2 	bl	801a1b4 <uxListRemove>
 801c5d0:	4603      	mov	r3, r0
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d10b      	bne.n	801c5ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801c5d6:	4b24      	ldr	r3, [pc, #144]	; (801c668 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c5dc:	2201      	movs	r2, #1
 801c5de:	fa02 f303 	lsl.w	r3, r2, r3
 801c5e2:	43da      	mvns	r2, r3
 801c5e4:	4b21      	ldr	r3, [pc, #132]	; (801c66c <prvAddCurrentTaskToDelayedList+0xb8>)
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	4013      	ands	r3, r2
 801c5ea:	4a20      	ldr	r2, [pc, #128]	; (801c66c <prvAddCurrentTaskToDelayedList+0xb8>)
 801c5ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5f4:	d10a      	bne.n	801c60c <prvAddCurrentTaskToDelayedList+0x58>
 801c5f6:	683b      	ldr	r3, [r7, #0]
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d007      	beq.n	801c60c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c5fc:	4b1a      	ldr	r3, [pc, #104]	; (801c668 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c5fe:	681b      	ldr	r3, [r3, #0]
 801c600:	3304      	adds	r3, #4
 801c602:	4619      	mov	r1, r3
 801c604:	481a      	ldr	r0, [pc, #104]	; (801c670 <prvAddCurrentTaskToDelayedList+0xbc>)
 801c606:	f7fd fd78 	bl	801a0fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801c60a:	e026      	b.n	801c65a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801c60c:	68fa      	ldr	r2, [r7, #12]
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	4413      	add	r3, r2
 801c612:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801c614:	4b14      	ldr	r3, [pc, #80]	; (801c668 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	68ba      	ldr	r2, [r7, #8]
 801c61a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801c61c:	68ba      	ldr	r2, [r7, #8]
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	429a      	cmp	r2, r3
 801c622:	d209      	bcs.n	801c638 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c624:	4b13      	ldr	r3, [pc, #76]	; (801c674 <prvAddCurrentTaskToDelayedList+0xc0>)
 801c626:	681a      	ldr	r2, [r3, #0]
 801c628:	4b0f      	ldr	r3, [pc, #60]	; (801c668 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	3304      	adds	r3, #4
 801c62e:	4619      	mov	r1, r3
 801c630:	4610      	mov	r0, r2
 801c632:	f7fd fd86 	bl	801a142 <vListInsert>
}
 801c636:	e010      	b.n	801c65a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801c638:	4b0f      	ldr	r3, [pc, #60]	; (801c678 <prvAddCurrentTaskToDelayedList+0xc4>)
 801c63a:	681a      	ldr	r2, [r3, #0]
 801c63c:	4b0a      	ldr	r3, [pc, #40]	; (801c668 <prvAddCurrentTaskToDelayedList+0xb4>)
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	3304      	adds	r3, #4
 801c642:	4619      	mov	r1, r3
 801c644:	4610      	mov	r0, r2
 801c646:	f7fd fd7c 	bl	801a142 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801c64a:	4b0c      	ldr	r3, [pc, #48]	; (801c67c <prvAddCurrentTaskToDelayedList+0xc8>)
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	68ba      	ldr	r2, [r7, #8]
 801c650:	429a      	cmp	r2, r3
 801c652:	d202      	bcs.n	801c65a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801c654:	4a09      	ldr	r2, [pc, #36]	; (801c67c <prvAddCurrentTaskToDelayedList+0xc8>)
 801c656:	68bb      	ldr	r3, [r7, #8]
 801c658:	6013      	str	r3, [r2, #0]
}
 801c65a:	bf00      	nop
 801c65c:	3710      	adds	r7, #16
 801c65e:	46bd      	mov	sp, r7
 801c660:	bd80      	pop	{r7, pc}
 801c662:	bf00      	nop
 801c664:	2000ce24 	.word	0x2000ce24
 801c668:	2000cd20 	.word	0x2000cd20
 801c66c:	2000ce28 	.word	0x2000ce28
 801c670:	2000ce0c 	.word	0x2000ce0c
 801c674:	2000cddc 	.word	0x2000cddc
 801c678:	2000cdd8 	.word	0x2000cdd8
 801c67c:	2000ce40 	.word	0x2000ce40

0801c680 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801c680:	b580      	push	{r7, lr}
 801c682:	b08a      	sub	sp, #40	; 0x28
 801c684:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801c686:	2300      	movs	r3, #0
 801c688:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801c68a:	f000 fb85 	bl	801cd98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801c68e:	4b1c      	ldr	r3, [pc, #112]	; (801c700 <xTimerCreateTimerTask+0x80>)
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d021      	beq.n	801c6da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801c696:	2300      	movs	r3, #0
 801c698:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801c69a:	2300      	movs	r3, #0
 801c69c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801c69e:	1d3a      	adds	r2, r7, #4
 801c6a0:	f107 0108 	add.w	r1, r7, #8
 801c6a4:	f107 030c 	add.w	r3, r7, #12
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	f7f0 fe7d 	bl	800d3a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801c6ae:	6879      	ldr	r1, [r7, #4]
 801c6b0:	68bb      	ldr	r3, [r7, #8]
 801c6b2:	68fa      	ldr	r2, [r7, #12]
 801c6b4:	9202      	str	r2, [sp, #8]
 801c6b6:	9301      	str	r3, [sp, #4]
 801c6b8:	2302      	movs	r3, #2
 801c6ba:	9300      	str	r3, [sp, #0]
 801c6bc:	2300      	movs	r3, #0
 801c6be:	460a      	mov	r2, r1
 801c6c0:	4910      	ldr	r1, [pc, #64]	; (801c704 <xTimerCreateTimerTask+0x84>)
 801c6c2:	4811      	ldr	r0, [pc, #68]	; (801c708 <xTimerCreateTimerTask+0x88>)
 801c6c4:	f7fe fd64 	bl	801b190 <xTaskCreateStatic>
 801c6c8:	4603      	mov	r3, r0
 801c6ca:	4a10      	ldr	r2, [pc, #64]	; (801c70c <xTimerCreateTimerTask+0x8c>)
 801c6cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801c6ce:	4b0f      	ldr	r3, [pc, #60]	; (801c70c <xTimerCreateTimerTask+0x8c>)
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d001      	beq.n	801c6da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801c6d6:	2301      	movs	r3, #1
 801c6d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801c6da:	697b      	ldr	r3, [r7, #20]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d10a      	bne.n	801c6f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801c6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6e4:	f383 8811 	msr	BASEPRI, r3
 801c6e8:	f3bf 8f6f 	isb	sy
 801c6ec:	f3bf 8f4f 	dsb	sy
 801c6f0:	613b      	str	r3, [r7, #16]
}
 801c6f2:	bf00      	nop
 801c6f4:	e7fe      	b.n	801c6f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801c6f6:	697b      	ldr	r3, [r7, #20]
}
 801c6f8:	4618      	mov	r0, r3
 801c6fa:	3718      	adds	r7, #24
 801c6fc:	46bd      	mov	sp, r7
 801c6fe:	bd80      	pop	{r7, pc}
 801c700:	2000ce84 	.word	0x2000ce84
 801c704:	08022264 	.word	0x08022264
 801c708:	0801c979 	.word	0x0801c979
 801c70c:	2000ce88 	.word	0x2000ce88

0801c710 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801c710:	b580      	push	{r7, lr}
 801c712:	b088      	sub	sp, #32
 801c714:	af02      	add	r7, sp, #8
 801c716:	60f8      	str	r0, [r7, #12]
 801c718:	60b9      	str	r1, [r7, #8]
 801c71a:	607a      	str	r2, [r7, #4]
 801c71c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801c71e:	2028      	movs	r0, #40	; 0x28
 801c720:	f000 fdca 	bl	801d2b8 <pvPortMalloc>
 801c724:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801c726:	697b      	ldr	r3, [r7, #20]
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d00d      	beq.n	801c748 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801c72c:	697b      	ldr	r3, [r7, #20]
 801c72e:	2200      	movs	r2, #0
 801c730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801c734:	697b      	ldr	r3, [r7, #20]
 801c736:	9301      	str	r3, [sp, #4]
 801c738:	6a3b      	ldr	r3, [r7, #32]
 801c73a:	9300      	str	r3, [sp, #0]
 801c73c:	683b      	ldr	r3, [r7, #0]
 801c73e:	687a      	ldr	r2, [r7, #4]
 801c740:	68b9      	ldr	r1, [r7, #8]
 801c742:	68f8      	ldr	r0, [r7, #12]
 801c744:	f000 f843 	bl	801c7ce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801c748:	697b      	ldr	r3, [r7, #20]
	}
 801c74a:	4618      	mov	r0, r3
 801c74c:	3718      	adds	r7, #24
 801c74e:	46bd      	mov	sp, r7
 801c750:	bd80      	pop	{r7, pc}

0801c752 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801c752:	b580      	push	{r7, lr}
 801c754:	b08a      	sub	sp, #40	; 0x28
 801c756:	af02      	add	r7, sp, #8
 801c758:	60f8      	str	r0, [r7, #12]
 801c75a:	60b9      	str	r1, [r7, #8]
 801c75c:	607a      	str	r2, [r7, #4]
 801c75e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801c760:	2328      	movs	r3, #40	; 0x28
 801c762:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 801c764:	693b      	ldr	r3, [r7, #16]
 801c766:	2b28      	cmp	r3, #40	; 0x28
 801c768:	d00a      	beq.n	801c780 <xTimerCreateStatic+0x2e>
	__asm volatile
 801c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c76e:	f383 8811 	msr	BASEPRI, r3
 801c772:	f3bf 8f6f 	isb	sy
 801c776:	f3bf 8f4f 	dsb	sy
 801c77a:	61bb      	str	r3, [r7, #24]
}
 801c77c:	bf00      	nop
 801c77e:	e7fe      	b.n	801c77e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801c780:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801c782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c784:	2b00      	cmp	r3, #0
 801c786:	d10a      	bne.n	801c79e <xTimerCreateStatic+0x4c>
	__asm volatile
 801c788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c78c:	f383 8811 	msr	BASEPRI, r3
 801c790:	f3bf 8f6f 	isb	sy
 801c794:	f3bf 8f4f 	dsb	sy
 801c798:	617b      	str	r3, [r7, #20]
}
 801c79a:	bf00      	nop
 801c79c:	e7fe      	b.n	801c79c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801c79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7a0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801c7a2:	69fb      	ldr	r3, [r7, #28]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d00d      	beq.n	801c7c4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801c7a8:	69fb      	ldr	r3, [r7, #28]
 801c7aa:	2202      	movs	r2, #2
 801c7ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801c7b0:	69fb      	ldr	r3, [r7, #28]
 801c7b2:	9301      	str	r3, [sp, #4]
 801c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7b6:	9300      	str	r3, [sp, #0]
 801c7b8:	683b      	ldr	r3, [r7, #0]
 801c7ba:	687a      	ldr	r2, [r7, #4]
 801c7bc:	68b9      	ldr	r1, [r7, #8]
 801c7be:	68f8      	ldr	r0, [r7, #12]
 801c7c0:	f000 f805 	bl	801c7ce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801c7c4:	69fb      	ldr	r3, [r7, #28]
	}
 801c7c6:	4618      	mov	r0, r3
 801c7c8:	3720      	adds	r7, #32
 801c7ca:	46bd      	mov	sp, r7
 801c7cc:	bd80      	pop	{r7, pc}

0801c7ce <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801c7ce:	b580      	push	{r7, lr}
 801c7d0:	b086      	sub	sp, #24
 801c7d2:	af00      	add	r7, sp, #0
 801c7d4:	60f8      	str	r0, [r7, #12]
 801c7d6:	60b9      	str	r1, [r7, #8]
 801c7d8:	607a      	str	r2, [r7, #4]
 801c7da:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801c7dc:	68bb      	ldr	r3, [r7, #8]
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d10a      	bne.n	801c7f8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 801c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c7e6:	f383 8811 	msr	BASEPRI, r3
 801c7ea:	f3bf 8f6f 	isb	sy
 801c7ee:	f3bf 8f4f 	dsb	sy
 801c7f2:	617b      	str	r3, [r7, #20]
}
 801c7f4:	bf00      	nop
 801c7f6:	e7fe      	b.n	801c7f6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 801c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d01e      	beq.n	801c83c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801c7fe:	f000 facb 	bl	801cd98 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801c802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c804:	68fa      	ldr	r2, [r7, #12]
 801c806:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801c808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c80a:	68ba      	ldr	r2, [r7, #8]
 801c80c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c810:	683a      	ldr	r2, [r7, #0]
 801c812:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801c814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c816:	6a3a      	ldr	r2, [r7, #32]
 801c818:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c81c:	3304      	adds	r3, #4
 801c81e:	4618      	mov	r0, r3
 801c820:	f7fd fc5e 	bl	801a0e0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	2b00      	cmp	r3, #0
 801c828:	d008      	beq.n	801c83c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801c82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c82c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c830:	f043 0304 	orr.w	r3, r3, #4
 801c834:	b2da      	uxtb	r2, r3
 801c836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801c83c:	bf00      	nop
 801c83e:	3718      	adds	r7, #24
 801c840:	46bd      	mov	sp, r7
 801c842:	bd80      	pop	{r7, pc}

0801c844 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801c844:	b580      	push	{r7, lr}
 801c846:	b08a      	sub	sp, #40	; 0x28
 801c848:	af00      	add	r7, sp, #0
 801c84a:	60f8      	str	r0, [r7, #12]
 801c84c:	60b9      	str	r1, [r7, #8]
 801c84e:	607a      	str	r2, [r7, #4]
 801c850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801c852:	2300      	movs	r3, #0
 801c854:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d10a      	bne.n	801c872 <xTimerGenericCommand+0x2e>
	__asm volatile
 801c85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c860:	f383 8811 	msr	BASEPRI, r3
 801c864:	f3bf 8f6f 	isb	sy
 801c868:	f3bf 8f4f 	dsb	sy
 801c86c:	623b      	str	r3, [r7, #32]
}
 801c86e:	bf00      	nop
 801c870:	e7fe      	b.n	801c870 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801c872:	4b1a      	ldr	r3, [pc, #104]	; (801c8dc <xTimerGenericCommand+0x98>)
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	2b00      	cmp	r3, #0
 801c878:	d02a      	beq.n	801c8d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801c87a:	68bb      	ldr	r3, [r7, #8]
 801c87c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801c886:	68bb      	ldr	r3, [r7, #8]
 801c888:	2b05      	cmp	r3, #5
 801c88a:	dc18      	bgt.n	801c8be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801c88c:	f7ff fad4 	bl	801be38 <xTaskGetSchedulerState>
 801c890:	4603      	mov	r3, r0
 801c892:	2b02      	cmp	r3, #2
 801c894:	d109      	bne.n	801c8aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801c896:	4b11      	ldr	r3, [pc, #68]	; (801c8dc <xTimerGenericCommand+0x98>)
 801c898:	6818      	ldr	r0, [r3, #0]
 801c89a:	f107 0114 	add.w	r1, r7, #20
 801c89e:	2300      	movs	r3, #0
 801c8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c8a2:	f7fd fe37 	bl	801a514 <xQueueGenericSend>
 801c8a6:	6278      	str	r0, [r7, #36]	; 0x24
 801c8a8:	e012      	b.n	801c8d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801c8aa:	4b0c      	ldr	r3, [pc, #48]	; (801c8dc <xTimerGenericCommand+0x98>)
 801c8ac:	6818      	ldr	r0, [r3, #0]
 801c8ae:	f107 0114 	add.w	r1, r7, #20
 801c8b2:	2300      	movs	r3, #0
 801c8b4:	2200      	movs	r2, #0
 801c8b6:	f7fd fe2d 	bl	801a514 <xQueueGenericSend>
 801c8ba:	6278      	str	r0, [r7, #36]	; 0x24
 801c8bc:	e008      	b.n	801c8d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801c8be:	4b07      	ldr	r3, [pc, #28]	; (801c8dc <xTimerGenericCommand+0x98>)
 801c8c0:	6818      	ldr	r0, [r3, #0]
 801c8c2:	f107 0114 	add.w	r1, r7, #20
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	683a      	ldr	r2, [r7, #0]
 801c8ca:	f7fd ff21 	bl	801a710 <xQueueGenericSendFromISR>
 801c8ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	3728      	adds	r7, #40	; 0x28
 801c8d6:	46bd      	mov	sp, r7
 801c8d8:	bd80      	pop	{r7, pc}
 801c8da:	bf00      	nop
 801c8dc:	2000ce84 	.word	0x2000ce84

0801c8e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801c8e0:	b580      	push	{r7, lr}
 801c8e2:	b088      	sub	sp, #32
 801c8e4:	af02      	add	r7, sp, #8
 801c8e6:	6078      	str	r0, [r7, #4]
 801c8e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c8ea:	4b22      	ldr	r3, [pc, #136]	; (801c974 <prvProcessExpiredTimer+0x94>)
 801c8ec:	681b      	ldr	r3, [r3, #0]
 801c8ee:	68db      	ldr	r3, [r3, #12]
 801c8f0:	68db      	ldr	r3, [r3, #12]
 801c8f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c8f4:	697b      	ldr	r3, [r7, #20]
 801c8f6:	3304      	adds	r3, #4
 801c8f8:	4618      	mov	r0, r3
 801c8fa:	f7fd fc5b 	bl	801a1b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c8fe:	697b      	ldr	r3, [r7, #20]
 801c900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c904:	f003 0304 	and.w	r3, r3, #4
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d022      	beq.n	801c952 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801c90c:	697b      	ldr	r3, [r7, #20]
 801c90e:	699a      	ldr	r2, [r3, #24]
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	18d1      	adds	r1, r2, r3
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	683a      	ldr	r2, [r7, #0]
 801c918:	6978      	ldr	r0, [r7, #20]
 801c91a:	f000 f8d1 	bl	801cac0 <prvInsertTimerInActiveList>
 801c91e:	4603      	mov	r3, r0
 801c920:	2b00      	cmp	r3, #0
 801c922:	d01f      	beq.n	801c964 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c924:	2300      	movs	r3, #0
 801c926:	9300      	str	r3, [sp, #0]
 801c928:	2300      	movs	r3, #0
 801c92a:	687a      	ldr	r2, [r7, #4]
 801c92c:	2100      	movs	r1, #0
 801c92e:	6978      	ldr	r0, [r7, #20]
 801c930:	f7ff ff88 	bl	801c844 <xTimerGenericCommand>
 801c934:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801c936:	693b      	ldr	r3, [r7, #16]
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d113      	bne.n	801c964 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c940:	f383 8811 	msr	BASEPRI, r3
 801c944:	f3bf 8f6f 	isb	sy
 801c948:	f3bf 8f4f 	dsb	sy
 801c94c:	60fb      	str	r3, [r7, #12]
}
 801c94e:	bf00      	nop
 801c950:	e7fe      	b.n	801c950 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c952:	697b      	ldr	r3, [r7, #20]
 801c954:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c958:	f023 0301 	bic.w	r3, r3, #1
 801c95c:	b2da      	uxtb	r2, r3
 801c95e:	697b      	ldr	r3, [r7, #20]
 801c960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c964:	697b      	ldr	r3, [r7, #20]
 801c966:	6a1b      	ldr	r3, [r3, #32]
 801c968:	6978      	ldr	r0, [r7, #20]
 801c96a:	4798      	blx	r3
}
 801c96c:	bf00      	nop
 801c96e:	3718      	adds	r7, #24
 801c970:	46bd      	mov	sp, r7
 801c972:	bd80      	pop	{r7, pc}
 801c974:	2000ce7c 	.word	0x2000ce7c

0801c978 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801c978:	b580      	push	{r7, lr}
 801c97a:	b084      	sub	sp, #16
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c980:	f107 0308 	add.w	r3, r7, #8
 801c984:	4618      	mov	r0, r3
 801c986:	f000 f857 	bl	801ca38 <prvGetNextExpireTime>
 801c98a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801c98c:	68bb      	ldr	r3, [r7, #8]
 801c98e:	4619      	mov	r1, r3
 801c990:	68f8      	ldr	r0, [r7, #12]
 801c992:	f000 f803 	bl	801c99c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801c996:	f000 f8d5 	bl	801cb44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c99a:	e7f1      	b.n	801c980 <prvTimerTask+0x8>

0801c99c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801c99c:	b580      	push	{r7, lr}
 801c99e:	b084      	sub	sp, #16
 801c9a0:	af00      	add	r7, sp, #0
 801c9a2:	6078      	str	r0, [r7, #4]
 801c9a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801c9a6:	f7fe fe47 	bl	801b638 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c9aa:	f107 0308 	add.w	r3, r7, #8
 801c9ae:	4618      	mov	r0, r3
 801c9b0:	f000 f866 	bl	801ca80 <prvSampleTimeNow>
 801c9b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801c9b6:	68bb      	ldr	r3, [r7, #8]
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	d130      	bne.n	801ca1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801c9bc:	683b      	ldr	r3, [r7, #0]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d10a      	bne.n	801c9d8 <prvProcessTimerOrBlockTask+0x3c>
 801c9c2:	687a      	ldr	r2, [r7, #4]
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	429a      	cmp	r2, r3
 801c9c8:	d806      	bhi.n	801c9d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801c9ca:	f7fe fe43 	bl	801b654 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801c9ce:	68f9      	ldr	r1, [r7, #12]
 801c9d0:	6878      	ldr	r0, [r7, #4]
 801c9d2:	f7ff ff85 	bl	801c8e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801c9d6:	e024      	b.n	801ca22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801c9d8:	683b      	ldr	r3, [r7, #0]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d008      	beq.n	801c9f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801c9de:	4b13      	ldr	r3, [pc, #76]	; (801ca2c <prvProcessTimerOrBlockTask+0x90>)
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d101      	bne.n	801c9ec <prvProcessTimerOrBlockTask+0x50>
 801c9e8:	2301      	movs	r3, #1
 801c9ea:	e000      	b.n	801c9ee <prvProcessTimerOrBlockTask+0x52>
 801c9ec:	2300      	movs	r3, #0
 801c9ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801c9f0:	4b0f      	ldr	r3, [pc, #60]	; (801ca30 <prvProcessTimerOrBlockTask+0x94>)
 801c9f2:	6818      	ldr	r0, [r3, #0]
 801c9f4:	687a      	ldr	r2, [r7, #4]
 801c9f6:	68fb      	ldr	r3, [r7, #12]
 801c9f8:	1ad3      	subs	r3, r2, r3
 801c9fa:	683a      	ldr	r2, [r7, #0]
 801c9fc:	4619      	mov	r1, r3
 801c9fe:	f7fe fb93 	bl	801b128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801ca02:	f7fe fe27 	bl	801b654 <xTaskResumeAll>
 801ca06:	4603      	mov	r3, r0
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d10a      	bne.n	801ca22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801ca0c:	4b09      	ldr	r3, [pc, #36]	; (801ca34 <prvProcessTimerOrBlockTask+0x98>)
 801ca0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ca12:	601a      	str	r2, [r3, #0]
 801ca14:	f3bf 8f4f 	dsb	sy
 801ca18:	f3bf 8f6f 	isb	sy
}
 801ca1c:	e001      	b.n	801ca22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801ca1e:	f7fe fe19 	bl	801b654 <xTaskResumeAll>
}
 801ca22:	bf00      	nop
 801ca24:	3710      	adds	r7, #16
 801ca26:	46bd      	mov	sp, r7
 801ca28:	bd80      	pop	{r7, pc}
 801ca2a:	bf00      	nop
 801ca2c:	2000ce80 	.word	0x2000ce80
 801ca30:	2000ce84 	.word	0x2000ce84
 801ca34:	e000ed04 	.word	0xe000ed04

0801ca38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801ca38:	b480      	push	{r7}
 801ca3a:	b085      	sub	sp, #20
 801ca3c:	af00      	add	r7, sp, #0
 801ca3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801ca40:	4b0e      	ldr	r3, [pc, #56]	; (801ca7c <prvGetNextExpireTime+0x44>)
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d101      	bne.n	801ca4e <prvGetNextExpireTime+0x16>
 801ca4a:	2201      	movs	r2, #1
 801ca4c:	e000      	b.n	801ca50 <prvGetNextExpireTime+0x18>
 801ca4e:	2200      	movs	r2, #0
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	2b00      	cmp	r3, #0
 801ca5a:	d105      	bne.n	801ca68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ca5c:	4b07      	ldr	r3, [pc, #28]	; (801ca7c <prvGetNextExpireTime+0x44>)
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	68db      	ldr	r3, [r3, #12]
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	60fb      	str	r3, [r7, #12]
 801ca66:	e001      	b.n	801ca6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801ca68:	2300      	movs	r3, #0
 801ca6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801ca6c:	68fb      	ldr	r3, [r7, #12]
}
 801ca6e:	4618      	mov	r0, r3
 801ca70:	3714      	adds	r7, #20
 801ca72:	46bd      	mov	sp, r7
 801ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca78:	4770      	bx	lr
 801ca7a:	bf00      	nop
 801ca7c:	2000ce7c 	.word	0x2000ce7c

0801ca80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801ca80:	b580      	push	{r7, lr}
 801ca82:	b084      	sub	sp, #16
 801ca84:	af00      	add	r7, sp, #0
 801ca86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801ca88:	f7fe fe80 	bl	801b78c <xTaskGetTickCount>
 801ca8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801ca8e:	4b0b      	ldr	r3, [pc, #44]	; (801cabc <prvSampleTimeNow+0x3c>)
 801ca90:	681b      	ldr	r3, [r3, #0]
 801ca92:	68fa      	ldr	r2, [r7, #12]
 801ca94:	429a      	cmp	r2, r3
 801ca96:	d205      	bcs.n	801caa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801ca98:	f000 f91a 	bl	801ccd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	2201      	movs	r2, #1
 801caa0:	601a      	str	r2, [r3, #0]
 801caa2:	e002      	b.n	801caaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	2200      	movs	r2, #0
 801caa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801caaa:	4a04      	ldr	r2, [pc, #16]	; (801cabc <prvSampleTimeNow+0x3c>)
 801caac:	68fb      	ldr	r3, [r7, #12]
 801caae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801cab0:	68fb      	ldr	r3, [r7, #12]
}
 801cab2:	4618      	mov	r0, r3
 801cab4:	3710      	adds	r7, #16
 801cab6:	46bd      	mov	sp, r7
 801cab8:	bd80      	pop	{r7, pc}
 801caba:	bf00      	nop
 801cabc:	2000ce8c 	.word	0x2000ce8c

0801cac0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801cac0:	b580      	push	{r7, lr}
 801cac2:	b086      	sub	sp, #24
 801cac4:	af00      	add	r7, sp, #0
 801cac6:	60f8      	str	r0, [r7, #12]
 801cac8:	60b9      	str	r1, [r7, #8]
 801caca:	607a      	str	r2, [r7, #4]
 801cacc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801cace:	2300      	movs	r3, #0
 801cad0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	68ba      	ldr	r2, [r7, #8]
 801cad6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801cad8:	68fb      	ldr	r3, [r7, #12]
 801cada:	68fa      	ldr	r2, [r7, #12]
 801cadc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801cade:	68ba      	ldr	r2, [r7, #8]
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	429a      	cmp	r2, r3
 801cae4:	d812      	bhi.n	801cb0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801cae6:	687a      	ldr	r2, [r7, #4]
 801cae8:	683b      	ldr	r3, [r7, #0]
 801caea:	1ad2      	subs	r2, r2, r3
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	699b      	ldr	r3, [r3, #24]
 801caf0:	429a      	cmp	r2, r3
 801caf2:	d302      	bcc.n	801cafa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801caf4:	2301      	movs	r3, #1
 801caf6:	617b      	str	r3, [r7, #20]
 801caf8:	e01b      	b.n	801cb32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801cafa:	4b10      	ldr	r3, [pc, #64]	; (801cb3c <prvInsertTimerInActiveList+0x7c>)
 801cafc:	681a      	ldr	r2, [r3, #0]
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	3304      	adds	r3, #4
 801cb02:	4619      	mov	r1, r3
 801cb04:	4610      	mov	r0, r2
 801cb06:	f7fd fb1c 	bl	801a142 <vListInsert>
 801cb0a:	e012      	b.n	801cb32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801cb0c:	687a      	ldr	r2, [r7, #4]
 801cb0e:	683b      	ldr	r3, [r7, #0]
 801cb10:	429a      	cmp	r2, r3
 801cb12:	d206      	bcs.n	801cb22 <prvInsertTimerInActiveList+0x62>
 801cb14:	68ba      	ldr	r2, [r7, #8]
 801cb16:	683b      	ldr	r3, [r7, #0]
 801cb18:	429a      	cmp	r2, r3
 801cb1a:	d302      	bcc.n	801cb22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801cb1c:	2301      	movs	r3, #1
 801cb1e:	617b      	str	r3, [r7, #20]
 801cb20:	e007      	b.n	801cb32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801cb22:	4b07      	ldr	r3, [pc, #28]	; (801cb40 <prvInsertTimerInActiveList+0x80>)
 801cb24:	681a      	ldr	r2, [r3, #0]
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	3304      	adds	r3, #4
 801cb2a:	4619      	mov	r1, r3
 801cb2c:	4610      	mov	r0, r2
 801cb2e:	f7fd fb08 	bl	801a142 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801cb32:	697b      	ldr	r3, [r7, #20]
}
 801cb34:	4618      	mov	r0, r3
 801cb36:	3718      	adds	r7, #24
 801cb38:	46bd      	mov	sp, r7
 801cb3a:	bd80      	pop	{r7, pc}
 801cb3c:	2000ce80 	.word	0x2000ce80
 801cb40:	2000ce7c 	.word	0x2000ce7c

0801cb44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801cb44:	b580      	push	{r7, lr}
 801cb46:	b08c      	sub	sp, #48	; 0x30
 801cb48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801cb4a:	e0ae      	b.n	801ccaa <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801cb4c:	68bb      	ldr	r3, [r7, #8]
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	f2c0 80aa 	blt.w	801cca8 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801cb54:	693b      	ldr	r3, [r7, #16]
 801cb56:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801cb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb5a:	695b      	ldr	r3, [r3, #20]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d004      	beq.n	801cb6a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb62:	3304      	adds	r3, #4
 801cb64:	4618      	mov	r0, r3
 801cb66:	f7fd fb25 	bl	801a1b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801cb6a:	1d3b      	adds	r3, r7, #4
 801cb6c:	4618      	mov	r0, r3
 801cb6e:	f7ff ff87 	bl	801ca80 <prvSampleTimeNow>
 801cb72:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 801cb74:	68bb      	ldr	r3, [r7, #8]
 801cb76:	2b09      	cmp	r3, #9
 801cb78:	f200 8097 	bhi.w	801ccaa <prvProcessReceivedCommands+0x166>
 801cb7c:	a201      	add	r2, pc, #4	; (adr r2, 801cb84 <prvProcessReceivedCommands+0x40>)
 801cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb82:	bf00      	nop
 801cb84:	0801cbad 	.word	0x0801cbad
 801cb88:	0801cbad 	.word	0x0801cbad
 801cb8c:	0801cbad 	.word	0x0801cbad
 801cb90:	0801cc21 	.word	0x0801cc21
 801cb94:	0801cc35 	.word	0x0801cc35
 801cb98:	0801cc7f 	.word	0x0801cc7f
 801cb9c:	0801cbad 	.word	0x0801cbad
 801cba0:	0801cbad 	.word	0x0801cbad
 801cba4:	0801cc21 	.word	0x0801cc21
 801cba8:	0801cc35 	.word	0x0801cc35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cbb2:	f043 0301 	orr.w	r3, r3, #1
 801cbb6:	b2da      	uxtb	r2, r3
 801cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801cbbe:	68fa      	ldr	r2, [r7, #12]
 801cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbc2:	699b      	ldr	r3, [r3, #24]
 801cbc4:	18d1      	adds	r1, r2, r3
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	6a3a      	ldr	r2, [r7, #32]
 801cbca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cbcc:	f7ff ff78 	bl	801cac0 <prvInsertTimerInActiveList>
 801cbd0:	4603      	mov	r3, r0
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d069      	beq.n	801ccaa <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbd8:	6a1b      	ldr	r3, [r3, #32]
 801cbda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cbdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801cbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cbe4:	f003 0304 	and.w	r3, r3, #4
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	d05e      	beq.n	801ccaa <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801cbec:	68fa      	ldr	r2, [r7, #12]
 801cbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbf0:	699b      	ldr	r3, [r3, #24]
 801cbf2:	441a      	add	r2, r3
 801cbf4:	2300      	movs	r3, #0
 801cbf6:	9300      	str	r3, [sp, #0]
 801cbf8:	2300      	movs	r3, #0
 801cbfa:	2100      	movs	r1, #0
 801cbfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cbfe:	f7ff fe21 	bl	801c844 <xTimerGenericCommand>
 801cc02:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 801cc04:	69fb      	ldr	r3, [r7, #28]
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d14f      	bne.n	801ccaa <prvProcessReceivedCommands+0x166>
	__asm volatile
 801cc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc0e:	f383 8811 	msr	BASEPRI, r3
 801cc12:	f3bf 8f6f 	isb	sy
 801cc16:	f3bf 8f4f 	dsb	sy
 801cc1a:	61bb      	str	r3, [r7, #24]
}
 801cc1c:	bf00      	nop
 801cc1e:	e7fe      	b.n	801cc1e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cc26:	f023 0301 	bic.w	r3, r3, #1
 801cc2a:	b2da      	uxtb	r2, r3
 801cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 801cc32:	e03a      	b.n	801ccaa <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801cc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cc3a:	f043 0301 	orr.w	r3, r3, #1
 801cc3e:	b2da      	uxtb	r2, r3
 801cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801cc46:	68fa      	ldr	r2, [r7, #12]
 801cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801cc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc4e:	699b      	ldr	r3, [r3, #24]
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d10a      	bne.n	801cc6a <prvProcessReceivedCommands+0x126>
	__asm volatile
 801cc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc58:	f383 8811 	msr	BASEPRI, r3
 801cc5c:	f3bf 8f6f 	isb	sy
 801cc60:	f3bf 8f4f 	dsb	sy
 801cc64:	617b      	str	r3, [r7, #20]
}
 801cc66:	bf00      	nop
 801cc68:	e7fe      	b.n	801cc68 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc6c:	699a      	ldr	r2, [r3, #24]
 801cc6e:	6a3b      	ldr	r3, [r7, #32]
 801cc70:	18d1      	adds	r1, r2, r3
 801cc72:	6a3b      	ldr	r3, [r7, #32]
 801cc74:	6a3a      	ldr	r2, [r7, #32]
 801cc76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cc78:	f7ff ff22 	bl	801cac0 <prvInsertTimerInActiveList>
					break;
 801cc7c:	e015      	b.n	801ccaa <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801cc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cc84:	f003 0302 	and.w	r3, r3, #2
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d103      	bne.n	801cc94 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 801cc8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cc8e:	f000 fb25 	bl	801d2dc <vPortFree>
 801cc92:	e00a      	b.n	801ccaa <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cc9a:	f023 0301 	bic.w	r3, r3, #1
 801cc9e:	b2da      	uxtb	r2, r3
 801cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801cca6:	e000      	b.n	801ccaa <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801cca8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ccaa:	4b08      	ldr	r3, [pc, #32]	; (801cccc <prvProcessReceivedCommands+0x188>)
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	f107 0108 	add.w	r1, r7, #8
 801ccb2:	2200      	movs	r2, #0
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	f7fd fe53 	bl	801a960 <xQueueReceive>
 801ccba:	4603      	mov	r3, r0
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	f47f af45 	bne.w	801cb4c <prvProcessReceivedCommands+0x8>
	}
}
 801ccc2:	bf00      	nop
 801ccc4:	bf00      	nop
 801ccc6:	3728      	adds	r7, #40	; 0x28
 801ccc8:	46bd      	mov	sp, r7
 801ccca:	bd80      	pop	{r7, pc}
 801cccc:	2000ce84 	.word	0x2000ce84

0801ccd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801ccd0:	b580      	push	{r7, lr}
 801ccd2:	b088      	sub	sp, #32
 801ccd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ccd6:	e048      	b.n	801cd6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ccd8:	4b2d      	ldr	r3, [pc, #180]	; (801cd90 <prvSwitchTimerLists+0xc0>)
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	68db      	ldr	r3, [r3, #12]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801cce2:	4b2b      	ldr	r3, [pc, #172]	; (801cd90 <prvSwitchTimerLists+0xc0>)
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	68db      	ldr	r3, [r3, #12]
 801cce8:	68db      	ldr	r3, [r3, #12]
 801ccea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ccec:	68fb      	ldr	r3, [r7, #12]
 801ccee:	3304      	adds	r3, #4
 801ccf0:	4618      	mov	r0, r3
 801ccf2:	f7fd fa5f 	bl	801a1b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ccf6:	68fb      	ldr	r3, [r7, #12]
 801ccf8:	6a1b      	ldr	r3, [r3, #32]
 801ccfa:	68f8      	ldr	r0, [r7, #12]
 801ccfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ccfe:	68fb      	ldr	r3, [r7, #12]
 801cd00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cd04:	f003 0304 	and.w	r3, r3, #4
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d02e      	beq.n	801cd6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801cd0c:	68fb      	ldr	r3, [r7, #12]
 801cd0e:	699b      	ldr	r3, [r3, #24]
 801cd10:	693a      	ldr	r2, [r7, #16]
 801cd12:	4413      	add	r3, r2
 801cd14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801cd16:	68ba      	ldr	r2, [r7, #8]
 801cd18:	693b      	ldr	r3, [r7, #16]
 801cd1a:	429a      	cmp	r2, r3
 801cd1c:	d90e      	bls.n	801cd3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801cd1e:	68fb      	ldr	r3, [r7, #12]
 801cd20:	68ba      	ldr	r2, [r7, #8]
 801cd22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801cd24:	68fb      	ldr	r3, [r7, #12]
 801cd26:	68fa      	ldr	r2, [r7, #12]
 801cd28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801cd2a:	4b19      	ldr	r3, [pc, #100]	; (801cd90 <prvSwitchTimerLists+0xc0>)
 801cd2c:	681a      	ldr	r2, [r3, #0]
 801cd2e:	68fb      	ldr	r3, [r7, #12]
 801cd30:	3304      	adds	r3, #4
 801cd32:	4619      	mov	r1, r3
 801cd34:	4610      	mov	r0, r2
 801cd36:	f7fd fa04 	bl	801a142 <vListInsert>
 801cd3a:	e016      	b.n	801cd6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801cd3c:	2300      	movs	r3, #0
 801cd3e:	9300      	str	r3, [sp, #0]
 801cd40:	2300      	movs	r3, #0
 801cd42:	693a      	ldr	r2, [r7, #16]
 801cd44:	2100      	movs	r1, #0
 801cd46:	68f8      	ldr	r0, [r7, #12]
 801cd48:	f7ff fd7c 	bl	801c844 <xTimerGenericCommand>
 801cd4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d10a      	bne.n	801cd6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 801cd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cd58:	f383 8811 	msr	BASEPRI, r3
 801cd5c:	f3bf 8f6f 	isb	sy
 801cd60:	f3bf 8f4f 	dsb	sy
 801cd64:	603b      	str	r3, [r7, #0]
}
 801cd66:	bf00      	nop
 801cd68:	e7fe      	b.n	801cd68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801cd6a:	4b09      	ldr	r3, [pc, #36]	; (801cd90 <prvSwitchTimerLists+0xc0>)
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	681b      	ldr	r3, [r3, #0]
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d1b1      	bne.n	801ccd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801cd74:	4b06      	ldr	r3, [pc, #24]	; (801cd90 <prvSwitchTimerLists+0xc0>)
 801cd76:	681b      	ldr	r3, [r3, #0]
 801cd78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801cd7a:	4b06      	ldr	r3, [pc, #24]	; (801cd94 <prvSwitchTimerLists+0xc4>)
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	4a04      	ldr	r2, [pc, #16]	; (801cd90 <prvSwitchTimerLists+0xc0>)
 801cd80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801cd82:	4a04      	ldr	r2, [pc, #16]	; (801cd94 <prvSwitchTimerLists+0xc4>)
 801cd84:	697b      	ldr	r3, [r7, #20]
 801cd86:	6013      	str	r3, [r2, #0]
}
 801cd88:	bf00      	nop
 801cd8a:	3718      	adds	r7, #24
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	bd80      	pop	{r7, pc}
 801cd90:	2000ce7c 	.word	0x2000ce7c
 801cd94:	2000ce80 	.word	0x2000ce80

0801cd98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801cd98:	b580      	push	{r7, lr}
 801cd9a:	b082      	sub	sp, #8
 801cd9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801cd9e:	f000 f969 	bl	801d074 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801cda2:	4b15      	ldr	r3, [pc, #84]	; (801cdf8 <prvCheckForValidListAndQueue+0x60>)
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	d120      	bne.n	801cdec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801cdaa:	4814      	ldr	r0, [pc, #80]	; (801cdfc <prvCheckForValidListAndQueue+0x64>)
 801cdac:	f7fd f978 	bl	801a0a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801cdb0:	4813      	ldr	r0, [pc, #76]	; (801ce00 <prvCheckForValidListAndQueue+0x68>)
 801cdb2:	f7fd f975 	bl	801a0a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801cdb6:	4b13      	ldr	r3, [pc, #76]	; (801ce04 <prvCheckForValidListAndQueue+0x6c>)
 801cdb8:	4a10      	ldr	r2, [pc, #64]	; (801cdfc <prvCheckForValidListAndQueue+0x64>)
 801cdba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801cdbc:	4b12      	ldr	r3, [pc, #72]	; (801ce08 <prvCheckForValidListAndQueue+0x70>)
 801cdbe:	4a10      	ldr	r2, [pc, #64]	; (801ce00 <prvCheckForValidListAndQueue+0x68>)
 801cdc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	9300      	str	r3, [sp, #0]
 801cdc6:	4b11      	ldr	r3, [pc, #68]	; (801ce0c <prvCheckForValidListAndQueue+0x74>)
 801cdc8:	4a11      	ldr	r2, [pc, #68]	; (801ce10 <prvCheckForValidListAndQueue+0x78>)
 801cdca:	210c      	movs	r1, #12
 801cdcc:	200a      	movs	r0, #10
 801cdce:	f7fd fa83 	bl	801a2d8 <xQueueGenericCreateStatic>
 801cdd2:	4603      	mov	r3, r0
 801cdd4:	4a08      	ldr	r2, [pc, #32]	; (801cdf8 <prvCheckForValidListAndQueue+0x60>)
 801cdd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801cdd8:	4b07      	ldr	r3, [pc, #28]	; (801cdf8 <prvCheckForValidListAndQueue+0x60>)
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d005      	beq.n	801cdec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801cde0:	4b05      	ldr	r3, [pc, #20]	; (801cdf8 <prvCheckForValidListAndQueue+0x60>)
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	490b      	ldr	r1, [pc, #44]	; (801ce14 <prvCheckForValidListAndQueue+0x7c>)
 801cde6:	4618      	mov	r0, r3
 801cde8:	f7fe f974 	bl	801b0d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801cdec:	f000 f972 	bl	801d0d4 <vPortExitCritical>
}
 801cdf0:	bf00      	nop
 801cdf2:	46bd      	mov	sp, r7
 801cdf4:	bd80      	pop	{r7, pc}
 801cdf6:	bf00      	nop
 801cdf8:	2000ce84 	.word	0x2000ce84
 801cdfc:	2000ce54 	.word	0x2000ce54
 801ce00:	2000ce68 	.word	0x2000ce68
 801ce04:	2000ce7c 	.word	0x2000ce7c
 801ce08:	2000ce80 	.word	0x2000ce80
 801ce0c:	2000cf08 	.word	0x2000cf08
 801ce10:	2000ce90 	.word	0x2000ce90
 801ce14:	0802226c 	.word	0x0802226c

0801ce18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801ce18:	b480      	push	{r7}
 801ce1a:	b085      	sub	sp, #20
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	60f8      	str	r0, [r7, #12]
 801ce20:	60b9      	str	r1, [r7, #8]
 801ce22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	3b04      	subs	r3, #4
 801ce28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ce30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	3b04      	subs	r3, #4
 801ce36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801ce38:	68bb      	ldr	r3, [r7, #8]
 801ce3a:	f023 0201 	bic.w	r2, r3, #1
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	3b04      	subs	r3, #4
 801ce46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801ce48:	4a0c      	ldr	r2, [pc, #48]	; (801ce7c <pxPortInitialiseStack+0x64>)
 801ce4a:	68fb      	ldr	r3, [r7, #12]
 801ce4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801ce4e:	68fb      	ldr	r3, [r7, #12]
 801ce50:	3b14      	subs	r3, #20
 801ce52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801ce54:	687a      	ldr	r2, [r7, #4]
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	3b04      	subs	r3, #4
 801ce5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	f06f 0202 	mvn.w	r2, #2
 801ce66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801ce68:	68fb      	ldr	r3, [r7, #12]
 801ce6a:	3b20      	subs	r3, #32
 801ce6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801ce6e:	68fb      	ldr	r3, [r7, #12]
}
 801ce70:	4618      	mov	r0, r3
 801ce72:	3714      	adds	r7, #20
 801ce74:	46bd      	mov	sp, r7
 801ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce7a:	4770      	bx	lr
 801ce7c:	0801ce81 	.word	0x0801ce81

0801ce80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801ce80:	b480      	push	{r7}
 801ce82:	b085      	sub	sp, #20
 801ce84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801ce86:	2300      	movs	r3, #0
 801ce88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801ce8a:	4b12      	ldr	r3, [pc, #72]	; (801ced4 <prvTaskExitError+0x54>)
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce92:	d00a      	beq.n	801ceaa <prvTaskExitError+0x2a>
	__asm volatile
 801ce94:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ce98:	f383 8811 	msr	BASEPRI, r3
 801ce9c:	f3bf 8f6f 	isb	sy
 801cea0:	f3bf 8f4f 	dsb	sy
 801cea4:	60fb      	str	r3, [r7, #12]
}
 801cea6:	bf00      	nop
 801cea8:	e7fe      	b.n	801cea8 <prvTaskExitError+0x28>
	__asm volatile
 801ceaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ceae:	f383 8811 	msr	BASEPRI, r3
 801ceb2:	f3bf 8f6f 	isb	sy
 801ceb6:	f3bf 8f4f 	dsb	sy
 801ceba:	60bb      	str	r3, [r7, #8]
}
 801cebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801cebe:	bf00      	nop
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d0fc      	beq.n	801cec0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801cec6:	bf00      	nop
 801cec8:	bf00      	nop
 801ceca:	3714      	adds	r7, #20
 801cecc:	46bd      	mov	sp, r7
 801cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ced2:	4770      	bx	lr
 801ced4:	20000098 	.word	0x20000098
	...

0801cee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801cee0:	4b07      	ldr	r3, [pc, #28]	; (801cf00 <pxCurrentTCBConst2>)
 801cee2:	6819      	ldr	r1, [r3, #0]
 801cee4:	6808      	ldr	r0, [r1, #0]
 801cee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceea:	f380 8809 	msr	PSP, r0
 801ceee:	f3bf 8f6f 	isb	sy
 801cef2:	f04f 0000 	mov.w	r0, #0
 801cef6:	f380 8811 	msr	BASEPRI, r0
 801cefa:	4770      	bx	lr
 801cefc:	f3af 8000 	nop.w

0801cf00 <pxCurrentTCBConst2>:
 801cf00:	2000cd20 	.word	0x2000cd20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801cf04:	bf00      	nop
 801cf06:	bf00      	nop

0801cf08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801cf08:	4808      	ldr	r0, [pc, #32]	; (801cf2c <prvPortStartFirstTask+0x24>)
 801cf0a:	6800      	ldr	r0, [r0, #0]
 801cf0c:	6800      	ldr	r0, [r0, #0]
 801cf0e:	f380 8808 	msr	MSP, r0
 801cf12:	f04f 0000 	mov.w	r0, #0
 801cf16:	f380 8814 	msr	CONTROL, r0
 801cf1a:	b662      	cpsie	i
 801cf1c:	b661      	cpsie	f
 801cf1e:	f3bf 8f4f 	dsb	sy
 801cf22:	f3bf 8f6f 	isb	sy
 801cf26:	df00      	svc	0
 801cf28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801cf2a:	bf00      	nop
 801cf2c:	e000ed08 	.word	0xe000ed08

0801cf30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801cf30:	b580      	push	{r7, lr}
 801cf32:	b086      	sub	sp, #24
 801cf34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801cf36:	4b46      	ldr	r3, [pc, #280]	; (801d050 <xPortStartScheduler+0x120>)
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	4a46      	ldr	r2, [pc, #280]	; (801d054 <xPortStartScheduler+0x124>)
 801cf3c:	4293      	cmp	r3, r2
 801cf3e:	d10a      	bne.n	801cf56 <xPortStartScheduler+0x26>
	__asm volatile
 801cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cf44:	f383 8811 	msr	BASEPRI, r3
 801cf48:	f3bf 8f6f 	isb	sy
 801cf4c:	f3bf 8f4f 	dsb	sy
 801cf50:	613b      	str	r3, [r7, #16]
}
 801cf52:	bf00      	nop
 801cf54:	e7fe      	b.n	801cf54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801cf56:	4b3e      	ldr	r3, [pc, #248]	; (801d050 <xPortStartScheduler+0x120>)
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	4a3f      	ldr	r2, [pc, #252]	; (801d058 <xPortStartScheduler+0x128>)
 801cf5c:	4293      	cmp	r3, r2
 801cf5e:	d10a      	bne.n	801cf76 <xPortStartScheduler+0x46>
	__asm volatile
 801cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cf64:	f383 8811 	msr	BASEPRI, r3
 801cf68:	f3bf 8f6f 	isb	sy
 801cf6c:	f3bf 8f4f 	dsb	sy
 801cf70:	60fb      	str	r3, [r7, #12]
}
 801cf72:	bf00      	nop
 801cf74:	e7fe      	b.n	801cf74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801cf76:	4b39      	ldr	r3, [pc, #228]	; (801d05c <xPortStartScheduler+0x12c>)
 801cf78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801cf7a:	697b      	ldr	r3, [r7, #20]
 801cf7c:	781b      	ldrb	r3, [r3, #0]
 801cf7e:	b2db      	uxtb	r3, r3
 801cf80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801cf82:	697b      	ldr	r3, [r7, #20]
 801cf84:	22ff      	movs	r2, #255	; 0xff
 801cf86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801cf88:	697b      	ldr	r3, [r7, #20]
 801cf8a:	781b      	ldrb	r3, [r3, #0]
 801cf8c:	b2db      	uxtb	r3, r3
 801cf8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801cf90:	78fb      	ldrb	r3, [r7, #3]
 801cf92:	b2db      	uxtb	r3, r3
 801cf94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801cf98:	b2da      	uxtb	r2, r3
 801cf9a:	4b31      	ldr	r3, [pc, #196]	; (801d060 <xPortStartScheduler+0x130>)
 801cf9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801cf9e:	4b31      	ldr	r3, [pc, #196]	; (801d064 <xPortStartScheduler+0x134>)
 801cfa0:	2207      	movs	r2, #7
 801cfa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801cfa4:	e009      	b.n	801cfba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801cfa6:	4b2f      	ldr	r3, [pc, #188]	; (801d064 <xPortStartScheduler+0x134>)
 801cfa8:	681b      	ldr	r3, [r3, #0]
 801cfaa:	3b01      	subs	r3, #1
 801cfac:	4a2d      	ldr	r2, [pc, #180]	; (801d064 <xPortStartScheduler+0x134>)
 801cfae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801cfb0:	78fb      	ldrb	r3, [r7, #3]
 801cfb2:	b2db      	uxtb	r3, r3
 801cfb4:	005b      	lsls	r3, r3, #1
 801cfb6:	b2db      	uxtb	r3, r3
 801cfb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801cfba:	78fb      	ldrb	r3, [r7, #3]
 801cfbc:	b2db      	uxtb	r3, r3
 801cfbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cfc2:	2b80      	cmp	r3, #128	; 0x80
 801cfc4:	d0ef      	beq.n	801cfa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801cfc6:	4b27      	ldr	r3, [pc, #156]	; (801d064 <xPortStartScheduler+0x134>)
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	f1c3 0307 	rsb	r3, r3, #7
 801cfce:	2b04      	cmp	r3, #4
 801cfd0:	d00a      	beq.n	801cfe8 <xPortStartScheduler+0xb8>
	__asm volatile
 801cfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cfd6:	f383 8811 	msr	BASEPRI, r3
 801cfda:	f3bf 8f6f 	isb	sy
 801cfde:	f3bf 8f4f 	dsb	sy
 801cfe2:	60bb      	str	r3, [r7, #8]
}
 801cfe4:	bf00      	nop
 801cfe6:	e7fe      	b.n	801cfe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801cfe8:	4b1e      	ldr	r3, [pc, #120]	; (801d064 <xPortStartScheduler+0x134>)
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	021b      	lsls	r3, r3, #8
 801cfee:	4a1d      	ldr	r2, [pc, #116]	; (801d064 <xPortStartScheduler+0x134>)
 801cff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801cff2:	4b1c      	ldr	r3, [pc, #112]	; (801d064 <xPortStartScheduler+0x134>)
 801cff4:	681b      	ldr	r3, [r3, #0]
 801cff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801cffa:	4a1a      	ldr	r2, [pc, #104]	; (801d064 <xPortStartScheduler+0x134>)
 801cffc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	b2da      	uxtb	r2, r3
 801d002:	697b      	ldr	r3, [r7, #20]
 801d004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801d006:	4b18      	ldr	r3, [pc, #96]	; (801d068 <xPortStartScheduler+0x138>)
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	4a17      	ldr	r2, [pc, #92]	; (801d068 <xPortStartScheduler+0x138>)
 801d00c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801d010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801d012:	4b15      	ldr	r3, [pc, #84]	; (801d068 <xPortStartScheduler+0x138>)
 801d014:	681b      	ldr	r3, [r3, #0]
 801d016:	4a14      	ldr	r2, [pc, #80]	; (801d068 <xPortStartScheduler+0x138>)
 801d018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801d01c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801d01e:	f000 f8dd 	bl	801d1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801d022:	4b12      	ldr	r3, [pc, #72]	; (801d06c <xPortStartScheduler+0x13c>)
 801d024:	2200      	movs	r2, #0
 801d026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801d028:	f000 f8fc 	bl	801d224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801d02c:	4b10      	ldr	r3, [pc, #64]	; (801d070 <xPortStartScheduler+0x140>)
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	4a0f      	ldr	r2, [pc, #60]	; (801d070 <xPortStartScheduler+0x140>)
 801d032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801d036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801d038:	f7ff ff66 	bl	801cf08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801d03c:	f7fe fc6e 	bl	801b91c <vTaskSwitchContext>
	prvTaskExitError();
 801d040:	f7ff ff1e 	bl	801ce80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801d044:	2300      	movs	r3, #0
}
 801d046:	4618      	mov	r0, r3
 801d048:	3718      	adds	r7, #24
 801d04a:	46bd      	mov	sp, r7
 801d04c:	bd80      	pop	{r7, pc}
 801d04e:	bf00      	nop
 801d050:	e000ed00 	.word	0xe000ed00
 801d054:	410fc271 	.word	0x410fc271
 801d058:	410fc270 	.word	0x410fc270
 801d05c:	e000e400 	.word	0xe000e400
 801d060:	2000cf50 	.word	0x2000cf50
 801d064:	2000cf54 	.word	0x2000cf54
 801d068:	e000ed20 	.word	0xe000ed20
 801d06c:	20000098 	.word	0x20000098
 801d070:	e000ef34 	.word	0xe000ef34

0801d074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801d074:	b480      	push	{r7}
 801d076:	b083      	sub	sp, #12
 801d078:	af00      	add	r7, sp, #0
	__asm volatile
 801d07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d07e:	f383 8811 	msr	BASEPRI, r3
 801d082:	f3bf 8f6f 	isb	sy
 801d086:	f3bf 8f4f 	dsb	sy
 801d08a:	607b      	str	r3, [r7, #4]
}
 801d08c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801d08e:	4b0f      	ldr	r3, [pc, #60]	; (801d0cc <vPortEnterCritical+0x58>)
 801d090:	681b      	ldr	r3, [r3, #0]
 801d092:	3301      	adds	r3, #1
 801d094:	4a0d      	ldr	r2, [pc, #52]	; (801d0cc <vPortEnterCritical+0x58>)
 801d096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801d098:	4b0c      	ldr	r3, [pc, #48]	; (801d0cc <vPortEnterCritical+0x58>)
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	2b01      	cmp	r3, #1
 801d09e:	d10f      	bne.n	801d0c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801d0a0:	4b0b      	ldr	r3, [pc, #44]	; (801d0d0 <vPortEnterCritical+0x5c>)
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	b2db      	uxtb	r3, r3
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d00a      	beq.n	801d0c0 <vPortEnterCritical+0x4c>
	__asm volatile
 801d0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d0ae:	f383 8811 	msr	BASEPRI, r3
 801d0b2:	f3bf 8f6f 	isb	sy
 801d0b6:	f3bf 8f4f 	dsb	sy
 801d0ba:	603b      	str	r3, [r7, #0]
}
 801d0bc:	bf00      	nop
 801d0be:	e7fe      	b.n	801d0be <vPortEnterCritical+0x4a>
	}
}
 801d0c0:	bf00      	nop
 801d0c2:	370c      	adds	r7, #12
 801d0c4:	46bd      	mov	sp, r7
 801d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ca:	4770      	bx	lr
 801d0cc:	20000098 	.word	0x20000098
 801d0d0:	e000ed04 	.word	0xe000ed04

0801d0d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801d0d4:	b480      	push	{r7}
 801d0d6:	b083      	sub	sp, #12
 801d0d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801d0da:	4b12      	ldr	r3, [pc, #72]	; (801d124 <vPortExitCritical+0x50>)
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d10a      	bne.n	801d0f8 <vPortExitCritical+0x24>
	__asm volatile
 801d0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d0e6:	f383 8811 	msr	BASEPRI, r3
 801d0ea:	f3bf 8f6f 	isb	sy
 801d0ee:	f3bf 8f4f 	dsb	sy
 801d0f2:	607b      	str	r3, [r7, #4]
}
 801d0f4:	bf00      	nop
 801d0f6:	e7fe      	b.n	801d0f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801d0f8:	4b0a      	ldr	r3, [pc, #40]	; (801d124 <vPortExitCritical+0x50>)
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	3b01      	subs	r3, #1
 801d0fe:	4a09      	ldr	r2, [pc, #36]	; (801d124 <vPortExitCritical+0x50>)
 801d100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801d102:	4b08      	ldr	r3, [pc, #32]	; (801d124 <vPortExitCritical+0x50>)
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	2b00      	cmp	r3, #0
 801d108:	d105      	bne.n	801d116 <vPortExitCritical+0x42>
 801d10a:	2300      	movs	r3, #0
 801d10c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801d10e:	683b      	ldr	r3, [r7, #0]
 801d110:	f383 8811 	msr	BASEPRI, r3
}
 801d114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801d116:	bf00      	nop
 801d118:	370c      	adds	r7, #12
 801d11a:	46bd      	mov	sp, r7
 801d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d120:	4770      	bx	lr
 801d122:	bf00      	nop
 801d124:	20000098 	.word	0x20000098
	...

0801d130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801d130:	f3ef 8009 	mrs	r0, PSP
 801d134:	f3bf 8f6f 	isb	sy
 801d138:	4b15      	ldr	r3, [pc, #84]	; (801d190 <pxCurrentTCBConst>)
 801d13a:	681a      	ldr	r2, [r3, #0]
 801d13c:	f01e 0f10 	tst.w	lr, #16
 801d140:	bf08      	it	eq
 801d142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801d146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d14a:	6010      	str	r0, [r2, #0]
 801d14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801d150:	f04f 0050 	mov.w	r0, #80	; 0x50
 801d154:	f380 8811 	msr	BASEPRI, r0
 801d158:	f3bf 8f4f 	dsb	sy
 801d15c:	f3bf 8f6f 	isb	sy
 801d160:	f7fe fbdc 	bl	801b91c <vTaskSwitchContext>
 801d164:	f04f 0000 	mov.w	r0, #0
 801d168:	f380 8811 	msr	BASEPRI, r0
 801d16c:	bc09      	pop	{r0, r3}
 801d16e:	6819      	ldr	r1, [r3, #0]
 801d170:	6808      	ldr	r0, [r1, #0]
 801d172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d176:	f01e 0f10 	tst.w	lr, #16
 801d17a:	bf08      	it	eq
 801d17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801d180:	f380 8809 	msr	PSP, r0
 801d184:	f3bf 8f6f 	isb	sy
 801d188:	4770      	bx	lr
 801d18a:	bf00      	nop
 801d18c:	f3af 8000 	nop.w

0801d190 <pxCurrentTCBConst>:
 801d190:	2000cd20 	.word	0x2000cd20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801d194:	bf00      	nop
 801d196:	bf00      	nop

0801d198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801d198:	b580      	push	{r7, lr}
 801d19a:	b082      	sub	sp, #8
 801d19c:	af00      	add	r7, sp, #0
	__asm volatile
 801d19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d1a2:	f383 8811 	msr	BASEPRI, r3
 801d1a6:	f3bf 8f6f 	isb	sy
 801d1aa:	f3bf 8f4f 	dsb	sy
 801d1ae:	607b      	str	r3, [r7, #4]
}
 801d1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801d1b2:	f7fe fafb 	bl	801b7ac <xTaskIncrementTick>
 801d1b6:	4603      	mov	r3, r0
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d003      	beq.n	801d1c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801d1bc:	4b06      	ldr	r3, [pc, #24]	; (801d1d8 <SysTick_Handler+0x40>)
 801d1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d1c2:	601a      	str	r2, [r3, #0]
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801d1c8:	683b      	ldr	r3, [r7, #0]
 801d1ca:	f383 8811 	msr	BASEPRI, r3
}
 801d1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801d1d0:	bf00      	nop
 801d1d2:	3708      	adds	r7, #8
 801d1d4:	46bd      	mov	sp, r7
 801d1d6:	bd80      	pop	{r7, pc}
 801d1d8:	e000ed04 	.word	0xe000ed04

0801d1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801d1dc:	b480      	push	{r7}
 801d1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801d1e0:	4b0b      	ldr	r3, [pc, #44]	; (801d210 <vPortSetupTimerInterrupt+0x34>)
 801d1e2:	2200      	movs	r2, #0
 801d1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801d1e6:	4b0b      	ldr	r3, [pc, #44]	; (801d214 <vPortSetupTimerInterrupt+0x38>)
 801d1e8:	2200      	movs	r2, #0
 801d1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801d1ec:	4b0a      	ldr	r3, [pc, #40]	; (801d218 <vPortSetupTimerInterrupt+0x3c>)
 801d1ee:	681b      	ldr	r3, [r3, #0]
 801d1f0:	4a0a      	ldr	r2, [pc, #40]	; (801d21c <vPortSetupTimerInterrupt+0x40>)
 801d1f2:	fba2 2303 	umull	r2, r3, r2, r3
 801d1f6:	099b      	lsrs	r3, r3, #6
 801d1f8:	4a09      	ldr	r2, [pc, #36]	; (801d220 <vPortSetupTimerInterrupt+0x44>)
 801d1fa:	3b01      	subs	r3, #1
 801d1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801d1fe:	4b04      	ldr	r3, [pc, #16]	; (801d210 <vPortSetupTimerInterrupt+0x34>)
 801d200:	2207      	movs	r2, #7
 801d202:	601a      	str	r2, [r3, #0]
}
 801d204:	bf00      	nop
 801d206:	46bd      	mov	sp, r7
 801d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d20c:	4770      	bx	lr
 801d20e:	bf00      	nop
 801d210:	e000e010 	.word	0xe000e010
 801d214:	e000e018 	.word	0xe000e018
 801d218:	20000000 	.word	0x20000000
 801d21c:	10624dd3 	.word	0x10624dd3
 801d220:	e000e014 	.word	0xe000e014

0801d224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801d224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801d234 <vPortEnableVFP+0x10>
 801d228:	6801      	ldr	r1, [r0, #0]
 801d22a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801d22e:	6001      	str	r1, [r0, #0]
 801d230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801d232:	bf00      	nop
 801d234:	e000ed88 	.word	0xe000ed88

0801d238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801d238:	b480      	push	{r7}
 801d23a:	b085      	sub	sp, #20
 801d23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801d23e:	f3ef 8305 	mrs	r3, IPSR
 801d242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	2b0f      	cmp	r3, #15
 801d248:	d914      	bls.n	801d274 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801d24a:	4a17      	ldr	r2, [pc, #92]	; (801d2a8 <vPortValidateInterruptPriority+0x70>)
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	4413      	add	r3, r2
 801d250:	781b      	ldrb	r3, [r3, #0]
 801d252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801d254:	4b15      	ldr	r3, [pc, #84]	; (801d2ac <vPortValidateInterruptPriority+0x74>)
 801d256:	781b      	ldrb	r3, [r3, #0]
 801d258:	7afa      	ldrb	r2, [r7, #11]
 801d25a:	429a      	cmp	r2, r3
 801d25c:	d20a      	bcs.n	801d274 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801d25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d262:	f383 8811 	msr	BASEPRI, r3
 801d266:	f3bf 8f6f 	isb	sy
 801d26a:	f3bf 8f4f 	dsb	sy
 801d26e:	607b      	str	r3, [r7, #4]
}
 801d270:	bf00      	nop
 801d272:	e7fe      	b.n	801d272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801d274:	4b0e      	ldr	r3, [pc, #56]	; (801d2b0 <vPortValidateInterruptPriority+0x78>)
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801d27c:	4b0d      	ldr	r3, [pc, #52]	; (801d2b4 <vPortValidateInterruptPriority+0x7c>)
 801d27e:	681b      	ldr	r3, [r3, #0]
 801d280:	429a      	cmp	r2, r3
 801d282:	d90a      	bls.n	801d29a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d288:	f383 8811 	msr	BASEPRI, r3
 801d28c:	f3bf 8f6f 	isb	sy
 801d290:	f3bf 8f4f 	dsb	sy
 801d294:	603b      	str	r3, [r7, #0]
}
 801d296:	bf00      	nop
 801d298:	e7fe      	b.n	801d298 <vPortValidateInterruptPriority+0x60>
	}
 801d29a:	bf00      	nop
 801d29c:	3714      	adds	r7, #20
 801d29e:	46bd      	mov	sp, r7
 801d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2a4:	4770      	bx	lr
 801d2a6:	bf00      	nop
 801d2a8:	e000e3f0 	.word	0xe000e3f0
 801d2ac:	2000cf50 	.word	0x2000cf50
 801d2b0:	e000ed0c 	.word	0xe000ed0c
 801d2b4:	2000cf54 	.word	0x2000cf54

0801d2b8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801d2b8:	b580      	push	{r7, lr}
 801d2ba:	b084      	sub	sp, #16
 801d2bc:	af00      	add	r7, sp, #0
 801d2be:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 801d2c0:	f7fe f9ba 	bl	801b638 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 801d2c4:	6878      	ldr	r0, [r7, #4]
 801d2c6:	f002 f881 	bl	801f3cc <malloc>
 801d2ca:	4603      	mov	r3, r0
 801d2cc:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801d2ce:	f7fe f9c1 	bl	801b654 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 801d2d2:	68fb      	ldr	r3, [r7, #12]
}
 801d2d4:	4618      	mov	r0, r3
 801d2d6:	3710      	adds	r7, #16
 801d2d8:	46bd      	mov	sp, r7
 801d2da:	bd80      	pop	{r7, pc}

0801d2dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801d2dc:	b580      	push	{r7, lr}
 801d2de:	b082      	sub	sp, #8
 801d2e0:	af00      	add	r7, sp, #0
 801d2e2:	6078      	str	r0, [r7, #4]
	if( pv )
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d006      	beq.n	801d2f8 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 801d2ea:	f7fe f9a5 	bl	801b638 <vTaskSuspendAll>
		{
			free( pv );
 801d2ee:	6878      	ldr	r0, [r7, #4]
 801d2f0:	f002 f874 	bl	801f3dc <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 801d2f4:	f7fe f9ae 	bl	801b654 <xTaskResumeAll>
	}
}
 801d2f8:	bf00      	nop
 801d2fa:	3708      	adds	r7, #8
 801d2fc:	46bd      	mov	sp, r7
 801d2fe:	bd80      	pop	{r7, pc}

0801d300 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d300:	b580      	push	{r7, lr}
 801d302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d304:	2200      	movs	r2, #0
 801d306:	4912      	ldr	r1, [pc, #72]	; (801d350 <MX_USB_DEVICE_Init+0x50>)
 801d308:	4812      	ldr	r0, [pc, #72]	; (801d354 <MX_USB_DEVICE_Init+0x54>)
 801d30a:	f7fb f96f 	bl	80185ec <USBD_Init>
 801d30e:	4603      	mov	r3, r0
 801d310:	2b00      	cmp	r3, #0
 801d312:	d001      	beq.n	801d318 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d314:	f7f1 f9c8 	bl	800e6a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d318:	490f      	ldr	r1, [pc, #60]	; (801d358 <MX_USB_DEVICE_Init+0x58>)
 801d31a:	480e      	ldr	r0, [pc, #56]	; (801d354 <MX_USB_DEVICE_Init+0x54>)
 801d31c:	f7fb f996 	bl	801864c <USBD_RegisterClass>
 801d320:	4603      	mov	r3, r0
 801d322:	2b00      	cmp	r3, #0
 801d324:	d001      	beq.n	801d32a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801d326:	f7f1 f9bf 	bl	800e6a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d32a:	490c      	ldr	r1, [pc, #48]	; (801d35c <MX_USB_DEVICE_Init+0x5c>)
 801d32c:	4809      	ldr	r0, [pc, #36]	; (801d354 <MX_USB_DEVICE_Init+0x54>)
 801d32e:	f7fb f887 	bl	8018440 <USBD_CDC_RegisterInterface>
 801d332:	4603      	mov	r3, r0
 801d334:	2b00      	cmp	r3, #0
 801d336:	d001      	beq.n	801d33c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801d338:	f7f1 f9b6 	bl	800e6a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d33c:	4805      	ldr	r0, [pc, #20]	; (801d354 <MX_USB_DEVICE_Init+0x54>)
 801d33e:	f7fb f9bb 	bl	80186b8 <USBD_Start>
 801d342:	4603      	mov	r3, r0
 801d344:	2b00      	cmp	r3, #0
 801d346:	d001      	beq.n	801d34c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801d348:	f7f1 f9ae 	bl	800e6a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d34c:	bf00      	nop
 801d34e:	bd80      	pop	{r7, pc}
 801d350:	200000b0 	.word	0x200000b0
 801d354:	2000cf58 	.word	0x2000cf58
 801d358:	20000018 	.word	0x20000018
 801d35c:	2000009c 	.word	0x2000009c

0801d360 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d360:	b580      	push	{r7, lr}
 801d362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d364:	2200      	movs	r2, #0
 801d366:	4905      	ldr	r1, [pc, #20]	; (801d37c <CDC_Init_FS+0x1c>)
 801d368:	4805      	ldr	r0, [pc, #20]	; (801d380 <CDC_Init_FS+0x20>)
 801d36a:	f7fb f883 	bl	8018474 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d36e:	4905      	ldr	r1, [pc, #20]	; (801d384 <CDC_Init_FS+0x24>)
 801d370:	4803      	ldr	r0, [pc, #12]	; (801d380 <CDC_Init_FS+0x20>)
 801d372:	f7fb f8a1 	bl	80184b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d376:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d378:	4618      	mov	r0, r3
 801d37a:	bd80      	pop	{r7, pc}
 801d37c:	2000da34 	.word	0x2000da34
 801d380:	2000cf58 	.word	0x2000cf58
 801d384:	2000d234 	.word	0x2000d234

0801d388 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d388:	b480      	push	{r7}
 801d38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d38c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d38e:	4618      	mov	r0, r3
 801d390:	46bd      	mov	sp, r7
 801d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d396:	4770      	bx	lr

0801d398 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d398:	b480      	push	{r7}
 801d39a:	b083      	sub	sp, #12
 801d39c:	af00      	add	r7, sp, #0
 801d39e:	4603      	mov	r3, r0
 801d3a0:	6039      	str	r1, [r7, #0]
 801d3a2:	71fb      	strb	r3, [r7, #7]
 801d3a4:	4613      	mov	r3, r2
 801d3a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d3a8:	79fb      	ldrb	r3, [r7, #7]
 801d3aa:	2b23      	cmp	r3, #35	; 0x23
 801d3ac:	d84a      	bhi.n	801d444 <CDC_Control_FS+0xac>
 801d3ae:	a201      	add	r2, pc, #4	; (adr r2, 801d3b4 <CDC_Control_FS+0x1c>)
 801d3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d3b4:	0801d445 	.word	0x0801d445
 801d3b8:	0801d445 	.word	0x0801d445
 801d3bc:	0801d445 	.word	0x0801d445
 801d3c0:	0801d445 	.word	0x0801d445
 801d3c4:	0801d445 	.word	0x0801d445
 801d3c8:	0801d445 	.word	0x0801d445
 801d3cc:	0801d445 	.word	0x0801d445
 801d3d0:	0801d445 	.word	0x0801d445
 801d3d4:	0801d445 	.word	0x0801d445
 801d3d8:	0801d445 	.word	0x0801d445
 801d3dc:	0801d445 	.word	0x0801d445
 801d3e0:	0801d445 	.word	0x0801d445
 801d3e4:	0801d445 	.word	0x0801d445
 801d3e8:	0801d445 	.word	0x0801d445
 801d3ec:	0801d445 	.word	0x0801d445
 801d3f0:	0801d445 	.word	0x0801d445
 801d3f4:	0801d445 	.word	0x0801d445
 801d3f8:	0801d445 	.word	0x0801d445
 801d3fc:	0801d445 	.word	0x0801d445
 801d400:	0801d445 	.word	0x0801d445
 801d404:	0801d445 	.word	0x0801d445
 801d408:	0801d445 	.word	0x0801d445
 801d40c:	0801d445 	.word	0x0801d445
 801d410:	0801d445 	.word	0x0801d445
 801d414:	0801d445 	.word	0x0801d445
 801d418:	0801d445 	.word	0x0801d445
 801d41c:	0801d445 	.word	0x0801d445
 801d420:	0801d445 	.word	0x0801d445
 801d424:	0801d445 	.word	0x0801d445
 801d428:	0801d445 	.word	0x0801d445
 801d42c:	0801d445 	.word	0x0801d445
 801d430:	0801d445 	.word	0x0801d445
 801d434:	0801d445 	.word	0x0801d445
 801d438:	0801d445 	.word	0x0801d445
 801d43c:	0801d445 	.word	0x0801d445
 801d440:	0801d445 	.word	0x0801d445
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d444:	bf00      	nop
  }

  return (USBD_OK);
 801d446:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d448:	4618      	mov	r0, r3
 801d44a:	370c      	adds	r7, #12
 801d44c:	46bd      	mov	sp, r7
 801d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d452:	4770      	bx	lr

0801d454 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d454:	b580      	push	{r7, lr}
 801d456:	b086      	sub	sp, #24
 801d458:	af02      	add	r7, sp, #8
 801d45a:	6078      	str	r0, [r7, #4]
 801d45c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d45e:	2300      	movs	r3, #0
 801d460:	60bb      	str	r3, [r7, #8]
	uint8_t RxLen = (uint8_t)*Len;
 801d462:	683b      	ldr	r3, [r7, #0]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i = 0; i < RxLen; i++)
 801d468:	2300      	movs	r3, #0
 801d46a:	73fb      	strb	r3, [r7, #15]
 801d46c:	e00c      	b.n	801d488 <CDC_Receive_FS+0x34>
	{
		xQueueGenericSendFromISR(usb_RX_Queue, &Buf[i], &xHigherPriorityTaskWoken, queueSEND_TO_BACK);
 801d46e:	4b13      	ldr	r3, [pc, #76]	; (801d4bc <CDC_Receive_FS+0x68>)
 801d470:	6818      	ldr	r0, [r3, #0]
 801d472:	7bfb      	ldrb	r3, [r7, #15]
 801d474:	687a      	ldr	r2, [r7, #4]
 801d476:	18d1      	adds	r1, r2, r3
 801d478:	f107 0208 	add.w	r2, r7, #8
 801d47c:	2300      	movs	r3, #0
 801d47e:	f7fd f947 	bl	801a710 <xQueueGenericSendFromISR>
	for (uint8_t i = 0; i < RxLen; i++)
 801d482:	7bfb      	ldrb	r3, [r7, #15]
 801d484:	3301      	adds	r3, #1
 801d486:	73fb      	strb	r3, [r7, #15]
 801d488:	7bfa      	ldrb	r2, [r7, #15]
 801d48a:	7bbb      	ldrb	r3, [r7, #14]
 801d48c:	429a      	cmp	r2, r3
 801d48e:	d3ee      	bcc.n	801d46e <CDC_Receive_FS+0x1a>
	}
	xTaskNotifyFromISR(UsbRxTaskHandle, AC1_Notify_NewDataAvaiable, eSetBits, &xHigherPriorityTaskWoken);
 801d490:	4b0b      	ldr	r3, [pc, #44]	; (801d4c0 <CDC_Receive_FS+0x6c>)
 801d492:	6818      	ldr	r0, [r3, #0]
 801d494:	f107 0308 	add.w	r3, r7, #8
 801d498:	9300      	str	r3, [sp, #0]
 801d49a:	2300      	movs	r3, #0
 801d49c:	2201      	movs	r2, #1
 801d49e:	2104      	movs	r1, #4
 801d4a0:	f7fe ffa4 	bl	801c3ec <xTaskGenericNotifyFromISR>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d4a4:	6879      	ldr	r1, [r7, #4]
 801d4a6:	4807      	ldr	r0, [pc, #28]	; (801d4c4 <CDC_Receive_FS+0x70>)
 801d4a8:	f7fb f806 	bl	80184b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d4ac:	4805      	ldr	r0, [pc, #20]	; (801d4c4 <CDC_Receive_FS+0x70>)
 801d4ae:	f7fb f867 	bl	8018580 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801d4b2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d4b4:	4618      	mov	r0, r3
 801d4b6:	3710      	adds	r7, #16
 801d4b8:	46bd      	mov	sp, r7
 801d4ba:	bd80      	pop	{r7, pc}
 801d4bc:	20006390 	.word	0x20006390
 801d4c0:	20005a84 	.word	0x20005a84
 801d4c4:	2000cf58 	.word	0x2000cf58

0801d4c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d4c8:	b580      	push	{r7, lr}
 801d4ca:	b084      	sub	sp, #16
 801d4cc:	af00      	add	r7, sp, #0
 801d4ce:	6078      	str	r0, [r7, #4]
 801d4d0:	460b      	mov	r3, r1
 801d4d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801d4d4:	2300      	movs	r3, #0
 801d4d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801d4d8:	4b0d      	ldr	r3, [pc, #52]	; (801d510 <CDC_Transmit_FS+0x48>)
 801d4da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801d4de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801d4e0:	68bb      	ldr	r3, [r7, #8]
 801d4e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d001      	beq.n	801d4ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801d4ea:	2301      	movs	r3, #1
 801d4ec:	e00b      	b.n	801d506 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801d4ee:	887b      	ldrh	r3, [r7, #2]
 801d4f0:	461a      	mov	r2, r3
 801d4f2:	6879      	ldr	r1, [r7, #4]
 801d4f4:	4806      	ldr	r0, [pc, #24]	; (801d510 <CDC_Transmit_FS+0x48>)
 801d4f6:	f7fa ffbd 	bl	8018474 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801d4fa:	4805      	ldr	r0, [pc, #20]	; (801d510 <CDC_Transmit_FS+0x48>)
 801d4fc:	f7fa fffa 	bl	80184f4 <USBD_CDC_TransmitPacket>
 801d500:	4603      	mov	r3, r0
 801d502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801d504:	7bfb      	ldrb	r3, [r7, #15]
}
 801d506:	4618      	mov	r0, r3
 801d508:	3710      	adds	r7, #16
 801d50a:	46bd      	mov	sp, r7
 801d50c:	bd80      	pop	{r7, pc}
 801d50e:	bf00      	nop
 801d510:	2000cf58 	.word	0x2000cf58

0801d514 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801d514:	b480      	push	{r7}
 801d516:	b087      	sub	sp, #28
 801d518:	af00      	add	r7, sp, #0
 801d51a:	60f8      	str	r0, [r7, #12]
 801d51c:	60b9      	str	r1, [r7, #8]
 801d51e:	4613      	mov	r3, r2
 801d520:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801d522:	2300      	movs	r3, #0
 801d524:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801d526:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d52a:	4618      	mov	r0, r3
 801d52c:	371c      	adds	r7, #28
 801d52e:	46bd      	mov	sp, r7
 801d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d534:	4770      	bx	lr
	...

0801d538 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d538:	b480      	push	{r7}
 801d53a:	b083      	sub	sp, #12
 801d53c:	af00      	add	r7, sp, #0
 801d53e:	4603      	mov	r3, r0
 801d540:	6039      	str	r1, [r7, #0]
 801d542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d544:	683b      	ldr	r3, [r7, #0]
 801d546:	2212      	movs	r2, #18
 801d548:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d54a:	4b03      	ldr	r3, [pc, #12]	; (801d558 <USBD_FS_DeviceDescriptor+0x20>)
}
 801d54c:	4618      	mov	r0, r3
 801d54e:	370c      	adds	r7, #12
 801d550:	46bd      	mov	sp, r7
 801d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d556:	4770      	bx	lr
 801d558:	200000cc 	.word	0x200000cc

0801d55c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d55c:	b480      	push	{r7}
 801d55e:	b083      	sub	sp, #12
 801d560:	af00      	add	r7, sp, #0
 801d562:	4603      	mov	r3, r0
 801d564:	6039      	str	r1, [r7, #0]
 801d566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d568:	683b      	ldr	r3, [r7, #0]
 801d56a:	2204      	movs	r2, #4
 801d56c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d56e:	4b03      	ldr	r3, [pc, #12]	; (801d57c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d570:	4618      	mov	r0, r3
 801d572:	370c      	adds	r7, #12
 801d574:	46bd      	mov	sp, r7
 801d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d57a:	4770      	bx	lr
 801d57c:	200000e0 	.word	0x200000e0

0801d580 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d580:	b580      	push	{r7, lr}
 801d582:	b082      	sub	sp, #8
 801d584:	af00      	add	r7, sp, #0
 801d586:	4603      	mov	r3, r0
 801d588:	6039      	str	r1, [r7, #0]
 801d58a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d58c:	79fb      	ldrb	r3, [r7, #7]
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d105      	bne.n	801d59e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d592:	683a      	ldr	r2, [r7, #0]
 801d594:	4907      	ldr	r1, [pc, #28]	; (801d5b4 <USBD_FS_ProductStrDescriptor+0x34>)
 801d596:	4808      	ldr	r0, [pc, #32]	; (801d5b8 <USBD_FS_ProductStrDescriptor+0x38>)
 801d598:	f7fc fa3a 	bl	8019a10 <USBD_GetString>
 801d59c:	e004      	b.n	801d5a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d59e:	683a      	ldr	r2, [r7, #0]
 801d5a0:	4904      	ldr	r1, [pc, #16]	; (801d5b4 <USBD_FS_ProductStrDescriptor+0x34>)
 801d5a2:	4805      	ldr	r0, [pc, #20]	; (801d5b8 <USBD_FS_ProductStrDescriptor+0x38>)
 801d5a4:	f7fc fa34 	bl	8019a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d5a8:	4b02      	ldr	r3, [pc, #8]	; (801d5b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	3708      	adds	r7, #8
 801d5ae:	46bd      	mov	sp, r7
 801d5b0:	bd80      	pop	{r7, pc}
 801d5b2:	bf00      	nop
 801d5b4:	2000e234 	.word	0x2000e234
 801d5b8:	08022274 	.word	0x08022274

0801d5bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b082      	sub	sp, #8
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	4603      	mov	r3, r0
 801d5c4:	6039      	str	r1, [r7, #0]
 801d5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d5c8:	683a      	ldr	r2, [r7, #0]
 801d5ca:	4904      	ldr	r1, [pc, #16]	; (801d5dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801d5cc:	4804      	ldr	r0, [pc, #16]	; (801d5e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d5ce:	f7fc fa1f 	bl	8019a10 <USBD_GetString>
  return USBD_StrDesc;
 801d5d2:	4b02      	ldr	r3, [pc, #8]	; (801d5dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801d5d4:	4618      	mov	r0, r3
 801d5d6:	3708      	adds	r7, #8
 801d5d8:	46bd      	mov	sp, r7
 801d5da:	bd80      	pop	{r7, pc}
 801d5dc:	2000e234 	.word	0x2000e234
 801d5e0:	0802228c 	.word	0x0802228c

0801d5e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d5e4:	b580      	push	{r7, lr}
 801d5e6:	b082      	sub	sp, #8
 801d5e8:	af00      	add	r7, sp, #0
 801d5ea:	4603      	mov	r3, r0
 801d5ec:	6039      	str	r1, [r7, #0]
 801d5ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d5f0:	683b      	ldr	r3, [r7, #0]
 801d5f2:	221a      	movs	r2, #26
 801d5f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d5f6:	f000 f843 	bl	801d680 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d5fa:	4b02      	ldr	r3, [pc, #8]	; (801d604 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801d5fc:	4618      	mov	r0, r3
 801d5fe:	3708      	adds	r7, #8
 801d600:	46bd      	mov	sp, r7
 801d602:	bd80      	pop	{r7, pc}
 801d604:	200000e4 	.word	0x200000e4

0801d608 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d608:	b580      	push	{r7, lr}
 801d60a:	b082      	sub	sp, #8
 801d60c:	af00      	add	r7, sp, #0
 801d60e:	4603      	mov	r3, r0
 801d610:	6039      	str	r1, [r7, #0]
 801d612:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801d614:	79fb      	ldrb	r3, [r7, #7]
 801d616:	2b00      	cmp	r3, #0
 801d618:	d105      	bne.n	801d626 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d61a:	683a      	ldr	r2, [r7, #0]
 801d61c:	4907      	ldr	r1, [pc, #28]	; (801d63c <USBD_FS_ConfigStrDescriptor+0x34>)
 801d61e:	4808      	ldr	r0, [pc, #32]	; (801d640 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d620:	f7fc f9f6 	bl	8019a10 <USBD_GetString>
 801d624:	e004      	b.n	801d630 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d626:	683a      	ldr	r2, [r7, #0]
 801d628:	4904      	ldr	r1, [pc, #16]	; (801d63c <USBD_FS_ConfigStrDescriptor+0x34>)
 801d62a:	4805      	ldr	r0, [pc, #20]	; (801d640 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d62c:	f7fc f9f0 	bl	8019a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d630:	4b02      	ldr	r3, [pc, #8]	; (801d63c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801d632:	4618      	mov	r0, r3
 801d634:	3708      	adds	r7, #8
 801d636:	46bd      	mov	sp, r7
 801d638:	bd80      	pop	{r7, pc}
 801d63a:	bf00      	nop
 801d63c:	2000e234 	.word	0x2000e234
 801d640:	080222a0 	.word	0x080222a0

0801d644 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d644:	b580      	push	{r7, lr}
 801d646:	b082      	sub	sp, #8
 801d648:	af00      	add	r7, sp, #0
 801d64a:	4603      	mov	r3, r0
 801d64c:	6039      	str	r1, [r7, #0]
 801d64e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d650:	79fb      	ldrb	r3, [r7, #7]
 801d652:	2b00      	cmp	r3, #0
 801d654:	d105      	bne.n	801d662 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d656:	683a      	ldr	r2, [r7, #0]
 801d658:	4907      	ldr	r1, [pc, #28]	; (801d678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d65a:	4808      	ldr	r0, [pc, #32]	; (801d67c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d65c:	f7fc f9d8 	bl	8019a10 <USBD_GetString>
 801d660:	e004      	b.n	801d66c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d662:	683a      	ldr	r2, [r7, #0]
 801d664:	4904      	ldr	r1, [pc, #16]	; (801d678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d666:	4805      	ldr	r0, [pc, #20]	; (801d67c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d668:	f7fc f9d2 	bl	8019a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d66c:	4b02      	ldr	r3, [pc, #8]	; (801d678 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801d66e:	4618      	mov	r0, r3
 801d670:	3708      	adds	r7, #8
 801d672:	46bd      	mov	sp, r7
 801d674:	bd80      	pop	{r7, pc}
 801d676:	bf00      	nop
 801d678:	2000e234 	.word	0x2000e234
 801d67c:	080222ac 	.word	0x080222ac

0801d680 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d680:	b580      	push	{r7, lr}
 801d682:	b084      	sub	sp, #16
 801d684:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d686:	4b0f      	ldr	r3, [pc, #60]	; (801d6c4 <Get_SerialNum+0x44>)
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d68c:	4b0e      	ldr	r3, [pc, #56]	; (801d6c8 <Get_SerialNum+0x48>)
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d692:	4b0e      	ldr	r3, [pc, #56]	; (801d6cc <Get_SerialNum+0x4c>)
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d698:	68fa      	ldr	r2, [r7, #12]
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	4413      	add	r3, r2
 801d69e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d009      	beq.n	801d6ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d6a6:	2208      	movs	r2, #8
 801d6a8:	4909      	ldr	r1, [pc, #36]	; (801d6d0 <Get_SerialNum+0x50>)
 801d6aa:	68f8      	ldr	r0, [r7, #12]
 801d6ac:	f000 f814 	bl	801d6d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d6b0:	2204      	movs	r2, #4
 801d6b2:	4908      	ldr	r1, [pc, #32]	; (801d6d4 <Get_SerialNum+0x54>)
 801d6b4:	68b8      	ldr	r0, [r7, #8]
 801d6b6:	f000 f80f 	bl	801d6d8 <IntToUnicode>
  }
}
 801d6ba:	bf00      	nop
 801d6bc:	3710      	adds	r7, #16
 801d6be:	46bd      	mov	sp, r7
 801d6c0:	bd80      	pop	{r7, pc}
 801d6c2:	bf00      	nop
 801d6c4:	1fff7a10 	.word	0x1fff7a10
 801d6c8:	1fff7a14 	.word	0x1fff7a14
 801d6cc:	1fff7a18 	.word	0x1fff7a18
 801d6d0:	200000e6 	.word	0x200000e6
 801d6d4:	200000f6 	.word	0x200000f6

0801d6d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d6d8:	b480      	push	{r7}
 801d6da:	b087      	sub	sp, #28
 801d6dc:	af00      	add	r7, sp, #0
 801d6de:	60f8      	str	r0, [r7, #12]
 801d6e0:	60b9      	str	r1, [r7, #8]
 801d6e2:	4613      	mov	r3, r2
 801d6e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801d6e6:	2300      	movs	r3, #0
 801d6e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801d6ea:	2300      	movs	r3, #0
 801d6ec:	75fb      	strb	r3, [r7, #23]
 801d6ee:	e027      	b.n	801d740 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	0f1b      	lsrs	r3, r3, #28
 801d6f4:	2b09      	cmp	r3, #9
 801d6f6:	d80b      	bhi.n	801d710 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d6f8:	68fb      	ldr	r3, [r7, #12]
 801d6fa:	0f1b      	lsrs	r3, r3, #28
 801d6fc:	b2da      	uxtb	r2, r3
 801d6fe:	7dfb      	ldrb	r3, [r7, #23]
 801d700:	005b      	lsls	r3, r3, #1
 801d702:	4619      	mov	r1, r3
 801d704:	68bb      	ldr	r3, [r7, #8]
 801d706:	440b      	add	r3, r1
 801d708:	3230      	adds	r2, #48	; 0x30
 801d70a:	b2d2      	uxtb	r2, r2
 801d70c:	701a      	strb	r2, [r3, #0]
 801d70e:	e00a      	b.n	801d726 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	0f1b      	lsrs	r3, r3, #28
 801d714:	b2da      	uxtb	r2, r3
 801d716:	7dfb      	ldrb	r3, [r7, #23]
 801d718:	005b      	lsls	r3, r3, #1
 801d71a:	4619      	mov	r1, r3
 801d71c:	68bb      	ldr	r3, [r7, #8]
 801d71e:	440b      	add	r3, r1
 801d720:	3237      	adds	r2, #55	; 0x37
 801d722:	b2d2      	uxtb	r2, r2
 801d724:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d726:	68fb      	ldr	r3, [r7, #12]
 801d728:	011b      	lsls	r3, r3, #4
 801d72a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d72c:	7dfb      	ldrb	r3, [r7, #23]
 801d72e:	005b      	lsls	r3, r3, #1
 801d730:	3301      	adds	r3, #1
 801d732:	68ba      	ldr	r2, [r7, #8]
 801d734:	4413      	add	r3, r2
 801d736:	2200      	movs	r2, #0
 801d738:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d73a:	7dfb      	ldrb	r3, [r7, #23]
 801d73c:	3301      	adds	r3, #1
 801d73e:	75fb      	strb	r3, [r7, #23]
 801d740:	7dfa      	ldrb	r2, [r7, #23]
 801d742:	79fb      	ldrb	r3, [r7, #7]
 801d744:	429a      	cmp	r2, r3
 801d746:	d3d3      	bcc.n	801d6f0 <IntToUnicode+0x18>
  }
}
 801d748:	bf00      	nop
 801d74a:	bf00      	nop
 801d74c:	371c      	adds	r7, #28
 801d74e:	46bd      	mov	sp, r7
 801d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d754:	4770      	bx	lr
	...

0801d758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d758:	b580      	push	{r7, lr}
 801d75a:	b08a      	sub	sp, #40	; 0x28
 801d75c:	af00      	add	r7, sp, #0
 801d75e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d760:	f107 0314 	add.w	r3, r7, #20
 801d764:	2200      	movs	r2, #0
 801d766:	601a      	str	r2, [r3, #0]
 801d768:	605a      	str	r2, [r3, #4]
 801d76a:	609a      	str	r2, [r3, #8]
 801d76c:	60da      	str	r2, [r3, #12]
 801d76e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d778:	d13a      	bne.n	801d7f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d77a:	2300      	movs	r3, #0
 801d77c:	613b      	str	r3, [r7, #16]
 801d77e:	4b1e      	ldr	r3, [pc, #120]	; (801d7f8 <HAL_PCD_MspInit+0xa0>)
 801d780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d782:	4a1d      	ldr	r2, [pc, #116]	; (801d7f8 <HAL_PCD_MspInit+0xa0>)
 801d784:	f043 0301 	orr.w	r3, r3, #1
 801d788:	6313      	str	r3, [r2, #48]	; 0x30
 801d78a:	4b1b      	ldr	r3, [pc, #108]	; (801d7f8 <HAL_PCD_MspInit+0xa0>)
 801d78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d78e:	f003 0301 	and.w	r3, r3, #1
 801d792:	613b      	str	r3, [r7, #16]
 801d794:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801d796:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801d79a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d79c:	2302      	movs	r3, #2
 801d79e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d7a0:	2300      	movs	r3, #0
 801d7a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d7a4:	2303      	movs	r3, #3
 801d7a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d7a8:	230a      	movs	r3, #10
 801d7aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d7ac:	f107 0314 	add.w	r3, r7, #20
 801d7b0:	4619      	mov	r1, r3
 801d7b2:	4812      	ldr	r0, [pc, #72]	; (801d7fc <HAL_PCD_MspInit+0xa4>)
 801d7b4:	f7f2 fc62 	bl	801007c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d7b8:	4b0f      	ldr	r3, [pc, #60]	; (801d7f8 <HAL_PCD_MspInit+0xa0>)
 801d7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d7bc:	4a0e      	ldr	r2, [pc, #56]	; (801d7f8 <HAL_PCD_MspInit+0xa0>)
 801d7be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d7c2:	6353      	str	r3, [r2, #52]	; 0x34
 801d7c4:	2300      	movs	r3, #0
 801d7c6:	60fb      	str	r3, [r7, #12]
 801d7c8:	4b0b      	ldr	r3, [pc, #44]	; (801d7f8 <HAL_PCD_MspInit+0xa0>)
 801d7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d7cc:	4a0a      	ldr	r2, [pc, #40]	; (801d7f8 <HAL_PCD_MspInit+0xa0>)
 801d7ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d7d2:	6453      	str	r3, [r2, #68]	; 0x44
 801d7d4:	4b08      	ldr	r3, [pc, #32]	; (801d7f8 <HAL_PCD_MspInit+0xa0>)
 801d7d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d7d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d7dc:	60fb      	str	r3, [r7, #12]
 801d7de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801d7e0:	2200      	movs	r2, #0
 801d7e2:	2105      	movs	r1, #5
 801d7e4:	2043      	movs	r0, #67	; 0x43
 801d7e6:	f7f1 fd7f 	bl	800f2e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d7ea:	2043      	movs	r0, #67	; 0x43
 801d7ec:	f7f1 fd98 	bl	800f320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d7f0:	bf00      	nop
 801d7f2:	3728      	adds	r7, #40	; 0x28
 801d7f4:	46bd      	mov	sp, r7
 801d7f6:	bd80      	pop	{r7, pc}
 801d7f8:	40023800 	.word	0x40023800
 801d7fc:	40020000 	.word	0x40020000

0801d800 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d800:	b580      	push	{r7, lr}
 801d802:	b082      	sub	sp, #8
 801d804:	af00      	add	r7, sp, #0
 801d806:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801d814:	4619      	mov	r1, r3
 801d816:	4610      	mov	r0, r2
 801d818:	f7fa ff9b 	bl	8018752 <USBD_LL_SetupStage>
}
 801d81c:	bf00      	nop
 801d81e:	3708      	adds	r7, #8
 801d820:	46bd      	mov	sp, r7
 801d822:	bd80      	pop	{r7, pc}

0801d824 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d824:	b580      	push	{r7, lr}
 801d826:	b082      	sub	sp, #8
 801d828:	af00      	add	r7, sp, #0
 801d82a:	6078      	str	r0, [r7, #4]
 801d82c:	460b      	mov	r3, r1
 801d82e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801d836:	78fa      	ldrb	r2, [r7, #3]
 801d838:	6879      	ldr	r1, [r7, #4]
 801d83a:	4613      	mov	r3, r2
 801d83c:	00db      	lsls	r3, r3, #3
 801d83e:	4413      	add	r3, r2
 801d840:	009b      	lsls	r3, r3, #2
 801d842:	440b      	add	r3, r1
 801d844:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801d848:	681a      	ldr	r2, [r3, #0]
 801d84a:	78fb      	ldrb	r3, [r7, #3]
 801d84c:	4619      	mov	r1, r3
 801d84e:	f7fa ffd5 	bl	80187fc <USBD_LL_DataOutStage>
}
 801d852:	bf00      	nop
 801d854:	3708      	adds	r7, #8
 801d856:	46bd      	mov	sp, r7
 801d858:	bd80      	pop	{r7, pc}

0801d85a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d85a:	b580      	push	{r7, lr}
 801d85c:	b082      	sub	sp, #8
 801d85e:	af00      	add	r7, sp, #0
 801d860:	6078      	str	r0, [r7, #4]
 801d862:	460b      	mov	r3, r1
 801d864:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801d86c:	78fa      	ldrb	r2, [r7, #3]
 801d86e:	6879      	ldr	r1, [r7, #4]
 801d870:	4613      	mov	r3, r2
 801d872:	00db      	lsls	r3, r3, #3
 801d874:	4413      	add	r3, r2
 801d876:	009b      	lsls	r3, r3, #2
 801d878:	440b      	add	r3, r1
 801d87a:	334c      	adds	r3, #76	; 0x4c
 801d87c:	681a      	ldr	r2, [r3, #0]
 801d87e:	78fb      	ldrb	r3, [r7, #3]
 801d880:	4619      	mov	r1, r3
 801d882:	f7fb f86e 	bl	8018962 <USBD_LL_DataInStage>
}
 801d886:	bf00      	nop
 801d888:	3708      	adds	r7, #8
 801d88a:	46bd      	mov	sp, r7
 801d88c:	bd80      	pop	{r7, pc}

0801d88e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d88e:	b580      	push	{r7, lr}
 801d890:	b082      	sub	sp, #8
 801d892:	af00      	add	r7, sp, #0
 801d894:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d89c:	4618      	mov	r0, r3
 801d89e:	f7fb f9a2 	bl	8018be6 <USBD_LL_SOF>
}
 801d8a2:	bf00      	nop
 801d8a4:	3708      	adds	r7, #8
 801d8a6:	46bd      	mov	sp, r7
 801d8a8:	bd80      	pop	{r7, pc}

0801d8aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d8aa:	b580      	push	{r7, lr}
 801d8ac:	b084      	sub	sp, #16
 801d8ae:	af00      	add	r7, sp, #0
 801d8b0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d8b2:	2301      	movs	r3, #1
 801d8b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	68db      	ldr	r3, [r3, #12]
 801d8ba:	2b02      	cmp	r3, #2
 801d8bc:	d001      	beq.n	801d8c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801d8be:	f7f0 fef3 	bl	800e6a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d8c8:	7bfa      	ldrb	r2, [r7, #15]
 801d8ca:	4611      	mov	r1, r2
 801d8cc:	4618      	mov	r0, r3
 801d8ce:	f7fb f94c 	bl	8018b6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d8d2:	687b      	ldr	r3, [r7, #4]
 801d8d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d8d8:	4618      	mov	r0, r3
 801d8da:	f7fb f8f4 	bl	8018ac6 <USBD_LL_Reset>
}
 801d8de:	bf00      	nop
 801d8e0:	3710      	adds	r7, #16
 801d8e2:	46bd      	mov	sp, r7
 801d8e4:	bd80      	pop	{r7, pc}
	...

0801d8e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d8e8:	b580      	push	{r7, lr}
 801d8ea:	b082      	sub	sp, #8
 801d8ec:	af00      	add	r7, sp, #0
 801d8ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d8f6:	4618      	mov	r0, r3
 801d8f8:	f7fb f947 	bl	8018b8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	681b      	ldr	r3, [r3, #0]
 801d900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	687a      	ldr	r2, [r7, #4]
 801d908:	6812      	ldr	r2, [r2, #0]
 801d90a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801d90e:	f043 0301 	orr.w	r3, r3, #1
 801d912:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	6a1b      	ldr	r3, [r3, #32]
 801d918:	2b00      	cmp	r3, #0
 801d91a:	d005      	beq.n	801d928 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d91c:	4b04      	ldr	r3, [pc, #16]	; (801d930 <HAL_PCD_SuspendCallback+0x48>)
 801d91e:	691b      	ldr	r3, [r3, #16]
 801d920:	4a03      	ldr	r2, [pc, #12]	; (801d930 <HAL_PCD_SuspendCallback+0x48>)
 801d922:	f043 0306 	orr.w	r3, r3, #6
 801d926:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d928:	bf00      	nop
 801d92a:	3708      	adds	r7, #8
 801d92c:	46bd      	mov	sp, r7
 801d92e:	bd80      	pop	{r7, pc}
 801d930:	e000ed00 	.word	0xe000ed00

0801d934 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d934:	b580      	push	{r7, lr}
 801d936:	b082      	sub	sp, #8
 801d938:	af00      	add	r7, sp, #0
 801d93a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d942:	4618      	mov	r0, r3
 801d944:	f7fb f937 	bl	8018bb6 <USBD_LL_Resume>
}
 801d948:	bf00      	nop
 801d94a:	3708      	adds	r7, #8
 801d94c:	46bd      	mov	sp, r7
 801d94e:	bd80      	pop	{r7, pc}

0801d950 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d950:	b580      	push	{r7, lr}
 801d952:	b082      	sub	sp, #8
 801d954:	af00      	add	r7, sp, #0
 801d956:	6078      	str	r0, [r7, #4]
 801d958:	460b      	mov	r3, r1
 801d95a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d962:	78fa      	ldrb	r2, [r7, #3]
 801d964:	4611      	mov	r1, r2
 801d966:	4618      	mov	r0, r3
 801d968:	f7fb f98f 	bl	8018c8a <USBD_LL_IsoOUTIncomplete>
}
 801d96c:	bf00      	nop
 801d96e:	3708      	adds	r7, #8
 801d970:	46bd      	mov	sp, r7
 801d972:	bd80      	pop	{r7, pc}

0801d974 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d974:	b580      	push	{r7, lr}
 801d976:	b082      	sub	sp, #8
 801d978:	af00      	add	r7, sp, #0
 801d97a:	6078      	str	r0, [r7, #4]
 801d97c:	460b      	mov	r3, r1
 801d97e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d986:	78fa      	ldrb	r2, [r7, #3]
 801d988:	4611      	mov	r1, r2
 801d98a:	4618      	mov	r0, r3
 801d98c:	f7fb f94b 	bl	8018c26 <USBD_LL_IsoINIncomplete>
}
 801d990:	bf00      	nop
 801d992:	3708      	adds	r7, #8
 801d994:	46bd      	mov	sp, r7
 801d996:	bd80      	pop	{r7, pc}

0801d998 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d998:	b580      	push	{r7, lr}
 801d99a:	b082      	sub	sp, #8
 801d99c:	af00      	add	r7, sp, #0
 801d99e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d9a6:	4618      	mov	r0, r3
 801d9a8:	f7fb f9a1 	bl	8018cee <USBD_LL_DevConnected>
}
 801d9ac:	bf00      	nop
 801d9ae:	3708      	adds	r7, #8
 801d9b0:	46bd      	mov	sp, r7
 801d9b2:	bd80      	pop	{r7, pc}

0801d9b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d9b4:	b580      	push	{r7, lr}
 801d9b6:	b082      	sub	sp, #8
 801d9b8:	af00      	add	r7, sp, #0
 801d9ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801d9c2:	4618      	mov	r0, r3
 801d9c4:	f7fb f99e 	bl	8018d04 <USBD_LL_DevDisconnected>
}
 801d9c8:	bf00      	nop
 801d9ca:	3708      	adds	r7, #8
 801d9cc:	46bd      	mov	sp, r7
 801d9ce:	bd80      	pop	{r7, pc}

0801d9d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d9d0:	b580      	push	{r7, lr}
 801d9d2:	b082      	sub	sp, #8
 801d9d4:	af00      	add	r7, sp, #0
 801d9d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	781b      	ldrb	r3, [r3, #0]
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	d13c      	bne.n	801da5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d9e0:	4a20      	ldr	r2, [pc, #128]	; (801da64 <USBD_LL_Init+0x94>)
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	4a1e      	ldr	r2, [pc, #120]	; (801da64 <USBD_LL_Init+0x94>)
 801d9ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d9f0:	4b1c      	ldr	r3, [pc, #112]	; (801da64 <USBD_LL_Init+0x94>)
 801d9f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801d9f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d9f8:	4b1a      	ldr	r3, [pc, #104]	; (801da64 <USBD_LL_Init+0x94>)
 801d9fa:	2204      	movs	r2, #4
 801d9fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d9fe:	4b19      	ldr	r3, [pc, #100]	; (801da64 <USBD_LL_Init+0x94>)
 801da00:	2202      	movs	r2, #2
 801da02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801da04:	4b17      	ldr	r3, [pc, #92]	; (801da64 <USBD_LL_Init+0x94>)
 801da06:	2200      	movs	r2, #0
 801da08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801da0a:	4b16      	ldr	r3, [pc, #88]	; (801da64 <USBD_LL_Init+0x94>)
 801da0c:	2202      	movs	r2, #2
 801da0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801da10:	4b14      	ldr	r3, [pc, #80]	; (801da64 <USBD_LL_Init+0x94>)
 801da12:	2200      	movs	r2, #0
 801da14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801da16:	4b13      	ldr	r3, [pc, #76]	; (801da64 <USBD_LL_Init+0x94>)
 801da18:	2200      	movs	r2, #0
 801da1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801da1c:	4b11      	ldr	r3, [pc, #68]	; (801da64 <USBD_LL_Init+0x94>)
 801da1e:	2200      	movs	r2, #0
 801da20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801da22:	4b10      	ldr	r3, [pc, #64]	; (801da64 <USBD_LL_Init+0x94>)
 801da24:	2200      	movs	r2, #0
 801da26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801da28:	4b0e      	ldr	r3, [pc, #56]	; (801da64 <USBD_LL_Init+0x94>)
 801da2a:	2200      	movs	r2, #0
 801da2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801da2e:	480d      	ldr	r0, [pc, #52]	; (801da64 <USBD_LL_Init+0x94>)
 801da30:	f7f4 fd31 	bl	8012496 <HAL_PCD_Init>
 801da34:	4603      	mov	r3, r0
 801da36:	2b00      	cmp	r3, #0
 801da38:	d001      	beq.n	801da3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801da3a:	f7f0 fe35 	bl	800e6a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801da3e:	2180      	movs	r1, #128	; 0x80
 801da40:	4808      	ldr	r0, [pc, #32]	; (801da64 <USBD_LL_Init+0x94>)
 801da42:	f7f5 ff88 	bl	8013956 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801da46:	2240      	movs	r2, #64	; 0x40
 801da48:	2100      	movs	r1, #0
 801da4a:	4806      	ldr	r0, [pc, #24]	; (801da64 <USBD_LL_Init+0x94>)
 801da4c:	f7f5 ff3c 	bl	80138c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801da50:	2280      	movs	r2, #128	; 0x80
 801da52:	2101      	movs	r1, #1
 801da54:	4803      	ldr	r0, [pc, #12]	; (801da64 <USBD_LL_Init+0x94>)
 801da56:	f7f5 ff37 	bl	80138c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801da5a:	2300      	movs	r3, #0
}
 801da5c:	4618      	mov	r0, r3
 801da5e:	3708      	adds	r7, #8
 801da60:	46bd      	mov	sp, r7
 801da62:	bd80      	pop	{r7, pc}
 801da64:	2000e434 	.word	0x2000e434

0801da68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801da68:	b580      	push	{r7, lr}
 801da6a:	b084      	sub	sp, #16
 801da6c:	af00      	add	r7, sp, #0
 801da6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801da70:	2300      	movs	r3, #0
 801da72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da74:	2300      	movs	r3, #0
 801da76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801da7e:	4618      	mov	r0, r3
 801da80:	f7f4 fe26 	bl	80126d0 <HAL_PCD_Start>
 801da84:	4603      	mov	r3, r0
 801da86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801da88:	7bfb      	ldrb	r3, [r7, #15]
 801da8a:	4618      	mov	r0, r3
 801da8c:	f000 f942 	bl	801dd14 <USBD_Get_USB_Status>
 801da90:	4603      	mov	r3, r0
 801da92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801da94:	7bbb      	ldrb	r3, [r7, #14]
}
 801da96:	4618      	mov	r0, r3
 801da98:	3710      	adds	r7, #16
 801da9a:	46bd      	mov	sp, r7
 801da9c:	bd80      	pop	{r7, pc}

0801da9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801da9e:	b580      	push	{r7, lr}
 801daa0:	b084      	sub	sp, #16
 801daa2:	af00      	add	r7, sp, #0
 801daa4:	6078      	str	r0, [r7, #4]
 801daa6:	4608      	mov	r0, r1
 801daa8:	4611      	mov	r1, r2
 801daaa:	461a      	mov	r2, r3
 801daac:	4603      	mov	r3, r0
 801daae:	70fb      	strb	r3, [r7, #3]
 801dab0:	460b      	mov	r3, r1
 801dab2:	70bb      	strb	r3, [r7, #2]
 801dab4:	4613      	mov	r3, r2
 801dab6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dab8:	2300      	movs	r3, #0
 801daba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dabc:	2300      	movs	r3, #0
 801dabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801dac6:	78bb      	ldrb	r3, [r7, #2]
 801dac8:	883a      	ldrh	r2, [r7, #0]
 801daca:	78f9      	ldrb	r1, [r7, #3]
 801dacc:	f7f5 faf7 	bl	80130be <HAL_PCD_EP_Open>
 801dad0:	4603      	mov	r3, r0
 801dad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dad4:	7bfb      	ldrb	r3, [r7, #15]
 801dad6:	4618      	mov	r0, r3
 801dad8:	f000 f91c 	bl	801dd14 <USBD_Get_USB_Status>
 801dadc:	4603      	mov	r3, r0
 801dade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dae0:	7bbb      	ldrb	r3, [r7, #14]
}
 801dae2:	4618      	mov	r0, r3
 801dae4:	3710      	adds	r7, #16
 801dae6:	46bd      	mov	sp, r7
 801dae8:	bd80      	pop	{r7, pc}

0801daea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801daea:	b580      	push	{r7, lr}
 801daec:	b084      	sub	sp, #16
 801daee:	af00      	add	r7, sp, #0
 801daf0:	6078      	str	r0, [r7, #4]
 801daf2:	460b      	mov	r3, r1
 801daf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801daf6:	2300      	movs	r3, #0
 801daf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dafa:	2300      	movs	r3, #0
 801dafc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801db04:	78fa      	ldrb	r2, [r7, #3]
 801db06:	4611      	mov	r1, r2
 801db08:	4618      	mov	r0, r3
 801db0a:	f7f5 fb40 	bl	801318e <HAL_PCD_EP_Close>
 801db0e:	4603      	mov	r3, r0
 801db10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801db12:	7bfb      	ldrb	r3, [r7, #15]
 801db14:	4618      	mov	r0, r3
 801db16:	f000 f8fd 	bl	801dd14 <USBD_Get_USB_Status>
 801db1a:	4603      	mov	r3, r0
 801db1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801db1e:	7bbb      	ldrb	r3, [r7, #14]
}
 801db20:	4618      	mov	r0, r3
 801db22:	3710      	adds	r7, #16
 801db24:	46bd      	mov	sp, r7
 801db26:	bd80      	pop	{r7, pc}

0801db28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801db28:	b580      	push	{r7, lr}
 801db2a:	b084      	sub	sp, #16
 801db2c:	af00      	add	r7, sp, #0
 801db2e:	6078      	str	r0, [r7, #4]
 801db30:	460b      	mov	r3, r1
 801db32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801db34:	2300      	movs	r3, #0
 801db36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801db38:	2300      	movs	r3, #0
 801db3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801db42:	78fa      	ldrb	r2, [r7, #3]
 801db44:	4611      	mov	r1, r2
 801db46:	4618      	mov	r0, r3
 801db48:	f7f5 fc18 	bl	801337c <HAL_PCD_EP_SetStall>
 801db4c:	4603      	mov	r3, r0
 801db4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801db50:	7bfb      	ldrb	r3, [r7, #15]
 801db52:	4618      	mov	r0, r3
 801db54:	f000 f8de 	bl	801dd14 <USBD_Get_USB_Status>
 801db58:	4603      	mov	r3, r0
 801db5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801db5c:	7bbb      	ldrb	r3, [r7, #14]
}
 801db5e:	4618      	mov	r0, r3
 801db60:	3710      	adds	r7, #16
 801db62:	46bd      	mov	sp, r7
 801db64:	bd80      	pop	{r7, pc}

0801db66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801db66:	b580      	push	{r7, lr}
 801db68:	b084      	sub	sp, #16
 801db6a:	af00      	add	r7, sp, #0
 801db6c:	6078      	str	r0, [r7, #4]
 801db6e:	460b      	mov	r3, r1
 801db70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801db72:	2300      	movs	r3, #0
 801db74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801db76:	2300      	movs	r3, #0
 801db78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801db7a:	687b      	ldr	r3, [r7, #4]
 801db7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801db80:	78fa      	ldrb	r2, [r7, #3]
 801db82:	4611      	mov	r1, r2
 801db84:	4618      	mov	r0, r3
 801db86:	f7f5 fc5d 	bl	8013444 <HAL_PCD_EP_ClrStall>
 801db8a:	4603      	mov	r3, r0
 801db8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801db8e:	7bfb      	ldrb	r3, [r7, #15]
 801db90:	4618      	mov	r0, r3
 801db92:	f000 f8bf 	bl	801dd14 <USBD_Get_USB_Status>
 801db96:	4603      	mov	r3, r0
 801db98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801db9a:	7bbb      	ldrb	r3, [r7, #14]
}
 801db9c:	4618      	mov	r0, r3
 801db9e:	3710      	adds	r7, #16
 801dba0:	46bd      	mov	sp, r7
 801dba2:	bd80      	pop	{r7, pc}

0801dba4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dba4:	b480      	push	{r7}
 801dba6:	b085      	sub	sp, #20
 801dba8:	af00      	add	r7, sp, #0
 801dbaa:	6078      	str	r0, [r7, #4]
 801dbac:	460b      	mov	r3, r1
 801dbae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801dbb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801dbb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	da0b      	bge.n	801dbd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801dbc0:	78fb      	ldrb	r3, [r7, #3]
 801dbc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801dbc6:	68f9      	ldr	r1, [r7, #12]
 801dbc8:	4613      	mov	r3, r2
 801dbca:	00db      	lsls	r3, r3, #3
 801dbcc:	4413      	add	r3, r2
 801dbce:	009b      	lsls	r3, r3, #2
 801dbd0:	440b      	add	r3, r1
 801dbd2:	333e      	adds	r3, #62	; 0x3e
 801dbd4:	781b      	ldrb	r3, [r3, #0]
 801dbd6:	e00b      	b.n	801dbf0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801dbd8:	78fb      	ldrb	r3, [r7, #3]
 801dbda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801dbde:	68f9      	ldr	r1, [r7, #12]
 801dbe0:	4613      	mov	r3, r2
 801dbe2:	00db      	lsls	r3, r3, #3
 801dbe4:	4413      	add	r3, r2
 801dbe6:	009b      	lsls	r3, r3, #2
 801dbe8:	440b      	add	r3, r1
 801dbea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801dbee:	781b      	ldrb	r3, [r3, #0]
  }
}
 801dbf0:	4618      	mov	r0, r3
 801dbf2:	3714      	adds	r7, #20
 801dbf4:	46bd      	mov	sp, r7
 801dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbfa:	4770      	bx	lr

0801dbfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801dbfc:	b580      	push	{r7, lr}
 801dbfe:	b084      	sub	sp, #16
 801dc00:	af00      	add	r7, sp, #0
 801dc02:	6078      	str	r0, [r7, #4]
 801dc04:	460b      	mov	r3, r1
 801dc06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dc08:	2300      	movs	r3, #0
 801dc0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dc0c:	2300      	movs	r3, #0
 801dc0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801dc16:	78fa      	ldrb	r2, [r7, #3]
 801dc18:	4611      	mov	r1, r2
 801dc1a:	4618      	mov	r0, r3
 801dc1c:	f7f5 fa2a 	bl	8013074 <HAL_PCD_SetAddress>
 801dc20:	4603      	mov	r3, r0
 801dc22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dc24:	7bfb      	ldrb	r3, [r7, #15]
 801dc26:	4618      	mov	r0, r3
 801dc28:	f000 f874 	bl	801dd14 <USBD_Get_USB_Status>
 801dc2c:	4603      	mov	r3, r0
 801dc2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801dc30:	7bbb      	ldrb	r3, [r7, #14]
}
 801dc32:	4618      	mov	r0, r3
 801dc34:	3710      	adds	r7, #16
 801dc36:	46bd      	mov	sp, r7
 801dc38:	bd80      	pop	{r7, pc}

0801dc3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801dc3a:	b580      	push	{r7, lr}
 801dc3c:	b086      	sub	sp, #24
 801dc3e:	af00      	add	r7, sp, #0
 801dc40:	60f8      	str	r0, [r7, #12]
 801dc42:	607a      	str	r2, [r7, #4]
 801dc44:	603b      	str	r3, [r7, #0]
 801dc46:	460b      	mov	r3, r1
 801dc48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dc4a:	2300      	movs	r3, #0
 801dc4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dc4e:	2300      	movs	r3, #0
 801dc50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801dc58:	7af9      	ldrb	r1, [r7, #11]
 801dc5a:	683b      	ldr	r3, [r7, #0]
 801dc5c:	687a      	ldr	r2, [r7, #4]
 801dc5e:	f7f5 fb43 	bl	80132e8 <HAL_PCD_EP_Transmit>
 801dc62:	4603      	mov	r3, r0
 801dc64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dc66:	7dfb      	ldrb	r3, [r7, #23]
 801dc68:	4618      	mov	r0, r3
 801dc6a:	f000 f853 	bl	801dd14 <USBD_Get_USB_Status>
 801dc6e:	4603      	mov	r3, r0
 801dc70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801dc72:	7dbb      	ldrb	r3, [r7, #22]
}
 801dc74:	4618      	mov	r0, r3
 801dc76:	3718      	adds	r7, #24
 801dc78:	46bd      	mov	sp, r7
 801dc7a:	bd80      	pop	{r7, pc}

0801dc7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801dc7c:	b580      	push	{r7, lr}
 801dc7e:	b086      	sub	sp, #24
 801dc80:	af00      	add	r7, sp, #0
 801dc82:	60f8      	str	r0, [r7, #12]
 801dc84:	607a      	str	r2, [r7, #4]
 801dc86:	603b      	str	r3, [r7, #0]
 801dc88:	460b      	mov	r3, r1
 801dc8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dc8c:	2300      	movs	r3, #0
 801dc8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dc90:	2300      	movs	r3, #0
 801dc92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801dc94:	68fb      	ldr	r3, [r7, #12]
 801dc96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801dc9a:	7af9      	ldrb	r1, [r7, #11]
 801dc9c:	683b      	ldr	r3, [r7, #0]
 801dc9e:	687a      	ldr	r2, [r7, #4]
 801dca0:	f7f5 fabf 	bl	8013222 <HAL_PCD_EP_Receive>
 801dca4:	4603      	mov	r3, r0
 801dca6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dca8:	7dfb      	ldrb	r3, [r7, #23]
 801dcaa:	4618      	mov	r0, r3
 801dcac:	f000 f832 	bl	801dd14 <USBD_Get_USB_Status>
 801dcb0:	4603      	mov	r3, r0
 801dcb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801dcb4:	7dbb      	ldrb	r3, [r7, #22]
}
 801dcb6:	4618      	mov	r0, r3
 801dcb8:	3718      	adds	r7, #24
 801dcba:	46bd      	mov	sp, r7
 801dcbc:	bd80      	pop	{r7, pc}

0801dcbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dcbe:	b580      	push	{r7, lr}
 801dcc0:	b082      	sub	sp, #8
 801dcc2:	af00      	add	r7, sp, #0
 801dcc4:	6078      	str	r0, [r7, #4]
 801dcc6:	460b      	mov	r3, r1
 801dcc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801dcd0:	78fa      	ldrb	r2, [r7, #3]
 801dcd2:	4611      	mov	r1, r2
 801dcd4:	4618      	mov	r0, r3
 801dcd6:	f7f5 faef 	bl	80132b8 <HAL_PCD_EP_GetRxCount>
 801dcda:	4603      	mov	r3, r0
}
 801dcdc:	4618      	mov	r0, r3
 801dcde:	3708      	adds	r7, #8
 801dce0:	46bd      	mov	sp, r7
 801dce2:	bd80      	pop	{r7, pc}

0801dce4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801dce4:	b480      	push	{r7}
 801dce6:	b083      	sub	sp, #12
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801dcec:	4b03      	ldr	r3, [pc, #12]	; (801dcfc <USBD_static_malloc+0x18>)
}
 801dcee:	4618      	mov	r0, r3
 801dcf0:	370c      	adds	r7, #12
 801dcf2:	46bd      	mov	sp, r7
 801dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcf8:	4770      	bx	lr
 801dcfa:	bf00      	nop
 801dcfc:	2000e940 	.word	0x2000e940

0801dd00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801dd00:	b480      	push	{r7}
 801dd02:	b083      	sub	sp, #12
 801dd04:	af00      	add	r7, sp, #0
 801dd06:	6078      	str	r0, [r7, #4]

}
 801dd08:	bf00      	nop
 801dd0a:	370c      	adds	r7, #12
 801dd0c:	46bd      	mov	sp, r7
 801dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd12:	4770      	bx	lr

0801dd14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801dd14:	b480      	push	{r7}
 801dd16:	b085      	sub	sp, #20
 801dd18:	af00      	add	r7, sp, #0
 801dd1a:	4603      	mov	r3, r0
 801dd1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dd1e:	2300      	movs	r3, #0
 801dd20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801dd22:	79fb      	ldrb	r3, [r7, #7]
 801dd24:	2b03      	cmp	r3, #3
 801dd26:	d817      	bhi.n	801dd58 <USBD_Get_USB_Status+0x44>
 801dd28:	a201      	add	r2, pc, #4	; (adr r2, 801dd30 <USBD_Get_USB_Status+0x1c>)
 801dd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd2e:	bf00      	nop
 801dd30:	0801dd41 	.word	0x0801dd41
 801dd34:	0801dd47 	.word	0x0801dd47
 801dd38:	0801dd4d 	.word	0x0801dd4d
 801dd3c:	0801dd53 	.word	0x0801dd53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801dd40:	2300      	movs	r3, #0
 801dd42:	73fb      	strb	r3, [r7, #15]
    break;
 801dd44:	e00b      	b.n	801dd5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801dd46:	2303      	movs	r3, #3
 801dd48:	73fb      	strb	r3, [r7, #15]
    break;
 801dd4a:	e008      	b.n	801dd5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801dd4c:	2301      	movs	r3, #1
 801dd4e:	73fb      	strb	r3, [r7, #15]
    break;
 801dd50:	e005      	b.n	801dd5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801dd52:	2303      	movs	r3, #3
 801dd54:	73fb      	strb	r3, [r7, #15]
    break;
 801dd56:	e002      	b.n	801dd5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801dd58:	2303      	movs	r3, #3
 801dd5a:	73fb      	strb	r3, [r7, #15]
    break;
 801dd5c:	bf00      	nop
  }
  return usb_status;
 801dd5e:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd60:	4618      	mov	r0, r3
 801dd62:	3714      	adds	r7, #20
 801dd64:	46bd      	mov	sp, r7
 801dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd6a:	4770      	bx	lr

0801dd6c <arm_rfft_32_fast_init_f32>:
 801dd6c:	b178      	cbz	r0, 801dd8e <arm_rfft_32_fast_init_f32+0x22>
 801dd6e:	b430      	push	{r4, r5}
 801dd70:	4908      	ldr	r1, [pc, #32]	; (801dd94 <arm_rfft_32_fast_init_f32+0x28>)
 801dd72:	4a09      	ldr	r2, [pc, #36]	; (801dd98 <arm_rfft_32_fast_init_f32+0x2c>)
 801dd74:	2310      	movs	r3, #16
 801dd76:	e9c0 2101 	strd	r2, r1, [r0, #4]
 801dd7a:	8003      	strh	r3, [r0, #0]
 801dd7c:	2520      	movs	r5, #32
 801dd7e:	2414      	movs	r4, #20
 801dd80:	4b06      	ldr	r3, [pc, #24]	; (801dd9c <arm_rfft_32_fast_init_f32+0x30>)
 801dd82:	8205      	strh	r5, [r0, #16]
 801dd84:	8184      	strh	r4, [r0, #12]
 801dd86:	6143      	str	r3, [r0, #20]
 801dd88:	bc30      	pop	{r4, r5}
 801dd8a:	2000      	movs	r0, #0
 801dd8c:	4770      	bx	lr
 801dd8e:	f04f 30ff 	mov.w	r0, #4294967295
 801dd92:	4770      	bx	lr
 801dd94:	0802338c 	.word	0x0802338c
 801dd98:	08027cc4 	.word	0x08027cc4
 801dd9c:	08030a44 	.word	0x08030a44

0801dda0 <arm_rfft_64_fast_init_f32>:
 801dda0:	b178      	cbz	r0, 801ddc2 <arm_rfft_64_fast_init_f32+0x22>
 801dda2:	b430      	push	{r4, r5}
 801dda4:	4908      	ldr	r1, [pc, #32]	; (801ddc8 <arm_rfft_64_fast_init_f32+0x28>)
 801dda6:	4a09      	ldr	r2, [pc, #36]	; (801ddcc <arm_rfft_64_fast_init_f32+0x2c>)
 801dda8:	2320      	movs	r3, #32
 801ddaa:	e9c0 2101 	strd	r2, r1, [r0, #4]
 801ddae:	8003      	strh	r3, [r0, #0]
 801ddb0:	2540      	movs	r5, #64	; 0x40
 801ddb2:	2430      	movs	r4, #48	; 0x30
 801ddb4:	4b06      	ldr	r3, [pc, #24]	; (801ddd0 <arm_rfft_64_fast_init_f32+0x30>)
 801ddb6:	8205      	strh	r5, [r0, #16]
 801ddb8:	8184      	strh	r4, [r0, #12]
 801ddba:	6143      	str	r3, [r0, #20]
 801ddbc:	bc30      	pop	{r4, r5}
 801ddbe:	2000      	movs	r0, #0
 801ddc0:	4770      	bx	lr
 801ddc2:	f04f 30ff 	mov.w	r0, #4294967295
 801ddc6:	4770      	bx	lr
 801ddc8:	080254e4 	.word	0x080254e4
 801ddcc:	0802c544 	.word	0x0802c544
 801ddd0:	080352c4 	.word	0x080352c4

0801ddd4 <arm_rfft_256_fast_init_f32>:
 801ddd4:	b180      	cbz	r0, 801ddf8 <arm_rfft_256_fast_init_f32+0x24>
 801ddd6:	b430      	push	{r4, r5}
 801ddd8:	4909      	ldr	r1, [pc, #36]	; (801de00 <arm_rfft_256_fast_init_f32+0x2c>)
 801ddda:	4a0a      	ldr	r2, [pc, #40]	; (801de04 <arm_rfft_256_fast_init_f32+0x30>)
 801dddc:	2380      	movs	r3, #128	; 0x80
 801ddde:	e9c0 2101 	strd	r2, r1, [r0, #4]
 801dde2:	8003      	strh	r3, [r0, #0]
 801dde4:	f44f 7580 	mov.w	r5, #256	; 0x100
 801dde8:	24d0      	movs	r4, #208	; 0xd0
 801ddea:	4b07      	ldr	r3, [pc, #28]	; (801de08 <arm_rfft_256_fast_init_f32+0x34>)
 801ddec:	8205      	strh	r5, [r0, #16]
 801ddee:	8184      	strh	r4, [r0, #12]
 801ddf0:	6143      	str	r3, [r0, #20]
 801ddf2:	bc30      	pop	{r4, r5}
 801ddf4:	2000      	movs	r0, #0
 801ddf6:	4770      	bx	lr
 801ddf8:	f04f 30ff 	mov.w	r0, #4294967295
 801ddfc:	4770      	bx	lr
 801ddfe:	bf00      	nop
 801de00:	080231ec 	.word	0x080231ec
 801de04:	080278c4 	.word	0x080278c4
 801de08:	08030644 	.word	0x08030644

0801de0c <arm_rfft_512_fast_init_f32>:
 801de0c:	b190      	cbz	r0, 801de34 <arm_rfft_512_fast_init_f32+0x28>
 801de0e:	b430      	push	{r4, r5}
 801de10:	490a      	ldr	r1, [pc, #40]	; (801de3c <arm_rfft_512_fast_init_f32+0x30>)
 801de12:	4a0b      	ldr	r2, [pc, #44]	; (801de40 <arm_rfft_512_fast_init_f32+0x34>)
 801de14:	f44f 7380 	mov.w	r3, #256	; 0x100
 801de18:	e9c0 2101 	strd	r2, r1, [r0, #4]
 801de1c:	8003      	strh	r3, [r0, #0]
 801de1e:	f44f 7500 	mov.w	r5, #512	; 0x200
 801de22:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 801de26:	4b07      	ldr	r3, [pc, #28]	; (801de44 <arm_rfft_512_fast_init_f32+0x38>)
 801de28:	8205      	strh	r5, [r0, #16]
 801de2a:	8184      	strh	r4, [r0, #12]
 801de2c:	6143      	str	r3, [r0, #20]
 801de2e:	bc30      	pop	{r4, r5}
 801de30:	2000      	movs	r0, #0
 801de32:	4770      	bx	lr
 801de34:	f04f 30ff 	mov.w	r0, #4294967295
 801de38:	4770      	bx	lr
 801de3a:	bf00      	nop
 801de3c:	08025174 	.word	0x08025174
 801de40:	0802bd44 	.word	0x0802bd44
 801de44:	08034ac4 	.word	0x08034ac4

0801de48 <arm_rfft_1024_fast_init_f32>:
 801de48:	b190      	cbz	r0, 801de70 <arm_rfft_1024_fast_init_f32+0x28>
 801de4a:	b430      	push	{r4, r5}
 801de4c:	490a      	ldr	r1, [pc, #40]	; (801de78 <arm_rfft_1024_fast_init_f32+0x30>)
 801de4e:	4a0b      	ldr	r2, [pc, #44]	; (801de7c <arm_rfft_1024_fast_init_f32+0x34>)
 801de50:	f44f 7300 	mov.w	r3, #512	; 0x200
 801de54:	e9c0 2101 	strd	r2, r1, [r0, #4]
 801de58:	8003      	strh	r3, [r0, #0]
 801de5a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 801de5e:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 801de62:	4b07      	ldr	r3, [pc, #28]	; (801de80 <arm_rfft_1024_fast_init_f32+0x38>)
 801de64:	8205      	strh	r5, [r0, #16]
 801de66:	8184      	strh	r4, [r0, #12]
 801de68:	6143      	str	r3, [r0, #20]
 801de6a:	bc30      	pop	{r4, r5}
 801de6c:	2000      	movs	r0, #0
 801de6e:	4770      	bx	lr
 801de70:	f04f 30ff 	mov.w	r0, #4294967295
 801de74:	4770      	bx	lr
 801de76:	bf00      	nop
 801de78:	08025544 	.word	0x08025544
 801de7c:	0802c644 	.word	0x0802c644
 801de80:	0802d644 	.word	0x0802d644

0801de84 <arm_rfft_2048_fast_init_f32>:
 801de84:	b190      	cbz	r0, 801deac <arm_rfft_2048_fast_init_f32+0x28>
 801de86:	b430      	push	{r4, r5}
 801de88:	490a      	ldr	r1, [pc, #40]	; (801deb4 <arm_rfft_2048_fast_init_f32+0x30>)
 801de8a:	4a0b      	ldr	r2, [pc, #44]	; (801deb8 <arm_rfft_2048_fast_init_f32+0x34>)
 801de8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801de90:	e9c0 2101 	strd	r2, r1, [r0, #4]
 801de94:	8003      	strh	r3, [r0, #0]
 801de96:	f44f 6500 	mov.w	r5, #2048	; 0x800
 801de9a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 801de9e:	4b07      	ldr	r3, [pc, #28]	; (801debc <arm_rfft_2048_fast_init_f32+0x38>)
 801dea0:	8205      	strh	r5, [r0, #16]
 801dea2:	8184      	strh	r4, [r0, #12]
 801dea4:	6143      	str	r3, [r0, #20]
 801dea6:	bc30      	pop	{r4, r5}
 801dea8:	2000      	movs	r0, #0
 801deaa:	4770      	bx	lr
 801deac:	f04f 30ff 	mov.w	r0, #4294967295
 801deb0:	4770      	bx	lr
 801deb2:	bf00      	nop
 801deb4:	080223dc 	.word	0x080223dc
 801deb8:	080258c4 	.word	0x080258c4
 801debc:	0802e644 	.word	0x0802e644

0801dec0 <arm_rfft_4096_fast_init_f32>:
 801dec0:	b190      	cbz	r0, 801dee8 <arm_rfft_4096_fast_init_f32+0x28>
 801dec2:	b430      	push	{r4, r5}
 801dec4:	490a      	ldr	r1, [pc, #40]	; (801def0 <arm_rfft_4096_fast_init_f32+0x30>)
 801dec6:	4a0b      	ldr	r2, [pc, #44]	; (801def4 <arm_rfft_4096_fast_init_f32+0x34>)
 801dec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801decc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 801ded0:	8003      	strh	r3, [r0, #0]
 801ded2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 801ded6:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 801deda:	4b07      	ldr	r3, [pc, #28]	; (801def8 <arm_rfft_4096_fast_init_f32+0x38>)
 801dedc:	8205      	strh	r5, [r0, #16]
 801dede:	8184      	strh	r4, [r0, #12]
 801dee0:	6143      	str	r3, [r0, #20]
 801dee2:	bc30      	pop	{r4, r5}
 801dee4:	2000      	movs	r0, #0
 801dee6:	4770      	bx	lr
 801dee8:	f04f 30ff 	mov.w	r0, #4294967295
 801deec:	4770      	bx	lr
 801deee:	bf00      	nop
 801def0:	080233b4 	.word	0x080233b4
 801def4:	08027d44 	.word	0x08027d44
 801def8:	08030ac4 	.word	0x08030ac4

0801defc <arm_rfft_fast_init_f32>:
 801defc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801df00:	d01f      	beq.n	801df42 <arm_rfft_fast_init_f32+0x46>
 801df02:	d90b      	bls.n	801df1c <arm_rfft_fast_init_f32+0x20>
 801df04:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 801df08:	d019      	beq.n	801df3e <arm_rfft_fast_init_f32+0x42>
 801df0a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 801df0e:	d012      	beq.n	801df36 <arm_rfft_fast_init_f32+0x3a>
 801df10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801df14:	d00d      	beq.n	801df32 <arm_rfft_fast_init_f32+0x36>
 801df16:	f04f 30ff 	mov.w	r0, #4294967295
 801df1a:	4770      	bx	lr
 801df1c:	2940      	cmp	r1, #64	; 0x40
 801df1e:	d00c      	beq.n	801df3a <arm_rfft_fast_init_f32+0x3e>
 801df20:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 801df24:	d003      	beq.n	801df2e <arm_rfft_fast_init_f32+0x32>
 801df26:	2920      	cmp	r1, #32
 801df28:	d1f5      	bne.n	801df16 <arm_rfft_fast_init_f32+0x1a>
 801df2a:	4b07      	ldr	r3, [pc, #28]	; (801df48 <arm_rfft_fast_init_f32+0x4c>)
 801df2c:	4718      	bx	r3
 801df2e:	4b07      	ldr	r3, [pc, #28]	; (801df4c <arm_rfft_fast_init_f32+0x50>)
 801df30:	4718      	bx	r3
 801df32:	4b07      	ldr	r3, [pc, #28]	; (801df50 <arm_rfft_fast_init_f32+0x54>)
 801df34:	4718      	bx	r3
 801df36:	4b07      	ldr	r3, [pc, #28]	; (801df54 <arm_rfft_fast_init_f32+0x58>)
 801df38:	4718      	bx	r3
 801df3a:	4b07      	ldr	r3, [pc, #28]	; (801df58 <arm_rfft_fast_init_f32+0x5c>)
 801df3c:	e7f6      	b.n	801df2c <arm_rfft_fast_init_f32+0x30>
 801df3e:	4b07      	ldr	r3, [pc, #28]	; (801df5c <arm_rfft_fast_init_f32+0x60>)
 801df40:	e7f4      	b.n	801df2c <arm_rfft_fast_init_f32+0x30>
 801df42:	4b07      	ldr	r3, [pc, #28]	; (801df60 <arm_rfft_fast_init_f32+0x64>)
 801df44:	e7f2      	b.n	801df2c <arm_rfft_fast_init_f32+0x30>
 801df46:	bf00      	nop
 801df48:	0801dd6d 	.word	0x0801dd6d
 801df4c:	0801ddd5 	.word	0x0801ddd5
 801df50:	0801de49 	.word	0x0801de49
 801df54:	0801dec1 	.word	0x0801dec1
 801df58:	0801dda1 	.word	0x0801dda1
 801df5c:	0801de85 	.word	0x0801de85
 801df60:	0801de0d 	.word	0x0801de0d

0801df64 <stage_rfft_f32>:
 801df64:	b410      	push	{r4}
 801df66:	edd1 7a00 	vldr	s15, [r1]
 801df6a:	ed91 7a01 	vldr	s14, [r1, #4]
 801df6e:	8804      	ldrh	r4, [r0, #0]
 801df70:	6940      	ldr	r0, [r0, #20]
 801df72:	ee37 7a07 	vadd.f32	s14, s14, s14
 801df76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801df7a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 801df7e:	ee77 6a87 	vadd.f32	s13, s15, s14
 801df82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801df86:	3c01      	subs	r4, #1
 801df88:	ee26 7a84 	vmul.f32	s14, s13, s8
 801df8c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801df90:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 801df94:	ed82 7a00 	vstr	s14, [r2]
 801df98:	edc2 7a01 	vstr	s15, [r2, #4]
 801df9c:	3010      	adds	r0, #16
 801df9e:	3210      	adds	r2, #16
 801dfa0:	3b08      	subs	r3, #8
 801dfa2:	3110      	adds	r1, #16
 801dfa4:	ed11 5a02 	vldr	s10, [r1, #-8]
 801dfa8:	ed93 7a02 	vldr	s14, [r3, #8]
 801dfac:	ed50 6a02 	vldr	s13, [r0, #-8]
 801dfb0:	edd3 4a03 	vldr	s9, [r3, #12]
 801dfb4:	ed51 7a01 	vldr	s15, [r1, #-4]
 801dfb8:	ed10 6a01 	vldr	s12, [r0, #-4]
 801dfbc:	ee77 5a45 	vsub.f32	s11, s14, s10
 801dfc0:	ee37 7a05 	vadd.f32	s14, s14, s10
 801dfc4:	ee66 3aa5 	vmul.f32	s7, s13, s11
 801dfc8:	ee34 5aa7 	vadd.f32	s10, s9, s15
 801dfcc:	ee66 5a25 	vmul.f32	s11, s12, s11
 801dfd0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 801dfd4:	ee37 7a23 	vadd.f32	s14, s14, s7
 801dfd8:	ee66 6a85 	vmul.f32	s13, s13, s10
 801dfdc:	ee26 6a05 	vmul.f32	s12, s12, s10
 801dfe0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801dfe4:	ee37 7a06 	vadd.f32	s14, s14, s12
 801dfe8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801dfec:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dff0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dff4:	3c01      	subs	r4, #1
 801dff6:	ed02 7a02 	vstr	s14, [r2, #-8]
 801dffa:	ed42 7a01 	vstr	s15, [r2, #-4]
 801dffe:	f1a3 0308 	sub.w	r3, r3, #8
 801e002:	f101 0108 	add.w	r1, r1, #8
 801e006:	f100 0008 	add.w	r0, r0, #8
 801e00a:	f102 0208 	add.w	r2, r2, #8
 801e00e:	d1c9      	bne.n	801dfa4 <stage_rfft_f32+0x40>
 801e010:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e014:	4770      	bx	lr
 801e016:	bf00      	nop

0801e018 <merge_rfft_f32>:
 801e018:	b410      	push	{r4}
 801e01a:	edd1 7a00 	vldr	s15, [r1]
 801e01e:	edd1 6a01 	vldr	s13, [r1, #4]
 801e022:	8804      	ldrh	r4, [r0, #0]
 801e024:	6940      	ldr	r0, [r0, #20]
 801e026:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e02a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e02e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 801e032:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e036:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e03a:	3c01      	subs	r4, #1
 801e03c:	ed82 7a00 	vstr	s14, [r2]
 801e040:	edc2 7a01 	vstr	s15, [r2, #4]
 801e044:	b3dc      	cbz	r4, 801e0be <merge_rfft_f32+0xa6>
 801e046:	00e3      	lsls	r3, r4, #3
 801e048:	3b08      	subs	r3, #8
 801e04a:	440b      	add	r3, r1
 801e04c:	3010      	adds	r0, #16
 801e04e:	3210      	adds	r2, #16
 801e050:	3110      	adds	r1, #16
 801e052:	ed11 5a02 	vldr	s10, [r1, #-8]
 801e056:	ed93 7a02 	vldr	s14, [r3, #8]
 801e05a:	ed50 6a02 	vldr	s13, [r0, #-8]
 801e05e:	edd3 4a03 	vldr	s9, [r3, #12]
 801e062:	ed51 7a01 	vldr	s15, [r1, #-4]
 801e066:	ed10 6a01 	vldr	s12, [r0, #-4]
 801e06a:	ee75 5a47 	vsub.f32	s11, s10, s14
 801e06e:	ee37 7a05 	vadd.f32	s14, s14, s10
 801e072:	ee66 3aa5 	vmul.f32	s7, s13, s11
 801e076:	ee34 5aa7 	vadd.f32	s10, s9, s15
 801e07a:	ee66 5a25 	vmul.f32	s11, s12, s11
 801e07e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 801e082:	ee37 7a63 	vsub.f32	s14, s14, s7
 801e086:	ee66 6a85 	vmul.f32	s13, s13, s10
 801e08a:	ee26 6a05 	vmul.f32	s12, s12, s10
 801e08e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801e092:	ee37 7a46 	vsub.f32	s14, s14, s12
 801e096:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e09a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e09e:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e0a2:	3c01      	subs	r4, #1
 801e0a4:	ed02 7a02 	vstr	s14, [r2, #-8]
 801e0a8:	ed42 7a01 	vstr	s15, [r2, #-4]
 801e0ac:	f1a3 0308 	sub.w	r3, r3, #8
 801e0b0:	f101 0108 	add.w	r1, r1, #8
 801e0b4:	f100 0008 	add.w	r0, r0, #8
 801e0b8:	f102 0208 	add.w	r2, r2, #8
 801e0bc:	d1c9      	bne.n	801e052 <merge_rfft_f32+0x3a>
 801e0be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e0c2:	4770      	bx	lr

0801e0c4 <arm_rfft_fast_f32>:
 801e0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0c8:	8a05      	ldrh	r5, [r0, #16]
 801e0ca:	086d      	lsrs	r5, r5, #1
 801e0cc:	8005      	strh	r5, [r0, #0]
 801e0ce:	4604      	mov	r4, r0
 801e0d0:	4616      	mov	r6, r2
 801e0d2:	461d      	mov	r5, r3
 801e0d4:	b14b      	cbz	r3, 801e0ea <arm_rfft_fast_f32+0x26>
 801e0d6:	f7ff ff9f 	bl	801e018 <merge_rfft_f32>
 801e0da:	462a      	mov	r2, r5
 801e0dc:	4631      	mov	r1, r6
 801e0de:	4620      	mov	r0, r4
 801e0e0:	2301      	movs	r3, #1
 801e0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0e6:	f000 bb33 	b.w	801e750 <arm_cfft_f32>
 801e0ea:	460f      	mov	r7, r1
 801e0ec:	461a      	mov	r2, r3
 801e0ee:	2301      	movs	r3, #1
 801e0f0:	f000 fb2e 	bl	801e750 <arm_cfft_f32>
 801e0f4:	4632      	mov	r2, r6
 801e0f6:	4639      	mov	r1, r7
 801e0f8:	4620      	mov	r0, r4
 801e0fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0fe:	f7ff bf31 	b.w	801df64 <stage_rfft_f32>
 801e102:	bf00      	nop

0801e104 <arm_cfft_radix8by2_f32>:
 801e104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e108:	ed2d 8b08 	vpush	{d8-d11}
 801e10c:	4607      	mov	r7, r0
 801e10e:	4608      	mov	r0, r1
 801e110:	f8b7 c000 	ldrh.w	ip, [r7]
 801e114:	687a      	ldr	r2, [r7, #4]
 801e116:	ea4f 015c 	mov.w	r1, ip, lsr #1
 801e11a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 801e11e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801e122:	f000 80b0 	beq.w	801e286 <arm_cfft_radix8by2_f32+0x182>
 801e126:	008c      	lsls	r4, r1, #2
 801e128:	3410      	adds	r4, #16
 801e12a:	f100 0310 	add.w	r3, r0, #16
 801e12e:	1906      	adds	r6, r0, r4
 801e130:	3210      	adds	r2, #16
 801e132:	4444      	add	r4, r8
 801e134:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 801e138:	f108 0510 	add.w	r5, r8, #16
 801e13c:	ed15 2a04 	vldr	s4, [r5, #-16]
 801e140:	ed55 2a03 	vldr	s5, [r5, #-12]
 801e144:	ed54 4a04 	vldr	s9, [r4, #-16]
 801e148:	ed14 4a03 	vldr	s8, [r4, #-12]
 801e14c:	ed14 6a02 	vldr	s12, [r4, #-8]
 801e150:	ed54 5a01 	vldr	s11, [r4, #-4]
 801e154:	ed53 3a04 	vldr	s7, [r3, #-16]
 801e158:	ed15 0a02 	vldr	s0, [r5, #-8]
 801e15c:	ed55 0a01 	vldr	s1, [r5, #-4]
 801e160:	ed56 6a04 	vldr	s13, [r6, #-16]
 801e164:	ed16 3a03 	vldr	s6, [r6, #-12]
 801e168:	ed13 7a03 	vldr	s14, [r3, #-12]
 801e16c:	ed13 5a02 	vldr	s10, [r3, #-8]
 801e170:	ed53 7a01 	vldr	s15, [r3, #-4]
 801e174:	ed16 1a02 	vldr	s2, [r6, #-8]
 801e178:	ed56 1a01 	vldr	s3, [r6, #-4]
 801e17c:	ee73 ba82 	vadd.f32	s23, s7, s4
 801e180:	ee37 ba22 	vadd.f32	s22, s14, s5
 801e184:	ee76 9aa4 	vadd.f32	s19, s13, s9
 801e188:	ee33 9a04 	vadd.f32	s18, s6, s8
 801e18c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 801e190:	ee75 aa00 	vadd.f32	s21, s10, s0
 801e194:	ee37 aaa0 	vadd.f32	s20, s15, s1
 801e198:	ee71 8a06 	vadd.f32	s17, s2, s12
 801e19c:	ed43 ba04 	vstr	s23, [r3, #-16]
 801e1a0:	ed03 ba03 	vstr	s22, [r3, #-12]
 801e1a4:	ed43 aa02 	vstr	s21, [r3, #-8]
 801e1a8:	ed03 aa01 	vstr	s20, [r3, #-4]
 801e1ac:	ed06 8a01 	vstr	s16, [r6, #-4]
 801e1b0:	ed46 9a04 	vstr	s19, [r6, #-16]
 801e1b4:	ed06 9a03 	vstr	s18, [r6, #-12]
 801e1b8:	ed46 8a02 	vstr	s17, [r6, #-8]
 801e1bc:	ee37 7a62 	vsub.f32	s14, s14, s5
 801e1c0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 801e1c4:	ee34 4a43 	vsub.f32	s8, s8, s6
 801e1c8:	ed52 6a03 	vldr	s13, [r2, #-12]
 801e1cc:	ed12 3a04 	vldr	s6, [r2, #-16]
 801e1d0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 801e1d4:	ee27 8a26 	vmul.f32	s16, s14, s13
 801e1d8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 801e1dc:	ee23 2a83 	vmul.f32	s4, s7, s6
 801e1e0:	ee64 4a83 	vmul.f32	s9, s9, s6
 801e1e4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 801e1e8:	ee27 7a03 	vmul.f32	s14, s14, s6
 801e1ec:	ee64 6a26 	vmul.f32	s13, s8, s13
 801e1f0:	ee24 4a03 	vmul.f32	s8, s8, s6
 801e1f4:	ee37 7a63 	vsub.f32	s14, s14, s7
 801e1f8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801e1fc:	ee32 4ac4 	vsub.f32	s8, s5, s8
 801e200:	ee32 3a08 	vadd.f32	s6, s4, s16
 801e204:	ed05 7a03 	vstr	s14, [r5, #-12]
 801e208:	ed05 3a04 	vstr	s6, [r5, #-16]
 801e20c:	ed04 4a04 	vstr	s8, [r4, #-16]
 801e210:	ed44 6a03 	vstr	s13, [r4, #-12]
 801e214:	ed12 7a01 	vldr	s14, [r2, #-4]
 801e218:	ee76 6a41 	vsub.f32	s13, s12, s2
 801e21c:	ee35 5a40 	vsub.f32	s10, s10, s0
 801e220:	ee35 6ae1 	vsub.f32	s12, s11, s3
 801e224:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801e228:	ed52 5a02 	vldr	s11, [r2, #-8]
 801e22c:	ee67 3a87 	vmul.f32	s7, s15, s14
 801e230:	ee66 4a87 	vmul.f32	s9, s13, s14
 801e234:	ee25 4a25 	vmul.f32	s8, s10, s11
 801e238:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801e23c:	ee25 5a07 	vmul.f32	s10, s10, s14
 801e240:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801e244:	ee26 7a07 	vmul.f32	s14, s12, s14
 801e248:	ee26 6a25 	vmul.f32	s12, s12, s11
 801e24c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801e250:	ee74 5a23 	vadd.f32	s11, s8, s7
 801e254:	ee34 6ac6 	vsub.f32	s12, s9, s12
 801e258:	ee37 7a26 	vadd.f32	s14, s14, s13
 801e25c:	3310      	adds	r3, #16
 801e25e:	4563      	cmp	r3, ip
 801e260:	ed45 5a02 	vstr	s11, [r5, #-8]
 801e264:	f106 0610 	add.w	r6, r6, #16
 801e268:	ed45 7a01 	vstr	s15, [r5, #-4]
 801e26c:	f102 0210 	add.w	r2, r2, #16
 801e270:	ed04 6a02 	vstr	s12, [r4, #-8]
 801e274:	ed04 7a01 	vstr	s14, [r4, #-4]
 801e278:	f105 0510 	add.w	r5, r5, #16
 801e27c:	f104 0410 	add.w	r4, r4, #16
 801e280:	f47f af5c 	bne.w	801e13c <arm_cfft_radix8by2_f32+0x38>
 801e284:	687a      	ldr	r2, [r7, #4]
 801e286:	b28c      	uxth	r4, r1
 801e288:	4621      	mov	r1, r4
 801e28a:	2302      	movs	r3, #2
 801e28c:	f000 fc1c 	bl	801eac8 <arm_radix8_butterfly_f32>
 801e290:	ecbd 8b08 	vpop	{d8-d11}
 801e294:	4621      	mov	r1, r4
 801e296:	687a      	ldr	r2, [r7, #4]
 801e298:	4640      	mov	r0, r8
 801e29a:	2302      	movs	r3, #2
 801e29c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e2a0:	f000 bc12 	b.w	801eac8 <arm_radix8_butterfly_f32>

0801e2a4 <arm_cfft_radix8by4_f32>:
 801e2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2a8:	ed2d 8b0a 	vpush	{d8-d12}
 801e2ac:	b08d      	sub	sp, #52	; 0x34
 801e2ae:	460d      	mov	r5, r1
 801e2b0:	910b      	str	r1, [sp, #44]	; 0x2c
 801e2b2:	8801      	ldrh	r1, [r0, #0]
 801e2b4:	6842      	ldr	r2, [r0, #4]
 801e2b6:	900a      	str	r0, [sp, #40]	; 0x28
 801e2b8:	0849      	lsrs	r1, r1, #1
 801e2ba:	008b      	lsls	r3, r1, #2
 801e2bc:	18ee      	adds	r6, r5, r3
 801e2be:	18f0      	adds	r0, r6, r3
 801e2c0:	edd0 5a00 	vldr	s11, [r0]
 801e2c4:	edd5 7a00 	vldr	s15, [r5]
 801e2c8:	ed96 7a00 	vldr	s14, [r6]
 801e2cc:	edd0 3a01 	vldr	s7, [r0, #4]
 801e2d0:	ed96 4a01 	vldr	s8, [r6, #4]
 801e2d4:	ed95 5a01 	vldr	s10, [r5, #4]
 801e2d8:	9008      	str	r0, [sp, #32]
 801e2da:	ee37 6aa5 	vadd.f32	s12, s15, s11
 801e2de:	18c7      	adds	r7, r0, r3
 801e2e0:	edd7 4a00 	vldr	s9, [r7]
 801e2e4:	ed97 3a01 	vldr	s6, [r7, #4]
 801e2e8:	9701      	str	r7, [sp, #4]
 801e2ea:	ee77 6a06 	vadd.f32	s13, s14, s12
 801e2ee:	462c      	mov	r4, r5
 801e2f0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801e2f4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801e2f8:	ee16 ca90 	vmov	ip, s13
 801e2fc:	f844 cb08 	str.w	ip, [r4], #8
 801e300:	ee75 6a23 	vadd.f32	s13, s10, s7
 801e304:	edd6 5a01 	vldr	s11, [r6, #4]
 801e308:	edd7 2a01 	vldr	s5, [r7, #4]
 801e30c:	9404      	str	r4, [sp, #16]
 801e30e:	ee35 5a63 	vsub.f32	s10, s10, s7
 801e312:	ee74 3a27 	vadd.f32	s7, s8, s15
 801e316:	ee36 6a47 	vsub.f32	s12, s12, s14
 801e31a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 801e31e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801e322:	0849      	lsrs	r1, r1, #1
 801e324:	f102 0e08 	add.w	lr, r2, #8
 801e328:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801e32c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801e330:	9109      	str	r1, [sp, #36]	; 0x24
 801e332:	ee35 4a47 	vsub.f32	s8, s10, s14
 801e336:	f1a1 0902 	sub.w	r9, r1, #2
 801e33a:	f8cd e00c 	str.w	lr, [sp, #12]
 801e33e:	4631      	mov	r1, r6
 801e340:	ee13 ea90 	vmov	lr, s7
 801e344:	ee36 6a64 	vsub.f32	s12, s12, s9
 801e348:	ee75 5aa2 	vadd.f32	s11, s11, s5
 801e34c:	4604      	mov	r4, r0
 801e34e:	edc5 5a01 	vstr	s11, [r5, #4]
 801e352:	ee37 7a05 	vadd.f32	s14, s14, s10
 801e356:	f841 eb08 	str.w	lr, [r1], #8
 801e35a:	ee34 5a24 	vadd.f32	s10, s8, s9
 801e35e:	ee16 ea10 	vmov	lr, s12
 801e362:	ed86 5a01 	vstr	s10, [r6, #4]
 801e366:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801e36a:	f844 eb08 	str.w	lr, [r4], #8
 801e36e:	ee77 7a83 	vadd.f32	s15, s15, s6
 801e372:	edc0 6a01 	vstr	s13, [r0, #4]
 801e376:	9405      	str	r4, [sp, #20]
 801e378:	4604      	mov	r4, r0
 801e37a:	ee17 0a90 	vmov	r0, s15
 801e37e:	9106      	str	r1, [sp, #24]
 801e380:	ee37 7a64 	vsub.f32	s14, s14, s9
 801e384:	f102 0110 	add.w	r1, r2, #16
 801e388:	46bc      	mov	ip, r7
 801e38a:	9100      	str	r1, [sp, #0]
 801e38c:	f847 0b08 	str.w	r0, [r7], #8
 801e390:	f102 0118 	add.w	r1, r2, #24
 801e394:	ea5f 0059 	movs.w	r0, r9, lsr #1
 801e398:	9102      	str	r1, [sp, #8]
 801e39a:	ed8c 7a01 	vstr	s14, [ip, #4]
 801e39e:	9007      	str	r0, [sp, #28]
 801e3a0:	f000 8134 	beq.w	801e60c <arm_cfft_radix8by4_f32+0x368>
 801e3a4:	f102 0920 	add.w	r9, r2, #32
 801e3a8:	f102 0830 	add.w	r8, r2, #48	; 0x30
 801e3ac:	9a01      	ldr	r2, [sp, #4]
 801e3ae:	f8dd a000 	ldr.w	sl, [sp]
 801e3b2:	3b0c      	subs	r3, #12
 801e3b4:	4683      	mov	fp, r0
 801e3b6:	4463      	add	r3, ip
 801e3b8:	f105 0e10 	add.w	lr, r5, #16
 801e3bc:	f1a4 010c 	sub.w	r1, r4, #12
 801e3c0:	f104 0510 	add.w	r5, r4, #16
 801e3c4:	f1a6 0c0c 	sub.w	ip, r6, #12
 801e3c8:	f1a2 040c 	sub.w	r4, r2, #12
 801e3cc:	f106 0010 	add.w	r0, r6, #16
 801e3d0:	3210      	adds	r2, #16
 801e3d2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 801e3d6:	ed55 5a02 	vldr	s11, [r5, #-8]
 801e3da:	ed50 7a02 	vldr	s15, [r0, #-8]
 801e3de:	ed52 1a02 	vldr	s3, [r2, #-8]
 801e3e2:	ed55 6a01 	vldr	s13, [r5, #-4]
 801e3e6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 801e3ea:	ed12 1a01 	vldr	s2, [r2, #-4]
 801e3ee:	ed10 8a01 	vldr	s16, [r0, #-4]
 801e3f2:	ee35 4a25 	vadd.f32	s8, s10, s11
 801e3f6:	ee30 6a26 	vadd.f32	s12, s0, s13
 801e3fa:	ee37 7a84 	vadd.f32	s14, s15, s8
 801e3fe:	ee30 0a66 	vsub.f32	s0, s0, s13
 801e402:	ee37 7a21 	vadd.f32	s14, s14, s3
 801e406:	ee75 5a65 	vsub.f32	s11, s10, s11
 801e40a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 801e40e:	ed10 7a01 	vldr	s14, [r0, #-4]
 801e412:	ed52 6a01 	vldr	s13, [r2, #-4]
 801e416:	ee36 7a07 	vadd.f32	s14, s12, s14
 801e41a:	ee78 aa25 	vadd.f32	s21, s16, s11
 801e41e:	ee37 7a26 	vadd.f32	s14, s14, s13
 801e422:	ee70 3a67 	vsub.f32	s7, s0, s15
 801e426:	ed0e 7a01 	vstr	s14, [lr, #-4]
 801e42a:	ed94 7a02 	vldr	s14, [r4, #8]
 801e42e:	ed9c 2a02 	vldr	s4, [ip, #8]
 801e432:	ed91 ba02 	vldr	s22, [r1, #8]
 801e436:	edd3 9a02 	vldr	s19, [r3, #8]
 801e43a:	edd4 2a01 	vldr	s5, [r4, #4]
 801e43e:	ed9c 9a01 	vldr	s18, [ip, #4]
 801e442:	ed93 5a01 	vldr	s10, [r3, #4]
 801e446:	edd1 0a01 	vldr	s1, [r1, #4]
 801e44a:	ee72 6a07 	vadd.f32	s13, s4, s14
 801e44e:	ee32 2a47 	vsub.f32	s4, s4, s14
 801e452:	ee7b 8a26 	vadd.f32	s17, s22, s13
 801e456:	ee79 4a22 	vadd.f32	s9, s18, s5
 801e45a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 801e45e:	ee79 2a62 	vsub.f32	s5, s18, s5
 801e462:	ed8c 7a02 	vstr	s14, [ip, #8]
 801e466:	ed91 7a01 	vldr	s14, [r1, #4]
 801e46a:	edd3 8a01 	vldr	s17, [r3, #4]
 801e46e:	ee34 7a87 	vadd.f32	s14, s9, s14
 801e472:	ee3b 3a69 	vsub.f32	s6, s22, s19
 801e476:	ee37 7a28 	vadd.f32	s14, s14, s17
 801e47a:	ee32 9a60 	vsub.f32	s18, s4, s1
 801e47e:	ed8c 7a01 	vstr	s14, [ip, #4]
 801e482:	ed1a 7a01 	vldr	s14, [sl, #-4]
 801e486:	ed1a aa02 	vldr	s20, [sl, #-8]
 801e48a:	ee73 8a22 	vadd.f32	s17, s6, s5
 801e48e:	ee39 9a05 	vadd.f32	s18, s18, s10
 801e492:	ee7a aac1 	vsub.f32	s21, s21, s2
 801e496:	ee73 3aa1 	vadd.f32	s7, s7, s3
 801e49a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 801e49e:	ee69 ba07 	vmul.f32	s23, s18, s14
 801e4a2:	ee6a aa87 	vmul.f32	s21, s21, s14
 801e4a6:	ee29 9a0a 	vmul.f32	s18, s18, s20
 801e4aa:	ee63 ca87 	vmul.f32	s25, s7, s14
 801e4ae:	ee63 3a8a 	vmul.f32	s7, s7, s20
 801e4b2:	ee28 aa8a 	vmul.f32	s20, s17, s20
 801e4b6:	ee68 8a87 	vmul.f32	s17, s17, s14
 801e4ba:	ee73 3aea 	vsub.f32	s7, s7, s21
 801e4be:	ee78 8a89 	vadd.f32	s17, s17, s18
 801e4c2:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 801e4c6:	ee3b aaca 	vsub.f32	s20, s23, s20
 801e4ca:	ee34 4a67 	vsub.f32	s8, s8, s15
 801e4ce:	ee76 6acb 	vsub.f32	s13, s13, s22
 801e4d2:	ee36 6a48 	vsub.f32	s12, s12, s16
 801e4d6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 801e4da:	ed00 7a02 	vstr	s14, [r0, #-8]
 801e4de:	ed40 3a01 	vstr	s7, [r0, #-4]
 801e4e2:	edc1 8a01 	vstr	s17, [r1, #4]
 801e4e6:	ed81 aa02 	vstr	s20, [r1, #8]
 801e4ea:	ed59 3a04 	vldr	s7, [r9, #-16]
 801e4ee:	ee36 7ae9 	vsub.f32	s14, s13, s19
 801e4f2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 801e4f6:	ed59 6a03 	vldr	s13, [r9, #-12]
 801e4fa:	ee34 4a61 	vsub.f32	s8, s8, s3
 801e4fe:	ee36 6a41 	vsub.f32	s12, s12, s2
 801e502:	ee67 8a63 	vnmul.f32	s17, s14, s7
 801e506:	ee66 9a26 	vmul.f32	s19, s12, s13
 801e50a:	ee24 9a23 	vmul.f32	s18, s8, s7
 801e50e:	ee26 6a23 	vmul.f32	s12, s12, s7
 801e512:	ee24 4a26 	vmul.f32	s8, s8, s13
 801e516:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e51a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 801e51e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 801e522:	ee36 6a44 	vsub.f32	s12, s12, s8
 801e526:	ee37 7a64 	vsub.f32	s14, s14, s9
 801e52a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 801e52e:	ee79 3a29 	vadd.f32	s7, s18, s19
 801e532:	ee75 6a60 	vsub.f32	s13, s10, s1
 801e536:	ee75 5ac8 	vsub.f32	s11, s11, s16
 801e53a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801e53e:	ed45 3a02 	vstr	s7, [r5, #-8]
 801e542:	ed05 6a01 	vstr	s12, [r5, #-4]
 801e546:	ed84 7a01 	vstr	s14, [r4, #4]
 801e54a:	ed84 4a02 	vstr	s8, [r4, #8]
 801e54e:	ee35 6a81 	vadd.f32	s12, s11, s2
 801e552:	ee36 7ac2 	vsub.f32	s14, s13, s4
 801e556:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 801e55a:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 801e55e:	ee33 3a62 	vsub.f32	s6, s6, s5
 801e562:	ee77 7ae1 	vsub.f32	s15, s15, s3
 801e566:	ee67 2a26 	vmul.f32	s5, s14, s13
 801e56a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 801e56e:	ee26 5a25 	vmul.f32	s10, s12, s11
 801e572:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801e576:	ee26 6a26 	vmul.f32	s12, s12, s13
 801e57a:	ee27 7a25 	vmul.f32	s14, s14, s11
 801e57e:	ee63 6a26 	vmul.f32	s13, s6, s13
 801e582:	ee23 3a25 	vmul.f32	s6, s6, s11
 801e586:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801e58a:	ee75 5a24 	vadd.f32	s11, s10, s9
 801e58e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 801e592:	ee36 7a87 	vadd.f32	s14, s13, s14
 801e596:	f1bb 0b01 	subs.w	fp, fp, #1
 801e59a:	ed42 5a02 	vstr	s11, [r2, #-8]
 801e59e:	ed42 7a01 	vstr	s15, [r2, #-4]
 801e5a2:	f10e 0e08 	add.w	lr, lr, #8
 801e5a6:	ed83 3a02 	vstr	s6, [r3, #8]
 801e5aa:	ed83 7a01 	vstr	s14, [r3, #4]
 801e5ae:	f1ac 0c08 	sub.w	ip, ip, #8
 801e5b2:	f10a 0a08 	add.w	sl, sl, #8
 801e5b6:	f100 0008 	add.w	r0, r0, #8
 801e5ba:	f1a1 0108 	sub.w	r1, r1, #8
 801e5be:	f109 0910 	add.w	r9, r9, #16
 801e5c2:	f105 0508 	add.w	r5, r5, #8
 801e5c6:	f1a4 0408 	sub.w	r4, r4, #8
 801e5ca:	f108 0818 	add.w	r8, r8, #24
 801e5ce:	f102 0208 	add.w	r2, r2, #8
 801e5d2:	f1a3 0308 	sub.w	r3, r3, #8
 801e5d6:	f47f aefc 	bne.w	801e3d2 <arm_cfft_radix8by4_f32+0x12e>
 801e5da:	9907      	ldr	r1, [sp, #28]
 801e5dc:	9800      	ldr	r0, [sp, #0]
 801e5de:	00cb      	lsls	r3, r1, #3
 801e5e0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801e5e4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 801e5e8:	9100      	str	r1, [sp, #0]
 801e5ea:	9904      	ldr	r1, [sp, #16]
 801e5ec:	4419      	add	r1, r3
 801e5ee:	9104      	str	r1, [sp, #16]
 801e5f0:	9903      	ldr	r1, [sp, #12]
 801e5f2:	4419      	add	r1, r3
 801e5f4:	9103      	str	r1, [sp, #12]
 801e5f6:	9906      	ldr	r1, [sp, #24]
 801e5f8:	4419      	add	r1, r3
 801e5fa:	9106      	str	r1, [sp, #24]
 801e5fc:	9905      	ldr	r1, [sp, #20]
 801e5fe:	441f      	add	r7, r3
 801e600:	4419      	add	r1, r3
 801e602:	9b02      	ldr	r3, [sp, #8]
 801e604:	9105      	str	r1, [sp, #20]
 801e606:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e60a:	9302      	str	r3, [sp, #8]
 801e60c:	9904      	ldr	r1, [sp, #16]
 801e60e:	9805      	ldr	r0, [sp, #20]
 801e610:	ed91 4a00 	vldr	s8, [r1]
 801e614:	edd0 6a00 	vldr	s13, [r0]
 801e618:	9b06      	ldr	r3, [sp, #24]
 801e61a:	ed97 3a00 	vldr	s6, [r7]
 801e61e:	edd3 7a00 	vldr	s15, [r3]
 801e622:	edd0 4a01 	vldr	s9, [r0, #4]
 801e626:	edd1 3a01 	vldr	s7, [r1, #4]
 801e62a:	ed97 2a01 	vldr	s4, [r7, #4]
 801e62e:	ed93 7a01 	vldr	s14, [r3, #4]
 801e632:	9a03      	ldr	r2, [sp, #12]
 801e634:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801e638:	ee34 6a26 	vadd.f32	s12, s8, s13
 801e63c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 801e640:	ee37 5a86 	vadd.f32	s10, s15, s12
 801e644:	ee73 3ae4 	vsub.f32	s7, s7, s9
 801e648:	ee35 5a03 	vadd.f32	s10, s10, s6
 801e64c:	ee74 6a66 	vsub.f32	s13, s8, s13
 801e650:	ed81 5a00 	vstr	s10, [r1]
 801e654:	ed93 5a01 	vldr	s10, [r3, #4]
 801e658:	edd7 4a01 	vldr	s9, [r7, #4]
 801e65c:	ee35 5a85 	vadd.f32	s10, s11, s10
 801e660:	ee37 4a26 	vadd.f32	s8, s14, s13
 801e664:	ee35 5a24 	vadd.f32	s10, s10, s9
 801e668:	ee73 4ae7 	vsub.f32	s9, s7, s15
 801e66c:	ed81 5a01 	vstr	s10, [r1, #4]
 801e670:	edd2 1a00 	vldr	s3, [r2]
 801e674:	edd2 2a01 	vldr	s5, [r2, #4]
 801e678:	ee34 5a83 	vadd.f32	s10, s9, s6
 801e67c:	ee34 4a42 	vsub.f32	s8, s8, s4
 801e680:	ee36 6a67 	vsub.f32	s12, s12, s15
 801e684:	ee64 4a21 	vmul.f32	s9, s8, s3
 801e688:	ee24 4a22 	vmul.f32	s8, s8, s5
 801e68c:	ee65 2a22 	vmul.f32	s5, s10, s5
 801e690:	ee25 5a21 	vmul.f32	s10, s10, s3
 801e694:	ee74 2aa2 	vadd.f32	s5, s9, s5
 801e698:	ee35 5a44 	vsub.f32	s10, s10, s8
 801e69c:	edc3 2a00 	vstr	s5, [r3]
 801e6a0:	ed83 5a01 	vstr	s10, [r3, #4]
 801e6a4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 801e6a8:	9b00      	ldr	r3, [sp, #0]
 801e6aa:	ee36 6a43 	vsub.f32	s12, s12, s6
 801e6ae:	ed93 4a01 	vldr	s8, [r3, #4]
 801e6b2:	ed93 5a00 	vldr	s10, [r3]
 801e6b6:	9b02      	ldr	r3, [sp, #8]
 801e6b8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 801e6bc:	ee66 4a05 	vmul.f32	s9, s12, s10
 801e6c0:	ee25 5a85 	vmul.f32	s10, s11, s10
 801e6c4:	ee26 6a04 	vmul.f32	s12, s12, s8
 801e6c8:	ee65 5a84 	vmul.f32	s11, s11, s8
 801e6cc:	ee35 6a46 	vsub.f32	s12, s10, s12
 801e6d0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 801e6d4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801e6d8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801e6dc:	ed80 6a01 	vstr	s12, [r0, #4]
 801e6e0:	edc0 5a00 	vstr	s11, [r0]
 801e6e4:	edd3 5a01 	vldr	s11, [r3, #4]
 801e6e8:	edd3 6a00 	vldr	s13, [r3]
 801e6ec:	ee37 7a02 	vadd.f32	s14, s14, s4
 801e6f0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 801e6f4:	ee27 6a26 	vmul.f32	s12, s14, s13
 801e6f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801e6fc:	ee27 7a25 	vmul.f32	s14, s14, s11
 801e700:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801e704:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801e708:	ee76 7a27 	vadd.f32	s15, s12, s15
 801e70c:	ed87 7a01 	vstr	s14, [r7, #4]
 801e710:	edc7 7a00 	vstr	s15, [r7]
 801e714:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 801e718:	4621      	mov	r1, r4
 801e71a:	686a      	ldr	r2, [r5, #4]
 801e71c:	2304      	movs	r3, #4
 801e71e:	f000 f9d3 	bl	801eac8 <arm_radix8_butterfly_f32>
 801e722:	4630      	mov	r0, r6
 801e724:	4621      	mov	r1, r4
 801e726:	686a      	ldr	r2, [r5, #4]
 801e728:	2304      	movs	r3, #4
 801e72a:	f000 f9cd 	bl	801eac8 <arm_radix8_butterfly_f32>
 801e72e:	9808      	ldr	r0, [sp, #32]
 801e730:	686a      	ldr	r2, [r5, #4]
 801e732:	4621      	mov	r1, r4
 801e734:	2304      	movs	r3, #4
 801e736:	f000 f9c7 	bl	801eac8 <arm_radix8_butterfly_f32>
 801e73a:	686a      	ldr	r2, [r5, #4]
 801e73c:	9801      	ldr	r0, [sp, #4]
 801e73e:	4621      	mov	r1, r4
 801e740:	2304      	movs	r3, #4
 801e742:	b00d      	add	sp, #52	; 0x34
 801e744:	ecbd 8b0a 	vpop	{d8-d12}
 801e748:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e74c:	f000 b9bc 	b.w	801eac8 <arm_radix8_butterfly_f32>

0801e750 <arm_cfft_f32>:
 801e750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e754:	2a01      	cmp	r2, #1
 801e756:	4606      	mov	r6, r0
 801e758:	4617      	mov	r7, r2
 801e75a:	460c      	mov	r4, r1
 801e75c:	4698      	mov	r8, r3
 801e75e:	8805      	ldrh	r5, [r0, #0]
 801e760:	d056      	beq.n	801e810 <arm_cfft_f32+0xc0>
 801e762:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801e766:	d063      	beq.n	801e830 <arm_cfft_f32+0xe0>
 801e768:	d916      	bls.n	801e798 <arm_cfft_f32+0x48>
 801e76a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801e76e:	d01a      	beq.n	801e7a6 <arm_cfft_f32+0x56>
 801e770:	d947      	bls.n	801e802 <arm_cfft_f32+0xb2>
 801e772:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801e776:	d05b      	beq.n	801e830 <arm_cfft_f32+0xe0>
 801e778:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 801e77c:	d105      	bne.n	801e78a <arm_cfft_f32+0x3a>
 801e77e:	2301      	movs	r3, #1
 801e780:	6872      	ldr	r2, [r6, #4]
 801e782:	4629      	mov	r1, r5
 801e784:	4620      	mov	r0, r4
 801e786:	f000 f99f 	bl	801eac8 <arm_radix8_butterfly_f32>
 801e78a:	f1b8 0f00 	cmp.w	r8, #0
 801e78e:	d111      	bne.n	801e7b4 <arm_cfft_f32+0x64>
 801e790:	2f01      	cmp	r7, #1
 801e792:	d016      	beq.n	801e7c2 <arm_cfft_f32+0x72>
 801e794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e798:	2d20      	cmp	r5, #32
 801e79a:	d049      	beq.n	801e830 <arm_cfft_f32+0xe0>
 801e79c:	d935      	bls.n	801e80a <arm_cfft_f32+0xba>
 801e79e:	2d40      	cmp	r5, #64	; 0x40
 801e7a0:	d0ed      	beq.n	801e77e <arm_cfft_f32+0x2e>
 801e7a2:	2d80      	cmp	r5, #128	; 0x80
 801e7a4:	d1f1      	bne.n	801e78a <arm_cfft_f32+0x3a>
 801e7a6:	4621      	mov	r1, r4
 801e7a8:	4630      	mov	r0, r6
 801e7aa:	f7ff fcab 	bl	801e104 <arm_cfft_radix8by2_f32>
 801e7ae:	f1b8 0f00 	cmp.w	r8, #0
 801e7b2:	d0ed      	beq.n	801e790 <arm_cfft_f32+0x40>
 801e7b4:	68b2      	ldr	r2, [r6, #8]
 801e7b6:	89b1      	ldrh	r1, [r6, #12]
 801e7b8:	4620      	mov	r0, r4
 801e7ba:	f000 f841 	bl	801e840 <arm_bitreversal_32>
 801e7be:	2f01      	cmp	r7, #1
 801e7c0:	d1e8      	bne.n	801e794 <arm_cfft_f32+0x44>
 801e7c2:	ee07 5a90 	vmov	s15, r5
 801e7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e7ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e7ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e7d2:	2d00      	cmp	r5, #0
 801e7d4:	d0de      	beq.n	801e794 <arm_cfft_f32+0x44>
 801e7d6:	f104 0108 	add.w	r1, r4, #8
 801e7da:	2300      	movs	r3, #0
 801e7dc:	3301      	adds	r3, #1
 801e7de:	429d      	cmp	r5, r3
 801e7e0:	f101 0108 	add.w	r1, r1, #8
 801e7e4:	ed11 7a04 	vldr	s14, [r1, #-16]
 801e7e8:	ed51 7a03 	vldr	s15, [r1, #-12]
 801e7ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e7f0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801e7f4:	ed01 7a04 	vstr	s14, [r1, #-16]
 801e7f8:	ed41 7a03 	vstr	s15, [r1, #-12]
 801e7fc:	d1ee      	bne.n	801e7dc <arm_cfft_f32+0x8c>
 801e7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e802:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 801e806:	d0ba      	beq.n	801e77e <arm_cfft_f32+0x2e>
 801e808:	e7bf      	b.n	801e78a <arm_cfft_f32+0x3a>
 801e80a:	2d10      	cmp	r5, #16
 801e80c:	d0cb      	beq.n	801e7a6 <arm_cfft_f32+0x56>
 801e80e:	e7bc      	b.n	801e78a <arm_cfft_f32+0x3a>
 801e810:	b19d      	cbz	r5, 801e83a <arm_cfft_f32+0xea>
 801e812:	f101 030c 	add.w	r3, r1, #12
 801e816:	2200      	movs	r2, #0
 801e818:	ed53 7a02 	vldr	s15, [r3, #-8]
 801e81c:	3201      	adds	r2, #1
 801e81e:	eef1 7a67 	vneg.f32	s15, s15
 801e822:	4295      	cmp	r5, r2
 801e824:	ed43 7a02 	vstr	s15, [r3, #-8]
 801e828:	f103 0308 	add.w	r3, r3, #8
 801e82c:	d1f4      	bne.n	801e818 <arm_cfft_f32+0xc8>
 801e82e:	e798      	b.n	801e762 <arm_cfft_f32+0x12>
 801e830:	4621      	mov	r1, r4
 801e832:	4630      	mov	r0, r6
 801e834:	f7ff fd36 	bl	801e2a4 <arm_cfft_radix8by4_f32>
 801e838:	e7a7      	b.n	801e78a <arm_cfft_f32+0x3a>
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d0aa      	beq.n	801e794 <arm_cfft_f32+0x44>
 801e83e:	e7b9      	b.n	801e7b4 <arm_cfft_f32+0x64>

0801e840 <arm_bitreversal_32>:
 801e840:	b1e9      	cbz	r1, 801e87e <arm_bitreversal_32+0x3e>
 801e842:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e844:	2500      	movs	r5, #0
 801e846:	f102 0e02 	add.w	lr, r2, #2
 801e84a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 801e84e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 801e852:	08a4      	lsrs	r4, r4, #2
 801e854:	089b      	lsrs	r3, r3, #2
 801e856:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 801e85a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 801e85e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 801e862:	00a6      	lsls	r6, r4, #2
 801e864:	009b      	lsls	r3, r3, #2
 801e866:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 801e86a:	3304      	adds	r3, #4
 801e86c:	1d34      	adds	r4, r6, #4
 801e86e:	3502      	adds	r5, #2
 801e870:	58c6      	ldr	r6, [r0, r3]
 801e872:	5907      	ldr	r7, [r0, r4]
 801e874:	50c7      	str	r7, [r0, r3]
 801e876:	428d      	cmp	r5, r1
 801e878:	5106      	str	r6, [r0, r4]
 801e87a:	d3e6      	bcc.n	801e84a <arm_bitreversal_32+0xa>
 801e87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e87e:	4770      	bx	lr

0801e880 <arm_cmplx_mag_f32>:
 801e880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e884:	ed2d 8b02 	vpush	{d8}
 801e888:	0897      	lsrs	r7, r2, #2
 801e88a:	b084      	sub	sp, #16
 801e88c:	d077      	beq.n	801e97e <arm_cmplx_mag_f32+0xfe>
 801e88e:	f04f 0800 	mov.w	r8, #0
 801e892:	f100 0420 	add.w	r4, r0, #32
 801e896:	f101 0510 	add.w	r5, r1, #16
 801e89a:	463e      	mov	r6, r7
 801e89c:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 801e8a0:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 801e8a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 801e8a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e8ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e8b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8b8:	f2c0 80c5 	blt.w	801ea46 <arm_cmplx_mag_f32+0x1c6>
 801e8bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801e8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8c4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 801e8c8:	f100 80cb 	bmi.w	801ea62 <arm_cmplx_mag_f32+0x1e2>
 801e8cc:	ed05 8a04 	vstr	s16, [r5, #-16]
 801e8d0:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 801e8d4:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 801e8d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 801e8dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e8e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e8e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8ec:	f2c0 80a8 	blt.w	801ea40 <arm_cmplx_mag_f32+0x1c0>
 801e8f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801e8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8f8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 801e8fc:	f100 80a8 	bmi.w	801ea50 <arm_cmplx_mag_f32+0x1d0>
 801e900:	ed05 8a03 	vstr	s16, [r5, #-12]
 801e904:	ed14 0a04 	vldr	s0, [r4, #-16]
 801e908:	ed54 7a03 	vldr	s15, [r4, #-12]
 801e90c:	ee20 0a00 	vmul.f32	s0, s0, s0
 801e910:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e914:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e918:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e920:	f2c0 808b 	blt.w	801ea3a <arm_cmplx_mag_f32+0x1ba>
 801e924:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801e928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e92c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 801e930:	f100 80a9 	bmi.w	801ea86 <arm_cmplx_mag_f32+0x206>
 801e934:	ed05 8a02 	vstr	s16, [r5, #-8]
 801e938:	ed14 0a02 	vldr	s0, [r4, #-8]
 801e93c:	ed54 7a01 	vldr	s15, [r4, #-4]
 801e940:	ee20 0a00 	vmul.f32	s0, s0, s0
 801e944:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e948:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e94c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e954:	db6e      	blt.n	801ea34 <arm_cmplx_mag_f32+0x1b4>
 801e956:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801e95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e95e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 801e962:	f100 8087 	bmi.w	801ea74 <arm_cmplx_mag_f32+0x1f4>
 801e966:	ed05 8a01 	vstr	s16, [r5, #-4]
 801e96a:	3e01      	subs	r6, #1
 801e96c:	f104 0420 	add.w	r4, r4, #32
 801e970:	f105 0510 	add.w	r5, r5, #16
 801e974:	d192      	bne.n	801e89c <arm_cmplx_mag_f32+0x1c>
 801e976:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 801e97a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 801e97e:	f012 0203 	ands.w	r2, r2, #3
 801e982:	d052      	beq.n	801ea2a <arm_cmplx_mag_f32+0x1aa>
 801e984:	ed90 0a00 	vldr	s0, [r0]
 801e988:	edd0 7a01 	vldr	s15, [r0, #4]
 801e98c:	ee20 0a00 	vmul.f32	s0, s0, s0
 801e990:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e994:	2300      	movs	r3, #0
 801e996:	ee37 0a80 	vadd.f32	s0, s15, s0
 801e99a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9a2:	bfb8      	it	lt
 801e9a4:	600b      	strlt	r3, [r1, #0]
 801e9a6:	db08      	blt.n	801e9ba <arm_cmplx_mag_f32+0x13a>
 801e9a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801e9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9b0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 801e9b4:	d479      	bmi.n	801eaaa <arm_cmplx_mag_f32+0x22a>
 801e9b6:	ed81 8a00 	vstr	s16, [r1]
 801e9ba:	3a01      	subs	r2, #1
 801e9bc:	d035      	beq.n	801ea2a <arm_cmplx_mag_f32+0x1aa>
 801e9be:	ed90 0a02 	vldr	s0, [r0, #8]
 801e9c2:	edd0 7a03 	vldr	s15, [r0, #12]
 801e9c6:	ee20 0a00 	vmul.f32	s0, s0, s0
 801e9ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e9ce:	2300      	movs	r3, #0
 801e9d0:	ee37 0a80 	vadd.f32	s0, s15, s0
 801e9d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9dc:	bfb8      	it	lt
 801e9de:	604b      	strlt	r3, [r1, #4]
 801e9e0:	db08      	blt.n	801e9f4 <arm_cmplx_mag_f32+0x174>
 801e9e2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801e9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9ea:	eeb1 8ac0 	vsqrt.f32	s16, s0
 801e9ee:	d453      	bmi.n	801ea98 <arm_cmplx_mag_f32+0x218>
 801e9f0:	ed81 8a01 	vstr	s16, [r1, #4]
 801e9f4:	2a01      	cmp	r2, #1
 801e9f6:	d018      	beq.n	801ea2a <arm_cmplx_mag_f32+0x1aa>
 801e9f8:	ed90 0a04 	vldr	s0, [r0, #16]
 801e9fc:	edd0 7a05 	vldr	s15, [r0, #20]
 801ea00:	ee20 0a00 	vmul.f32	s0, s0, s0
 801ea04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ea08:	2300      	movs	r3, #0
 801ea0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ea0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ea12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea16:	db19      	blt.n	801ea4c <arm_cmplx_mag_f32+0x1cc>
 801ea18:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801ea1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea20:	eeb1 8ac0 	vsqrt.f32	s16, s0
 801ea24:	d44a      	bmi.n	801eabc <arm_cmplx_mag_f32+0x23c>
 801ea26:	ed81 8a02 	vstr	s16, [r1, #8]
 801ea2a:	b004      	add	sp, #16
 801ea2c:	ecbd 8b02 	vpop	{d8}
 801ea30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea34:	f845 8c04 	str.w	r8, [r5, #-4]
 801ea38:	e797      	b.n	801e96a <arm_cmplx_mag_f32+0xea>
 801ea3a:	f845 8c08 	str.w	r8, [r5, #-8]
 801ea3e:	e77b      	b.n	801e938 <arm_cmplx_mag_f32+0xb8>
 801ea40:	f845 8c0c 	str.w	r8, [r5, #-12]
 801ea44:	e75e      	b.n	801e904 <arm_cmplx_mag_f32+0x84>
 801ea46:	f845 8c10 	str.w	r8, [r5, #-16]
 801ea4a:	e741      	b.n	801e8d0 <arm_cmplx_mag_f32+0x50>
 801ea4c:	608b      	str	r3, [r1, #8]
 801ea4e:	e7ec      	b.n	801ea2a <arm_cmplx_mag_f32+0x1aa>
 801ea50:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ea54:	9001      	str	r0, [sp, #4]
 801ea56:	f000 fb77 	bl	801f148 <sqrtf>
 801ea5a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801ea5e:	9801      	ldr	r0, [sp, #4]
 801ea60:	e74e      	b.n	801e900 <arm_cmplx_mag_f32+0x80>
 801ea62:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ea66:	9001      	str	r0, [sp, #4]
 801ea68:	f000 fb6e 	bl	801f148 <sqrtf>
 801ea6c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801ea70:	9801      	ldr	r0, [sp, #4]
 801ea72:	e72b      	b.n	801e8cc <arm_cmplx_mag_f32+0x4c>
 801ea74:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ea78:	9001      	str	r0, [sp, #4]
 801ea7a:	f000 fb65 	bl	801f148 <sqrtf>
 801ea7e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801ea82:	9801      	ldr	r0, [sp, #4]
 801ea84:	e76f      	b.n	801e966 <arm_cmplx_mag_f32+0xe6>
 801ea86:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ea8a:	9001      	str	r0, [sp, #4]
 801ea8c:	f000 fb5c 	bl	801f148 <sqrtf>
 801ea90:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801ea94:	9801      	ldr	r0, [sp, #4]
 801ea96:	e74d      	b.n	801e934 <arm_cmplx_mag_f32+0xb4>
 801ea98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ea9c:	9201      	str	r2, [sp, #4]
 801ea9e:	f000 fb53 	bl	801f148 <sqrtf>
 801eaa2:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 801eaa6:	9903      	ldr	r1, [sp, #12]
 801eaa8:	e7a2      	b.n	801e9f0 <arm_cmplx_mag_f32+0x170>
 801eaaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eaae:	9201      	str	r2, [sp, #4]
 801eab0:	f000 fb4a 	bl	801f148 <sqrtf>
 801eab4:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 801eab8:	9903      	ldr	r1, [sp, #12]
 801eaba:	e77c      	b.n	801e9b6 <arm_cmplx_mag_f32+0x136>
 801eabc:	9101      	str	r1, [sp, #4]
 801eabe:	f000 fb43 	bl	801f148 <sqrtf>
 801eac2:	9901      	ldr	r1, [sp, #4]
 801eac4:	e7af      	b.n	801ea26 <arm_cmplx_mag_f32+0x1a6>
 801eac6:	bf00      	nop

0801eac8 <arm_radix8_butterfly_f32>:
 801eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eacc:	ed2d 8b10 	vpush	{d8-d15}
 801ead0:	b095      	sub	sp, #84	; 0x54
 801ead2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801ead6:	4603      	mov	r3, r0
 801ead8:	3304      	adds	r3, #4
 801eada:	ed9f bab9 	vldr	s22, [pc, #740]	; 801edc0 <arm_radix8_butterfly_f32+0x2f8>
 801eade:	9012      	str	r0, [sp, #72]	; 0x48
 801eae0:	468b      	mov	fp, r1
 801eae2:	9313      	str	r3, [sp, #76]	; 0x4c
 801eae4:	4689      	mov	r9, r1
 801eae6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 801eaea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eaec:	960f      	str	r6, [sp, #60]	; 0x3c
 801eaee:	ea4f 1846 	mov.w	r8, r6, lsl #5
 801eaf2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 801eaf6:	eb03 0508 	add.w	r5, r3, r8
 801eafa:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 801eafe:	eb05 040e 	add.w	r4, r5, lr
 801eb02:	0137      	lsls	r7, r6, #4
 801eb04:	eba6 030a 	sub.w	r3, r6, sl
 801eb08:	eb04 000e 	add.w	r0, r4, lr
 801eb0c:	44b2      	add	sl, r6
 801eb0e:	1d3a      	adds	r2, r7, #4
 801eb10:	9702      	str	r7, [sp, #8]
 801eb12:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801eb16:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 801eb1a:	ebae 0c06 	sub.w	ip, lr, r6
 801eb1e:	9703      	str	r7, [sp, #12]
 801eb20:	eb03 0708 	add.w	r7, r3, r8
 801eb24:	9701      	str	r7, [sp, #4]
 801eb26:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 801eb2a:	9706      	str	r7, [sp, #24]
 801eb2c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801eb2e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801eb32:	f10e 0104 	add.w	r1, lr, #4
 801eb36:	4439      	add	r1, r7
 801eb38:	443a      	add	r2, r7
 801eb3a:	0137      	lsls	r7, r6, #4
 801eb3c:	00f6      	lsls	r6, r6, #3
 801eb3e:	9704      	str	r7, [sp, #16]
 801eb40:	9605      	str	r6, [sp, #20]
 801eb42:	9f01      	ldr	r7, [sp, #4]
 801eb44:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801eb46:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 801eb4a:	f04f 0c00 	mov.w	ip, #0
 801eb4e:	edd4 6a00 	vldr	s13, [r4]
 801eb52:	edd7 1a00 	vldr	s3, [r7]
 801eb56:	ed16 aa01 	vldr	s20, [r6, #-4]
 801eb5a:	edd5 5a00 	vldr	s11, [r5]
 801eb5e:	ed52 9a01 	vldr	s19, [r2, #-4]
 801eb62:	ed90 6a00 	vldr	s12, [r0]
 801eb66:	ed51 7a01 	vldr	s15, [r1, #-4]
 801eb6a:	ed93 3a00 	vldr	s6, [r3]
 801eb6e:	ee39 0a86 	vadd.f32	s0, s19, s12
 801eb72:	ee33 2a21 	vadd.f32	s4, s6, s3
 801eb76:	ee37 5aa6 	vadd.f32	s10, s15, s13
 801eb7a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 801eb7e:	ee35 7a02 	vadd.f32	s14, s10, s4
 801eb82:	ee34 4a80 	vadd.f32	s8, s9, s0
 801eb86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801eb8a:	ee74 6a07 	vadd.f32	s13, s8, s14
 801eb8e:	ee34 4a47 	vsub.f32	s8, s8, s14
 801eb92:	ed46 6a01 	vstr	s13, [r6, #-4]
 801eb96:	ed85 4a00 	vstr	s8, [r5]
 801eb9a:	edd1 6a00 	vldr	s13, [r1]
 801eb9e:	ed94 9a01 	vldr	s18, [r4, #4]
 801eba2:	edd3 2a01 	vldr	s5, [r3, #4]
 801eba6:	edd7 8a01 	vldr	s17, [r7, #4]
 801ebaa:	edd6 0a00 	vldr	s1, [r6]
 801ebae:	edd5 3a01 	vldr	s7, [r5, #4]
 801ebb2:	ed90 8a01 	vldr	s16, [r0, #4]
 801ebb6:	ed92 7a00 	vldr	s14, [r2]
 801ebba:	ee33 3a61 	vsub.f32	s6, s6, s3
 801ebbe:	ee36 4ac9 	vsub.f32	s8, s13, s18
 801ebc2:	ee72 aae8 	vsub.f32	s21, s5, s17
 801ebc6:	ee77 1ac3 	vsub.f32	s3, s15, s6
 801ebca:	ee34 1a2a 	vadd.f32	s2, s8, s21
 801ebce:	ee77 7a83 	vadd.f32	s15, s15, s6
 801ebd2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 801ebd6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 801ebda:	ee39 6ac6 	vsub.f32	s12, s19, s12
 801ebde:	ee70 3ae3 	vsub.f32	s7, s1, s7
 801ebe2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 801ebe6:	ee77 0a08 	vadd.f32	s1, s14, s16
 801ebea:	ee21 1a0b 	vmul.f32	s2, s2, s22
 801ebee:	ee37 7a48 	vsub.f32	s14, s14, s16
 801ebf2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 801ebf6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 801ebfa:	ee76 6a89 	vadd.f32	s13, s13, s18
 801ebfe:	ee24 4a0b 	vmul.f32	s8, s8, s22
 801ec02:	ee67 7a8b 	vmul.f32	s15, s15, s22
 801ec06:	ee74 4ac0 	vsub.f32	s9, s9, s0
 801ec0a:	ee35 5a42 	vsub.f32	s10, s10, s4
 801ec0e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 801ec12:	ee33 2a20 	vadd.f32	s4, s6, s1
 801ec16:	ee76 6ae2 	vsub.f32	s13, s13, s5
 801ec1a:	ee33 3a60 	vsub.f32	s6, s6, s1
 801ec1e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 801ec22:	ee77 0a01 	vadd.f32	s1, s14, s2
 801ec26:	ee75 5ae1 	vsub.f32	s11, s11, s3
 801ec2a:	ee37 7a41 	vsub.f32	s14, s14, s2
 801ec2e:	ee73 1a84 	vadd.f32	s3, s7, s8
 801ec32:	ee33 4ac4 	vsub.f32	s8, s7, s8
 801ec36:	ee76 3a27 	vadd.f32	s7, s12, s15
 801ec3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801ec3e:	ee32 8a00 	vadd.f32	s16, s4, s0
 801ec42:	ee33 1a45 	vsub.f32	s2, s6, s10
 801ec46:	ee32 2a40 	vsub.f32	s4, s4, s0
 801ec4a:	ee35 5a03 	vadd.f32	s10, s10, s6
 801ec4e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 801ec52:	ee32 3aa0 	vadd.f32	s6, s5, s1
 801ec56:	ee74 6ae6 	vsub.f32	s13, s9, s13
 801ec5a:	ee34 6a67 	vsub.f32	s12, s8, s15
 801ec5e:	ee75 4a87 	vadd.f32	s9, s11, s14
 801ec62:	ee72 2ae0 	vsub.f32	s5, s5, s1
 801ec66:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801ec6a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801ec6e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 801ec72:	44dc      	add	ip, fp
 801ec74:	ee73 3aa1 	vadd.f32	s7, s7, s3
 801ec78:	45e1      	cmp	r9, ip
 801ec7a:	ed86 8a00 	vstr	s16, [r6]
 801ec7e:	ed85 2a01 	vstr	s4, [r5, #4]
 801ec82:	4456      	add	r6, sl
 801ec84:	ed02 0a01 	vstr	s0, [r2, #-4]
 801ec88:	4455      	add	r5, sl
 801ec8a:	edc0 6a00 	vstr	s13, [r0]
 801ec8e:	ed82 1a00 	vstr	s2, [r2]
 801ec92:	ed80 5a01 	vstr	s10, [r0, #4]
 801ec96:	4452      	add	r2, sl
 801ec98:	ed01 3a01 	vstr	s6, [r1, #-4]
 801ec9c:	4450      	add	r0, sl
 801ec9e:	edc7 2a00 	vstr	s5, [r7]
 801eca2:	edc4 4a00 	vstr	s9, [r4]
 801eca6:	ed83 7a00 	vstr	s14, [r3]
 801ecaa:	edc1 5a00 	vstr	s11, [r1]
 801ecae:	edc7 3a01 	vstr	s7, [r7, #4]
 801ecb2:	4451      	add	r1, sl
 801ecb4:	ed84 6a01 	vstr	s12, [r4, #4]
 801ecb8:	4457      	add	r7, sl
 801ecba:	edc3 7a01 	vstr	s15, [r3, #4]
 801ecbe:	4454      	add	r4, sl
 801ecc0:	4453      	add	r3, sl
 801ecc2:	f63f af44 	bhi.w	801eb4e <arm_radix8_butterfly_f32+0x86>
 801ecc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ecc8:	2b07      	cmp	r3, #7
 801ecca:	f240 81b7 	bls.w	801f03c <arm_radix8_butterfly_f32+0x574>
 801ecce:	9b06      	ldr	r3, [sp, #24]
 801ecd0:	9903      	ldr	r1, [sp, #12]
 801ecd2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ecd4:	9e05      	ldr	r6, [sp, #20]
 801ecd6:	9a04      	ldr	r2, [sp, #16]
 801ecd8:	f103 0c08 	add.w	ip, r3, #8
 801ecdc:	9b02      	ldr	r3, [sp, #8]
 801ecde:	3108      	adds	r1, #8
 801ece0:	f108 0808 	add.w	r8, r8, #8
 801ece4:	1841      	adds	r1, r0, r1
 801ece6:	3608      	adds	r6, #8
 801ece8:	330c      	adds	r3, #12
 801ecea:	4604      	mov	r4, r0
 801ecec:	4444      	add	r4, r8
 801ecee:	18c3      	adds	r3, r0, r3
 801ecf0:	9109      	str	r1, [sp, #36]	; 0x24
 801ecf2:	1981      	adds	r1, r0, r6
 801ecf4:	f10e 0e08 	add.w	lr, lr, #8
 801ecf8:	3208      	adds	r2, #8
 801ecfa:	940b      	str	r4, [sp, #44]	; 0x2c
 801ecfc:	9107      	str	r1, [sp, #28]
 801ecfe:	4604      	mov	r4, r0
 801ed00:	4601      	mov	r1, r0
 801ed02:	9304      	str	r3, [sp, #16]
 801ed04:	f100 030c 	add.w	r3, r0, #12
 801ed08:	4474      	add	r4, lr
 801ed0a:	f04f 0801 	mov.w	r8, #1
 801ed0e:	1882      	adds	r2, r0, r2
 801ed10:	4461      	add	r1, ip
 801ed12:	9305      	str	r3, [sp, #20]
 801ed14:	464b      	mov	r3, r9
 801ed16:	940a      	str	r4, [sp, #40]	; 0x28
 801ed18:	46c1      	mov	r9, r8
 801ed1a:	9208      	str	r2, [sp, #32]
 801ed1c:	46d8      	mov	r8, fp
 801ed1e:	9106      	str	r1, [sp, #24]
 801ed20:	f04f 0e00 	mov.w	lr, #0
 801ed24:	469b      	mov	fp, r3
 801ed26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ed28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ed2a:	449e      	add	lr, r3
 801ed2c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 801ed30:	441a      	add	r2, r3
 801ed32:	920e      	str	r2, [sp, #56]	; 0x38
 801ed34:	441a      	add	r2, r3
 801ed36:	18d4      	adds	r4, r2, r3
 801ed38:	18e5      	adds	r5, r4, r3
 801ed3a:	18ee      	adds	r6, r5, r3
 801ed3c:	18f7      	adds	r7, r6, r3
 801ed3e:	eb07 0c03 	add.w	ip, r7, r3
 801ed42:	920d      	str	r2, [sp, #52]	; 0x34
 801ed44:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 801ed48:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 801ed4c:	910c      	str	r1, [sp, #48]	; 0x30
 801ed4e:	4419      	add	r1, r3
 801ed50:	9103      	str	r1, [sp, #12]
 801ed52:	4419      	add	r1, r3
 801ed54:	18ca      	adds	r2, r1, r3
 801ed56:	9202      	str	r2, [sp, #8]
 801ed58:	441a      	add	r2, r3
 801ed5a:	18d0      	adds	r0, r2, r3
 801ed5c:	ed92 ea01 	vldr	s28, [r2, #4]
 801ed60:	9a02      	ldr	r2, [sp, #8]
 801ed62:	edd4 7a00 	vldr	s15, [r4]
 801ed66:	edd2 da01 	vldr	s27, [r2, #4]
 801ed6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ed6c:	ed91 da01 	vldr	s26, [r1, #4]
 801ed70:	ed92 ca01 	vldr	s24, [r2, #4]
 801ed74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ed76:	9903      	ldr	r1, [sp, #12]
 801ed78:	edcd 7a03 	vstr	s15, [sp, #12]
 801ed7c:	edd2 7a00 	vldr	s15, [r2]
 801ed80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ed82:	edcd 7a02 	vstr	s15, [sp, #8]
 801ed86:	edd2 7a00 	vldr	s15, [r2]
 801ed8a:	edd0 ea01 	vldr	s29, [r0, #4]
 801ed8e:	edd1 ca01 	vldr	s25, [r1, #4]
 801ed92:	eddc ba00 	vldr	s23, [ip]
 801ed96:	edd7 aa00 	vldr	s21, [r7]
 801ed9a:	ed96 aa00 	vldr	s20, [r6]
 801ed9e:	edd5 9a00 	vldr	s19, [r5]
 801eda2:	edcd 7a01 	vstr	s15, [sp, #4]
 801eda6:	4403      	add	r3, r0
 801eda8:	ed93 fa01 	vldr	s30, [r3, #4]
 801edac:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 801edb0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 801edb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801edb8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801edbc:	46cc      	mov	ip, r9
 801edbe:	e001      	b.n	801edc4 <arm_radix8_butterfly_f32+0x2fc>
 801edc0:	3f3504f3 	.word	0x3f3504f3
 801edc4:	ed91 6a00 	vldr	s12, [r1]
 801edc8:	ed93 5a00 	vldr	s10, [r3]
 801edcc:	edd0 fa00 	vldr	s31, [r0]
 801edd0:	edd4 7a00 	vldr	s15, [r4]
 801edd4:	ed95 7a00 	vldr	s14, [r5]
 801edd8:	ed56 3a01 	vldr	s7, [r6, #-4]
 801eddc:	ed17 3a01 	vldr	s6, [r7, #-4]
 801ede0:	ed92 2a00 	vldr	s4, [r2]
 801ede4:	ed96 0a00 	vldr	s0, [r6]
 801ede8:	ee33 8a85 	vadd.f32	s16, s7, s10
 801edec:	ee32 1a06 	vadd.f32	s2, s4, s12
 801edf0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 801edf4:	ee77 4a87 	vadd.f32	s9, s15, s14
 801edf8:	ee78 1a04 	vadd.f32	s3, s16, s8
 801edfc:	ee71 6a24 	vadd.f32	s13, s2, s9
 801ee00:	ee32 2a46 	vsub.f32	s4, s4, s12
 801ee04:	ee31 6aa6 	vadd.f32	s12, s3, s13
 801ee08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ee0c:	ed06 6a01 	vstr	s12, [r6, #-4]
 801ee10:	edd4 8a01 	vldr	s17, [r4, #4]
 801ee14:	ed92 9a01 	vldr	s18, [r2, #4]
 801ee18:	edd7 0a00 	vldr	s1, [r7]
 801ee1c:	edd1 2a01 	vldr	s5, [r1, #4]
 801ee20:	ed95 7a01 	vldr	s14, [r5, #4]
 801ee24:	ed93 6a01 	vldr	s12, [r3, #4]
 801ee28:	edd0 5a01 	vldr	s11, [r0, #4]
 801ee2c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 801ee30:	ee33 3a6f 	vsub.f32	s6, s6, s31
 801ee34:	ee39 5a62 	vsub.f32	s10, s18, s5
 801ee38:	ee78 fac7 	vsub.f32	s31, s17, s14
 801ee3c:	ee38 4a44 	vsub.f32	s8, s16, s8
 801ee40:	ee38 7a87 	vadd.f32	s14, s17, s14
 801ee44:	ee30 8aa5 	vadd.f32	s16, s1, s11
 801ee48:	ee79 2a22 	vadd.f32	s5, s18, s5
 801ee4c:	ee32 9a27 	vadd.f32	s18, s4, s15
 801ee50:	ee72 7a67 	vsub.f32	s15, s4, s15
 801ee54:	ee30 2a06 	vadd.f32	s4, s0, s12
 801ee58:	ee75 8a6f 	vsub.f32	s17, s10, s31
 801ee5c:	ee71 4a64 	vsub.f32	s9, s2, s9
 801ee60:	ee35 5a2f 	vadd.f32	s10, s10, s31
 801ee64:	ee32 1a08 	vadd.f32	s2, s4, s16
 801ee68:	ee72 fa87 	vadd.f32	s31, s5, s14
 801ee6c:	ee32 2a48 	vsub.f32	s4, s4, s16
 801ee70:	ee68 8a8b 	vmul.f32	s17, s17, s22
 801ee74:	ee25 5a0b 	vmul.f32	s10, s10, s22
 801ee78:	ee70 5ae5 	vsub.f32	s11, s1, s11
 801ee7c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 801ee80:	ee71 6ae6 	vsub.f32	s13, s3, s13
 801ee84:	ee29 9a0b 	vmul.f32	s18, s18, s22
 801ee88:	ee71 1a6f 	vsub.f32	s3, s2, s31
 801ee8c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 801ee90:	ee30 6a46 	vsub.f32	s12, s0, s12
 801ee94:	ee74 0a22 	vadd.f32	s1, s8, s5
 801ee98:	ee36 0a28 	vadd.f32	s0, s12, s17
 801ee9c:	ee74 2a62 	vsub.f32	s5, s8, s5
 801eea0:	ee36 6a68 	vsub.f32	s12, s12, s17
 801eea4:	ee32 4a64 	vsub.f32	s8, s4, s9
 801eea8:	ee73 8a09 	vadd.f32	s17, s6, s18
 801eeac:	ee74 4a82 	vadd.f32	s9, s9, s4
 801eeb0:	ee33 9a49 	vsub.f32	s18, s6, s18
 801eeb4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 801eeb8:	ee35 3a85 	vadd.f32	s6, s11, s10
 801eebc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801eec0:	ee33 5aa7 	vadd.f32	s10, s7, s15
 801eec4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 801eec8:	ee69 3aa6 	vmul.f32	s7, s19, s13
 801eecc:	ee30 7a68 	vsub.f32	s14, s0, s17
 801eed0:	ee35 8a03 	vadd.f32	s16, s10, s6
 801eed4:	ee38 0a80 	vadd.f32	s0, s17, s0
 801eed8:	ee73 3a82 	vadd.f32	s7, s7, s4
 801eedc:	ee69 8aa1 	vmul.f32	s17, s19, s3
 801eee0:	ed9d 2a01 	vldr	s4, [sp, #4]
 801eee4:	eddd 1a02 	vldr	s3, [sp, #8]
 801eee8:	ee35 5a43 	vsub.f32	s10, s10, s6
 801eeec:	ee71 fa2f 	vadd.f32	s31, s2, s31
 801eef0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 801eef4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 801eef8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801eefc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 801ef00:	ee76 5a49 	vsub.f32	s11, s12, s18
 801ef04:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 801ef08:	ee39 6a06 	vadd.f32	s12, s18, s12
 801ef0c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 801ef10:	ee21 4a84 	vmul.f32	s8, s3, s8
 801ef14:	ee6c 1a07 	vmul.f32	s3, s24, s14
 801ef18:	ee22 7a07 	vmul.f32	s14, s4, s14
 801ef1c:	ee22 2a08 	vmul.f32	s4, s4, s16
 801ef20:	ee2c 8a08 	vmul.f32	s16, s24, s16
 801ef24:	ee78 6ae6 	vsub.f32	s13, s17, s13
 801ef28:	ee31 1a09 	vadd.f32	s2, s2, s18
 801ef2c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 801ef30:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 801ef34:	ee74 0a60 	vsub.f32	s1, s8, s1
 801ef38:	ee37 7a48 	vsub.f32	s14, s14, s16
 801ef3c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 801ef40:	ee2b 8a85 	vmul.f32	s16, s23, s10
 801ef44:	ee72 1a21 	vadd.f32	s3, s4, s3
 801ef48:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 801ef4c:	ee38 2a89 	vadd.f32	s4, s17, s18
 801ef50:	ee2f 5a05 	vmul.f32	s10, s30, s10
 801ef54:	ee38 8a04 	vadd.f32	s16, s16, s8
 801ef58:	ee2e 9a25 	vmul.f32	s18, s28, s11
 801ef5c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 801ef60:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 801ef64:	eddd 5a03 	vldr	s11, [sp, #12]
 801ef68:	edc6 fa00 	vstr	s31, [r6]
 801ef6c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 801ef70:	ee74 2ae2 	vsub.f32	s5, s9, s5
 801ef74:	ee30 0a45 	vsub.f32	s0, s0, s10
 801ef78:	ee6a 4a03 	vmul.f32	s9, s20, s6
 801ef7c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 801ef80:	ee2d 5a06 	vmul.f32	s10, s26, s12
 801ef84:	ee2e 3a03 	vmul.f32	s6, s28, s6
 801ef88:	ee6d 7a27 	vmul.f32	s15, s26, s15
 801ef8c:	ee25 6a86 	vmul.f32	s12, s11, s12
 801ef90:	ee74 4a89 	vadd.f32	s9, s9, s18
 801ef94:	ee34 3a43 	vsub.f32	s6, s8, s6
 801ef98:	ee78 8a85 	vadd.f32	s17, s17, s10
 801ef9c:	ee36 6a67 	vsub.f32	s12, s12, s15
 801efa0:	44c4      	add	ip, r8
 801efa2:	45e3      	cmp	fp, ip
 801efa4:	edc3 3a00 	vstr	s7, [r3]
 801efa8:	edc3 6a01 	vstr	s13, [r3, #4]
 801efac:	4456      	add	r6, sl
 801efae:	ed07 1a01 	vstr	s2, [r7, #-4]
 801efb2:	edc7 0a00 	vstr	s1, [r7]
 801efb6:	4453      	add	r3, sl
 801efb8:	ed80 2a00 	vstr	s4, [r0]
 801efbc:	edc0 2a01 	vstr	s5, [r0, #4]
 801efc0:	4457      	add	r7, sl
 801efc2:	edc2 1a00 	vstr	s3, [r2]
 801efc6:	ed82 7a01 	vstr	s14, [r2, #4]
 801efca:	4450      	add	r0, sl
 801efcc:	ed85 8a00 	vstr	s16, [r5]
 801efd0:	ed85 0a01 	vstr	s0, [r5, #4]
 801efd4:	4452      	add	r2, sl
 801efd6:	edc1 4a00 	vstr	s9, [r1]
 801efda:	4455      	add	r5, sl
 801efdc:	ed81 3a01 	vstr	s6, [r1, #4]
 801efe0:	edc4 8a00 	vstr	s17, [r4]
 801efe4:	ed84 6a01 	vstr	s12, [r4, #4]
 801efe8:	4451      	add	r1, sl
 801efea:	4454      	add	r4, sl
 801efec:	f63f aeea 	bhi.w	801edc4 <arm_radix8_butterfly_f32+0x2fc>
 801eff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eff2:	3308      	adds	r3, #8
 801eff4:	930b      	str	r3, [sp, #44]	; 0x2c
 801eff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eff8:	3308      	adds	r3, #8
 801effa:	930a      	str	r3, [sp, #40]	; 0x28
 801effc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801effe:	3308      	adds	r3, #8
 801f000:	9309      	str	r3, [sp, #36]	; 0x24
 801f002:	9b08      	ldr	r3, [sp, #32]
 801f004:	3308      	adds	r3, #8
 801f006:	9308      	str	r3, [sp, #32]
 801f008:	9b07      	ldr	r3, [sp, #28]
 801f00a:	3308      	adds	r3, #8
 801f00c:	9307      	str	r3, [sp, #28]
 801f00e:	9b06      	ldr	r3, [sp, #24]
 801f010:	3308      	adds	r3, #8
 801f012:	9306      	str	r3, [sp, #24]
 801f014:	9b05      	ldr	r3, [sp, #20]
 801f016:	3308      	adds	r3, #8
 801f018:	9305      	str	r3, [sp, #20]
 801f01a:	9b04      	ldr	r3, [sp, #16]
 801f01c:	3308      	adds	r3, #8
 801f01e:	9304      	str	r3, [sp, #16]
 801f020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f022:	f109 0901 	add.w	r9, r9, #1
 801f026:	454b      	cmp	r3, r9
 801f028:	f47f ae7d 	bne.w	801ed26 <arm_radix8_butterfly_f32+0x25e>
 801f02c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f02e:	00db      	lsls	r3, r3, #3
 801f030:	b29b      	uxth	r3, r3
 801f032:	46d9      	mov	r9, fp
 801f034:	9310      	str	r3, [sp, #64]	; 0x40
 801f036:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 801f03a:	e554      	b.n	801eae6 <arm_radix8_butterfly_f32+0x1e>
 801f03c:	b015      	add	sp, #84	; 0x54
 801f03e:	ecbd 8b10 	vpop	{d8-d15}
 801f042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f046:	bf00      	nop

0801f048 <floor>:
 801f048:	ec51 0b10 	vmov	r0, r1, d0
 801f04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f050:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801f054:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801f058:	2e13      	cmp	r6, #19
 801f05a:	ee10 5a10 	vmov	r5, s0
 801f05e:	ee10 8a10 	vmov	r8, s0
 801f062:	460c      	mov	r4, r1
 801f064:	dc32      	bgt.n	801f0cc <floor+0x84>
 801f066:	2e00      	cmp	r6, #0
 801f068:	da14      	bge.n	801f094 <floor+0x4c>
 801f06a:	a333      	add	r3, pc, #204	; (adr r3, 801f138 <floor+0xf0>)
 801f06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f070:	f7e9 f914 	bl	800829c <__adddf3>
 801f074:	2200      	movs	r2, #0
 801f076:	2300      	movs	r3, #0
 801f078:	f7e9 fd56 	bl	8008b28 <__aeabi_dcmpgt>
 801f07c:	b138      	cbz	r0, 801f08e <floor+0x46>
 801f07e:	2c00      	cmp	r4, #0
 801f080:	da57      	bge.n	801f132 <floor+0xea>
 801f082:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801f086:	431d      	orrs	r5, r3
 801f088:	d001      	beq.n	801f08e <floor+0x46>
 801f08a:	4c2d      	ldr	r4, [pc, #180]	; (801f140 <floor+0xf8>)
 801f08c:	2500      	movs	r5, #0
 801f08e:	4621      	mov	r1, r4
 801f090:	4628      	mov	r0, r5
 801f092:	e025      	b.n	801f0e0 <floor+0x98>
 801f094:	4f2b      	ldr	r7, [pc, #172]	; (801f144 <floor+0xfc>)
 801f096:	4137      	asrs	r7, r6
 801f098:	ea01 0307 	and.w	r3, r1, r7
 801f09c:	4303      	orrs	r3, r0
 801f09e:	d01f      	beq.n	801f0e0 <floor+0x98>
 801f0a0:	a325      	add	r3, pc, #148	; (adr r3, 801f138 <floor+0xf0>)
 801f0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0a6:	f7e9 f8f9 	bl	800829c <__adddf3>
 801f0aa:	2200      	movs	r2, #0
 801f0ac:	2300      	movs	r3, #0
 801f0ae:	f7e9 fd3b 	bl	8008b28 <__aeabi_dcmpgt>
 801f0b2:	2800      	cmp	r0, #0
 801f0b4:	d0eb      	beq.n	801f08e <floor+0x46>
 801f0b6:	2c00      	cmp	r4, #0
 801f0b8:	bfbe      	ittt	lt
 801f0ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801f0be:	fa43 f606 	asrlt.w	r6, r3, r6
 801f0c2:	19a4      	addlt	r4, r4, r6
 801f0c4:	ea24 0407 	bic.w	r4, r4, r7
 801f0c8:	2500      	movs	r5, #0
 801f0ca:	e7e0      	b.n	801f08e <floor+0x46>
 801f0cc:	2e33      	cmp	r6, #51	; 0x33
 801f0ce:	dd0b      	ble.n	801f0e8 <floor+0xa0>
 801f0d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801f0d4:	d104      	bne.n	801f0e0 <floor+0x98>
 801f0d6:	ee10 2a10 	vmov	r2, s0
 801f0da:	460b      	mov	r3, r1
 801f0dc:	f7e9 f8de 	bl	800829c <__adddf3>
 801f0e0:	ec41 0b10 	vmov	d0, r0, r1
 801f0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801f0ec:	f04f 33ff 	mov.w	r3, #4294967295
 801f0f0:	fa23 f707 	lsr.w	r7, r3, r7
 801f0f4:	4207      	tst	r7, r0
 801f0f6:	d0f3      	beq.n	801f0e0 <floor+0x98>
 801f0f8:	a30f      	add	r3, pc, #60	; (adr r3, 801f138 <floor+0xf0>)
 801f0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0fe:	f7e9 f8cd 	bl	800829c <__adddf3>
 801f102:	2200      	movs	r2, #0
 801f104:	2300      	movs	r3, #0
 801f106:	f7e9 fd0f 	bl	8008b28 <__aeabi_dcmpgt>
 801f10a:	2800      	cmp	r0, #0
 801f10c:	d0bf      	beq.n	801f08e <floor+0x46>
 801f10e:	2c00      	cmp	r4, #0
 801f110:	da02      	bge.n	801f118 <floor+0xd0>
 801f112:	2e14      	cmp	r6, #20
 801f114:	d103      	bne.n	801f11e <floor+0xd6>
 801f116:	3401      	adds	r4, #1
 801f118:	ea25 0507 	bic.w	r5, r5, r7
 801f11c:	e7b7      	b.n	801f08e <floor+0x46>
 801f11e:	2301      	movs	r3, #1
 801f120:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801f124:	fa03 f606 	lsl.w	r6, r3, r6
 801f128:	4435      	add	r5, r6
 801f12a:	4545      	cmp	r5, r8
 801f12c:	bf38      	it	cc
 801f12e:	18e4      	addcc	r4, r4, r3
 801f130:	e7f2      	b.n	801f118 <floor+0xd0>
 801f132:	2500      	movs	r5, #0
 801f134:	462c      	mov	r4, r5
 801f136:	e7aa      	b.n	801f08e <floor+0x46>
 801f138:	8800759c 	.word	0x8800759c
 801f13c:	7e37e43c 	.word	0x7e37e43c
 801f140:	bff00000 	.word	0xbff00000
 801f144:	000fffff 	.word	0x000fffff

0801f148 <sqrtf>:
 801f148:	b508      	push	{r3, lr}
 801f14a:	ed2d 8b02 	vpush	{d8}
 801f14e:	eeb0 8a40 	vmov.f32	s16, s0
 801f152:	f000 f817 	bl	801f184 <__ieee754_sqrtf>
 801f156:	eeb4 8a48 	vcmp.f32	s16, s16
 801f15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f15e:	d60c      	bvs.n	801f17a <sqrtf+0x32>
 801f160:	eddf 8a07 	vldr	s17, [pc, #28]	; 801f180 <sqrtf+0x38>
 801f164:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801f168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f16c:	d505      	bpl.n	801f17a <sqrtf+0x32>
 801f16e:	f000 f80d 	bl	801f18c <__errno>
 801f172:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801f176:	2321      	movs	r3, #33	; 0x21
 801f178:	6003      	str	r3, [r0, #0]
 801f17a:	ecbd 8b02 	vpop	{d8}
 801f17e:	bd08      	pop	{r3, pc}
 801f180:	00000000 	.word	0x00000000

0801f184 <__ieee754_sqrtf>:
 801f184:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801f188:	4770      	bx	lr
	...

0801f18c <__errno>:
 801f18c:	4b01      	ldr	r3, [pc, #4]	; (801f194 <__errno+0x8>)
 801f18e:	6818      	ldr	r0, [r3, #0]
 801f190:	4770      	bx	lr
 801f192:	bf00      	nop
 801f194:	20000100 	.word	0x20000100

0801f198 <std>:
 801f198:	2300      	movs	r3, #0
 801f19a:	b510      	push	{r4, lr}
 801f19c:	4604      	mov	r4, r0
 801f19e:	e9c0 3300 	strd	r3, r3, [r0]
 801f1a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f1a6:	6083      	str	r3, [r0, #8]
 801f1a8:	8181      	strh	r1, [r0, #12]
 801f1aa:	6643      	str	r3, [r0, #100]	; 0x64
 801f1ac:	81c2      	strh	r2, [r0, #14]
 801f1ae:	6183      	str	r3, [r0, #24]
 801f1b0:	4619      	mov	r1, r3
 801f1b2:	2208      	movs	r2, #8
 801f1b4:	305c      	adds	r0, #92	; 0x5c
 801f1b6:	f000 f941 	bl	801f43c <memset>
 801f1ba:	4b05      	ldr	r3, [pc, #20]	; (801f1d0 <std+0x38>)
 801f1bc:	6263      	str	r3, [r4, #36]	; 0x24
 801f1be:	4b05      	ldr	r3, [pc, #20]	; (801f1d4 <std+0x3c>)
 801f1c0:	62a3      	str	r3, [r4, #40]	; 0x28
 801f1c2:	4b05      	ldr	r3, [pc, #20]	; (801f1d8 <std+0x40>)
 801f1c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f1c6:	4b05      	ldr	r3, [pc, #20]	; (801f1dc <std+0x44>)
 801f1c8:	6224      	str	r4, [r4, #32]
 801f1ca:	6323      	str	r3, [r4, #48]	; 0x30
 801f1cc:	bd10      	pop	{r4, pc}
 801f1ce:	bf00      	nop
 801f1d0:	08020025 	.word	0x08020025
 801f1d4:	08020047 	.word	0x08020047
 801f1d8:	0802007f 	.word	0x0802007f
 801f1dc:	080200a3 	.word	0x080200a3

0801f1e0 <_cleanup_r>:
 801f1e0:	4901      	ldr	r1, [pc, #4]	; (801f1e8 <_cleanup_r+0x8>)
 801f1e2:	f000 b8af 	b.w	801f344 <_fwalk_reent>
 801f1e6:	bf00      	nop
 801f1e8:	08020ef1 	.word	0x08020ef1

0801f1ec <__sfmoreglue>:
 801f1ec:	b570      	push	{r4, r5, r6, lr}
 801f1ee:	2268      	movs	r2, #104	; 0x68
 801f1f0:	1e4d      	subs	r5, r1, #1
 801f1f2:	4355      	muls	r5, r2
 801f1f4:	460e      	mov	r6, r1
 801f1f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f1fa:	f000 f993 	bl	801f524 <_malloc_r>
 801f1fe:	4604      	mov	r4, r0
 801f200:	b140      	cbz	r0, 801f214 <__sfmoreglue+0x28>
 801f202:	2100      	movs	r1, #0
 801f204:	e9c0 1600 	strd	r1, r6, [r0]
 801f208:	300c      	adds	r0, #12
 801f20a:	60a0      	str	r0, [r4, #8]
 801f20c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f210:	f000 f914 	bl	801f43c <memset>
 801f214:	4620      	mov	r0, r4
 801f216:	bd70      	pop	{r4, r5, r6, pc}

0801f218 <__sfp_lock_acquire>:
 801f218:	4801      	ldr	r0, [pc, #4]	; (801f220 <__sfp_lock_acquire+0x8>)
 801f21a:	f7ef bf1f 	b.w	800f05c <__retarget_lock_acquire_recursive>
 801f21e:	bf00      	nop
 801f220:	2000cca0 	.word	0x2000cca0

0801f224 <__sfp_lock_release>:
 801f224:	4801      	ldr	r0, [pc, #4]	; (801f22c <__sfp_lock_release+0x8>)
 801f226:	f7ef bf2d 	b.w	800f084 <__retarget_lock_release_recursive>
 801f22a:	bf00      	nop
 801f22c:	2000cca0 	.word	0x2000cca0

0801f230 <__sinit_lock_acquire>:
 801f230:	4801      	ldr	r0, [pc, #4]	; (801f238 <__sinit_lock_acquire+0x8>)
 801f232:	f7ef bf13 	b.w	800f05c <__retarget_lock_acquire_recursive>
 801f236:	bf00      	nop
 801f238:	2000cc94 	.word	0x2000cc94

0801f23c <__sinit_lock_release>:
 801f23c:	4801      	ldr	r0, [pc, #4]	; (801f244 <__sinit_lock_release+0x8>)
 801f23e:	f7ef bf21 	b.w	800f084 <__retarget_lock_release_recursive>
 801f242:	bf00      	nop
 801f244:	2000cc94 	.word	0x2000cc94

0801f248 <__sinit>:
 801f248:	b510      	push	{r4, lr}
 801f24a:	4604      	mov	r4, r0
 801f24c:	f7ff fff0 	bl	801f230 <__sinit_lock_acquire>
 801f250:	69a3      	ldr	r3, [r4, #24]
 801f252:	b11b      	cbz	r3, 801f25c <__sinit+0x14>
 801f254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f258:	f7ff bff0 	b.w	801f23c <__sinit_lock_release>
 801f25c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f260:	6523      	str	r3, [r4, #80]	; 0x50
 801f262:	4b13      	ldr	r3, [pc, #76]	; (801f2b0 <__sinit+0x68>)
 801f264:	4a13      	ldr	r2, [pc, #76]	; (801f2b4 <__sinit+0x6c>)
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	62a2      	str	r2, [r4, #40]	; 0x28
 801f26a:	42a3      	cmp	r3, r4
 801f26c:	bf04      	itt	eq
 801f26e:	2301      	moveq	r3, #1
 801f270:	61a3      	streq	r3, [r4, #24]
 801f272:	4620      	mov	r0, r4
 801f274:	f000 f820 	bl	801f2b8 <__sfp>
 801f278:	6060      	str	r0, [r4, #4]
 801f27a:	4620      	mov	r0, r4
 801f27c:	f000 f81c 	bl	801f2b8 <__sfp>
 801f280:	60a0      	str	r0, [r4, #8]
 801f282:	4620      	mov	r0, r4
 801f284:	f000 f818 	bl	801f2b8 <__sfp>
 801f288:	2200      	movs	r2, #0
 801f28a:	60e0      	str	r0, [r4, #12]
 801f28c:	2104      	movs	r1, #4
 801f28e:	6860      	ldr	r0, [r4, #4]
 801f290:	f7ff ff82 	bl	801f198 <std>
 801f294:	68a0      	ldr	r0, [r4, #8]
 801f296:	2201      	movs	r2, #1
 801f298:	2109      	movs	r1, #9
 801f29a:	f7ff ff7d 	bl	801f198 <std>
 801f29e:	68e0      	ldr	r0, [r4, #12]
 801f2a0:	2202      	movs	r2, #2
 801f2a2:	2112      	movs	r1, #18
 801f2a4:	f7ff ff78 	bl	801f198 <std>
 801f2a8:	2301      	movs	r3, #1
 801f2aa:	61a3      	str	r3, [r4, #24]
 801f2ac:	e7d2      	b.n	801f254 <__sinit+0xc>
 801f2ae:	bf00      	nop
 801f2b0:	08035424 	.word	0x08035424
 801f2b4:	0801f1e1 	.word	0x0801f1e1

0801f2b8 <__sfp>:
 801f2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2ba:	4607      	mov	r7, r0
 801f2bc:	f7ff ffac 	bl	801f218 <__sfp_lock_acquire>
 801f2c0:	4b1e      	ldr	r3, [pc, #120]	; (801f33c <__sfp+0x84>)
 801f2c2:	681e      	ldr	r6, [r3, #0]
 801f2c4:	69b3      	ldr	r3, [r6, #24]
 801f2c6:	b913      	cbnz	r3, 801f2ce <__sfp+0x16>
 801f2c8:	4630      	mov	r0, r6
 801f2ca:	f7ff ffbd 	bl	801f248 <__sinit>
 801f2ce:	3648      	adds	r6, #72	; 0x48
 801f2d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f2d4:	3b01      	subs	r3, #1
 801f2d6:	d503      	bpl.n	801f2e0 <__sfp+0x28>
 801f2d8:	6833      	ldr	r3, [r6, #0]
 801f2da:	b30b      	cbz	r3, 801f320 <__sfp+0x68>
 801f2dc:	6836      	ldr	r6, [r6, #0]
 801f2de:	e7f7      	b.n	801f2d0 <__sfp+0x18>
 801f2e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f2e4:	b9d5      	cbnz	r5, 801f31c <__sfp+0x64>
 801f2e6:	4b16      	ldr	r3, [pc, #88]	; (801f340 <__sfp+0x88>)
 801f2e8:	60e3      	str	r3, [r4, #12]
 801f2ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f2ee:	6665      	str	r5, [r4, #100]	; 0x64
 801f2f0:	f7ef fe8e 	bl	800f010 <__retarget_lock_init_recursive>
 801f2f4:	f7ff ff96 	bl	801f224 <__sfp_lock_release>
 801f2f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f2fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f300:	6025      	str	r5, [r4, #0]
 801f302:	61a5      	str	r5, [r4, #24]
 801f304:	2208      	movs	r2, #8
 801f306:	4629      	mov	r1, r5
 801f308:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f30c:	f000 f896 	bl	801f43c <memset>
 801f310:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f314:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f318:	4620      	mov	r0, r4
 801f31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f31c:	3468      	adds	r4, #104	; 0x68
 801f31e:	e7d9      	b.n	801f2d4 <__sfp+0x1c>
 801f320:	2104      	movs	r1, #4
 801f322:	4638      	mov	r0, r7
 801f324:	f7ff ff62 	bl	801f1ec <__sfmoreglue>
 801f328:	4604      	mov	r4, r0
 801f32a:	6030      	str	r0, [r6, #0]
 801f32c:	2800      	cmp	r0, #0
 801f32e:	d1d5      	bne.n	801f2dc <__sfp+0x24>
 801f330:	f7ff ff78 	bl	801f224 <__sfp_lock_release>
 801f334:	230c      	movs	r3, #12
 801f336:	603b      	str	r3, [r7, #0]
 801f338:	e7ee      	b.n	801f318 <__sfp+0x60>
 801f33a:	bf00      	nop
 801f33c:	08035424 	.word	0x08035424
 801f340:	ffff0001 	.word	0xffff0001

0801f344 <_fwalk_reent>:
 801f344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f348:	4606      	mov	r6, r0
 801f34a:	4688      	mov	r8, r1
 801f34c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f350:	2700      	movs	r7, #0
 801f352:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f356:	f1b9 0901 	subs.w	r9, r9, #1
 801f35a:	d505      	bpl.n	801f368 <_fwalk_reent+0x24>
 801f35c:	6824      	ldr	r4, [r4, #0]
 801f35e:	2c00      	cmp	r4, #0
 801f360:	d1f7      	bne.n	801f352 <_fwalk_reent+0xe>
 801f362:	4638      	mov	r0, r7
 801f364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f368:	89ab      	ldrh	r3, [r5, #12]
 801f36a:	2b01      	cmp	r3, #1
 801f36c:	d907      	bls.n	801f37e <_fwalk_reent+0x3a>
 801f36e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f372:	3301      	adds	r3, #1
 801f374:	d003      	beq.n	801f37e <_fwalk_reent+0x3a>
 801f376:	4629      	mov	r1, r5
 801f378:	4630      	mov	r0, r6
 801f37a:	47c0      	blx	r8
 801f37c:	4307      	orrs	r7, r0
 801f37e:	3568      	adds	r5, #104	; 0x68
 801f380:	e7e9      	b.n	801f356 <_fwalk_reent+0x12>
	...

0801f384 <__libc_init_array>:
 801f384:	b570      	push	{r4, r5, r6, lr}
 801f386:	4d0d      	ldr	r5, [pc, #52]	; (801f3bc <__libc_init_array+0x38>)
 801f388:	4c0d      	ldr	r4, [pc, #52]	; (801f3c0 <__libc_init_array+0x3c>)
 801f38a:	1b64      	subs	r4, r4, r5
 801f38c:	10a4      	asrs	r4, r4, #2
 801f38e:	2600      	movs	r6, #0
 801f390:	42a6      	cmp	r6, r4
 801f392:	d109      	bne.n	801f3a8 <__libc_init_array+0x24>
 801f394:	4d0b      	ldr	r5, [pc, #44]	; (801f3c4 <__libc_init_array+0x40>)
 801f396:	4c0c      	ldr	r4, [pc, #48]	; (801f3c8 <__libc_init_array+0x44>)
 801f398:	f002 fe82 	bl	80220a0 <_init>
 801f39c:	1b64      	subs	r4, r4, r5
 801f39e:	10a4      	asrs	r4, r4, #2
 801f3a0:	2600      	movs	r6, #0
 801f3a2:	42a6      	cmp	r6, r4
 801f3a4:	d105      	bne.n	801f3b2 <__libc_init_array+0x2e>
 801f3a6:	bd70      	pop	{r4, r5, r6, pc}
 801f3a8:	f855 3b04 	ldr.w	r3, [r5], #4
 801f3ac:	4798      	blx	r3
 801f3ae:	3601      	adds	r6, #1
 801f3b0:	e7ee      	b.n	801f390 <__libc_init_array+0xc>
 801f3b2:	f855 3b04 	ldr.w	r3, [r5], #4
 801f3b6:	4798      	blx	r3
 801f3b8:	3601      	adds	r6, #1
 801f3ba:	e7f2      	b.n	801f3a2 <__libc_init_array+0x1e>
 801f3bc:	080357a4 	.word	0x080357a4
 801f3c0:	080357a4 	.word	0x080357a4
 801f3c4:	080357a4 	.word	0x080357a4
 801f3c8:	080357a8 	.word	0x080357a8

0801f3cc <malloc>:
 801f3cc:	4b02      	ldr	r3, [pc, #8]	; (801f3d8 <malloc+0xc>)
 801f3ce:	4601      	mov	r1, r0
 801f3d0:	6818      	ldr	r0, [r3, #0]
 801f3d2:	f000 b8a7 	b.w	801f524 <_malloc_r>
 801f3d6:	bf00      	nop
 801f3d8:	20000100 	.word	0x20000100

0801f3dc <free>:
 801f3dc:	4b02      	ldr	r3, [pc, #8]	; (801f3e8 <free+0xc>)
 801f3de:	4601      	mov	r1, r0
 801f3e0:	6818      	ldr	r0, [r3, #0]
 801f3e2:	f000 b833 	b.w	801f44c <_free_r>
 801f3e6:	bf00      	nop
 801f3e8:	20000100 	.word	0x20000100

0801f3ec <memcpy>:
 801f3ec:	440a      	add	r2, r1
 801f3ee:	4291      	cmp	r1, r2
 801f3f0:	f100 33ff 	add.w	r3, r0, #4294967295
 801f3f4:	d100      	bne.n	801f3f8 <memcpy+0xc>
 801f3f6:	4770      	bx	lr
 801f3f8:	b510      	push	{r4, lr}
 801f3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f3fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f402:	4291      	cmp	r1, r2
 801f404:	d1f9      	bne.n	801f3fa <memcpy+0xe>
 801f406:	bd10      	pop	{r4, pc}

0801f408 <memmove>:
 801f408:	4288      	cmp	r0, r1
 801f40a:	b510      	push	{r4, lr}
 801f40c:	eb01 0402 	add.w	r4, r1, r2
 801f410:	d902      	bls.n	801f418 <memmove+0x10>
 801f412:	4284      	cmp	r4, r0
 801f414:	4623      	mov	r3, r4
 801f416:	d807      	bhi.n	801f428 <memmove+0x20>
 801f418:	1e43      	subs	r3, r0, #1
 801f41a:	42a1      	cmp	r1, r4
 801f41c:	d008      	beq.n	801f430 <memmove+0x28>
 801f41e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f422:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f426:	e7f8      	b.n	801f41a <memmove+0x12>
 801f428:	4402      	add	r2, r0
 801f42a:	4601      	mov	r1, r0
 801f42c:	428a      	cmp	r2, r1
 801f42e:	d100      	bne.n	801f432 <memmove+0x2a>
 801f430:	bd10      	pop	{r4, pc}
 801f432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f43a:	e7f7      	b.n	801f42c <memmove+0x24>

0801f43c <memset>:
 801f43c:	4402      	add	r2, r0
 801f43e:	4603      	mov	r3, r0
 801f440:	4293      	cmp	r3, r2
 801f442:	d100      	bne.n	801f446 <memset+0xa>
 801f444:	4770      	bx	lr
 801f446:	f803 1b01 	strb.w	r1, [r3], #1
 801f44a:	e7f9      	b.n	801f440 <memset+0x4>

0801f44c <_free_r>:
 801f44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f44e:	2900      	cmp	r1, #0
 801f450:	d044      	beq.n	801f4dc <_free_r+0x90>
 801f452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f456:	9001      	str	r0, [sp, #4]
 801f458:	2b00      	cmp	r3, #0
 801f45a:	f1a1 0404 	sub.w	r4, r1, #4
 801f45e:	bfb8      	it	lt
 801f460:	18e4      	addlt	r4, r4, r3
 801f462:	f001 fd97 	bl	8020f94 <__malloc_lock>
 801f466:	4a1e      	ldr	r2, [pc, #120]	; (801f4e0 <_free_r+0x94>)
 801f468:	9801      	ldr	r0, [sp, #4]
 801f46a:	6813      	ldr	r3, [r2, #0]
 801f46c:	b933      	cbnz	r3, 801f47c <_free_r+0x30>
 801f46e:	6063      	str	r3, [r4, #4]
 801f470:	6014      	str	r4, [r2, #0]
 801f472:	b003      	add	sp, #12
 801f474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f478:	f001 bd92 	b.w	8020fa0 <__malloc_unlock>
 801f47c:	42a3      	cmp	r3, r4
 801f47e:	d908      	bls.n	801f492 <_free_r+0x46>
 801f480:	6825      	ldr	r5, [r4, #0]
 801f482:	1961      	adds	r1, r4, r5
 801f484:	428b      	cmp	r3, r1
 801f486:	bf01      	itttt	eq
 801f488:	6819      	ldreq	r1, [r3, #0]
 801f48a:	685b      	ldreq	r3, [r3, #4]
 801f48c:	1949      	addeq	r1, r1, r5
 801f48e:	6021      	streq	r1, [r4, #0]
 801f490:	e7ed      	b.n	801f46e <_free_r+0x22>
 801f492:	461a      	mov	r2, r3
 801f494:	685b      	ldr	r3, [r3, #4]
 801f496:	b10b      	cbz	r3, 801f49c <_free_r+0x50>
 801f498:	42a3      	cmp	r3, r4
 801f49a:	d9fa      	bls.n	801f492 <_free_r+0x46>
 801f49c:	6811      	ldr	r1, [r2, #0]
 801f49e:	1855      	adds	r5, r2, r1
 801f4a0:	42a5      	cmp	r5, r4
 801f4a2:	d10b      	bne.n	801f4bc <_free_r+0x70>
 801f4a4:	6824      	ldr	r4, [r4, #0]
 801f4a6:	4421      	add	r1, r4
 801f4a8:	1854      	adds	r4, r2, r1
 801f4aa:	42a3      	cmp	r3, r4
 801f4ac:	6011      	str	r1, [r2, #0]
 801f4ae:	d1e0      	bne.n	801f472 <_free_r+0x26>
 801f4b0:	681c      	ldr	r4, [r3, #0]
 801f4b2:	685b      	ldr	r3, [r3, #4]
 801f4b4:	6053      	str	r3, [r2, #4]
 801f4b6:	4421      	add	r1, r4
 801f4b8:	6011      	str	r1, [r2, #0]
 801f4ba:	e7da      	b.n	801f472 <_free_r+0x26>
 801f4bc:	d902      	bls.n	801f4c4 <_free_r+0x78>
 801f4be:	230c      	movs	r3, #12
 801f4c0:	6003      	str	r3, [r0, #0]
 801f4c2:	e7d6      	b.n	801f472 <_free_r+0x26>
 801f4c4:	6825      	ldr	r5, [r4, #0]
 801f4c6:	1961      	adds	r1, r4, r5
 801f4c8:	428b      	cmp	r3, r1
 801f4ca:	bf04      	itt	eq
 801f4cc:	6819      	ldreq	r1, [r3, #0]
 801f4ce:	685b      	ldreq	r3, [r3, #4]
 801f4d0:	6063      	str	r3, [r4, #4]
 801f4d2:	bf04      	itt	eq
 801f4d4:	1949      	addeq	r1, r1, r5
 801f4d6:	6021      	streq	r1, [r4, #0]
 801f4d8:	6054      	str	r4, [r2, #4]
 801f4da:	e7ca      	b.n	801f472 <_free_r+0x26>
 801f4dc:	b003      	add	sp, #12
 801f4de:	bd30      	pop	{r4, r5, pc}
 801f4e0:	2000eb60 	.word	0x2000eb60

0801f4e4 <sbrk_aligned>:
 801f4e4:	b570      	push	{r4, r5, r6, lr}
 801f4e6:	4e0e      	ldr	r6, [pc, #56]	; (801f520 <sbrk_aligned+0x3c>)
 801f4e8:	460c      	mov	r4, r1
 801f4ea:	6831      	ldr	r1, [r6, #0]
 801f4ec:	4605      	mov	r5, r0
 801f4ee:	b911      	cbnz	r1, 801f4f6 <sbrk_aligned+0x12>
 801f4f0:	f000 fd68 	bl	801ffc4 <_sbrk_r>
 801f4f4:	6030      	str	r0, [r6, #0]
 801f4f6:	4621      	mov	r1, r4
 801f4f8:	4628      	mov	r0, r5
 801f4fa:	f000 fd63 	bl	801ffc4 <_sbrk_r>
 801f4fe:	1c43      	adds	r3, r0, #1
 801f500:	d00a      	beq.n	801f518 <sbrk_aligned+0x34>
 801f502:	1cc4      	adds	r4, r0, #3
 801f504:	f024 0403 	bic.w	r4, r4, #3
 801f508:	42a0      	cmp	r0, r4
 801f50a:	d007      	beq.n	801f51c <sbrk_aligned+0x38>
 801f50c:	1a21      	subs	r1, r4, r0
 801f50e:	4628      	mov	r0, r5
 801f510:	f000 fd58 	bl	801ffc4 <_sbrk_r>
 801f514:	3001      	adds	r0, #1
 801f516:	d101      	bne.n	801f51c <sbrk_aligned+0x38>
 801f518:	f04f 34ff 	mov.w	r4, #4294967295
 801f51c:	4620      	mov	r0, r4
 801f51e:	bd70      	pop	{r4, r5, r6, pc}
 801f520:	2000eb64 	.word	0x2000eb64

0801f524 <_malloc_r>:
 801f524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f528:	1ccd      	adds	r5, r1, #3
 801f52a:	f025 0503 	bic.w	r5, r5, #3
 801f52e:	3508      	adds	r5, #8
 801f530:	2d0c      	cmp	r5, #12
 801f532:	bf38      	it	cc
 801f534:	250c      	movcc	r5, #12
 801f536:	2d00      	cmp	r5, #0
 801f538:	4607      	mov	r7, r0
 801f53a:	db01      	blt.n	801f540 <_malloc_r+0x1c>
 801f53c:	42a9      	cmp	r1, r5
 801f53e:	d905      	bls.n	801f54c <_malloc_r+0x28>
 801f540:	230c      	movs	r3, #12
 801f542:	603b      	str	r3, [r7, #0]
 801f544:	2600      	movs	r6, #0
 801f546:	4630      	mov	r0, r6
 801f548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f54c:	4e2e      	ldr	r6, [pc, #184]	; (801f608 <_malloc_r+0xe4>)
 801f54e:	f001 fd21 	bl	8020f94 <__malloc_lock>
 801f552:	6833      	ldr	r3, [r6, #0]
 801f554:	461c      	mov	r4, r3
 801f556:	bb34      	cbnz	r4, 801f5a6 <_malloc_r+0x82>
 801f558:	4629      	mov	r1, r5
 801f55a:	4638      	mov	r0, r7
 801f55c:	f7ff ffc2 	bl	801f4e4 <sbrk_aligned>
 801f560:	1c43      	adds	r3, r0, #1
 801f562:	4604      	mov	r4, r0
 801f564:	d14d      	bne.n	801f602 <_malloc_r+0xde>
 801f566:	6834      	ldr	r4, [r6, #0]
 801f568:	4626      	mov	r6, r4
 801f56a:	2e00      	cmp	r6, #0
 801f56c:	d140      	bne.n	801f5f0 <_malloc_r+0xcc>
 801f56e:	6823      	ldr	r3, [r4, #0]
 801f570:	4631      	mov	r1, r6
 801f572:	4638      	mov	r0, r7
 801f574:	eb04 0803 	add.w	r8, r4, r3
 801f578:	f000 fd24 	bl	801ffc4 <_sbrk_r>
 801f57c:	4580      	cmp	r8, r0
 801f57e:	d13a      	bne.n	801f5f6 <_malloc_r+0xd2>
 801f580:	6821      	ldr	r1, [r4, #0]
 801f582:	3503      	adds	r5, #3
 801f584:	1a6d      	subs	r5, r5, r1
 801f586:	f025 0503 	bic.w	r5, r5, #3
 801f58a:	3508      	adds	r5, #8
 801f58c:	2d0c      	cmp	r5, #12
 801f58e:	bf38      	it	cc
 801f590:	250c      	movcc	r5, #12
 801f592:	4629      	mov	r1, r5
 801f594:	4638      	mov	r0, r7
 801f596:	f7ff ffa5 	bl	801f4e4 <sbrk_aligned>
 801f59a:	3001      	adds	r0, #1
 801f59c:	d02b      	beq.n	801f5f6 <_malloc_r+0xd2>
 801f59e:	6823      	ldr	r3, [r4, #0]
 801f5a0:	442b      	add	r3, r5
 801f5a2:	6023      	str	r3, [r4, #0]
 801f5a4:	e00e      	b.n	801f5c4 <_malloc_r+0xa0>
 801f5a6:	6822      	ldr	r2, [r4, #0]
 801f5a8:	1b52      	subs	r2, r2, r5
 801f5aa:	d41e      	bmi.n	801f5ea <_malloc_r+0xc6>
 801f5ac:	2a0b      	cmp	r2, #11
 801f5ae:	d916      	bls.n	801f5de <_malloc_r+0xba>
 801f5b0:	1961      	adds	r1, r4, r5
 801f5b2:	42a3      	cmp	r3, r4
 801f5b4:	6025      	str	r5, [r4, #0]
 801f5b6:	bf18      	it	ne
 801f5b8:	6059      	strne	r1, [r3, #4]
 801f5ba:	6863      	ldr	r3, [r4, #4]
 801f5bc:	bf08      	it	eq
 801f5be:	6031      	streq	r1, [r6, #0]
 801f5c0:	5162      	str	r2, [r4, r5]
 801f5c2:	604b      	str	r3, [r1, #4]
 801f5c4:	4638      	mov	r0, r7
 801f5c6:	f104 060b 	add.w	r6, r4, #11
 801f5ca:	f001 fce9 	bl	8020fa0 <__malloc_unlock>
 801f5ce:	f026 0607 	bic.w	r6, r6, #7
 801f5d2:	1d23      	adds	r3, r4, #4
 801f5d4:	1af2      	subs	r2, r6, r3
 801f5d6:	d0b6      	beq.n	801f546 <_malloc_r+0x22>
 801f5d8:	1b9b      	subs	r3, r3, r6
 801f5da:	50a3      	str	r3, [r4, r2]
 801f5dc:	e7b3      	b.n	801f546 <_malloc_r+0x22>
 801f5de:	6862      	ldr	r2, [r4, #4]
 801f5e0:	42a3      	cmp	r3, r4
 801f5e2:	bf0c      	ite	eq
 801f5e4:	6032      	streq	r2, [r6, #0]
 801f5e6:	605a      	strne	r2, [r3, #4]
 801f5e8:	e7ec      	b.n	801f5c4 <_malloc_r+0xa0>
 801f5ea:	4623      	mov	r3, r4
 801f5ec:	6864      	ldr	r4, [r4, #4]
 801f5ee:	e7b2      	b.n	801f556 <_malloc_r+0x32>
 801f5f0:	4634      	mov	r4, r6
 801f5f2:	6876      	ldr	r6, [r6, #4]
 801f5f4:	e7b9      	b.n	801f56a <_malloc_r+0x46>
 801f5f6:	230c      	movs	r3, #12
 801f5f8:	603b      	str	r3, [r7, #0]
 801f5fa:	4638      	mov	r0, r7
 801f5fc:	f001 fcd0 	bl	8020fa0 <__malloc_unlock>
 801f600:	e7a1      	b.n	801f546 <_malloc_r+0x22>
 801f602:	6025      	str	r5, [r4, #0]
 801f604:	e7de      	b.n	801f5c4 <_malloc_r+0xa0>
 801f606:	bf00      	nop
 801f608:	2000eb60 	.word	0x2000eb60

0801f60c <__cvt>:
 801f60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f610:	ec55 4b10 	vmov	r4, r5, d0
 801f614:	2d00      	cmp	r5, #0
 801f616:	460e      	mov	r6, r1
 801f618:	4619      	mov	r1, r3
 801f61a:	462b      	mov	r3, r5
 801f61c:	bfbb      	ittet	lt
 801f61e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801f622:	461d      	movlt	r5, r3
 801f624:	2300      	movge	r3, #0
 801f626:	232d      	movlt	r3, #45	; 0x2d
 801f628:	700b      	strb	r3, [r1, #0]
 801f62a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f62c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f630:	4691      	mov	r9, r2
 801f632:	f023 0820 	bic.w	r8, r3, #32
 801f636:	bfbc      	itt	lt
 801f638:	4622      	movlt	r2, r4
 801f63a:	4614      	movlt	r4, r2
 801f63c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f640:	d005      	beq.n	801f64e <__cvt+0x42>
 801f642:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801f646:	d100      	bne.n	801f64a <__cvt+0x3e>
 801f648:	3601      	adds	r6, #1
 801f64a:	2102      	movs	r1, #2
 801f64c:	e000      	b.n	801f650 <__cvt+0x44>
 801f64e:	2103      	movs	r1, #3
 801f650:	ab03      	add	r3, sp, #12
 801f652:	9301      	str	r3, [sp, #4]
 801f654:	ab02      	add	r3, sp, #8
 801f656:	9300      	str	r3, [sp, #0]
 801f658:	ec45 4b10 	vmov	d0, r4, r5
 801f65c:	4653      	mov	r3, sl
 801f65e:	4632      	mov	r2, r6
 801f660:	f000 fdd2 	bl	8020208 <_dtoa_r>
 801f664:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801f668:	4607      	mov	r7, r0
 801f66a:	d102      	bne.n	801f672 <__cvt+0x66>
 801f66c:	f019 0f01 	tst.w	r9, #1
 801f670:	d022      	beq.n	801f6b8 <__cvt+0xac>
 801f672:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f676:	eb07 0906 	add.w	r9, r7, r6
 801f67a:	d110      	bne.n	801f69e <__cvt+0x92>
 801f67c:	783b      	ldrb	r3, [r7, #0]
 801f67e:	2b30      	cmp	r3, #48	; 0x30
 801f680:	d10a      	bne.n	801f698 <__cvt+0x8c>
 801f682:	2200      	movs	r2, #0
 801f684:	2300      	movs	r3, #0
 801f686:	4620      	mov	r0, r4
 801f688:	4629      	mov	r1, r5
 801f68a:	f7e9 fa25 	bl	8008ad8 <__aeabi_dcmpeq>
 801f68e:	b918      	cbnz	r0, 801f698 <__cvt+0x8c>
 801f690:	f1c6 0601 	rsb	r6, r6, #1
 801f694:	f8ca 6000 	str.w	r6, [sl]
 801f698:	f8da 3000 	ldr.w	r3, [sl]
 801f69c:	4499      	add	r9, r3
 801f69e:	2200      	movs	r2, #0
 801f6a0:	2300      	movs	r3, #0
 801f6a2:	4620      	mov	r0, r4
 801f6a4:	4629      	mov	r1, r5
 801f6a6:	f7e9 fa17 	bl	8008ad8 <__aeabi_dcmpeq>
 801f6aa:	b108      	cbz	r0, 801f6b0 <__cvt+0xa4>
 801f6ac:	f8cd 900c 	str.w	r9, [sp, #12]
 801f6b0:	2230      	movs	r2, #48	; 0x30
 801f6b2:	9b03      	ldr	r3, [sp, #12]
 801f6b4:	454b      	cmp	r3, r9
 801f6b6:	d307      	bcc.n	801f6c8 <__cvt+0xbc>
 801f6b8:	9b03      	ldr	r3, [sp, #12]
 801f6ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f6bc:	1bdb      	subs	r3, r3, r7
 801f6be:	4638      	mov	r0, r7
 801f6c0:	6013      	str	r3, [r2, #0]
 801f6c2:	b004      	add	sp, #16
 801f6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6c8:	1c59      	adds	r1, r3, #1
 801f6ca:	9103      	str	r1, [sp, #12]
 801f6cc:	701a      	strb	r2, [r3, #0]
 801f6ce:	e7f0      	b.n	801f6b2 <__cvt+0xa6>

0801f6d0 <__exponent>:
 801f6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f6d2:	4603      	mov	r3, r0
 801f6d4:	2900      	cmp	r1, #0
 801f6d6:	bfb8      	it	lt
 801f6d8:	4249      	neglt	r1, r1
 801f6da:	f803 2b02 	strb.w	r2, [r3], #2
 801f6de:	bfb4      	ite	lt
 801f6e0:	222d      	movlt	r2, #45	; 0x2d
 801f6e2:	222b      	movge	r2, #43	; 0x2b
 801f6e4:	2909      	cmp	r1, #9
 801f6e6:	7042      	strb	r2, [r0, #1]
 801f6e8:	dd2a      	ble.n	801f740 <__exponent+0x70>
 801f6ea:	f10d 0407 	add.w	r4, sp, #7
 801f6ee:	46a4      	mov	ip, r4
 801f6f0:	270a      	movs	r7, #10
 801f6f2:	46a6      	mov	lr, r4
 801f6f4:	460a      	mov	r2, r1
 801f6f6:	fb91 f6f7 	sdiv	r6, r1, r7
 801f6fa:	fb07 1516 	mls	r5, r7, r6, r1
 801f6fe:	3530      	adds	r5, #48	; 0x30
 801f700:	2a63      	cmp	r2, #99	; 0x63
 801f702:	f104 34ff 	add.w	r4, r4, #4294967295
 801f706:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f70a:	4631      	mov	r1, r6
 801f70c:	dcf1      	bgt.n	801f6f2 <__exponent+0x22>
 801f70e:	3130      	adds	r1, #48	; 0x30
 801f710:	f1ae 0502 	sub.w	r5, lr, #2
 801f714:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f718:	1c44      	adds	r4, r0, #1
 801f71a:	4629      	mov	r1, r5
 801f71c:	4561      	cmp	r1, ip
 801f71e:	d30a      	bcc.n	801f736 <__exponent+0x66>
 801f720:	f10d 0209 	add.w	r2, sp, #9
 801f724:	eba2 020e 	sub.w	r2, r2, lr
 801f728:	4565      	cmp	r5, ip
 801f72a:	bf88      	it	hi
 801f72c:	2200      	movhi	r2, #0
 801f72e:	4413      	add	r3, r2
 801f730:	1a18      	subs	r0, r3, r0
 801f732:	b003      	add	sp, #12
 801f734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f736:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f73a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f73e:	e7ed      	b.n	801f71c <__exponent+0x4c>
 801f740:	2330      	movs	r3, #48	; 0x30
 801f742:	3130      	adds	r1, #48	; 0x30
 801f744:	7083      	strb	r3, [r0, #2]
 801f746:	70c1      	strb	r1, [r0, #3]
 801f748:	1d03      	adds	r3, r0, #4
 801f74a:	e7f1      	b.n	801f730 <__exponent+0x60>

0801f74c <_printf_float>:
 801f74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f750:	ed2d 8b02 	vpush	{d8}
 801f754:	b08d      	sub	sp, #52	; 0x34
 801f756:	460c      	mov	r4, r1
 801f758:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f75c:	4616      	mov	r6, r2
 801f75e:	461f      	mov	r7, r3
 801f760:	4605      	mov	r5, r0
 801f762:	f001 fc01 	bl	8020f68 <_localeconv_r>
 801f766:	f8d0 a000 	ldr.w	sl, [r0]
 801f76a:	4650      	mov	r0, sl
 801f76c:	f7e8 fd38 	bl	80081e0 <strlen>
 801f770:	2300      	movs	r3, #0
 801f772:	930a      	str	r3, [sp, #40]	; 0x28
 801f774:	6823      	ldr	r3, [r4, #0]
 801f776:	9305      	str	r3, [sp, #20]
 801f778:	f8d8 3000 	ldr.w	r3, [r8]
 801f77c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f780:	3307      	adds	r3, #7
 801f782:	f023 0307 	bic.w	r3, r3, #7
 801f786:	f103 0208 	add.w	r2, r3, #8
 801f78a:	f8c8 2000 	str.w	r2, [r8]
 801f78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f792:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f796:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f79a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f79e:	9307      	str	r3, [sp, #28]
 801f7a0:	f8cd 8018 	str.w	r8, [sp, #24]
 801f7a4:	ee08 0a10 	vmov	s16, r0
 801f7a8:	4b9f      	ldr	r3, [pc, #636]	; (801fa28 <_printf_float+0x2dc>)
 801f7aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f7ae:	f04f 32ff 	mov.w	r2, #4294967295
 801f7b2:	f7e9 f9c3 	bl	8008b3c <__aeabi_dcmpun>
 801f7b6:	bb88      	cbnz	r0, 801f81c <_printf_float+0xd0>
 801f7b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f7bc:	4b9a      	ldr	r3, [pc, #616]	; (801fa28 <_printf_float+0x2dc>)
 801f7be:	f04f 32ff 	mov.w	r2, #4294967295
 801f7c2:	f7e9 f99d 	bl	8008b00 <__aeabi_dcmple>
 801f7c6:	bb48      	cbnz	r0, 801f81c <_printf_float+0xd0>
 801f7c8:	2200      	movs	r2, #0
 801f7ca:	2300      	movs	r3, #0
 801f7cc:	4640      	mov	r0, r8
 801f7ce:	4649      	mov	r1, r9
 801f7d0:	f7e9 f98c 	bl	8008aec <__aeabi_dcmplt>
 801f7d4:	b110      	cbz	r0, 801f7dc <_printf_float+0x90>
 801f7d6:	232d      	movs	r3, #45	; 0x2d
 801f7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f7dc:	4b93      	ldr	r3, [pc, #588]	; (801fa2c <_printf_float+0x2e0>)
 801f7de:	4894      	ldr	r0, [pc, #592]	; (801fa30 <_printf_float+0x2e4>)
 801f7e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f7e4:	bf94      	ite	ls
 801f7e6:	4698      	movls	r8, r3
 801f7e8:	4680      	movhi	r8, r0
 801f7ea:	2303      	movs	r3, #3
 801f7ec:	6123      	str	r3, [r4, #16]
 801f7ee:	9b05      	ldr	r3, [sp, #20]
 801f7f0:	f023 0204 	bic.w	r2, r3, #4
 801f7f4:	6022      	str	r2, [r4, #0]
 801f7f6:	f04f 0900 	mov.w	r9, #0
 801f7fa:	9700      	str	r7, [sp, #0]
 801f7fc:	4633      	mov	r3, r6
 801f7fe:	aa0b      	add	r2, sp, #44	; 0x2c
 801f800:	4621      	mov	r1, r4
 801f802:	4628      	mov	r0, r5
 801f804:	f000 f9d8 	bl	801fbb8 <_printf_common>
 801f808:	3001      	adds	r0, #1
 801f80a:	f040 8090 	bne.w	801f92e <_printf_float+0x1e2>
 801f80e:	f04f 30ff 	mov.w	r0, #4294967295
 801f812:	b00d      	add	sp, #52	; 0x34
 801f814:	ecbd 8b02 	vpop	{d8}
 801f818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f81c:	4642      	mov	r2, r8
 801f81e:	464b      	mov	r3, r9
 801f820:	4640      	mov	r0, r8
 801f822:	4649      	mov	r1, r9
 801f824:	f7e9 f98a 	bl	8008b3c <__aeabi_dcmpun>
 801f828:	b140      	cbz	r0, 801f83c <_printf_float+0xf0>
 801f82a:	464b      	mov	r3, r9
 801f82c:	2b00      	cmp	r3, #0
 801f82e:	bfbc      	itt	lt
 801f830:	232d      	movlt	r3, #45	; 0x2d
 801f832:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f836:	487f      	ldr	r0, [pc, #508]	; (801fa34 <_printf_float+0x2e8>)
 801f838:	4b7f      	ldr	r3, [pc, #508]	; (801fa38 <_printf_float+0x2ec>)
 801f83a:	e7d1      	b.n	801f7e0 <_printf_float+0x94>
 801f83c:	6863      	ldr	r3, [r4, #4]
 801f83e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f842:	9206      	str	r2, [sp, #24]
 801f844:	1c5a      	adds	r2, r3, #1
 801f846:	d13f      	bne.n	801f8c8 <_printf_float+0x17c>
 801f848:	2306      	movs	r3, #6
 801f84a:	6063      	str	r3, [r4, #4]
 801f84c:	9b05      	ldr	r3, [sp, #20]
 801f84e:	6861      	ldr	r1, [r4, #4]
 801f850:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f854:	2300      	movs	r3, #0
 801f856:	9303      	str	r3, [sp, #12]
 801f858:	ab0a      	add	r3, sp, #40	; 0x28
 801f85a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f85e:	ab09      	add	r3, sp, #36	; 0x24
 801f860:	ec49 8b10 	vmov	d0, r8, r9
 801f864:	9300      	str	r3, [sp, #0]
 801f866:	6022      	str	r2, [r4, #0]
 801f868:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f86c:	4628      	mov	r0, r5
 801f86e:	f7ff fecd 	bl	801f60c <__cvt>
 801f872:	9b06      	ldr	r3, [sp, #24]
 801f874:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f876:	2b47      	cmp	r3, #71	; 0x47
 801f878:	4680      	mov	r8, r0
 801f87a:	d108      	bne.n	801f88e <_printf_float+0x142>
 801f87c:	1cc8      	adds	r0, r1, #3
 801f87e:	db02      	blt.n	801f886 <_printf_float+0x13a>
 801f880:	6863      	ldr	r3, [r4, #4]
 801f882:	4299      	cmp	r1, r3
 801f884:	dd41      	ble.n	801f90a <_printf_float+0x1be>
 801f886:	f1ab 0b02 	sub.w	fp, fp, #2
 801f88a:	fa5f fb8b 	uxtb.w	fp, fp
 801f88e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f892:	d820      	bhi.n	801f8d6 <_printf_float+0x18a>
 801f894:	3901      	subs	r1, #1
 801f896:	465a      	mov	r2, fp
 801f898:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f89c:	9109      	str	r1, [sp, #36]	; 0x24
 801f89e:	f7ff ff17 	bl	801f6d0 <__exponent>
 801f8a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f8a4:	1813      	adds	r3, r2, r0
 801f8a6:	2a01      	cmp	r2, #1
 801f8a8:	4681      	mov	r9, r0
 801f8aa:	6123      	str	r3, [r4, #16]
 801f8ac:	dc02      	bgt.n	801f8b4 <_printf_float+0x168>
 801f8ae:	6822      	ldr	r2, [r4, #0]
 801f8b0:	07d2      	lsls	r2, r2, #31
 801f8b2:	d501      	bpl.n	801f8b8 <_printf_float+0x16c>
 801f8b4:	3301      	adds	r3, #1
 801f8b6:	6123      	str	r3, [r4, #16]
 801f8b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	d09c      	beq.n	801f7fa <_printf_float+0xae>
 801f8c0:	232d      	movs	r3, #45	; 0x2d
 801f8c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f8c6:	e798      	b.n	801f7fa <_printf_float+0xae>
 801f8c8:	9a06      	ldr	r2, [sp, #24]
 801f8ca:	2a47      	cmp	r2, #71	; 0x47
 801f8cc:	d1be      	bne.n	801f84c <_printf_float+0x100>
 801f8ce:	2b00      	cmp	r3, #0
 801f8d0:	d1bc      	bne.n	801f84c <_printf_float+0x100>
 801f8d2:	2301      	movs	r3, #1
 801f8d4:	e7b9      	b.n	801f84a <_printf_float+0xfe>
 801f8d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f8da:	d118      	bne.n	801f90e <_printf_float+0x1c2>
 801f8dc:	2900      	cmp	r1, #0
 801f8de:	6863      	ldr	r3, [r4, #4]
 801f8e0:	dd0b      	ble.n	801f8fa <_printf_float+0x1ae>
 801f8e2:	6121      	str	r1, [r4, #16]
 801f8e4:	b913      	cbnz	r3, 801f8ec <_printf_float+0x1a0>
 801f8e6:	6822      	ldr	r2, [r4, #0]
 801f8e8:	07d0      	lsls	r0, r2, #31
 801f8ea:	d502      	bpl.n	801f8f2 <_printf_float+0x1a6>
 801f8ec:	3301      	adds	r3, #1
 801f8ee:	440b      	add	r3, r1
 801f8f0:	6123      	str	r3, [r4, #16]
 801f8f2:	65a1      	str	r1, [r4, #88]	; 0x58
 801f8f4:	f04f 0900 	mov.w	r9, #0
 801f8f8:	e7de      	b.n	801f8b8 <_printf_float+0x16c>
 801f8fa:	b913      	cbnz	r3, 801f902 <_printf_float+0x1b6>
 801f8fc:	6822      	ldr	r2, [r4, #0]
 801f8fe:	07d2      	lsls	r2, r2, #31
 801f900:	d501      	bpl.n	801f906 <_printf_float+0x1ba>
 801f902:	3302      	adds	r3, #2
 801f904:	e7f4      	b.n	801f8f0 <_printf_float+0x1a4>
 801f906:	2301      	movs	r3, #1
 801f908:	e7f2      	b.n	801f8f0 <_printf_float+0x1a4>
 801f90a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f910:	4299      	cmp	r1, r3
 801f912:	db05      	blt.n	801f920 <_printf_float+0x1d4>
 801f914:	6823      	ldr	r3, [r4, #0]
 801f916:	6121      	str	r1, [r4, #16]
 801f918:	07d8      	lsls	r0, r3, #31
 801f91a:	d5ea      	bpl.n	801f8f2 <_printf_float+0x1a6>
 801f91c:	1c4b      	adds	r3, r1, #1
 801f91e:	e7e7      	b.n	801f8f0 <_printf_float+0x1a4>
 801f920:	2900      	cmp	r1, #0
 801f922:	bfd4      	ite	le
 801f924:	f1c1 0202 	rsble	r2, r1, #2
 801f928:	2201      	movgt	r2, #1
 801f92a:	4413      	add	r3, r2
 801f92c:	e7e0      	b.n	801f8f0 <_printf_float+0x1a4>
 801f92e:	6823      	ldr	r3, [r4, #0]
 801f930:	055a      	lsls	r2, r3, #21
 801f932:	d407      	bmi.n	801f944 <_printf_float+0x1f8>
 801f934:	6923      	ldr	r3, [r4, #16]
 801f936:	4642      	mov	r2, r8
 801f938:	4631      	mov	r1, r6
 801f93a:	4628      	mov	r0, r5
 801f93c:	47b8      	blx	r7
 801f93e:	3001      	adds	r0, #1
 801f940:	d12c      	bne.n	801f99c <_printf_float+0x250>
 801f942:	e764      	b.n	801f80e <_printf_float+0xc2>
 801f944:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f948:	f240 80e0 	bls.w	801fb0c <_printf_float+0x3c0>
 801f94c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f950:	2200      	movs	r2, #0
 801f952:	2300      	movs	r3, #0
 801f954:	f7e9 f8c0 	bl	8008ad8 <__aeabi_dcmpeq>
 801f958:	2800      	cmp	r0, #0
 801f95a:	d034      	beq.n	801f9c6 <_printf_float+0x27a>
 801f95c:	4a37      	ldr	r2, [pc, #220]	; (801fa3c <_printf_float+0x2f0>)
 801f95e:	2301      	movs	r3, #1
 801f960:	4631      	mov	r1, r6
 801f962:	4628      	mov	r0, r5
 801f964:	47b8      	blx	r7
 801f966:	3001      	adds	r0, #1
 801f968:	f43f af51 	beq.w	801f80e <_printf_float+0xc2>
 801f96c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f970:	429a      	cmp	r2, r3
 801f972:	db02      	blt.n	801f97a <_printf_float+0x22e>
 801f974:	6823      	ldr	r3, [r4, #0]
 801f976:	07d8      	lsls	r0, r3, #31
 801f978:	d510      	bpl.n	801f99c <_printf_float+0x250>
 801f97a:	ee18 3a10 	vmov	r3, s16
 801f97e:	4652      	mov	r2, sl
 801f980:	4631      	mov	r1, r6
 801f982:	4628      	mov	r0, r5
 801f984:	47b8      	blx	r7
 801f986:	3001      	adds	r0, #1
 801f988:	f43f af41 	beq.w	801f80e <_printf_float+0xc2>
 801f98c:	f04f 0800 	mov.w	r8, #0
 801f990:	f104 091a 	add.w	r9, r4, #26
 801f994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f996:	3b01      	subs	r3, #1
 801f998:	4543      	cmp	r3, r8
 801f99a:	dc09      	bgt.n	801f9b0 <_printf_float+0x264>
 801f99c:	6823      	ldr	r3, [r4, #0]
 801f99e:	079b      	lsls	r3, r3, #30
 801f9a0:	f100 8105 	bmi.w	801fbae <_printf_float+0x462>
 801f9a4:	68e0      	ldr	r0, [r4, #12]
 801f9a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f9a8:	4298      	cmp	r0, r3
 801f9aa:	bfb8      	it	lt
 801f9ac:	4618      	movlt	r0, r3
 801f9ae:	e730      	b.n	801f812 <_printf_float+0xc6>
 801f9b0:	2301      	movs	r3, #1
 801f9b2:	464a      	mov	r2, r9
 801f9b4:	4631      	mov	r1, r6
 801f9b6:	4628      	mov	r0, r5
 801f9b8:	47b8      	blx	r7
 801f9ba:	3001      	adds	r0, #1
 801f9bc:	f43f af27 	beq.w	801f80e <_printf_float+0xc2>
 801f9c0:	f108 0801 	add.w	r8, r8, #1
 801f9c4:	e7e6      	b.n	801f994 <_printf_float+0x248>
 801f9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9c8:	2b00      	cmp	r3, #0
 801f9ca:	dc39      	bgt.n	801fa40 <_printf_float+0x2f4>
 801f9cc:	4a1b      	ldr	r2, [pc, #108]	; (801fa3c <_printf_float+0x2f0>)
 801f9ce:	2301      	movs	r3, #1
 801f9d0:	4631      	mov	r1, r6
 801f9d2:	4628      	mov	r0, r5
 801f9d4:	47b8      	blx	r7
 801f9d6:	3001      	adds	r0, #1
 801f9d8:	f43f af19 	beq.w	801f80e <_printf_float+0xc2>
 801f9dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f9e0:	4313      	orrs	r3, r2
 801f9e2:	d102      	bne.n	801f9ea <_printf_float+0x29e>
 801f9e4:	6823      	ldr	r3, [r4, #0]
 801f9e6:	07d9      	lsls	r1, r3, #31
 801f9e8:	d5d8      	bpl.n	801f99c <_printf_float+0x250>
 801f9ea:	ee18 3a10 	vmov	r3, s16
 801f9ee:	4652      	mov	r2, sl
 801f9f0:	4631      	mov	r1, r6
 801f9f2:	4628      	mov	r0, r5
 801f9f4:	47b8      	blx	r7
 801f9f6:	3001      	adds	r0, #1
 801f9f8:	f43f af09 	beq.w	801f80e <_printf_float+0xc2>
 801f9fc:	f04f 0900 	mov.w	r9, #0
 801fa00:	f104 0a1a 	add.w	sl, r4, #26
 801fa04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa06:	425b      	negs	r3, r3
 801fa08:	454b      	cmp	r3, r9
 801fa0a:	dc01      	bgt.n	801fa10 <_printf_float+0x2c4>
 801fa0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa0e:	e792      	b.n	801f936 <_printf_float+0x1ea>
 801fa10:	2301      	movs	r3, #1
 801fa12:	4652      	mov	r2, sl
 801fa14:	4631      	mov	r1, r6
 801fa16:	4628      	mov	r0, r5
 801fa18:	47b8      	blx	r7
 801fa1a:	3001      	adds	r0, #1
 801fa1c:	f43f aef7 	beq.w	801f80e <_printf_float+0xc2>
 801fa20:	f109 0901 	add.w	r9, r9, #1
 801fa24:	e7ee      	b.n	801fa04 <_printf_float+0x2b8>
 801fa26:	bf00      	nop
 801fa28:	7fefffff 	.word	0x7fefffff
 801fa2c:	08035428 	.word	0x08035428
 801fa30:	0803542c 	.word	0x0803542c
 801fa34:	08035434 	.word	0x08035434
 801fa38:	08035430 	.word	0x08035430
 801fa3c:	08035438 	.word	0x08035438
 801fa40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fa44:	429a      	cmp	r2, r3
 801fa46:	bfa8      	it	ge
 801fa48:	461a      	movge	r2, r3
 801fa4a:	2a00      	cmp	r2, #0
 801fa4c:	4691      	mov	r9, r2
 801fa4e:	dc37      	bgt.n	801fac0 <_printf_float+0x374>
 801fa50:	f04f 0b00 	mov.w	fp, #0
 801fa54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fa58:	f104 021a 	add.w	r2, r4, #26
 801fa5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fa5e:	9305      	str	r3, [sp, #20]
 801fa60:	eba3 0309 	sub.w	r3, r3, r9
 801fa64:	455b      	cmp	r3, fp
 801fa66:	dc33      	bgt.n	801fad0 <_printf_float+0x384>
 801fa68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801fa6c:	429a      	cmp	r2, r3
 801fa6e:	db3b      	blt.n	801fae8 <_printf_float+0x39c>
 801fa70:	6823      	ldr	r3, [r4, #0]
 801fa72:	07da      	lsls	r2, r3, #31
 801fa74:	d438      	bmi.n	801fae8 <_printf_float+0x39c>
 801fa76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa78:	9a05      	ldr	r2, [sp, #20]
 801fa7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fa7c:	1a9a      	subs	r2, r3, r2
 801fa7e:	eba3 0901 	sub.w	r9, r3, r1
 801fa82:	4591      	cmp	r9, r2
 801fa84:	bfa8      	it	ge
 801fa86:	4691      	movge	r9, r2
 801fa88:	f1b9 0f00 	cmp.w	r9, #0
 801fa8c:	dc35      	bgt.n	801fafa <_printf_float+0x3ae>
 801fa8e:	f04f 0800 	mov.w	r8, #0
 801fa92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fa96:	f104 0a1a 	add.w	sl, r4, #26
 801fa9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801fa9e:	1a9b      	subs	r3, r3, r2
 801faa0:	eba3 0309 	sub.w	r3, r3, r9
 801faa4:	4543      	cmp	r3, r8
 801faa6:	f77f af79 	ble.w	801f99c <_printf_float+0x250>
 801faaa:	2301      	movs	r3, #1
 801faac:	4652      	mov	r2, sl
 801faae:	4631      	mov	r1, r6
 801fab0:	4628      	mov	r0, r5
 801fab2:	47b8      	blx	r7
 801fab4:	3001      	adds	r0, #1
 801fab6:	f43f aeaa 	beq.w	801f80e <_printf_float+0xc2>
 801faba:	f108 0801 	add.w	r8, r8, #1
 801fabe:	e7ec      	b.n	801fa9a <_printf_float+0x34e>
 801fac0:	4613      	mov	r3, r2
 801fac2:	4631      	mov	r1, r6
 801fac4:	4642      	mov	r2, r8
 801fac6:	4628      	mov	r0, r5
 801fac8:	47b8      	blx	r7
 801faca:	3001      	adds	r0, #1
 801facc:	d1c0      	bne.n	801fa50 <_printf_float+0x304>
 801face:	e69e      	b.n	801f80e <_printf_float+0xc2>
 801fad0:	2301      	movs	r3, #1
 801fad2:	4631      	mov	r1, r6
 801fad4:	4628      	mov	r0, r5
 801fad6:	9205      	str	r2, [sp, #20]
 801fad8:	47b8      	blx	r7
 801fada:	3001      	adds	r0, #1
 801fadc:	f43f ae97 	beq.w	801f80e <_printf_float+0xc2>
 801fae0:	9a05      	ldr	r2, [sp, #20]
 801fae2:	f10b 0b01 	add.w	fp, fp, #1
 801fae6:	e7b9      	b.n	801fa5c <_printf_float+0x310>
 801fae8:	ee18 3a10 	vmov	r3, s16
 801faec:	4652      	mov	r2, sl
 801faee:	4631      	mov	r1, r6
 801faf0:	4628      	mov	r0, r5
 801faf2:	47b8      	blx	r7
 801faf4:	3001      	adds	r0, #1
 801faf6:	d1be      	bne.n	801fa76 <_printf_float+0x32a>
 801faf8:	e689      	b.n	801f80e <_printf_float+0xc2>
 801fafa:	9a05      	ldr	r2, [sp, #20]
 801fafc:	464b      	mov	r3, r9
 801fafe:	4442      	add	r2, r8
 801fb00:	4631      	mov	r1, r6
 801fb02:	4628      	mov	r0, r5
 801fb04:	47b8      	blx	r7
 801fb06:	3001      	adds	r0, #1
 801fb08:	d1c1      	bne.n	801fa8e <_printf_float+0x342>
 801fb0a:	e680      	b.n	801f80e <_printf_float+0xc2>
 801fb0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fb0e:	2a01      	cmp	r2, #1
 801fb10:	dc01      	bgt.n	801fb16 <_printf_float+0x3ca>
 801fb12:	07db      	lsls	r3, r3, #31
 801fb14:	d538      	bpl.n	801fb88 <_printf_float+0x43c>
 801fb16:	2301      	movs	r3, #1
 801fb18:	4642      	mov	r2, r8
 801fb1a:	4631      	mov	r1, r6
 801fb1c:	4628      	mov	r0, r5
 801fb1e:	47b8      	blx	r7
 801fb20:	3001      	adds	r0, #1
 801fb22:	f43f ae74 	beq.w	801f80e <_printf_float+0xc2>
 801fb26:	ee18 3a10 	vmov	r3, s16
 801fb2a:	4652      	mov	r2, sl
 801fb2c:	4631      	mov	r1, r6
 801fb2e:	4628      	mov	r0, r5
 801fb30:	47b8      	blx	r7
 801fb32:	3001      	adds	r0, #1
 801fb34:	f43f ae6b 	beq.w	801f80e <_printf_float+0xc2>
 801fb38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801fb3c:	2200      	movs	r2, #0
 801fb3e:	2300      	movs	r3, #0
 801fb40:	f7e8 ffca 	bl	8008ad8 <__aeabi_dcmpeq>
 801fb44:	b9d8      	cbnz	r0, 801fb7e <_printf_float+0x432>
 801fb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb48:	f108 0201 	add.w	r2, r8, #1
 801fb4c:	3b01      	subs	r3, #1
 801fb4e:	4631      	mov	r1, r6
 801fb50:	4628      	mov	r0, r5
 801fb52:	47b8      	blx	r7
 801fb54:	3001      	adds	r0, #1
 801fb56:	d10e      	bne.n	801fb76 <_printf_float+0x42a>
 801fb58:	e659      	b.n	801f80e <_printf_float+0xc2>
 801fb5a:	2301      	movs	r3, #1
 801fb5c:	4652      	mov	r2, sl
 801fb5e:	4631      	mov	r1, r6
 801fb60:	4628      	mov	r0, r5
 801fb62:	47b8      	blx	r7
 801fb64:	3001      	adds	r0, #1
 801fb66:	f43f ae52 	beq.w	801f80e <_printf_float+0xc2>
 801fb6a:	f108 0801 	add.w	r8, r8, #1
 801fb6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb70:	3b01      	subs	r3, #1
 801fb72:	4543      	cmp	r3, r8
 801fb74:	dcf1      	bgt.n	801fb5a <_printf_float+0x40e>
 801fb76:	464b      	mov	r3, r9
 801fb78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801fb7c:	e6dc      	b.n	801f938 <_printf_float+0x1ec>
 801fb7e:	f04f 0800 	mov.w	r8, #0
 801fb82:	f104 0a1a 	add.w	sl, r4, #26
 801fb86:	e7f2      	b.n	801fb6e <_printf_float+0x422>
 801fb88:	2301      	movs	r3, #1
 801fb8a:	4642      	mov	r2, r8
 801fb8c:	e7df      	b.n	801fb4e <_printf_float+0x402>
 801fb8e:	2301      	movs	r3, #1
 801fb90:	464a      	mov	r2, r9
 801fb92:	4631      	mov	r1, r6
 801fb94:	4628      	mov	r0, r5
 801fb96:	47b8      	blx	r7
 801fb98:	3001      	adds	r0, #1
 801fb9a:	f43f ae38 	beq.w	801f80e <_printf_float+0xc2>
 801fb9e:	f108 0801 	add.w	r8, r8, #1
 801fba2:	68e3      	ldr	r3, [r4, #12]
 801fba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fba6:	1a5b      	subs	r3, r3, r1
 801fba8:	4543      	cmp	r3, r8
 801fbaa:	dcf0      	bgt.n	801fb8e <_printf_float+0x442>
 801fbac:	e6fa      	b.n	801f9a4 <_printf_float+0x258>
 801fbae:	f04f 0800 	mov.w	r8, #0
 801fbb2:	f104 0919 	add.w	r9, r4, #25
 801fbb6:	e7f4      	b.n	801fba2 <_printf_float+0x456>

0801fbb8 <_printf_common>:
 801fbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fbbc:	4616      	mov	r6, r2
 801fbbe:	4699      	mov	r9, r3
 801fbc0:	688a      	ldr	r2, [r1, #8]
 801fbc2:	690b      	ldr	r3, [r1, #16]
 801fbc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fbc8:	4293      	cmp	r3, r2
 801fbca:	bfb8      	it	lt
 801fbcc:	4613      	movlt	r3, r2
 801fbce:	6033      	str	r3, [r6, #0]
 801fbd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fbd4:	4607      	mov	r7, r0
 801fbd6:	460c      	mov	r4, r1
 801fbd8:	b10a      	cbz	r2, 801fbde <_printf_common+0x26>
 801fbda:	3301      	adds	r3, #1
 801fbdc:	6033      	str	r3, [r6, #0]
 801fbde:	6823      	ldr	r3, [r4, #0]
 801fbe0:	0699      	lsls	r1, r3, #26
 801fbe2:	bf42      	ittt	mi
 801fbe4:	6833      	ldrmi	r3, [r6, #0]
 801fbe6:	3302      	addmi	r3, #2
 801fbe8:	6033      	strmi	r3, [r6, #0]
 801fbea:	6825      	ldr	r5, [r4, #0]
 801fbec:	f015 0506 	ands.w	r5, r5, #6
 801fbf0:	d106      	bne.n	801fc00 <_printf_common+0x48>
 801fbf2:	f104 0a19 	add.w	sl, r4, #25
 801fbf6:	68e3      	ldr	r3, [r4, #12]
 801fbf8:	6832      	ldr	r2, [r6, #0]
 801fbfa:	1a9b      	subs	r3, r3, r2
 801fbfc:	42ab      	cmp	r3, r5
 801fbfe:	dc26      	bgt.n	801fc4e <_printf_common+0x96>
 801fc00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fc04:	1e13      	subs	r3, r2, #0
 801fc06:	6822      	ldr	r2, [r4, #0]
 801fc08:	bf18      	it	ne
 801fc0a:	2301      	movne	r3, #1
 801fc0c:	0692      	lsls	r2, r2, #26
 801fc0e:	d42b      	bmi.n	801fc68 <_printf_common+0xb0>
 801fc10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fc14:	4649      	mov	r1, r9
 801fc16:	4638      	mov	r0, r7
 801fc18:	47c0      	blx	r8
 801fc1a:	3001      	adds	r0, #1
 801fc1c:	d01e      	beq.n	801fc5c <_printf_common+0xa4>
 801fc1e:	6823      	ldr	r3, [r4, #0]
 801fc20:	68e5      	ldr	r5, [r4, #12]
 801fc22:	6832      	ldr	r2, [r6, #0]
 801fc24:	f003 0306 	and.w	r3, r3, #6
 801fc28:	2b04      	cmp	r3, #4
 801fc2a:	bf08      	it	eq
 801fc2c:	1aad      	subeq	r5, r5, r2
 801fc2e:	68a3      	ldr	r3, [r4, #8]
 801fc30:	6922      	ldr	r2, [r4, #16]
 801fc32:	bf0c      	ite	eq
 801fc34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fc38:	2500      	movne	r5, #0
 801fc3a:	4293      	cmp	r3, r2
 801fc3c:	bfc4      	itt	gt
 801fc3e:	1a9b      	subgt	r3, r3, r2
 801fc40:	18ed      	addgt	r5, r5, r3
 801fc42:	2600      	movs	r6, #0
 801fc44:	341a      	adds	r4, #26
 801fc46:	42b5      	cmp	r5, r6
 801fc48:	d11a      	bne.n	801fc80 <_printf_common+0xc8>
 801fc4a:	2000      	movs	r0, #0
 801fc4c:	e008      	b.n	801fc60 <_printf_common+0xa8>
 801fc4e:	2301      	movs	r3, #1
 801fc50:	4652      	mov	r2, sl
 801fc52:	4649      	mov	r1, r9
 801fc54:	4638      	mov	r0, r7
 801fc56:	47c0      	blx	r8
 801fc58:	3001      	adds	r0, #1
 801fc5a:	d103      	bne.n	801fc64 <_printf_common+0xac>
 801fc5c:	f04f 30ff 	mov.w	r0, #4294967295
 801fc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc64:	3501      	adds	r5, #1
 801fc66:	e7c6      	b.n	801fbf6 <_printf_common+0x3e>
 801fc68:	18e1      	adds	r1, r4, r3
 801fc6a:	1c5a      	adds	r2, r3, #1
 801fc6c:	2030      	movs	r0, #48	; 0x30
 801fc6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fc72:	4422      	add	r2, r4
 801fc74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fc78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fc7c:	3302      	adds	r3, #2
 801fc7e:	e7c7      	b.n	801fc10 <_printf_common+0x58>
 801fc80:	2301      	movs	r3, #1
 801fc82:	4622      	mov	r2, r4
 801fc84:	4649      	mov	r1, r9
 801fc86:	4638      	mov	r0, r7
 801fc88:	47c0      	blx	r8
 801fc8a:	3001      	adds	r0, #1
 801fc8c:	d0e6      	beq.n	801fc5c <_printf_common+0xa4>
 801fc8e:	3601      	adds	r6, #1
 801fc90:	e7d9      	b.n	801fc46 <_printf_common+0x8e>
	...

0801fc94 <_printf_i>:
 801fc94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fc98:	7e0f      	ldrb	r7, [r1, #24]
 801fc9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fc9c:	2f78      	cmp	r7, #120	; 0x78
 801fc9e:	4691      	mov	r9, r2
 801fca0:	4680      	mov	r8, r0
 801fca2:	460c      	mov	r4, r1
 801fca4:	469a      	mov	sl, r3
 801fca6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801fcaa:	d807      	bhi.n	801fcbc <_printf_i+0x28>
 801fcac:	2f62      	cmp	r7, #98	; 0x62
 801fcae:	d80a      	bhi.n	801fcc6 <_printf_i+0x32>
 801fcb0:	2f00      	cmp	r7, #0
 801fcb2:	f000 80d8 	beq.w	801fe66 <_printf_i+0x1d2>
 801fcb6:	2f58      	cmp	r7, #88	; 0x58
 801fcb8:	f000 80a3 	beq.w	801fe02 <_printf_i+0x16e>
 801fcbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fcc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fcc4:	e03a      	b.n	801fd3c <_printf_i+0xa8>
 801fcc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fcca:	2b15      	cmp	r3, #21
 801fccc:	d8f6      	bhi.n	801fcbc <_printf_i+0x28>
 801fcce:	a101      	add	r1, pc, #4	; (adr r1, 801fcd4 <_printf_i+0x40>)
 801fcd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801fcd4:	0801fd2d 	.word	0x0801fd2d
 801fcd8:	0801fd41 	.word	0x0801fd41
 801fcdc:	0801fcbd 	.word	0x0801fcbd
 801fce0:	0801fcbd 	.word	0x0801fcbd
 801fce4:	0801fcbd 	.word	0x0801fcbd
 801fce8:	0801fcbd 	.word	0x0801fcbd
 801fcec:	0801fd41 	.word	0x0801fd41
 801fcf0:	0801fcbd 	.word	0x0801fcbd
 801fcf4:	0801fcbd 	.word	0x0801fcbd
 801fcf8:	0801fcbd 	.word	0x0801fcbd
 801fcfc:	0801fcbd 	.word	0x0801fcbd
 801fd00:	0801fe4d 	.word	0x0801fe4d
 801fd04:	0801fd71 	.word	0x0801fd71
 801fd08:	0801fe2f 	.word	0x0801fe2f
 801fd0c:	0801fcbd 	.word	0x0801fcbd
 801fd10:	0801fcbd 	.word	0x0801fcbd
 801fd14:	0801fe6f 	.word	0x0801fe6f
 801fd18:	0801fcbd 	.word	0x0801fcbd
 801fd1c:	0801fd71 	.word	0x0801fd71
 801fd20:	0801fcbd 	.word	0x0801fcbd
 801fd24:	0801fcbd 	.word	0x0801fcbd
 801fd28:	0801fe37 	.word	0x0801fe37
 801fd2c:	682b      	ldr	r3, [r5, #0]
 801fd2e:	1d1a      	adds	r2, r3, #4
 801fd30:	681b      	ldr	r3, [r3, #0]
 801fd32:	602a      	str	r2, [r5, #0]
 801fd34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fd38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fd3c:	2301      	movs	r3, #1
 801fd3e:	e0a3      	b.n	801fe88 <_printf_i+0x1f4>
 801fd40:	6820      	ldr	r0, [r4, #0]
 801fd42:	6829      	ldr	r1, [r5, #0]
 801fd44:	0606      	lsls	r6, r0, #24
 801fd46:	f101 0304 	add.w	r3, r1, #4
 801fd4a:	d50a      	bpl.n	801fd62 <_printf_i+0xce>
 801fd4c:	680e      	ldr	r6, [r1, #0]
 801fd4e:	602b      	str	r3, [r5, #0]
 801fd50:	2e00      	cmp	r6, #0
 801fd52:	da03      	bge.n	801fd5c <_printf_i+0xc8>
 801fd54:	232d      	movs	r3, #45	; 0x2d
 801fd56:	4276      	negs	r6, r6
 801fd58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fd5c:	485e      	ldr	r0, [pc, #376]	; (801fed8 <_printf_i+0x244>)
 801fd5e:	230a      	movs	r3, #10
 801fd60:	e019      	b.n	801fd96 <_printf_i+0x102>
 801fd62:	680e      	ldr	r6, [r1, #0]
 801fd64:	602b      	str	r3, [r5, #0]
 801fd66:	f010 0f40 	tst.w	r0, #64	; 0x40
 801fd6a:	bf18      	it	ne
 801fd6c:	b236      	sxthne	r6, r6
 801fd6e:	e7ef      	b.n	801fd50 <_printf_i+0xbc>
 801fd70:	682b      	ldr	r3, [r5, #0]
 801fd72:	6820      	ldr	r0, [r4, #0]
 801fd74:	1d19      	adds	r1, r3, #4
 801fd76:	6029      	str	r1, [r5, #0]
 801fd78:	0601      	lsls	r1, r0, #24
 801fd7a:	d501      	bpl.n	801fd80 <_printf_i+0xec>
 801fd7c:	681e      	ldr	r6, [r3, #0]
 801fd7e:	e002      	b.n	801fd86 <_printf_i+0xf2>
 801fd80:	0646      	lsls	r6, r0, #25
 801fd82:	d5fb      	bpl.n	801fd7c <_printf_i+0xe8>
 801fd84:	881e      	ldrh	r6, [r3, #0]
 801fd86:	4854      	ldr	r0, [pc, #336]	; (801fed8 <_printf_i+0x244>)
 801fd88:	2f6f      	cmp	r7, #111	; 0x6f
 801fd8a:	bf0c      	ite	eq
 801fd8c:	2308      	moveq	r3, #8
 801fd8e:	230a      	movne	r3, #10
 801fd90:	2100      	movs	r1, #0
 801fd92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fd96:	6865      	ldr	r5, [r4, #4]
 801fd98:	60a5      	str	r5, [r4, #8]
 801fd9a:	2d00      	cmp	r5, #0
 801fd9c:	bfa2      	ittt	ge
 801fd9e:	6821      	ldrge	r1, [r4, #0]
 801fda0:	f021 0104 	bicge.w	r1, r1, #4
 801fda4:	6021      	strge	r1, [r4, #0]
 801fda6:	b90e      	cbnz	r6, 801fdac <_printf_i+0x118>
 801fda8:	2d00      	cmp	r5, #0
 801fdaa:	d04d      	beq.n	801fe48 <_printf_i+0x1b4>
 801fdac:	4615      	mov	r5, r2
 801fdae:	fbb6 f1f3 	udiv	r1, r6, r3
 801fdb2:	fb03 6711 	mls	r7, r3, r1, r6
 801fdb6:	5dc7      	ldrb	r7, [r0, r7]
 801fdb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801fdbc:	4637      	mov	r7, r6
 801fdbe:	42bb      	cmp	r3, r7
 801fdc0:	460e      	mov	r6, r1
 801fdc2:	d9f4      	bls.n	801fdae <_printf_i+0x11a>
 801fdc4:	2b08      	cmp	r3, #8
 801fdc6:	d10b      	bne.n	801fde0 <_printf_i+0x14c>
 801fdc8:	6823      	ldr	r3, [r4, #0]
 801fdca:	07de      	lsls	r6, r3, #31
 801fdcc:	d508      	bpl.n	801fde0 <_printf_i+0x14c>
 801fdce:	6923      	ldr	r3, [r4, #16]
 801fdd0:	6861      	ldr	r1, [r4, #4]
 801fdd2:	4299      	cmp	r1, r3
 801fdd4:	bfde      	ittt	le
 801fdd6:	2330      	movle	r3, #48	; 0x30
 801fdd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fddc:	f105 35ff 	addle.w	r5, r5, #4294967295
 801fde0:	1b52      	subs	r2, r2, r5
 801fde2:	6122      	str	r2, [r4, #16]
 801fde4:	f8cd a000 	str.w	sl, [sp]
 801fde8:	464b      	mov	r3, r9
 801fdea:	aa03      	add	r2, sp, #12
 801fdec:	4621      	mov	r1, r4
 801fdee:	4640      	mov	r0, r8
 801fdf0:	f7ff fee2 	bl	801fbb8 <_printf_common>
 801fdf4:	3001      	adds	r0, #1
 801fdf6:	d14c      	bne.n	801fe92 <_printf_i+0x1fe>
 801fdf8:	f04f 30ff 	mov.w	r0, #4294967295
 801fdfc:	b004      	add	sp, #16
 801fdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe02:	4835      	ldr	r0, [pc, #212]	; (801fed8 <_printf_i+0x244>)
 801fe04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801fe08:	6829      	ldr	r1, [r5, #0]
 801fe0a:	6823      	ldr	r3, [r4, #0]
 801fe0c:	f851 6b04 	ldr.w	r6, [r1], #4
 801fe10:	6029      	str	r1, [r5, #0]
 801fe12:	061d      	lsls	r5, r3, #24
 801fe14:	d514      	bpl.n	801fe40 <_printf_i+0x1ac>
 801fe16:	07df      	lsls	r7, r3, #31
 801fe18:	bf44      	itt	mi
 801fe1a:	f043 0320 	orrmi.w	r3, r3, #32
 801fe1e:	6023      	strmi	r3, [r4, #0]
 801fe20:	b91e      	cbnz	r6, 801fe2a <_printf_i+0x196>
 801fe22:	6823      	ldr	r3, [r4, #0]
 801fe24:	f023 0320 	bic.w	r3, r3, #32
 801fe28:	6023      	str	r3, [r4, #0]
 801fe2a:	2310      	movs	r3, #16
 801fe2c:	e7b0      	b.n	801fd90 <_printf_i+0xfc>
 801fe2e:	6823      	ldr	r3, [r4, #0]
 801fe30:	f043 0320 	orr.w	r3, r3, #32
 801fe34:	6023      	str	r3, [r4, #0]
 801fe36:	2378      	movs	r3, #120	; 0x78
 801fe38:	4828      	ldr	r0, [pc, #160]	; (801fedc <_printf_i+0x248>)
 801fe3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fe3e:	e7e3      	b.n	801fe08 <_printf_i+0x174>
 801fe40:	0659      	lsls	r1, r3, #25
 801fe42:	bf48      	it	mi
 801fe44:	b2b6      	uxthmi	r6, r6
 801fe46:	e7e6      	b.n	801fe16 <_printf_i+0x182>
 801fe48:	4615      	mov	r5, r2
 801fe4a:	e7bb      	b.n	801fdc4 <_printf_i+0x130>
 801fe4c:	682b      	ldr	r3, [r5, #0]
 801fe4e:	6826      	ldr	r6, [r4, #0]
 801fe50:	6961      	ldr	r1, [r4, #20]
 801fe52:	1d18      	adds	r0, r3, #4
 801fe54:	6028      	str	r0, [r5, #0]
 801fe56:	0635      	lsls	r5, r6, #24
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	d501      	bpl.n	801fe60 <_printf_i+0x1cc>
 801fe5c:	6019      	str	r1, [r3, #0]
 801fe5e:	e002      	b.n	801fe66 <_printf_i+0x1d2>
 801fe60:	0670      	lsls	r0, r6, #25
 801fe62:	d5fb      	bpl.n	801fe5c <_printf_i+0x1c8>
 801fe64:	8019      	strh	r1, [r3, #0]
 801fe66:	2300      	movs	r3, #0
 801fe68:	6123      	str	r3, [r4, #16]
 801fe6a:	4615      	mov	r5, r2
 801fe6c:	e7ba      	b.n	801fde4 <_printf_i+0x150>
 801fe6e:	682b      	ldr	r3, [r5, #0]
 801fe70:	1d1a      	adds	r2, r3, #4
 801fe72:	602a      	str	r2, [r5, #0]
 801fe74:	681d      	ldr	r5, [r3, #0]
 801fe76:	6862      	ldr	r2, [r4, #4]
 801fe78:	2100      	movs	r1, #0
 801fe7a:	4628      	mov	r0, r5
 801fe7c:	f7e8 f9b8 	bl	80081f0 <memchr>
 801fe80:	b108      	cbz	r0, 801fe86 <_printf_i+0x1f2>
 801fe82:	1b40      	subs	r0, r0, r5
 801fe84:	6060      	str	r0, [r4, #4]
 801fe86:	6863      	ldr	r3, [r4, #4]
 801fe88:	6123      	str	r3, [r4, #16]
 801fe8a:	2300      	movs	r3, #0
 801fe8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fe90:	e7a8      	b.n	801fde4 <_printf_i+0x150>
 801fe92:	6923      	ldr	r3, [r4, #16]
 801fe94:	462a      	mov	r2, r5
 801fe96:	4649      	mov	r1, r9
 801fe98:	4640      	mov	r0, r8
 801fe9a:	47d0      	blx	sl
 801fe9c:	3001      	adds	r0, #1
 801fe9e:	d0ab      	beq.n	801fdf8 <_printf_i+0x164>
 801fea0:	6823      	ldr	r3, [r4, #0]
 801fea2:	079b      	lsls	r3, r3, #30
 801fea4:	d413      	bmi.n	801fece <_printf_i+0x23a>
 801fea6:	68e0      	ldr	r0, [r4, #12]
 801fea8:	9b03      	ldr	r3, [sp, #12]
 801feaa:	4298      	cmp	r0, r3
 801feac:	bfb8      	it	lt
 801feae:	4618      	movlt	r0, r3
 801feb0:	e7a4      	b.n	801fdfc <_printf_i+0x168>
 801feb2:	2301      	movs	r3, #1
 801feb4:	4632      	mov	r2, r6
 801feb6:	4649      	mov	r1, r9
 801feb8:	4640      	mov	r0, r8
 801feba:	47d0      	blx	sl
 801febc:	3001      	adds	r0, #1
 801febe:	d09b      	beq.n	801fdf8 <_printf_i+0x164>
 801fec0:	3501      	adds	r5, #1
 801fec2:	68e3      	ldr	r3, [r4, #12]
 801fec4:	9903      	ldr	r1, [sp, #12]
 801fec6:	1a5b      	subs	r3, r3, r1
 801fec8:	42ab      	cmp	r3, r5
 801feca:	dcf2      	bgt.n	801feb2 <_printf_i+0x21e>
 801fecc:	e7eb      	b.n	801fea6 <_printf_i+0x212>
 801fece:	2500      	movs	r5, #0
 801fed0:	f104 0619 	add.w	r6, r4, #25
 801fed4:	e7f5      	b.n	801fec2 <_printf_i+0x22e>
 801fed6:	bf00      	nop
 801fed8:	0803543a 	.word	0x0803543a
 801fedc:	0803544b 	.word	0x0803544b

0801fee0 <realloc>:
 801fee0:	4b02      	ldr	r3, [pc, #8]	; (801feec <realloc+0xc>)
 801fee2:	460a      	mov	r2, r1
 801fee4:	4601      	mov	r1, r0
 801fee6:	6818      	ldr	r0, [r3, #0]
 801fee8:	f001 bbfa 	b.w	80216e0 <_realloc_r>
 801feec:	20000100 	.word	0x20000100

0801fef0 <cleanup_glue>:
 801fef0:	b538      	push	{r3, r4, r5, lr}
 801fef2:	460c      	mov	r4, r1
 801fef4:	6809      	ldr	r1, [r1, #0]
 801fef6:	4605      	mov	r5, r0
 801fef8:	b109      	cbz	r1, 801fefe <cleanup_glue+0xe>
 801fefa:	f7ff fff9 	bl	801fef0 <cleanup_glue>
 801fefe:	4621      	mov	r1, r4
 801ff00:	4628      	mov	r0, r5
 801ff02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ff06:	f7ff baa1 	b.w	801f44c <_free_r>
	...

0801ff0c <_reclaim_reent>:
 801ff0c:	4b2c      	ldr	r3, [pc, #176]	; (801ffc0 <_reclaim_reent+0xb4>)
 801ff0e:	681b      	ldr	r3, [r3, #0]
 801ff10:	4283      	cmp	r3, r0
 801ff12:	b570      	push	{r4, r5, r6, lr}
 801ff14:	4604      	mov	r4, r0
 801ff16:	d051      	beq.n	801ffbc <_reclaim_reent+0xb0>
 801ff18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ff1a:	b143      	cbz	r3, 801ff2e <_reclaim_reent+0x22>
 801ff1c:	68db      	ldr	r3, [r3, #12]
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d14a      	bne.n	801ffb8 <_reclaim_reent+0xac>
 801ff22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ff24:	6819      	ldr	r1, [r3, #0]
 801ff26:	b111      	cbz	r1, 801ff2e <_reclaim_reent+0x22>
 801ff28:	4620      	mov	r0, r4
 801ff2a:	f7ff fa8f 	bl	801f44c <_free_r>
 801ff2e:	6961      	ldr	r1, [r4, #20]
 801ff30:	b111      	cbz	r1, 801ff38 <_reclaim_reent+0x2c>
 801ff32:	4620      	mov	r0, r4
 801ff34:	f7ff fa8a 	bl	801f44c <_free_r>
 801ff38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ff3a:	b111      	cbz	r1, 801ff42 <_reclaim_reent+0x36>
 801ff3c:	4620      	mov	r0, r4
 801ff3e:	f7ff fa85 	bl	801f44c <_free_r>
 801ff42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ff44:	b111      	cbz	r1, 801ff4c <_reclaim_reent+0x40>
 801ff46:	4620      	mov	r0, r4
 801ff48:	f7ff fa80 	bl	801f44c <_free_r>
 801ff4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ff4e:	b111      	cbz	r1, 801ff56 <_reclaim_reent+0x4a>
 801ff50:	4620      	mov	r0, r4
 801ff52:	f7ff fa7b 	bl	801f44c <_free_r>
 801ff56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ff58:	b111      	cbz	r1, 801ff60 <_reclaim_reent+0x54>
 801ff5a:	4620      	mov	r0, r4
 801ff5c:	f7ff fa76 	bl	801f44c <_free_r>
 801ff60:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ff62:	b111      	cbz	r1, 801ff6a <_reclaim_reent+0x5e>
 801ff64:	4620      	mov	r0, r4
 801ff66:	f7ff fa71 	bl	801f44c <_free_r>
 801ff6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ff6c:	b111      	cbz	r1, 801ff74 <_reclaim_reent+0x68>
 801ff6e:	4620      	mov	r0, r4
 801ff70:	f7ff fa6c 	bl	801f44c <_free_r>
 801ff74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ff76:	b111      	cbz	r1, 801ff7e <_reclaim_reent+0x72>
 801ff78:	4620      	mov	r0, r4
 801ff7a:	f7ff fa67 	bl	801f44c <_free_r>
 801ff7e:	69a3      	ldr	r3, [r4, #24]
 801ff80:	b1e3      	cbz	r3, 801ffbc <_reclaim_reent+0xb0>
 801ff82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ff84:	4620      	mov	r0, r4
 801ff86:	4798      	blx	r3
 801ff88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ff8a:	b1b9      	cbz	r1, 801ffbc <_reclaim_reent+0xb0>
 801ff8c:	4620      	mov	r0, r4
 801ff8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ff92:	f7ff bfad 	b.w	801fef0 <cleanup_glue>
 801ff96:	5949      	ldr	r1, [r1, r5]
 801ff98:	b941      	cbnz	r1, 801ffac <_reclaim_reent+0xa0>
 801ff9a:	3504      	adds	r5, #4
 801ff9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ff9e:	2d80      	cmp	r5, #128	; 0x80
 801ffa0:	68d9      	ldr	r1, [r3, #12]
 801ffa2:	d1f8      	bne.n	801ff96 <_reclaim_reent+0x8a>
 801ffa4:	4620      	mov	r0, r4
 801ffa6:	f7ff fa51 	bl	801f44c <_free_r>
 801ffaa:	e7ba      	b.n	801ff22 <_reclaim_reent+0x16>
 801ffac:	680e      	ldr	r6, [r1, #0]
 801ffae:	4620      	mov	r0, r4
 801ffb0:	f7ff fa4c 	bl	801f44c <_free_r>
 801ffb4:	4631      	mov	r1, r6
 801ffb6:	e7ef      	b.n	801ff98 <_reclaim_reent+0x8c>
 801ffb8:	2500      	movs	r5, #0
 801ffba:	e7ef      	b.n	801ff9c <_reclaim_reent+0x90>
 801ffbc:	bd70      	pop	{r4, r5, r6, pc}
 801ffbe:	bf00      	nop
 801ffc0:	20000100 	.word	0x20000100

0801ffc4 <_sbrk_r>:
 801ffc4:	b538      	push	{r3, r4, r5, lr}
 801ffc6:	4d06      	ldr	r5, [pc, #24]	; (801ffe0 <_sbrk_r+0x1c>)
 801ffc8:	2300      	movs	r3, #0
 801ffca:	4604      	mov	r4, r0
 801ffcc:	4608      	mov	r0, r1
 801ffce:	602b      	str	r3, [r5, #0]
 801ffd0:	f7ee ff2e 	bl	800ee30 <_sbrk>
 801ffd4:	1c43      	adds	r3, r0, #1
 801ffd6:	d102      	bne.n	801ffde <_sbrk_r+0x1a>
 801ffd8:	682b      	ldr	r3, [r5, #0]
 801ffda:	b103      	cbz	r3, 801ffde <_sbrk_r+0x1a>
 801ffdc:	6023      	str	r3, [r4, #0]
 801ffde:	bd38      	pop	{r3, r4, r5, pc}
 801ffe0:	2000eb68 	.word	0x2000eb68

0801ffe4 <siprintf>:
 801ffe4:	b40e      	push	{r1, r2, r3}
 801ffe6:	b500      	push	{lr}
 801ffe8:	b09c      	sub	sp, #112	; 0x70
 801ffea:	ab1d      	add	r3, sp, #116	; 0x74
 801ffec:	9002      	str	r0, [sp, #8]
 801ffee:	9006      	str	r0, [sp, #24]
 801fff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fff4:	4809      	ldr	r0, [pc, #36]	; (802001c <siprintf+0x38>)
 801fff6:	9107      	str	r1, [sp, #28]
 801fff8:	9104      	str	r1, [sp, #16]
 801fffa:	4909      	ldr	r1, [pc, #36]	; (8020020 <siprintf+0x3c>)
 801fffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8020000:	9105      	str	r1, [sp, #20]
 8020002:	6800      	ldr	r0, [r0, #0]
 8020004:	9301      	str	r3, [sp, #4]
 8020006:	a902      	add	r1, sp, #8
 8020008:	f001 fbf4 	bl	80217f4 <_svfiprintf_r>
 802000c:	9b02      	ldr	r3, [sp, #8]
 802000e:	2200      	movs	r2, #0
 8020010:	701a      	strb	r2, [r3, #0]
 8020012:	b01c      	add	sp, #112	; 0x70
 8020014:	f85d eb04 	ldr.w	lr, [sp], #4
 8020018:	b003      	add	sp, #12
 802001a:	4770      	bx	lr
 802001c:	20000100 	.word	0x20000100
 8020020:	ffff0208 	.word	0xffff0208

08020024 <__sread>:
 8020024:	b510      	push	{r4, lr}
 8020026:	460c      	mov	r4, r1
 8020028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802002c:	f001 fce2 	bl	80219f4 <_read_r>
 8020030:	2800      	cmp	r0, #0
 8020032:	bfab      	itete	ge
 8020034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020036:	89a3      	ldrhlt	r3, [r4, #12]
 8020038:	181b      	addge	r3, r3, r0
 802003a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802003e:	bfac      	ite	ge
 8020040:	6563      	strge	r3, [r4, #84]	; 0x54
 8020042:	81a3      	strhlt	r3, [r4, #12]
 8020044:	bd10      	pop	{r4, pc}

08020046 <__swrite>:
 8020046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802004a:	461f      	mov	r7, r3
 802004c:	898b      	ldrh	r3, [r1, #12]
 802004e:	05db      	lsls	r3, r3, #23
 8020050:	4605      	mov	r5, r0
 8020052:	460c      	mov	r4, r1
 8020054:	4616      	mov	r6, r2
 8020056:	d505      	bpl.n	8020064 <__swrite+0x1e>
 8020058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802005c:	2302      	movs	r3, #2
 802005e:	2200      	movs	r2, #0
 8020060:	f000 ff86 	bl	8020f70 <_lseek_r>
 8020064:	89a3      	ldrh	r3, [r4, #12]
 8020066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802006a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802006e:	81a3      	strh	r3, [r4, #12]
 8020070:	4632      	mov	r2, r6
 8020072:	463b      	mov	r3, r7
 8020074:	4628      	mov	r0, r5
 8020076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802007a:	f000 b817 	b.w	80200ac <_write_r>

0802007e <__sseek>:
 802007e:	b510      	push	{r4, lr}
 8020080:	460c      	mov	r4, r1
 8020082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020086:	f000 ff73 	bl	8020f70 <_lseek_r>
 802008a:	1c43      	adds	r3, r0, #1
 802008c:	89a3      	ldrh	r3, [r4, #12]
 802008e:	bf15      	itete	ne
 8020090:	6560      	strne	r0, [r4, #84]	; 0x54
 8020092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802009a:	81a3      	strheq	r3, [r4, #12]
 802009c:	bf18      	it	ne
 802009e:	81a3      	strhne	r3, [r4, #12]
 80200a0:	bd10      	pop	{r4, pc}

080200a2 <__sclose>:
 80200a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80200a6:	f000 b813 	b.w	80200d0 <_close_r>
	...

080200ac <_write_r>:
 80200ac:	b538      	push	{r3, r4, r5, lr}
 80200ae:	4d07      	ldr	r5, [pc, #28]	; (80200cc <_write_r+0x20>)
 80200b0:	4604      	mov	r4, r0
 80200b2:	4608      	mov	r0, r1
 80200b4:	4611      	mov	r1, r2
 80200b6:	2200      	movs	r2, #0
 80200b8:	602a      	str	r2, [r5, #0]
 80200ba:	461a      	mov	r2, r3
 80200bc:	f7ee fe67 	bl	800ed8e <_write>
 80200c0:	1c43      	adds	r3, r0, #1
 80200c2:	d102      	bne.n	80200ca <_write_r+0x1e>
 80200c4:	682b      	ldr	r3, [r5, #0]
 80200c6:	b103      	cbz	r3, 80200ca <_write_r+0x1e>
 80200c8:	6023      	str	r3, [r4, #0]
 80200ca:	bd38      	pop	{r3, r4, r5, pc}
 80200cc:	2000eb68 	.word	0x2000eb68

080200d0 <_close_r>:
 80200d0:	b538      	push	{r3, r4, r5, lr}
 80200d2:	4d06      	ldr	r5, [pc, #24]	; (80200ec <_close_r+0x1c>)
 80200d4:	2300      	movs	r3, #0
 80200d6:	4604      	mov	r4, r0
 80200d8:	4608      	mov	r0, r1
 80200da:	602b      	str	r3, [r5, #0]
 80200dc:	f7ee fe73 	bl	800edc6 <_close>
 80200e0:	1c43      	adds	r3, r0, #1
 80200e2:	d102      	bne.n	80200ea <_close_r+0x1a>
 80200e4:	682b      	ldr	r3, [r5, #0]
 80200e6:	b103      	cbz	r3, 80200ea <_close_r+0x1a>
 80200e8:	6023      	str	r3, [r4, #0]
 80200ea:	bd38      	pop	{r3, r4, r5, pc}
 80200ec:	2000eb68 	.word	0x2000eb68

080200f0 <quorem>:
 80200f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200f4:	6903      	ldr	r3, [r0, #16]
 80200f6:	690c      	ldr	r4, [r1, #16]
 80200f8:	42a3      	cmp	r3, r4
 80200fa:	4607      	mov	r7, r0
 80200fc:	f2c0 8081 	blt.w	8020202 <quorem+0x112>
 8020100:	3c01      	subs	r4, #1
 8020102:	f101 0814 	add.w	r8, r1, #20
 8020106:	f100 0514 	add.w	r5, r0, #20
 802010a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802010e:	9301      	str	r3, [sp, #4]
 8020110:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020118:	3301      	adds	r3, #1
 802011a:	429a      	cmp	r2, r3
 802011c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020120:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020124:	fbb2 f6f3 	udiv	r6, r2, r3
 8020128:	d331      	bcc.n	802018e <quorem+0x9e>
 802012a:	f04f 0e00 	mov.w	lr, #0
 802012e:	4640      	mov	r0, r8
 8020130:	46ac      	mov	ip, r5
 8020132:	46f2      	mov	sl, lr
 8020134:	f850 2b04 	ldr.w	r2, [r0], #4
 8020138:	b293      	uxth	r3, r2
 802013a:	fb06 e303 	mla	r3, r6, r3, lr
 802013e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020142:	b29b      	uxth	r3, r3
 8020144:	ebaa 0303 	sub.w	r3, sl, r3
 8020148:	f8dc a000 	ldr.w	sl, [ip]
 802014c:	0c12      	lsrs	r2, r2, #16
 802014e:	fa13 f38a 	uxtah	r3, r3, sl
 8020152:	fb06 e202 	mla	r2, r6, r2, lr
 8020156:	9300      	str	r3, [sp, #0]
 8020158:	9b00      	ldr	r3, [sp, #0]
 802015a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802015e:	b292      	uxth	r2, r2
 8020160:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020168:	f8bd 3000 	ldrh.w	r3, [sp]
 802016c:	4581      	cmp	r9, r0
 802016e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020172:	f84c 3b04 	str.w	r3, [ip], #4
 8020176:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802017a:	d2db      	bcs.n	8020134 <quorem+0x44>
 802017c:	f855 300b 	ldr.w	r3, [r5, fp]
 8020180:	b92b      	cbnz	r3, 802018e <quorem+0x9e>
 8020182:	9b01      	ldr	r3, [sp, #4]
 8020184:	3b04      	subs	r3, #4
 8020186:	429d      	cmp	r5, r3
 8020188:	461a      	mov	r2, r3
 802018a:	d32e      	bcc.n	80201ea <quorem+0xfa>
 802018c:	613c      	str	r4, [r7, #16]
 802018e:	4638      	mov	r0, r7
 8020190:	f001 f98e 	bl	80214b0 <__mcmp>
 8020194:	2800      	cmp	r0, #0
 8020196:	db24      	blt.n	80201e2 <quorem+0xf2>
 8020198:	3601      	adds	r6, #1
 802019a:	4628      	mov	r0, r5
 802019c:	f04f 0c00 	mov.w	ip, #0
 80201a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80201a4:	f8d0 e000 	ldr.w	lr, [r0]
 80201a8:	b293      	uxth	r3, r2
 80201aa:	ebac 0303 	sub.w	r3, ip, r3
 80201ae:	0c12      	lsrs	r2, r2, #16
 80201b0:	fa13 f38e 	uxtah	r3, r3, lr
 80201b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80201b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80201bc:	b29b      	uxth	r3, r3
 80201be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80201c2:	45c1      	cmp	r9, r8
 80201c4:	f840 3b04 	str.w	r3, [r0], #4
 80201c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80201cc:	d2e8      	bcs.n	80201a0 <quorem+0xb0>
 80201ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80201d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80201d6:	b922      	cbnz	r2, 80201e2 <quorem+0xf2>
 80201d8:	3b04      	subs	r3, #4
 80201da:	429d      	cmp	r5, r3
 80201dc:	461a      	mov	r2, r3
 80201de:	d30a      	bcc.n	80201f6 <quorem+0x106>
 80201e0:	613c      	str	r4, [r7, #16]
 80201e2:	4630      	mov	r0, r6
 80201e4:	b003      	add	sp, #12
 80201e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201ea:	6812      	ldr	r2, [r2, #0]
 80201ec:	3b04      	subs	r3, #4
 80201ee:	2a00      	cmp	r2, #0
 80201f0:	d1cc      	bne.n	802018c <quorem+0x9c>
 80201f2:	3c01      	subs	r4, #1
 80201f4:	e7c7      	b.n	8020186 <quorem+0x96>
 80201f6:	6812      	ldr	r2, [r2, #0]
 80201f8:	3b04      	subs	r3, #4
 80201fa:	2a00      	cmp	r2, #0
 80201fc:	d1f0      	bne.n	80201e0 <quorem+0xf0>
 80201fe:	3c01      	subs	r4, #1
 8020200:	e7eb      	b.n	80201da <quorem+0xea>
 8020202:	2000      	movs	r0, #0
 8020204:	e7ee      	b.n	80201e4 <quorem+0xf4>
	...

08020208 <_dtoa_r>:
 8020208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802020c:	ed2d 8b04 	vpush	{d8-d9}
 8020210:	ec57 6b10 	vmov	r6, r7, d0
 8020214:	b093      	sub	sp, #76	; 0x4c
 8020216:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020218:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802021c:	9106      	str	r1, [sp, #24]
 802021e:	ee10 aa10 	vmov	sl, s0
 8020222:	4604      	mov	r4, r0
 8020224:	9209      	str	r2, [sp, #36]	; 0x24
 8020226:	930c      	str	r3, [sp, #48]	; 0x30
 8020228:	46bb      	mov	fp, r7
 802022a:	b975      	cbnz	r5, 802024a <_dtoa_r+0x42>
 802022c:	2010      	movs	r0, #16
 802022e:	f7ff f8cd 	bl	801f3cc <malloc>
 8020232:	4602      	mov	r2, r0
 8020234:	6260      	str	r0, [r4, #36]	; 0x24
 8020236:	b920      	cbnz	r0, 8020242 <_dtoa_r+0x3a>
 8020238:	4ba7      	ldr	r3, [pc, #668]	; (80204d8 <_dtoa_r+0x2d0>)
 802023a:	21ea      	movs	r1, #234	; 0xea
 802023c:	48a7      	ldr	r0, [pc, #668]	; (80204dc <_dtoa_r+0x2d4>)
 802023e:	f001 fbeb 	bl	8021a18 <__assert_func>
 8020242:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020246:	6005      	str	r5, [r0, #0]
 8020248:	60c5      	str	r5, [r0, #12]
 802024a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802024c:	6819      	ldr	r1, [r3, #0]
 802024e:	b151      	cbz	r1, 8020266 <_dtoa_r+0x5e>
 8020250:	685a      	ldr	r2, [r3, #4]
 8020252:	604a      	str	r2, [r1, #4]
 8020254:	2301      	movs	r3, #1
 8020256:	4093      	lsls	r3, r2
 8020258:	608b      	str	r3, [r1, #8]
 802025a:	4620      	mov	r0, r4
 802025c:	f000 fee6 	bl	802102c <_Bfree>
 8020260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020262:	2200      	movs	r2, #0
 8020264:	601a      	str	r2, [r3, #0]
 8020266:	1e3b      	subs	r3, r7, #0
 8020268:	bfaa      	itet	ge
 802026a:	2300      	movge	r3, #0
 802026c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8020270:	f8c8 3000 	strge.w	r3, [r8]
 8020274:	4b9a      	ldr	r3, [pc, #616]	; (80204e0 <_dtoa_r+0x2d8>)
 8020276:	bfbc      	itt	lt
 8020278:	2201      	movlt	r2, #1
 802027a:	f8c8 2000 	strlt.w	r2, [r8]
 802027e:	ea33 030b 	bics.w	r3, r3, fp
 8020282:	d11b      	bne.n	80202bc <_dtoa_r+0xb4>
 8020284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020286:	f242 730f 	movw	r3, #9999	; 0x270f
 802028a:	6013      	str	r3, [r2, #0]
 802028c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020290:	4333      	orrs	r3, r6
 8020292:	f000 8592 	beq.w	8020dba <_dtoa_r+0xbb2>
 8020296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020298:	b963      	cbnz	r3, 80202b4 <_dtoa_r+0xac>
 802029a:	4b92      	ldr	r3, [pc, #584]	; (80204e4 <_dtoa_r+0x2dc>)
 802029c:	e022      	b.n	80202e4 <_dtoa_r+0xdc>
 802029e:	4b92      	ldr	r3, [pc, #584]	; (80204e8 <_dtoa_r+0x2e0>)
 80202a0:	9301      	str	r3, [sp, #4]
 80202a2:	3308      	adds	r3, #8
 80202a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80202a6:	6013      	str	r3, [r2, #0]
 80202a8:	9801      	ldr	r0, [sp, #4]
 80202aa:	b013      	add	sp, #76	; 0x4c
 80202ac:	ecbd 8b04 	vpop	{d8-d9}
 80202b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202b4:	4b8b      	ldr	r3, [pc, #556]	; (80204e4 <_dtoa_r+0x2dc>)
 80202b6:	9301      	str	r3, [sp, #4]
 80202b8:	3303      	adds	r3, #3
 80202ba:	e7f3      	b.n	80202a4 <_dtoa_r+0x9c>
 80202bc:	2200      	movs	r2, #0
 80202be:	2300      	movs	r3, #0
 80202c0:	4650      	mov	r0, sl
 80202c2:	4659      	mov	r1, fp
 80202c4:	f7e8 fc08 	bl	8008ad8 <__aeabi_dcmpeq>
 80202c8:	ec4b ab19 	vmov	d9, sl, fp
 80202cc:	4680      	mov	r8, r0
 80202ce:	b158      	cbz	r0, 80202e8 <_dtoa_r+0xe0>
 80202d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80202d2:	2301      	movs	r3, #1
 80202d4:	6013      	str	r3, [r2, #0]
 80202d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80202d8:	2b00      	cmp	r3, #0
 80202da:	f000 856b 	beq.w	8020db4 <_dtoa_r+0xbac>
 80202de:	4883      	ldr	r0, [pc, #524]	; (80204ec <_dtoa_r+0x2e4>)
 80202e0:	6018      	str	r0, [r3, #0]
 80202e2:	1e43      	subs	r3, r0, #1
 80202e4:	9301      	str	r3, [sp, #4]
 80202e6:	e7df      	b.n	80202a8 <_dtoa_r+0xa0>
 80202e8:	ec4b ab10 	vmov	d0, sl, fp
 80202ec:	aa10      	add	r2, sp, #64	; 0x40
 80202ee:	a911      	add	r1, sp, #68	; 0x44
 80202f0:	4620      	mov	r0, r4
 80202f2:	f001 f983 	bl	80215fc <__d2b>
 80202f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80202fa:	ee08 0a10 	vmov	s16, r0
 80202fe:	2d00      	cmp	r5, #0
 8020300:	f000 8084 	beq.w	802040c <_dtoa_r+0x204>
 8020304:	ee19 3a90 	vmov	r3, s19
 8020308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802030c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020310:	4656      	mov	r6, sl
 8020312:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020316:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802031a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802031e:	4b74      	ldr	r3, [pc, #464]	; (80204f0 <_dtoa_r+0x2e8>)
 8020320:	2200      	movs	r2, #0
 8020322:	4630      	mov	r0, r6
 8020324:	4639      	mov	r1, r7
 8020326:	f7e7 ffb7 	bl	8008298 <__aeabi_dsub>
 802032a:	a365      	add	r3, pc, #404	; (adr r3, 80204c0 <_dtoa_r+0x2b8>)
 802032c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020330:	f7e8 f96a 	bl	8008608 <__aeabi_dmul>
 8020334:	a364      	add	r3, pc, #400	; (adr r3, 80204c8 <_dtoa_r+0x2c0>)
 8020336:	e9d3 2300 	ldrd	r2, r3, [r3]
 802033a:	f7e7 ffaf 	bl	800829c <__adddf3>
 802033e:	4606      	mov	r6, r0
 8020340:	4628      	mov	r0, r5
 8020342:	460f      	mov	r7, r1
 8020344:	f7e8 f8f6 	bl	8008534 <__aeabi_i2d>
 8020348:	a361      	add	r3, pc, #388	; (adr r3, 80204d0 <_dtoa_r+0x2c8>)
 802034a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802034e:	f7e8 f95b 	bl	8008608 <__aeabi_dmul>
 8020352:	4602      	mov	r2, r0
 8020354:	460b      	mov	r3, r1
 8020356:	4630      	mov	r0, r6
 8020358:	4639      	mov	r1, r7
 802035a:	f7e7 ff9f 	bl	800829c <__adddf3>
 802035e:	4606      	mov	r6, r0
 8020360:	460f      	mov	r7, r1
 8020362:	f7e8 fc01 	bl	8008b68 <__aeabi_d2iz>
 8020366:	2200      	movs	r2, #0
 8020368:	9000      	str	r0, [sp, #0]
 802036a:	2300      	movs	r3, #0
 802036c:	4630      	mov	r0, r6
 802036e:	4639      	mov	r1, r7
 8020370:	f7e8 fbbc 	bl	8008aec <__aeabi_dcmplt>
 8020374:	b150      	cbz	r0, 802038c <_dtoa_r+0x184>
 8020376:	9800      	ldr	r0, [sp, #0]
 8020378:	f7e8 f8dc 	bl	8008534 <__aeabi_i2d>
 802037c:	4632      	mov	r2, r6
 802037e:	463b      	mov	r3, r7
 8020380:	f7e8 fbaa 	bl	8008ad8 <__aeabi_dcmpeq>
 8020384:	b910      	cbnz	r0, 802038c <_dtoa_r+0x184>
 8020386:	9b00      	ldr	r3, [sp, #0]
 8020388:	3b01      	subs	r3, #1
 802038a:	9300      	str	r3, [sp, #0]
 802038c:	9b00      	ldr	r3, [sp, #0]
 802038e:	2b16      	cmp	r3, #22
 8020390:	d85a      	bhi.n	8020448 <_dtoa_r+0x240>
 8020392:	9a00      	ldr	r2, [sp, #0]
 8020394:	4b57      	ldr	r3, [pc, #348]	; (80204f4 <_dtoa_r+0x2ec>)
 8020396:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802039a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802039e:	ec51 0b19 	vmov	r0, r1, d9
 80203a2:	f7e8 fba3 	bl	8008aec <__aeabi_dcmplt>
 80203a6:	2800      	cmp	r0, #0
 80203a8:	d050      	beq.n	802044c <_dtoa_r+0x244>
 80203aa:	9b00      	ldr	r3, [sp, #0]
 80203ac:	3b01      	subs	r3, #1
 80203ae:	9300      	str	r3, [sp, #0]
 80203b0:	2300      	movs	r3, #0
 80203b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80203b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203b6:	1b5d      	subs	r5, r3, r5
 80203b8:	1e6b      	subs	r3, r5, #1
 80203ba:	9305      	str	r3, [sp, #20]
 80203bc:	bf45      	ittet	mi
 80203be:	f1c5 0301 	rsbmi	r3, r5, #1
 80203c2:	9304      	strmi	r3, [sp, #16]
 80203c4:	2300      	movpl	r3, #0
 80203c6:	2300      	movmi	r3, #0
 80203c8:	bf4c      	ite	mi
 80203ca:	9305      	strmi	r3, [sp, #20]
 80203cc:	9304      	strpl	r3, [sp, #16]
 80203ce:	9b00      	ldr	r3, [sp, #0]
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	db3d      	blt.n	8020450 <_dtoa_r+0x248>
 80203d4:	9b05      	ldr	r3, [sp, #20]
 80203d6:	9a00      	ldr	r2, [sp, #0]
 80203d8:	920a      	str	r2, [sp, #40]	; 0x28
 80203da:	4413      	add	r3, r2
 80203dc:	9305      	str	r3, [sp, #20]
 80203de:	2300      	movs	r3, #0
 80203e0:	9307      	str	r3, [sp, #28]
 80203e2:	9b06      	ldr	r3, [sp, #24]
 80203e4:	2b09      	cmp	r3, #9
 80203e6:	f200 8089 	bhi.w	80204fc <_dtoa_r+0x2f4>
 80203ea:	2b05      	cmp	r3, #5
 80203ec:	bfc4      	itt	gt
 80203ee:	3b04      	subgt	r3, #4
 80203f0:	9306      	strgt	r3, [sp, #24]
 80203f2:	9b06      	ldr	r3, [sp, #24]
 80203f4:	f1a3 0302 	sub.w	r3, r3, #2
 80203f8:	bfcc      	ite	gt
 80203fa:	2500      	movgt	r5, #0
 80203fc:	2501      	movle	r5, #1
 80203fe:	2b03      	cmp	r3, #3
 8020400:	f200 8087 	bhi.w	8020512 <_dtoa_r+0x30a>
 8020404:	e8df f003 	tbb	[pc, r3]
 8020408:	59383a2d 	.word	0x59383a2d
 802040c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8020410:	441d      	add	r5, r3
 8020412:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020416:	2b20      	cmp	r3, #32
 8020418:	bfc1      	itttt	gt
 802041a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802041e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020422:	fa0b f303 	lslgt.w	r3, fp, r3
 8020426:	fa26 f000 	lsrgt.w	r0, r6, r0
 802042a:	bfda      	itte	le
 802042c:	f1c3 0320 	rsble	r3, r3, #32
 8020430:	fa06 f003 	lslle.w	r0, r6, r3
 8020434:	4318      	orrgt	r0, r3
 8020436:	f7e8 f86d 	bl	8008514 <__aeabi_ui2d>
 802043a:	2301      	movs	r3, #1
 802043c:	4606      	mov	r6, r0
 802043e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020442:	3d01      	subs	r5, #1
 8020444:	930e      	str	r3, [sp, #56]	; 0x38
 8020446:	e76a      	b.n	802031e <_dtoa_r+0x116>
 8020448:	2301      	movs	r3, #1
 802044a:	e7b2      	b.n	80203b2 <_dtoa_r+0x1aa>
 802044c:	900b      	str	r0, [sp, #44]	; 0x2c
 802044e:	e7b1      	b.n	80203b4 <_dtoa_r+0x1ac>
 8020450:	9b04      	ldr	r3, [sp, #16]
 8020452:	9a00      	ldr	r2, [sp, #0]
 8020454:	1a9b      	subs	r3, r3, r2
 8020456:	9304      	str	r3, [sp, #16]
 8020458:	4253      	negs	r3, r2
 802045a:	9307      	str	r3, [sp, #28]
 802045c:	2300      	movs	r3, #0
 802045e:	930a      	str	r3, [sp, #40]	; 0x28
 8020460:	e7bf      	b.n	80203e2 <_dtoa_r+0x1da>
 8020462:	2300      	movs	r3, #0
 8020464:	9308      	str	r3, [sp, #32]
 8020466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020468:	2b00      	cmp	r3, #0
 802046a:	dc55      	bgt.n	8020518 <_dtoa_r+0x310>
 802046c:	2301      	movs	r3, #1
 802046e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020472:	461a      	mov	r2, r3
 8020474:	9209      	str	r2, [sp, #36]	; 0x24
 8020476:	e00c      	b.n	8020492 <_dtoa_r+0x28a>
 8020478:	2301      	movs	r3, #1
 802047a:	e7f3      	b.n	8020464 <_dtoa_r+0x25c>
 802047c:	2300      	movs	r3, #0
 802047e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020480:	9308      	str	r3, [sp, #32]
 8020482:	9b00      	ldr	r3, [sp, #0]
 8020484:	4413      	add	r3, r2
 8020486:	9302      	str	r3, [sp, #8]
 8020488:	3301      	adds	r3, #1
 802048a:	2b01      	cmp	r3, #1
 802048c:	9303      	str	r3, [sp, #12]
 802048e:	bfb8      	it	lt
 8020490:	2301      	movlt	r3, #1
 8020492:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020494:	2200      	movs	r2, #0
 8020496:	6042      	str	r2, [r0, #4]
 8020498:	2204      	movs	r2, #4
 802049a:	f102 0614 	add.w	r6, r2, #20
 802049e:	429e      	cmp	r6, r3
 80204a0:	6841      	ldr	r1, [r0, #4]
 80204a2:	d93d      	bls.n	8020520 <_dtoa_r+0x318>
 80204a4:	4620      	mov	r0, r4
 80204a6:	f000 fd81 	bl	8020fac <_Balloc>
 80204aa:	9001      	str	r0, [sp, #4]
 80204ac:	2800      	cmp	r0, #0
 80204ae:	d13b      	bne.n	8020528 <_dtoa_r+0x320>
 80204b0:	4b11      	ldr	r3, [pc, #68]	; (80204f8 <_dtoa_r+0x2f0>)
 80204b2:	4602      	mov	r2, r0
 80204b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80204b8:	e6c0      	b.n	802023c <_dtoa_r+0x34>
 80204ba:	2301      	movs	r3, #1
 80204bc:	e7df      	b.n	802047e <_dtoa_r+0x276>
 80204be:	bf00      	nop
 80204c0:	636f4361 	.word	0x636f4361
 80204c4:	3fd287a7 	.word	0x3fd287a7
 80204c8:	8b60c8b3 	.word	0x8b60c8b3
 80204cc:	3fc68a28 	.word	0x3fc68a28
 80204d0:	509f79fb 	.word	0x509f79fb
 80204d4:	3fd34413 	.word	0x3fd34413
 80204d8:	08035469 	.word	0x08035469
 80204dc:	08035480 	.word	0x08035480
 80204e0:	7ff00000 	.word	0x7ff00000
 80204e4:	08035465 	.word	0x08035465
 80204e8:	0803545c 	.word	0x0803545c
 80204ec:	08035439 	.word	0x08035439
 80204f0:	3ff80000 	.word	0x3ff80000
 80204f4:	08035570 	.word	0x08035570
 80204f8:	080354db 	.word	0x080354db
 80204fc:	2501      	movs	r5, #1
 80204fe:	2300      	movs	r3, #0
 8020500:	9306      	str	r3, [sp, #24]
 8020502:	9508      	str	r5, [sp, #32]
 8020504:	f04f 33ff 	mov.w	r3, #4294967295
 8020508:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802050c:	2200      	movs	r2, #0
 802050e:	2312      	movs	r3, #18
 8020510:	e7b0      	b.n	8020474 <_dtoa_r+0x26c>
 8020512:	2301      	movs	r3, #1
 8020514:	9308      	str	r3, [sp, #32]
 8020516:	e7f5      	b.n	8020504 <_dtoa_r+0x2fc>
 8020518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802051a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802051e:	e7b8      	b.n	8020492 <_dtoa_r+0x28a>
 8020520:	3101      	adds	r1, #1
 8020522:	6041      	str	r1, [r0, #4]
 8020524:	0052      	lsls	r2, r2, #1
 8020526:	e7b8      	b.n	802049a <_dtoa_r+0x292>
 8020528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802052a:	9a01      	ldr	r2, [sp, #4]
 802052c:	601a      	str	r2, [r3, #0]
 802052e:	9b03      	ldr	r3, [sp, #12]
 8020530:	2b0e      	cmp	r3, #14
 8020532:	f200 809d 	bhi.w	8020670 <_dtoa_r+0x468>
 8020536:	2d00      	cmp	r5, #0
 8020538:	f000 809a 	beq.w	8020670 <_dtoa_r+0x468>
 802053c:	9b00      	ldr	r3, [sp, #0]
 802053e:	2b00      	cmp	r3, #0
 8020540:	dd32      	ble.n	80205a8 <_dtoa_r+0x3a0>
 8020542:	4ab7      	ldr	r2, [pc, #732]	; (8020820 <_dtoa_r+0x618>)
 8020544:	f003 030f 	and.w	r3, r3, #15
 8020548:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802054c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020550:	9b00      	ldr	r3, [sp, #0]
 8020552:	05d8      	lsls	r0, r3, #23
 8020554:	ea4f 1723 	mov.w	r7, r3, asr #4
 8020558:	d516      	bpl.n	8020588 <_dtoa_r+0x380>
 802055a:	4bb2      	ldr	r3, [pc, #712]	; (8020824 <_dtoa_r+0x61c>)
 802055c:	ec51 0b19 	vmov	r0, r1, d9
 8020560:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020564:	f7e8 f97a 	bl	800885c <__aeabi_ddiv>
 8020568:	f007 070f 	and.w	r7, r7, #15
 802056c:	4682      	mov	sl, r0
 802056e:	468b      	mov	fp, r1
 8020570:	2503      	movs	r5, #3
 8020572:	4eac      	ldr	r6, [pc, #688]	; (8020824 <_dtoa_r+0x61c>)
 8020574:	b957      	cbnz	r7, 802058c <_dtoa_r+0x384>
 8020576:	4642      	mov	r2, r8
 8020578:	464b      	mov	r3, r9
 802057a:	4650      	mov	r0, sl
 802057c:	4659      	mov	r1, fp
 802057e:	f7e8 f96d 	bl	800885c <__aeabi_ddiv>
 8020582:	4682      	mov	sl, r0
 8020584:	468b      	mov	fp, r1
 8020586:	e028      	b.n	80205da <_dtoa_r+0x3d2>
 8020588:	2502      	movs	r5, #2
 802058a:	e7f2      	b.n	8020572 <_dtoa_r+0x36a>
 802058c:	07f9      	lsls	r1, r7, #31
 802058e:	d508      	bpl.n	80205a2 <_dtoa_r+0x39a>
 8020590:	4640      	mov	r0, r8
 8020592:	4649      	mov	r1, r9
 8020594:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020598:	f7e8 f836 	bl	8008608 <__aeabi_dmul>
 802059c:	3501      	adds	r5, #1
 802059e:	4680      	mov	r8, r0
 80205a0:	4689      	mov	r9, r1
 80205a2:	107f      	asrs	r7, r7, #1
 80205a4:	3608      	adds	r6, #8
 80205a6:	e7e5      	b.n	8020574 <_dtoa_r+0x36c>
 80205a8:	f000 809b 	beq.w	80206e2 <_dtoa_r+0x4da>
 80205ac:	9b00      	ldr	r3, [sp, #0]
 80205ae:	4f9d      	ldr	r7, [pc, #628]	; (8020824 <_dtoa_r+0x61c>)
 80205b0:	425e      	negs	r6, r3
 80205b2:	4b9b      	ldr	r3, [pc, #620]	; (8020820 <_dtoa_r+0x618>)
 80205b4:	f006 020f 	and.w	r2, r6, #15
 80205b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80205bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205c0:	ec51 0b19 	vmov	r0, r1, d9
 80205c4:	f7e8 f820 	bl	8008608 <__aeabi_dmul>
 80205c8:	1136      	asrs	r6, r6, #4
 80205ca:	4682      	mov	sl, r0
 80205cc:	468b      	mov	fp, r1
 80205ce:	2300      	movs	r3, #0
 80205d0:	2502      	movs	r5, #2
 80205d2:	2e00      	cmp	r6, #0
 80205d4:	d17a      	bne.n	80206cc <_dtoa_r+0x4c4>
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	d1d3      	bne.n	8020582 <_dtoa_r+0x37a>
 80205da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80205dc:	2b00      	cmp	r3, #0
 80205de:	f000 8082 	beq.w	80206e6 <_dtoa_r+0x4de>
 80205e2:	4b91      	ldr	r3, [pc, #580]	; (8020828 <_dtoa_r+0x620>)
 80205e4:	2200      	movs	r2, #0
 80205e6:	4650      	mov	r0, sl
 80205e8:	4659      	mov	r1, fp
 80205ea:	f7e8 fa7f 	bl	8008aec <__aeabi_dcmplt>
 80205ee:	2800      	cmp	r0, #0
 80205f0:	d079      	beq.n	80206e6 <_dtoa_r+0x4de>
 80205f2:	9b03      	ldr	r3, [sp, #12]
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	d076      	beq.n	80206e6 <_dtoa_r+0x4de>
 80205f8:	9b02      	ldr	r3, [sp, #8]
 80205fa:	2b00      	cmp	r3, #0
 80205fc:	dd36      	ble.n	802066c <_dtoa_r+0x464>
 80205fe:	9b00      	ldr	r3, [sp, #0]
 8020600:	4650      	mov	r0, sl
 8020602:	4659      	mov	r1, fp
 8020604:	1e5f      	subs	r7, r3, #1
 8020606:	2200      	movs	r2, #0
 8020608:	4b88      	ldr	r3, [pc, #544]	; (802082c <_dtoa_r+0x624>)
 802060a:	f7e7 fffd 	bl	8008608 <__aeabi_dmul>
 802060e:	9e02      	ldr	r6, [sp, #8]
 8020610:	4682      	mov	sl, r0
 8020612:	468b      	mov	fp, r1
 8020614:	3501      	adds	r5, #1
 8020616:	4628      	mov	r0, r5
 8020618:	f7e7 ff8c 	bl	8008534 <__aeabi_i2d>
 802061c:	4652      	mov	r2, sl
 802061e:	465b      	mov	r3, fp
 8020620:	f7e7 fff2 	bl	8008608 <__aeabi_dmul>
 8020624:	4b82      	ldr	r3, [pc, #520]	; (8020830 <_dtoa_r+0x628>)
 8020626:	2200      	movs	r2, #0
 8020628:	f7e7 fe38 	bl	800829c <__adddf3>
 802062c:	46d0      	mov	r8, sl
 802062e:	46d9      	mov	r9, fp
 8020630:	4682      	mov	sl, r0
 8020632:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8020636:	2e00      	cmp	r6, #0
 8020638:	d158      	bne.n	80206ec <_dtoa_r+0x4e4>
 802063a:	4b7e      	ldr	r3, [pc, #504]	; (8020834 <_dtoa_r+0x62c>)
 802063c:	2200      	movs	r2, #0
 802063e:	4640      	mov	r0, r8
 8020640:	4649      	mov	r1, r9
 8020642:	f7e7 fe29 	bl	8008298 <__aeabi_dsub>
 8020646:	4652      	mov	r2, sl
 8020648:	465b      	mov	r3, fp
 802064a:	4680      	mov	r8, r0
 802064c:	4689      	mov	r9, r1
 802064e:	f7e8 fa6b 	bl	8008b28 <__aeabi_dcmpgt>
 8020652:	2800      	cmp	r0, #0
 8020654:	f040 8295 	bne.w	8020b82 <_dtoa_r+0x97a>
 8020658:	4652      	mov	r2, sl
 802065a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802065e:	4640      	mov	r0, r8
 8020660:	4649      	mov	r1, r9
 8020662:	f7e8 fa43 	bl	8008aec <__aeabi_dcmplt>
 8020666:	2800      	cmp	r0, #0
 8020668:	f040 8289 	bne.w	8020b7e <_dtoa_r+0x976>
 802066c:	ec5b ab19 	vmov	sl, fp, d9
 8020670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020672:	2b00      	cmp	r3, #0
 8020674:	f2c0 8148 	blt.w	8020908 <_dtoa_r+0x700>
 8020678:	9a00      	ldr	r2, [sp, #0]
 802067a:	2a0e      	cmp	r2, #14
 802067c:	f300 8144 	bgt.w	8020908 <_dtoa_r+0x700>
 8020680:	4b67      	ldr	r3, [pc, #412]	; (8020820 <_dtoa_r+0x618>)
 8020682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020686:	e9d3 8900 	ldrd	r8, r9, [r3]
 802068a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802068c:	2b00      	cmp	r3, #0
 802068e:	f280 80d5 	bge.w	802083c <_dtoa_r+0x634>
 8020692:	9b03      	ldr	r3, [sp, #12]
 8020694:	2b00      	cmp	r3, #0
 8020696:	f300 80d1 	bgt.w	802083c <_dtoa_r+0x634>
 802069a:	f040 826f 	bne.w	8020b7c <_dtoa_r+0x974>
 802069e:	4b65      	ldr	r3, [pc, #404]	; (8020834 <_dtoa_r+0x62c>)
 80206a0:	2200      	movs	r2, #0
 80206a2:	4640      	mov	r0, r8
 80206a4:	4649      	mov	r1, r9
 80206a6:	f7e7 ffaf 	bl	8008608 <__aeabi_dmul>
 80206aa:	4652      	mov	r2, sl
 80206ac:	465b      	mov	r3, fp
 80206ae:	f7e8 fa31 	bl	8008b14 <__aeabi_dcmpge>
 80206b2:	9e03      	ldr	r6, [sp, #12]
 80206b4:	4637      	mov	r7, r6
 80206b6:	2800      	cmp	r0, #0
 80206b8:	f040 8245 	bne.w	8020b46 <_dtoa_r+0x93e>
 80206bc:	9d01      	ldr	r5, [sp, #4]
 80206be:	2331      	movs	r3, #49	; 0x31
 80206c0:	f805 3b01 	strb.w	r3, [r5], #1
 80206c4:	9b00      	ldr	r3, [sp, #0]
 80206c6:	3301      	adds	r3, #1
 80206c8:	9300      	str	r3, [sp, #0]
 80206ca:	e240      	b.n	8020b4e <_dtoa_r+0x946>
 80206cc:	07f2      	lsls	r2, r6, #31
 80206ce:	d505      	bpl.n	80206dc <_dtoa_r+0x4d4>
 80206d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80206d4:	f7e7 ff98 	bl	8008608 <__aeabi_dmul>
 80206d8:	3501      	adds	r5, #1
 80206da:	2301      	movs	r3, #1
 80206dc:	1076      	asrs	r6, r6, #1
 80206de:	3708      	adds	r7, #8
 80206e0:	e777      	b.n	80205d2 <_dtoa_r+0x3ca>
 80206e2:	2502      	movs	r5, #2
 80206e4:	e779      	b.n	80205da <_dtoa_r+0x3d2>
 80206e6:	9f00      	ldr	r7, [sp, #0]
 80206e8:	9e03      	ldr	r6, [sp, #12]
 80206ea:	e794      	b.n	8020616 <_dtoa_r+0x40e>
 80206ec:	9901      	ldr	r1, [sp, #4]
 80206ee:	4b4c      	ldr	r3, [pc, #304]	; (8020820 <_dtoa_r+0x618>)
 80206f0:	4431      	add	r1, r6
 80206f2:	910d      	str	r1, [sp, #52]	; 0x34
 80206f4:	9908      	ldr	r1, [sp, #32]
 80206f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80206fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80206fe:	2900      	cmp	r1, #0
 8020700:	d043      	beq.n	802078a <_dtoa_r+0x582>
 8020702:	494d      	ldr	r1, [pc, #308]	; (8020838 <_dtoa_r+0x630>)
 8020704:	2000      	movs	r0, #0
 8020706:	f7e8 f8a9 	bl	800885c <__aeabi_ddiv>
 802070a:	4652      	mov	r2, sl
 802070c:	465b      	mov	r3, fp
 802070e:	f7e7 fdc3 	bl	8008298 <__aeabi_dsub>
 8020712:	9d01      	ldr	r5, [sp, #4]
 8020714:	4682      	mov	sl, r0
 8020716:	468b      	mov	fp, r1
 8020718:	4649      	mov	r1, r9
 802071a:	4640      	mov	r0, r8
 802071c:	f7e8 fa24 	bl	8008b68 <__aeabi_d2iz>
 8020720:	4606      	mov	r6, r0
 8020722:	f7e7 ff07 	bl	8008534 <__aeabi_i2d>
 8020726:	4602      	mov	r2, r0
 8020728:	460b      	mov	r3, r1
 802072a:	4640      	mov	r0, r8
 802072c:	4649      	mov	r1, r9
 802072e:	f7e7 fdb3 	bl	8008298 <__aeabi_dsub>
 8020732:	3630      	adds	r6, #48	; 0x30
 8020734:	f805 6b01 	strb.w	r6, [r5], #1
 8020738:	4652      	mov	r2, sl
 802073a:	465b      	mov	r3, fp
 802073c:	4680      	mov	r8, r0
 802073e:	4689      	mov	r9, r1
 8020740:	f7e8 f9d4 	bl	8008aec <__aeabi_dcmplt>
 8020744:	2800      	cmp	r0, #0
 8020746:	d163      	bne.n	8020810 <_dtoa_r+0x608>
 8020748:	4642      	mov	r2, r8
 802074a:	464b      	mov	r3, r9
 802074c:	4936      	ldr	r1, [pc, #216]	; (8020828 <_dtoa_r+0x620>)
 802074e:	2000      	movs	r0, #0
 8020750:	f7e7 fda2 	bl	8008298 <__aeabi_dsub>
 8020754:	4652      	mov	r2, sl
 8020756:	465b      	mov	r3, fp
 8020758:	f7e8 f9c8 	bl	8008aec <__aeabi_dcmplt>
 802075c:	2800      	cmp	r0, #0
 802075e:	f040 80b5 	bne.w	80208cc <_dtoa_r+0x6c4>
 8020762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020764:	429d      	cmp	r5, r3
 8020766:	d081      	beq.n	802066c <_dtoa_r+0x464>
 8020768:	4b30      	ldr	r3, [pc, #192]	; (802082c <_dtoa_r+0x624>)
 802076a:	2200      	movs	r2, #0
 802076c:	4650      	mov	r0, sl
 802076e:	4659      	mov	r1, fp
 8020770:	f7e7 ff4a 	bl	8008608 <__aeabi_dmul>
 8020774:	4b2d      	ldr	r3, [pc, #180]	; (802082c <_dtoa_r+0x624>)
 8020776:	4682      	mov	sl, r0
 8020778:	468b      	mov	fp, r1
 802077a:	4640      	mov	r0, r8
 802077c:	4649      	mov	r1, r9
 802077e:	2200      	movs	r2, #0
 8020780:	f7e7 ff42 	bl	8008608 <__aeabi_dmul>
 8020784:	4680      	mov	r8, r0
 8020786:	4689      	mov	r9, r1
 8020788:	e7c6      	b.n	8020718 <_dtoa_r+0x510>
 802078a:	4650      	mov	r0, sl
 802078c:	4659      	mov	r1, fp
 802078e:	f7e7 ff3b 	bl	8008608 <__aeabi_dmul>
 8020792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020794:	9d01      	ldr	r5, [sp, #4]
 8020796:	930f      	str	r3, [sp, #60]	; 0x3c
 8020798:	4682      	mov	sl, r0
 802079a:	468b      	mov	fp, r1
 802079c:	4649      	mov	r1, r9
 802079e:	4640      	mov	r0, r8
 80207a0:	f7e8 f9e2 	bl	8008b68 <__aeabi_d2iz>
 80207a4:	4606      	mov	r6, r0
 80207a6:	f7e7 fec5 	bl	8008534 <__aeabi_i2d>
 80207aa:	3630      	adds	r6, #48	; 0x30
 80207ac:	4602      	mov	r2, r0
 80207ae:	460b      	mov	r3, r1
 80207b0:	4640      	mov	r0, r8
 80207b2:	4649      	mov	r1, r9
 80207b4:	f7e7 fd70 	bl	8008298 <__aeabi_dsub>
 80207b8:	f805 6b01 	strb.w	r6, [r5], #1
 80207bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80207be:	429d      	cmp	r5, r3
 80207c0:	4680      	mov	r8, r0
 80207c2:	4689      	mov	r9, r1
 80207c4:	f04f 0200 	mov.w	r2, #0
 80207c8:	d124      	bne.n	8020814 <_dtoa_r+0x60c>
 80207ca:	4b1b      	ldr	r3, [pc, #108]	; (8020838 <_dtoa_r+0x630>)
 80207cc:	4650      	mov	r0, sl
 80207ce:	4659      	mov	r1, fp
 80207d0:	f7e7 fd64 	bl	800829c <__adddf3>
 80207d4:	4602      	mov	r2, r0
 80207d6:	460b      	mov	r3, r1
 80207d8:	4640      	mov	r0, r8
 80207da:	4649      	mov	r1, r9
 80207dc:	f7e8 f9a4 	bl	8008b28 <__aeabi_dcmpgt>
 80207e0:	2800      	cmp	r0, #0
 80207e2:	d173      	bne.n	80208cc <_dtoa_r+0x6c4>
 80207e4:	4652      	mov	r2, sl
 80207e6:	465b      	mov	r3, fp
 80207e8:	4913      	ldr	r1, [pc, #76]	; (8020838 <_dtoa_r+0x630>)
 80207ea:	2000      	movs	r0, #0
 80207ec:	f7e7 fd54 	bl	8008298 <__aeabi_dsub>
 80207f0:	4602      	mov	r2, r0
 80207f2:	460b      	mov	r3, r1
 80207f4:	4640      	mov	r0, r8
 80207f6:	4649      	mov	r1, r9
 80207f8:	f7e8 f978 	bl	8008aec <__aeabi_dcmplt>
 80207fc:	2800      	cmp	r0, #0
 80207fe:	f43f af35 	beq.w	802066c <_dtoa_r+0x464>
 8020802:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020804:	1e6b      	subs	r3, r5, #1
 8020806:	930f      	str	r3, [sp, #60]	; 0x3c
 8020808:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802080c:	2b30      	cmp	r3, #48	; 0x30
 802080e:	d0f8      	beq.n	8020802 <_dtoa_r+0x5fa>
 8020810:	9700      	str	r7, [sp, #0]
 8020812:	e049      	b.n	80208a8 <_dtoa_r+0x6a0>
 8020814:	4b05      	ldr	r3, [pc, #20]	; (802082c <_dtoa_r+0x624>)
 8020816:	f7e7 fef7 	bl	8008608 <__aeabi_dmul>
 802081a:	4680      	mov	r8, r0
 802081c:	4689      	mov	r9, r1
 802081e:	e7bd      	b.n	802079c <_dtoa_r+0x594>
 8020820:	08035570 	.word	0x08035570
 8020824:	08035548 	.word	0x08035548
 8020828:	3ff00000 	.word	0x3ff00000
 802082c:	40240000 	.word	0x40240000
 8020830:	401c0000 	.word	0x401c0000
 8020834:	40140000 	.word	0x40140000
 8020838:	3fe00000 	.word	0x3fe00000
 802083c:	9d01      	ldr	r5, [sp, #4]
 802083e:	4656      	mov	r6, sl
 8020840:	465f      	mov	r7, fp
 8020842:	4642      	mov	r2, r8
 8020844:	464b      	mov	r3, r9
 8020846:	4630      	mov	r0, r6
 8020848:	4639      	mov	r1, r7
 802084a:	f7e8 f807 	bl	800885c <__aeabi_ddiv>
 802084e:	f7e8 f98b 	bl	8008b68 <__aeabi_d2iz>
 8020852:	4682      	mov	sl, r0
 8020854:	f7e7 fe6e 	bl	8008534 <__aeabi_i2d>
 8020858:	4642      	mov	r2, r8
 802085a:	464b      	mov	r3, r9
 802085c:	f7e7 fed4 	bl	8008608 <__aeabi_dmul>
 8020860:	4602      	mov	r2, r0
 8020862:	460b      	mov	r3, r1
 8020864:	4630      	mov	r0, r6
 8020866:	4639      	mov	r1, r7
 8020868:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 802086c:	f7e7 fd14 	bl	8008298 <__aeabi_dsub>
 8020870:	f805 6b01 	strb.w	r6, [r5], #1
 8020874:	9e01      	ldr	r6, [sp, #4]
 8020876:	9f03      	ldr	r7, [sp, #12]
 8020878:	1bae      	subs	r6, r5, r6
 802087a:	42b7      	cmp	r7, r6
 802087c:	4602      	mov	r2, r0
 802087e:	460b      	mov	r3, r1
 8020880:	d135      	bne.n	80208ee <_dtoa_r+0x6e6>
 8020882:	f7e7 fd0b 	bl	800829c <__adddf3>
 8020886:	4642      	mov	r2, r8
 8020888:	464b      	mov	r3, r9
 802088a:	4606      	mov	r6, r0
 802088c:	460f      	mov	r7, r1
 802088e:	f7e8 f94b 	bl	8008b28 <__aeabi_dcmpgt>
 8020892:	b9d0      	cbnz	r0, 80208ca <_dtoa_r+0x6c2>
 8020894:	4642      	mov	r2, r8
 8020896:	464b      	mov	r3, r9
 8020898:	4630      	mov	r0, r6
 802089a:	4639      	mov	r1, r7
 802089c:	f7e8 f91c 	bl	8008ad8 <__aeabi_dcmpeq>
 80208a0:	b110      	cbz	r0, 80208a8 <_dtoa_r+0x6a0>
 80208a2:	f01a 0f01 	tst.w	sl, #1
 80208a6:	d110      	bne.n	80208ca <_dtoa_r+0x6c2>
 80208a8:	4620      	mov	r0, r4
 80208aa:	ee18 1a10 	vmov	r1, s16
 80208ae:	f000 fbbd 	bl	802102c <_Bfree>
 80208b2:	2300      	movs	r3, #0
 80208b4:	9800      	ldr	r0, [sp, #0]
 80208b6:	702b      	strb	r3, [r5, #0]
 80208b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208ba:	3001      	adds	r0, #1
 80208bc:	6018      	str	r0, [r3, #0]
 80208be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80208c0:	2b00      	cmp	r3, #0
 80208c2:	f43f acf1 	beq.w	80202a8 <_dtoa_r+0xa0>
 80208c6:	601d      	str	r5, [r3, #0]
 80208c8:	e4ee      	b.n	80202a8 <_dtoa_r+0xa0>
 80208ca:	9f00      	ldr	r7, [sp, #0]
 80208cc:	462b      	mov	r3, r5
 80208ce:	461d      	mov	r5, r3
 80208d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80208d4:	2a39      	cmp	r2, #57	; 0x39
 80208d6:	d106      	bne.n	80208e6 <_dtoa_r+0x6de>
 80208d8:	9a01      	ldr	r2, [sp, #4]
 80208da:	429a      	cmp	r2, r3
 80208dc:	d1f7      	bne.n	80208ce <_dtoa_r+0x6c6>
 80208de:	9901      	ldr	r1, [sp, #4]
 80208e0:	2230      	movs	r2, #48	; 0x30
 80208e2:	3701      	adds	r7, #1
 80208e4:	700a      	strb	r2, [r1, #0]
 80208e6:	781a      	ldrb	r2, [r3, #0]
 80208e8:	3201      	adds	r2, #1
 80208ea:	701a      	strb	r2, [r3, #0]
 80208ec:	e790      	b.n	8020810 <_dtoa_r+0x608>
 80208ee:	4ba6      	ldr	r3, [pc, #664]	; (8020b88 <_dtoa_r+0x980>)
 80208f0:	2200      	movs	r2, #0
 80208f2:	f7e7 fe89 	bl	8008608 <__aeabi_dmul>
 80208f6:	2200      	movs	r2, #0
 80208f8:	2300      	movs	r3, #0
 80208fa:	4606      	mov	r6, r0
 80208fc:	460f      	mov	r7, r1
 80208fe:	f7e8 f8eb 	bl	8008ad8 <__aeabi_dcmpeq>
 8020902:	2800      	cmp	r0, #0
 8020904:	d09d      	beq.n	8020842 <_dtoa_r+0x63a>
 8020906:	e7cf      	b.n	80208a8 <_dtoa_r+0x6a0>
 8020908:	9a08      	ldr	r2, [sp, #32]
 802090a:	2a00      	cmp	r2, #0
 802090c:	f000 80d7 	beq.w	8020abe <_dtoa_r+0x8b6>
 8020910:	9a06      	ldr	r2, [sp, #24]
 8020912:	2a01      	cmp	r2, #1
 8020914:	f300 80ba 	bgt.w	8020a8c <_dtoa_r+0x884>
 8020918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802091a:	2a00      	cmp	r2, #0
 802091c:	f000 80b2 	beq.w	8020a84 <_dtoa_r+0x87c>
 8020920:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020924:	9e07      	ldr	r6, [sp, #28]
 8020926:	9d04      	ldr	r5, [sp, #16]
 8020928:	9a04      	ldr	r2, [sp, #16]
 802092a:	441a      	add	r2, r3
 802092c:	9204      	str	r2, [sp, #16]
 802092e:	9a05      	ldr	r2, [sp, #20]
 8020930:	2101      	movs	r1, #1
 8020932:	441a      	add	r2, r3
 8020934:	4620      	mov	r0, r4
 8020936:	9205      	str	r2, [sp, #20]
 8020938:	f000 fc30 	bl	802119c <__i2b>
 802093c:	4607      	mov	r7, r0
 802093e:	2d00      	cmp	r5, #0
 8020940:	dd0c      	ble.n	802095c <_dtoa_r+0x754>
 8020942:	9b05      	ldr	r3, [sp, #20]
 8020944:	2b00      	cmp	r3, #0
 8020946:	dd09      	ble.n	802095c <_dtoa_r+0x754>
 8020948:	42ab      	cmp	r3, r5
 802094a:	9a04      	ldr	r2, [sp, #16]
 802094c:	bfa8      	it	ge
 802094e:	462b      	movge	r3, r5
 8020950:	1ad2      	subs	r2, r2, r3
 8020952:	9204      	str	r2, [sp, #16]
 8020954:	9a05      	ldr	r2, [sp, #20]
 8020956:	1aed      	subs	r5, r5, r3
 8020958:	1ad3      	subs	r3, r2, r3
 802095a:	9305      	str	r3, [sp, #20]
 802095c:	9b07      	ldr	r3, [sp, #28]
 802095e:	b31b      	cbz	r3, 80209a8 <_dtoa_r+0x7a0>
 8020960:	9b08      	ldr	r3, [sp, #32]
 8020962:	2b00      	cmp	r3, #0
 8020964:	f000 80af 	beq.w	8020ac6 <_dtoa_r+0x8be>
 8020968:	2e00      	cmp	r6, #0
 802096a:	dd13      	ble.n	8020994 <_dtoa_r+0x78c>
 802096c:	4639      	mov	r1, r7
 802096e:	4632      	mov	r2, r6
 8020970:	4620      	mov	r0, r4
 8020972:	f000 fcd3 	bl	802131c <__pow5mult>
 8020976:	ee18 2a10 	vmov	r2, s16
 802097a:	4601      	mov	r1, r0
 802097c:	4607      	mov	r7, r0
 802097e:	4620      	mov	r0, r4
 8020980:	f000 fc22 	bl	80211c8 <__multiply>
 8020984:	ee18 1a10 	vmov	r1, s16
 8020988:	4680      	mov	r8, r0
 802098a:	4620      	mov	r0, r4
 802098c:	f000 fb4e 	bl	802102c <_Bfree>
 8020990:	ee08 8a10 	vmov	s16, r8
 8020994:	9b07      	ldr	r3, [sp, #28]
 8020996:	1b9a      	subs	r2, r3, r6
 8020998:	d006      	beq.n	80209a8 <_dtoa_r+0x7a0>
 802099a:	ee18 1a10 	vmov	r1, s16
 802099e:	4620      	mov	r0, r4
 80209a0:	f000 fcbc 	bl	802131c <__pow5mult>
 80209a4:	ee08 0a10 	vmov	s16, r0
 80209a8:	2101      	movs	r1, #1
 80209aa:	4620      	mov	r0, r4
 80209ac:	f000 fbf6 	bl	802119c <__i2b>
 80209b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	4606      	mov	r6, r0
 80209b6:	f340 8088 	ble.w	8020aca <_dtoa_r+0x8c2>
 80209ba:	461a      	mov	r2, r3
 80209bc:	4601      	mov	r1, r0
 80209be:	4620      	mov	r0, r4
 80209c0:	f000 fcac 	bl	802131c <__pow5mult>
 80209c4:	9b06      	ldr	r3, [sp, #24]
 80209c6:	2b01      	cmp	r3, #1
 80209c8:	4606      	mov	r6, r0
 80209ca:	f340 8081 	ble.w	8020ad0 <_dtoa_r+0x8c8>
 80209ce:	f04f 0800 	mov.w	r8, #0
 80209d2:	6933      	ldr	r3, [r6, #16]
 80209d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80209d8:	6918      	ldr	r0, [r3, #16]
 80209da:	f000 fb8f 	bl	80210fc <__hi0bits>
 80209de:	f1c0 0020 	rsb	r0, r0, #32
 80209e2:	9b05      	ldr	r3, [sp, #20]
 80209e4:	4418      	add	r0, r3
 80209e6:	f010 001f 	ands.w	r0, r0, #31
 80209ea:	f000 8092 	beq.w	8020b12 <_dtoa_r+0x90a>
 80209ee:	f1c0 0320 	rsb	r3, r0, #32
 80209f2:	2b04      	cmp	r3, #4
 80209f4:	f340 808a 	ble.w	8020b0c <_dtoa_r+0x904>
 80209f8:	f1c0 001c 	rsb	r0, r0, #28
 80209fc:	9b04      	ldr	r3, [sp, #16]
 80209fe:	4403      	add	r3, r0
 8020a00:	9304      	str	r3, [sp, #16]
 8020a02:	9b05      	ldr	r3, [sp, #20]
 8020a04:	4403      	add	r3, r0
 8020a06:	4405      	add	r5, r0
 8020a08:	9305      	str	r3, [sp, #20]
 8020a0a:	9b04      	ldr	r3, [sp, #16]
 8020a0c:	2b00      	cmp	r3, #0
 8020a0e:	dd07      	ble.n	8020a20 <_dtoa_r+0x818>
 8020a10:	ee18 1a10 	vmov	r1, s16
 8020a14:	461a      	mov	r2, r3
 8020a16:	4620      	mov	r0, r4
 8020a18:	f000 fcda 	bl	80213d0 <__lshift>
 8020a1c:	ee08 0a10 	vmov	s16, r0
 8020a20:	9b05      	ldr	r3, [sp, #20]
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	dd05      	ble.n	8020a32 <_dtoa_r+0x82a>
 8020a26:	4631      	mov	r1, r6
 8020a28:	461a      	mov	r2, r3
 8020a2a:	4620      	mov	r0, r4
 8020a2c:	f000 fcd0 	bl	80213d0 <__lshift>
 8020a30:	4606      	mov	r6, r0
 8020a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a34:	2b00      	cmp	r3, #0
 8020a36:	d06e      	beq.n	8020b16 <_dtoa_r+0x90e>
 8020a38:	ee18 0a10 	vmov	r0, s16
 8020a3c:	4631      	mov	r1, r6
 8020a3e:	f000 fd37 	bl	80214b0 <__mcmp>
 8020a42:	2800      	cmp	r0, #0
 8020a44:	da67      	bge.n	8020b16 <_dtoa_r+0x90e>
 8020a46:	9b00      	ldr	r3, [sp, #0]
 8020a48:	3b01      	subs	r3, #1
 8020a4a:	ee18 1a10 	vmov	r1, s16
 8020a4e:	9300      	str	r3, [sp, #0]
 8020a50:	220a      	movs	r2, #10
 8020a52:	2300      	movs	r3, #0
 8020a54:	4620      	mov	r0, r4
 8020a56:	f000 fb0b 	bl	8021070 <__multadd>
 8020a5a:	9b08      	ldr	r3, [sp, #32]
 8020a5c:	ee08 0a10 	vmov	s16, r0
 8020a60:	2b00      	cmp	r3, #0
 8020a62:	f000 81b1 	beq.w	8020dc8 <_dtoa_r+0xbc0>
 8020a66:	2300      	movs	r3, #0
 8020a68:	4639      	mov	r1, r7
 8020a6a:	220a      	movs	r2, #10
 8020a6c:	4620      	mov	r0, r4
 8020a6e:	f000 faff 	bl	8021070 <__multadd>
 8020a72:	9b02      	ldr	r3, [sp, #8]
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	4607      	mov	r7, r0
 8020a78:	f300 808e 	bgt.w	8020b98 <_dtoa_r+0x990>
 8020a7c:	9b06      	ldr	r3, [sp, #24]
 8020a7e:	2b02      	cmp	r3, #2
 8020a80:	dc51      	bgt.n	8020b26 <_dtoa_r+0x91e>
 8020a82:	e089      	b.n	8020b98 <_dtoa_r+0x990>
 8020a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8020a8a:	e74b      	b.n	8020924 <_dtoa_r+0x71c>
 8020a8c:	9b03      	ldr	r3, [sp, #12]
 8020a8e:	1e5e      	subs	r6, r3, #1
 8020a90:	9b07      	ldr	r3, [sp, #28]
 8020a92:	42b3      	cmp	r3, r6
 8020a94:	bfbf      	itttt	lt
 8020a96:	9b07      	ldrlt	r3, [sp, #28]
 8020a98:	9607      	strlt	r6, [sp, #28]
 8020a9a:	1af2      	sublt	r2, r6, r3
 8020a9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8020a9e:	bfb6      	itet	lt
 8020aa0:	189b      	addlt	r3, r3, r2
 8020aa2:	1b9e      	subge	r6, r3, r6
 8020aa4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8020aa6:	9b03      	ldr	r3, [sp, #12]
 8020aa8:	bfb8      	it	lt
 8020aaa:	2600      	movlt	r6, #0
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	bfb7      	itett	lt
 8020ab0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8020ab4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8020ab8:	1a9d      	sublt	r5, r3, r2
 8020aba:	2300      	movlt	r3, #0
 8020abc:	e734      	b.n	8020928 <_dtoa_r+0x720>
 8020abe:	9e07      	ldr	r6, [sp, #28]
 8020ac0:	9d04      	ldr	r5, [sp, #16]
 8020ac2:	9f08      	ldr	r7, [sp, #32]
 8020ac4:	e73b      	b.n	802093e <_dtoa_r+0x736>
 8020ac6:	9a07      	ldr	r2, [sp, #28]
 8020ac8:	e767      	b.n	802099a <_dtoa_r+0x792>
 8020aca:	9b06      	ldr	r3, [sp, #24]
 8020acc:	2b01      	cmp	r3, #1
 8020ace:	dc18      	bgt.n	8020b02 <_dtoa_r+0x8fa>
 8020ad0:	f1ba 0f00 	cmp.w	sl, #0
 8020ad4:	d115      	bne.n	8020b02 <_dtoa_r+0x8fa>
 8020ad6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020ada:	b993      	cbnz	r3, 8020b02 <_dtoa_r+0x8fa>
 8020adc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020ae0:	0d1b      	lsrs	r3, r3, #20
 8020ae2:	051b      	lsls	r3, r3, #20
 8020ae4:	b183      	cbz	r3, 8020b08 <_dtoa_r+0x900>
 8020ae6:	9b04      	ldr	r3, [sp, #16]
 8020ae8:	3301      	adds	r3, #1
 8020aea:	9304      	str	r3, [sp, #16]
 8020aec:	9b05      	ldr	r3, [sp, #20]
 8020aee:	3301      	adds	r3, #1
 8020af0:	9305      	str	r3, [sp, #20]
 8020af2:	f04f 0801 	mov.w	r8, #1
 8020af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020af8:	2b00      	cmp	r3, #0
 8020afa:	f47f af6a 	bne.w	80209d2 <_dtoa_r+0x7ca>
 8020afe:	2001      	movs	r0, #1
 8020b00:	e76f      	b.n	80209e2 <_dtoa_r+0x7da>
 8020b02:	f04f 0800 	mov.w	r8, #0
 8020b06:	e7f6      	b.n	8020af6 <_dtoa_r+0x8ee>
 8020b08:	4698      	mov	r8, r3
 8020b0a:	e7f4      	b.n	8020af6 <_dtoa_r+0x8ee>
 8020b0c:	f43f af7d 	beq.w	8020a0a <_dtoa_r+0x802>
 8020b10:	4618      	mov	r0, r3
 8020b12:	301c      	adds	r0, #28
 8020b14:	e772      	b.n	80209fc <_dtoa_r+0x7f4>
 8020b16:	9b03      	ldr	r3, [sp, #12]
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	dc37      	bgt.n	8020b8c <_dtoa_r+0x984>
 8020b1c:	9b06      	ldr	r3, [sp, #24]
 8020b1e:	2b02      	cmp	r3, #2
 8020b20:	dd34      	ble.n	8020b8c <_dtoa_r+0x984>
 8020b22:	9b03      	ldr	r3, [sp, #12]
 8020b24:	9302      	str	r3, [sp, #8]
 8020b26:	9b02      	ldr	r3, [sp, #8]
 8020b28:	b96b      	cbnz	r3, 8020b46 <_dtoa_r+0x93e>
 8020b2a:	4631      	mov	r1, r6
 8020b2c:	2205      	movs	r2, #5
 8020b2e:	4620      	mov	r0, r4
 8020b30:	f000 fa9e 	bl	8021070 <__multadd>
 8020b34:	4601      	mov	r1, r0
 8020b36:	4606      	mov	r6, r0
 8020b38:	ee18 0a10 	vmov	r0, s16
 8020b3c:	f000 fcb8 	bl	80214b0 <__mcmp>
 8020b40:	2800      	cmp	r0, #0
 8020b42:	f73f adbb 	bgt.w	80206bc <_dtoa_r+0x4b4>
 8020b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b48:	9d01      	ldr	r5, [sp, #4]
 8020b4a:	43db      	mvns	r3, r3
 8020b4c:	9300      	str	r3, [sp, #0]
 8020b4e:	f04f 0800 	mov.w	r8, #0
 8020b52:	4631      	mov	r1, r6
 8020b54:	4620      	mov	r0, r4
 8020b56:	f000 fa69 	bl	802102c <_Bfree>
 8020b5a:	2f00      	cmp	r7, #0
 8020b5c:	f43f aea4 	beq.w	80208a8 <_dtoa_r+0x6a0>
 8020b60:	f1b8 0f00 	cmp.w	r8, #0
 8020b64:	d005      	beq.n	8020b72 <_dtoa_r+0x96a>
 8020b66:	45b8      	cmp	r8, r7
 8020b68:	d003      	beq.n	8020b72 <_dtoa_r+0x96a>
 8020b6a:	4641      	mov	r1, r8
 8020b6c:	4620      	mov	r0, r4
 8020b6e:	f000 fa5d 	bl	802102c <_Bfree>
 8020b72:	4639      	mov	r1, r7
 8020b74:	4620      	mov	r0, r4
 8020b76:	f000 fa59 	bl	802102c <_Bfree>
 8020b7a:	e695      	b.n	80208a8 <_dtoa_r+0x6a0>
 8020b7c:	2600      	movs	r6, #0
 8020b7e:	4637      	mov	r7, r6
 8020b80:	e7e1      	b.n	8020b46 <_dtoa_r+0x93e>
 8020b82:	9700      	str	r7, [sp, #0]
 8020b84:	4637      	mov	r7, r6
 8020b86:	e599      	b.n	80206bc <_dtoa_r+0x4b4>
 8020b88:	40240000 	.word	0x40240000
 8020b8c:	9b08      	ldr	r3, [sp, #32]
 8020b8e:	2b00      	cmp	r3, #0
 8020b90:	f000 80ca 	beq.w	8020d28 <_dtoa_r+0xb20>
 8020b94:	9b03      	ldr	r3, [sp, #12]
 8020b96:	9302      	str	r3, [sp, #8]
 8020b98:	2d00      	cmp	r5, #0
 8020b9a:	dd05      	ble.n	8020ba8 <_dtoa_r+0x9a0>
 8020b9c:	4639      	mov	r1, r7
 8020b9e:	462a      	mov	r2, r5
 8020ba0:	4620      	mov	r0, r4
 8020ba2:	f000 fc15 	bl	80213d0 <__lshift>
 8020ba6:	4607      	mov	r7, r0
 8020ba8:	f1b8 0f00 	cmp.w	r8, #0
 8020bac:	d05b      	beq.n	8020c66 <_dtoa_r+0xa5e>
 8020bae:	6879      	ldr	r1, [r7, #4]
 8020bb0:	4620      	mov	r0, r4
 8020bb2:	f000 f9fb 	bl	8020fac <_Balloc>
 8020bb6:	4605      	mov	r5, r0
 8020bb8:	b928      	cbnz	r0, 8020bc6 <_dtoa_r+0x9be>
 8020bba:	4b87      	ldr	r3, [pc, #540]	; (8020dd8 <_dtoa_r+0xbd0>)
 8020bbc:	4602      	mov	r2, r0
 8020bbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020bc2:	f7ff bb3b 	b.w	802023c <_dtoa_r+0x34>
 8020bc6:	693a      	ldr	r2, [r7, #16]
 8020bc8:	3202      	adds	r2, #2
 8020bca:	0092      	lsls	r2, r2, #2
 8020bcc:	f107 010c 	add.w	r1, r7, #12
 8020bd0:	300c      	adds	r0, #12
 8020bd2:	f7fe fc0b 	bl	801f3ec <memcpy>
 8020bd6:	2201      	movs	r2, #1
 8020bd8:	4629      	mov	r1, r5
 8020bda:	4620      	mov	r0, r4
 8020bdc:	f000 fbf8 	bl	80213d0 <__lshift>
 8020be0:	9b01      	ldr	r3, [sp, #4]
 8020be2:	f103 0901 	add.w	r9, r3, #1
 8020be6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8020bea:	4413      	add	r3, r2
 8020bec:	9305      	str	r3, [sp, #20]
 8020bee:	f00a 0301 	and.w	r3, sl, #1
 8020bf2:	46b8      	mov	r8, r7
 8020bf4:	9304      	str	r3, [sp, #16]
 8020bf6:	4607      	mov	r7, r0
 8020bf8:	4631      	mov	r1, r6
 8020bfa:	ee18 0a10 	vmov	r0, s16
 8020bfe:	f7ff fa77 	bl	80200f0 <quorem>
 8020c02:	4641      	mov	r1, r8
 8020c04:	9002      	str	r0, [sp, #8]
 8020c06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8020c0a:	ee18 0a10 	vmov	r0, s16
 8020c0e:	f000 fc4f 	bl	80214b0 <__mcmp>
 8020c12:	463a      	mov	r2, r7
 8020c14:	9003      	str	r0, [sp, #12]
 8020c16:	4631      	mov	r1, r6
 8020c18:	4620      	mov	r0, r4
 8020c1a:	f000 fc65 	bl	80214e8 <__mdiff>
 8020c1e:	68c2      	ldr	r2, [r0, #12]
 8020c20:	f109 3bff 	add.w	fp, r9, #4294967295
 8020c24:	4605      	mov	r5, r0
 8020c26:	bb02      	cbnz	r2, 8020c6a <_dtoa_r+0xa62>
 8020c28:	4601      	mov	r1, r0
 8020c2a:	ee18 0a10 	vmov	r0, s16
 8020c2e:	f000 fc3f 	bl	80214b0 <__mcmp>
 8020c32:	4602      	mov	r2, r0
 8020c34:	4629      	mov	r1, r5
 8020c36:	4620      	mov	r0, r4
 8020c38:	9207      	str	r2, [sp, #28]
 8020c3a:	f000 f9f7 	bl	802102c <_Bfree>
 8020c3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8020c42:	ea43 0102 	orr.w	r1, r3, r2
 8020c46:	9b04      	ldr	r3, [sp, #16]
 8020c48:	430b      	orrs	r3, r1
 8020c4a:	464d      	mov	r5, r9
 8020c4c:	d10f      	bne.n	8020c6e <_dtoa_r+0xa66>
 8020c4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020c52:	d02a      	beq.n	8020caa <_dtoa_r+0xaa2>
 8020c54:	9b03      	ldr	r3, [sp, #12]
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	dd02      	ble.n	8020c60 <_dtoa_r+0xa58>
 8020c5a:	9b02      	ldr	r3, [sp, #8]
 8020c5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8020c60:	f88b a000 	strb.w	sl, [fp]
 8020c64:	e775      	b.n	8020b52 <_dtoa_r+0x94a>
 8020c66:	4638      	mov	r0, r7
 8020c68:	e7ba      	b.n	8020be0 <_dtoa_r+0x9d8>
 8020c6a:	2201      	movs	r2, #1
 8020c6c:	e7e2      	b.n	8020c34 <_dtoa_r+0xa2c>
 8020c6e:	9b03      	ldr	r3, [sp, #12]
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	db04      	blt.n	8020c7e <_dtoa_r+0xa76>
 8020c74:	9906      	ldr	r1, [sp, #24]
 8020c76:	430b      	orrs	r3, r1
 8020c78:	9904      	ldr	r1, [sp, #16]
 8020c7a:	430b      	orrs	r3, r1
 8020c7c:	d122      	bne.n	8020cc4 <_dtoa_r+0xabc>
 8020c7e:	2a00      	cmp	r2, #0
 8020c80:	ddee      	ble.n	8020c60 <_dtoa_r+0xa58>
 8020c82:	ee18 1a10 	vmov	r1, s16
 8020c86:	2201      	movs	r2, #1
 8020c88:	4620      	mov	r0, r4
 8020c8a:	f000 fba1 	bl	80213d0 <__lshift>
 8020c8e:	4631      	mov	r1, r6
 8020c90:	ee08 0a10 	vmov	s16, r0
 8020c94:	f000 fc0c 	bl	80214b0 <__mcmp>
 8020c98:	2800      	cmp	r0, #0
 8020c9a:	dc03      	bgt.n	8020ca4 <_dtoa_r+0xa9c>
 8020c9c:	d1e0      	bne.n	8020c60 <_dtoa_r+0xa58>
 8020c9e:	f01a 0f01 	tst.w	sl, #1
 8020ca2:	d0dd      	beq.n	8020c60 <_dtoa_r+0xa58>
 8020ca4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020ca8:	d1d7      	bne.n	8020c5a <_dtoa_r+0xa52>
 8020caa:	2339      	movs	r3, #57	; 0x39
 8020cac:	f88b 3000 	strb.w	r3, [fp]
 8020cb0:	462b      	mov	r3, r5
 8020cb2:	461d      	mov	r5, r3
 8020cb4:	3b01      	subs	r3, #1
 8020cb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8020cba:	2a39      	cmp	r2, #57	; 0x39
 8020cbc:	d071      	beq.n	8020da2 <_dtoa_r+0xb9a>
 8020cbe:	3201      	adds	r2, #1
 8020cc0:	701a      	strb	r2, [r3, #0]
 8020cc2:	e746      	b.n	8020b52 <_dtoa_r+0x94a>
 8020cc4:	2a00      	cmp	r2, #0
 8020cc6:	dd07      	ble.n	8020cd8 <_dtoa_r+0xad0>
 8020cc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020ccc:	d0ed      	beq.n	8020caa <_dtoa_r+0xaa2>
 8020cce:	f10a 0301 	add.w	r3, sl, #1
 8020cd2:	f88b 3000 	strb.w	r3, [fp]
 8020cd6:	e73c      	b.n	8020b52 <_dtoa_r+0x94a>
 8020cd8:	9b05      	ldr	r3, [sp, #20]
 8020cda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8020cde:	4599      	cmp	r9, r3
 8020ce0:	d047      	beq.n	8020d72 <_dtoa_r+0xb6a>
 8020ce2:	ee18 1a10 	vmov	r1, s16
 8020ce6:	2300      	movs	r3, #0
 8020ce8:	220a      	movs	r2, #10
 8020cea:	4620      	mov	r0, r4
 8020cec:	f000 f9c0 	bl	8021070 <__multadd>
 8020cf0:	45b8      	cmp	r8, r7
 8020cf2:	ee08 0a10 	vmov	s16, r0
 8020cf6:	f04f 0300 	mov.w	r3, #0
 8020cfa:	f04f 020a 	mov.w	r2, #10
 8020cfe:	4641      	mov	r1, r8
 8020d00:	4620      	mov	r0, r4
 8020d02:	d106      	bne.n	8020d12 <_dtoa_r+0xb0a>
 8020d04:	f000 f9b4 	bl	8021070 <__multadd>
 8020d08:	4680      	mov	r8, r0
 8020d0a:	4607      	mov	r7, r0
 8020d0c:	f109 0901 	add.w	r9, r9, #1
 8020d10:	e772      	b.n	8020bf8 <_dtoa_r+0x9f0>
 8020d12:	f000 f9ad 	bl	8021070 <__multadd>
 8020d16:	4639      	mov	r1, r7
 8020d18:	4680      	mov	r8, r0
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	220a      	movs	r2, #10
 8020d1e:	4620      	mov	r0, r4
 8020d20:	f000 f9a6 	bl	8021070 <__multadd>
 8020d24:	4607      	mov	r7, r0
 8020d26:	e7f1      	b.n	8020d0c <_dtoa_r+0xb04>
 8020d28:	9b03      	ldr	r3, [sp, #12]
 8020d2a:	9302      	str	r3, [sp, #8]
 8020d2c:	9d01      	ldr	r5, [sp, #4]
 8020d2e:	ee18 0a10 	vmov	r0, s16
 8020d32:	4631      	mov	r1, r6
 8020d34:	f7ff f9dc 	bl	80200f0 <quorem>
 8020d38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8020d3c:	9b01      	ldr	r3, [sp, #4]
 8020d3e:	f805 ab01 	strb.w	sl, [r5], #1
 8020d42:	1aea      	subs	r2, r5, r3
 8020d44:	9b02      	ldr	r3, [sp, #8]
 8020d46:	4293      	cmp	r3, r2
 8020d48:	dd09      	ble.n	8020d5e <_dtoa_r+0xb56>
 8020d4a:	ee18 1a10 	vmov	r1, s16
 8020d4e:	2300      	movs	r3, #0
 8020d50:	220a      	movs	r2, #10
 8020d52:	4620      	mov	r0, r4
 8020d54:	f000 f98c 	bl	8021070 <__multadd>
 8020d58:	ee08 0a10 	vmov	s16, r0
 8020d5c:	e7e7      	b.n	8020d2e <_dtoa_r+0xb26>
 8020d5e:	9b02      	ldr	r3, [sp, #8]
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	bfc8      	it	gt
 8020d64:	461d      	movgt	r5, r3
 8020d66:	9b01      	ldr	r3, [sp, #4]
 8020d68:	bfd8      	it	le
 8020d6a:	2501      	movle	r5, #1
 8020d6c:	441d      	add	r5, r3
 8020d6e:	f04f 0800 	mov.w	r8, #0
 8020d72:	ee18 1a10 	vmov	r1, s16
 8020d76:	2201      	movs	r2, #1
 8020d78:	4620      	mov	r0, r4
 8020d7a:	f000 fb29 	bl	80213d0 <__lshift>
 8020d7e:	4631      	mov	r1, r6
 8020d80:	ee08 0a10 	vmov	s16, r0
 8020d84:	f000 fb94 	bl	80214b0 <__mcmp>
 8020d88:	2800      	cmp	r0, #0
 8020d8a:	dc91      	bgt.n	8020cb0 <_dtoa_r+0xaa8>
 8020d8c:	d102      	bne.n	8020d94 <_dtoa_r+0xb8c>
 8020d8e:	f01a 0f01 	tst.w	sl, #1
 8020d92:	d18d      	bne.n	8020cb0 <_dtoa_r+0xaa8>
 8020d94:	462b      	mov	r3, r5
 8020d96:	461d      	mov	r5, r3
 8020d98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020d9c:	2a30      	cmp	r2, #48	; 0x30
 8020d9e:	d0fa      	beq.n	8020d96 <_dtoa_r+0xb8e>
 8020da0:	e6d7      	b.n	8020b52 <_dtoa_r+0x94a>
 8020da2:	9a01      	ldr	r2, [sp, #4]
 8020da4:	429a      	cmp	r2, r3
 8020da6:	d184      	bne.n	8020cb2 <_dtoa_r+0xaaa>
 8020da8:	9b00      	ldr	r3, [sp, #0]
 8020daa:	3301      	adds	r3, #1
 8020dac:	9300      	str	r3, [sp, #0]
 8020dae:	2331      	movs	r3, #49	; 0x31
 8020db0:	7013      	strb	r3, [r2, #0]
 8020db2:	e6ce      	b.n	8020b52 <_dtoa_r+0x94a>
 8020db4:	4b09      	ldr	r3, [pc, #36]	; (8020ddc <_dtoa_r+0xbd4>)
 8020db6:	f7ff ba95 	b.w	80202e4 <_dtoa_r+0xdc>
 8020dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	f47f aa6e 	bne.w	802029e <_dtoa_r+0x96>
 8020dc2:	4b07      	ldr	r3, [pc, #28]	; (8020de0 <_dtoa_r+0xbd8>)
 8020dc4:	f7ff ba8e 	b.w	80202e4 <_dtoa_r+0xdc>
 8020dc8:	9b02      	ldr	r3, [sp, #8]
 8020dca:	2b00      	cmp	r3, #0
 8020dcc:	dcae      	bgt.n	8020d2c <_dtoa_r+0xb24>
 8020dce:	9b06      	ldr	r3, [sp, #24]
 8020dd0:	2b02      	cmp	r3, #2
 8020dd2:	f73f aea8 	bgt.w	8020b26 <_dtoa_r+0x91e>
 8020dd6:	e7a9      	b.n	8020d2c <_dtoa_r+0xb24>
 8020dd8:	080354db 	.word	0x080354db
 8020ddc:	08035438 	.word	0x08035438
 8020de0:	0803545c 	.word	0x0803545c

08020de4 <__sflush_r>:
 8020de4:	898a      	ldrh	r2, [r1, #12]
 8020de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020dea:	4605      	mov	r5, r0
 8020dec:	0710      	lsls	r0, r2, #28
 8020dee:	460c      	mov	r4, r1
 8020df0:	d458      	bmi.n	8020ea4 <__sflush_r+0xc0>
 8020df2:	684b      	ldr	r3, [r1, #4]
 8020df4:	2b00      	cmp	r3, #0
 8020df6:	dc05      	bgt.n	8020e04 <__sflush_r+0x20>
 8020df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	dc02      	bgt.n	8020e04 <__sflush_r+0x20>
 8020dfe:	2000      	movs	r0, #0
 8020e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020e06:	2e00      	cmp	r6, #0
 8020e08:	d0f9      	beq.n	8020dfe <__sflush_r+0x1a>
 8020e0a:	2300      	movs	r3, #0
 8020e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020e10:	682f      	ldr	r7, [r5, #0]
 8020e12:	602b      	str	r3, [r5, #0]
 8020e14:	d032      	beq.n	8020e7c <__sflush_r+0x98>
 8020e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020e18:	89a3      	ldrh	r3, [r4, #12]
 8020e1a:	075a      	lsls	r2, r3, #29
 8020e1c:	d505      	bpl.n	8020e2a <__sflush_r+0x46>
 8020e1e:	6863      	ldr	r3, [r4, #4]
 8020e20:	1ac0      	subs	r0, r0, r3
 8020e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020e24:	b10b      	cbz	r3, 8020e2a <__sflush_r+0x46>
 8020e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020e28:	1ac0      	subs	r0, r0, r3
 8020e2a:	2300      	movs	r3, #0
 8020e2c:	4602      	mov	r2, r0
 8020e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020e30:	6a21      	ldr	r1, [r4, #32]
 8020e32:	4628      	mov	r0, r5
 8020e34:	47b0      	blx	r6
 8020e36:	1c43      	adds	r3, r0, #1
 8020e38:	89a3      	ldrh	r3, [r4, #12]
 8020e3a:	d106      	bne.n	8020e4a <__sflush_r+0x66>
 8020e3c:	6829      	ldr	r1, [r5, #0]
 8020e3e:	291d      	cmp	r1, #29
 8020e40:	d82c      	bhi.n	8020e9c <__sflush_r+0xb8>
 8020e42:	4a2a      	ldr	r2, [pc, #168]	; (8020eec <__sflush_r+0x108>)
 8020e44:	40ca      	lsrs	r2, r1
 8020e46:	07d6      	lsls	r6, r2, #31
 8020e48:	d528      	bpl.n	8020e9c <__sflush_r+0xb8>
 8020e4a:	2200      	movs	r2, #0
 8020e4c:	6062      	str	r2, [r4, #4]
 8020e4e:	04d9      	lsls	r1, r3, #19
 8020e50:	6922      	ldr	r2, [r4, #16]
 8020e52:	6022      	str	r2, [r4, #0]
 8020e54:	d504      	bpl.n	8020e60 <__sflush_r+0x7c>
 8020e56:	1c42      	adds	r2, r0, #1
 8020e58:	d101      	bne.n	8020e5e <__sflush_r+0x7a>
 8020e5a:	682b      	ldr	r3, [r5, #0]
 8020e5c:	b903      	cbnz	r3, 8020e60 <__sflush_r+0x7c>
 8020e5e:	6560      	str	r0, [r4, #84]	; 0x54
 8020e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020e62:	602f      	str	r7, [r5, #0]
 8020e64:	2900      	cmp	r1, #0
 8020e66:	d0ca      	beq.n	8020dfe <__sflush_r+0x1a>
 8020e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020e6c:	4299      	cmp	r1, r3
 8020e6e:	d002      	beq.n	8020e76 <__sflush_r+0x92>
 8020e70:	4628      	mov	r0, r5
 8020e72:	f7fe faeb 	bl	801f44c <_free_r>
 8020e76:	2000      	movs	r0, #0
 8020e78:	6360      	str	r0, [r4, #52]	; 0x34
 8020e7a:	e7c1      	b.n	8020e00 <__sflush_r+0x1c>
 8020e7c:	6a21      	ldr	r1, [r4, #32]
 8020e7e:	2301      	movs	r3, #1
 8020e80:	4628      	mov	r0, r5
 8020e82:	47b0      	blx	r6
 8020e84:	1c41      	adds	r1, r0, #1
 8020e86:	d1c7      	bne.n	8020e18 <__sflush_r+0x34>
 8020e88:	682b      	ldr	r3, [r5, #0]
 8020e8a:	2b00      	cmp	r3, #0
 8020e8c:	d0c4      	beq.n	8020e18 <__sflush_r+0x34>
 8020e8e:	2b1d      	cmp	r3, #29
 8020e90:	d001      	beq.n	8020e96 <__sflush_r+0xb2>
 8020e92:	2b16      	cmp	r3, #22
 8020e94:	d101      	bne.n	8020e9a <__sflush_r+0xb6>
 8020e96:	602f      	str	r7, [r5, #0]
 8020e98:	e7b1      	b.n	8020dfe <__sflush_r+0x1a>
 8020e9a:	89a3      	ldrh	r3, [r4, #12]
 8020e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020ea0:	81a3      	strh	r3, [r4, #12]
 8020ea2:	e7ad      	b.n	8020e00 <__sflush_r+0x1c>
 8020ea4:	690f      	ldr	r7, [r1, #16]
 8020ea6:	2f00      	cmp	r7, #0
 8020ea8:	d0a9      	beq.n	8020dfe <__sflush_r+0x1a>
 8020eaa:	0793      	lsls	r3, r2, #30
 8020eac:	680e      	ldr	r6, [r1, #0]
 8020eae:	bf08      	it	eq
 8020eb0:	694b      	ldreq	r3, [r1, #20]
 8020eb2:	600f      	str	r7, [r1, #0]
 8020eb4:	bf18      	it	ne
 8020eb6:	2300      	movne	r3, #0
 8020eb8:	eba6 0807 	sub.w	r8, r6, r7
 8020ebc:	608b      	str	r3, [r1, #8]
 8020ebe:	f1b8 0f00 	cmp.w	r8, #0
 8020ec2:	dd9c      	ble.n	8020dfe <__sflush_r+0x1a>
 8020ec4:	6a21      	ldr	r1, [r4, #32]
 8020ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020ec8:	4643      	mov	r3, r8
 8020eca:	463a      	mov	r2, r7
 8020ecc:	4628      	mov	r0, r5
 8020ece:	47b0      	blx	r6
 8020ed0:	2800      	cmp	r0, #0
 8020ed2:	dc06      	bgt.n	8020ee2 <__sflush_r+0xfe>
 8020ed4:	89a3      	ldrh	r3, [r4, #12]
 8020ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020eda:	81a3      	strh	r3, [r4, #12]
 8020edc:	f04f 30ff 	mov.w	r0, #4294967295
 8020ee0:	e78e      	b.n	8020e00 <__sflush_r+0x1c>
 8020ee2:	4407      	add	r7, r0
 8020ee4:	eba8 0800 	sub.w	r8, r8, r0
 8020ee8:	e7e9      	b.n	8020ebe <__sflush_r+0xda>
 8020eea:	bf00      	nop
 8020eec:	20400001 	.word	0x20400001

08020ef0 <_fflush_r>:
 8020ef0:	b538      	push	{r3, r4, r5, lr}
 8020ef2:	690b      	ldr	r3, [r1, #16]
 8020ef4:	4605      	mov	r5, r0
 8020ef6:	460c      	mov	r4, r1
 8020ef8:	b913      	cbnz	r3, 8020f00 <_fflush_r+0x10>
 8020efa:	2500      	movs	r5, #0
 8020efc:	4628      	mov	r0, r5
 8020efe:	bd38      	pop	{r3, r4, r5, pc}
 8020f00:	b118      	cbz	r0, 8020f0a <_fflush_r+0x1a>
 8020f02:	6983      	ldr	r3, [r0, #24]
 8020f04:	b90b      	cbnz	r3, 8020f0a <_fflush_r+0x1a>
 8020f06:	f7fe f99f 	bl	801f248 <__sinit>
 8020f0a:	4b14      	ldr	r3, [pc, #80]	; (8020f5c <_fflush_r+0x6c>)
 8020f0c:	429c      	cmp	r4, r3
 8020f0e:	d11b      	bne.n	8020f48 <_fflush_r+0x58>
 8020f10:	686c      	ldr	r4, [r5, #4]
 8020f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	d0ef      	beq.n	8020efa <_fflush_r+0xa>
 8020f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020f1c:	07d0      	lsls	r0, r2, #31
 8020f1e:	d404      	bmi.n	8020f2a <_fflush_r+0x3a>
 8020f20:	0599      	lsls	r1, r3, #22
 8020f22:	d402      	bmi.n	8020f2a <_fflush_r+0x3a>
 8020f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020f26:	f7ee f899 	bl	800f05c <__retarget_lock_acquire_recursive>
 8020f2a:	4628      	mov	r0, r5
 8020f2c:	4621      	mov	r1, r4
 8020f2e:	f7ff ff59 	bl	8020de4 <__sflush_r>
 8020f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020f34:	07da      	lsls	r2, r3, #31
 8020f36:	4605      	mov	r5, r0
 8020f38:	d4e0      	bmi.n	8020efc <_fflush_r+0xc>
 8020f3a:	89a3      	ldrh	r3, [r4, #12]
 8020f3c:	059b      	lsls	r3, r3, #22
 8020f3e:	d4dd      	bmi.n	8020efc <_fflush_r+0xc>
 8020f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020f42:	f7ee f89f 	bl	800f084 <__retarget_lock_release_recursive>
 8020f46:	e7d9      	b.n	8020efc <_fflush_r+0xc>
 8020f48:	4b05      	ldr	r3, [pc, #20]	; (8020f60 <_fflush_r+0x70>)
 8020f4a:	429c      	cmp	r4, r3
 8020f4c:	d101      	bne.n	8020f52 <_fflush_r+0x62>
 8020f4e:	68ac      	ldr	r4, [r5, #8]
 8020f50:	e7df      	b.n	8020f12 <_fflush_r+0x22>
 8020f52:	4b04      	ldr	r3, [pc, #16]	; (8020f64 <_fflush_r+0x74>)
 8020f54:	429c      	cmp	r4, r3
 8020f56:	bf08      	it	eq
 8020f58:	68ec      	ldreq	r4, [r5, #12]
 8020f5a:	e7da      	b.n	8020f12 <_fflush_r+0x22>
 8020f5c:	080353e4 	.word	0x080353e4
 8020f60:	08035404 	.word	0x08035404
 8020f64:	080353c4 	.word	0x080353c4

08020f68 <_localeconv_r>:
 8020f68:	4800      	ldr	r0, [pc, #0]	; (8020f6c <_localeconv_r+0x4>)
 8020f6a:	4770      	bx	lr
 8020f6c:	20000254 	.word	0x20000254

08020f70 <_lseek_r>:
 8020f70:	b538      	push	{r3, r4, r5, lr}
 8020f72:	4d07      	ldr	r5, [pc, #28]	; (8020f90 <_lseek_r+0x20>)
 8020f74:	4604      	mov	r4, r0
 8020f76:	4608      	mov	r0, r1
 8020f78:	4611      	mov	r1, r2
 8020f7a:	2200      	movs	r2, #0
 8020f7c:	602a      	str	r2, [r5, #0]
 8020f7e:	461a      	mov	r2, r3
 8020f80:	f7ed ff48 	bl	800ee14 <_lseek>
 8020f84:	1c43      	adds	r3, r0, #1
 8020f86:	d102      	bne.n	8020f8e <_lseek_r+0x1e>
 8020f88:	682b      	ldr	r3, [r5, #0]
 8020f8a:	b103      	cbz	r3, 8020f8e <_lseek_r+0x1e>
 8020f8c:	6023      	str	r3, [r4, #0]
 8020f8e:	bd38      	pop	{r3, r4, r5, pc}
 8020f90:	2000eb68 	.word	0x2000eb68

08020f94 <__malloc_lock>:
 8020f94:	4801      	ldr	r0, [pc, #4]	; (8020f9c <__malloc_lock+0x8>)
 8020f96:	f7ee b861 	b.w	800f05c <__retarget_lock_acquire_recursive>
 8020f9a:	bf00      	nop
 8020f9c:	2000ccac 	.word	0x2000ccac

08020fa0 <__malloc_unlock>:
 8020fa0:	4801      	ldr	r0, [pc, #4]	; (8020fa8 <__malloc_unlock+0x8>)
 8020fa2:	f7ee b86f 	b.w	800f084 <__retarget_lock_release_recursive>
 8020fa6:	bf00      	nop
 8020fa8:	2000ccac 	.word	0x2000ccac

08020fac <_Balloc>:
 8020fac:	b570      	push	{r4, r5, r6, lr}
 8020fae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020fb0:	4604      	mov	r4, r0
 8020fb2:	460d      	mov	r5, r1
 8020fb4:	b976      	cbnz	r6, 8020fd4 <_Balloc+0x28>
 8020fb6:	2010      	movs	r0, #16
 8020fb8:	f7fe fa08 	bl	801f3cc <malloc>
 8020fbc:	4602      	mov	r2, r0
 8020fbe:	6260      	str	r0, [r4, #36]	; 0x24
 8020fc0:	b920      	cbnz	r0, 8020fcc <_Balloc+0x20>
 8020fc2:	4b18      	ldr	r3, [pc, #96]	; (8021024 <_Balloc+0x78>)
 8020fc4:	4818      	ldr	r0, [pc, #96]	; (8021028 <_Balloc+0x7c>)
 8020fc6:	2166      	movs	r1, #102	; 0x66
 8020fc8:	f000 fd26 	bl	8021a18 <__assert_func>
 8020fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020fd0:	6006      	str	r6, [r0, #0]
 8020fd2:	60c6      	str	r6, [r0, #12]
 8020fd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020fd6:	68f3      	ldr	r3, [r6, #12]
 8020fd8:	b183      	cbz	r3, 8020ffc <_Balloc+0x50>
 8020fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020fdc:	68db      	ldr	r3, [r3, #12]
 8020fde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020fe2:	b9b8      	cbnz	r0, 8021014 <_Balloc+0x68>
 8020fe4:	2101      	movs	r1, #1
 8020fe6:	fa01 f605 	lsl.w	r6, r1, r5
 8020fea:	1d72      	adds	r2, r6, #5
 8020fec:	0092      	lsls	r2, r2, #2
 8020fee:	4620      	mov	r0, r4
 8020ff0:	f000 fb60 	bl	80216b4 <_calloc_r>
 8020ff4:	b160      	cbz	r0, 8021010 <_Balloc+0x64>
 8020ff6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020ffa:	e00e      	b.n	802101a <_Balloc+0x6e>
 8020ffc:	2221      	movs	r2, #33	; 0x21
 8020ffe:	2104      	movs	r1, #4
 8021000:	4620      	mov	r0, r4
 8021002:	f000 fb57 	bl	80216b4 <_calloc_r>
 8021006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021008:	60f0      	str	r0, [r6, #12]
 802100a:	68db      	ldr	r3, [r3, #12]
 802100c:	2b00      	cmp	r3, #0
 802100e:	d1e4      	bne.n	8020fda <_Balloc+0x2e>
 8021010:	2000      	movs	r0, #0
 8021012:	bd70      	pop	{r4, r5, r6, pc}
 8021014:	6802      	ldr	r2, [r0, #0]
 8021016:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802101a:	2300      	movs	r3, #0
 802101c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021020:	e7f7      	b.n	8021012 <_Balloc+0x66>
 8021022:	bf00      	nop
 8021024:	08035469 	.word	0x08035469
 8021028:	080354ec 	.word	0x080354ec

0802102c <_Bfree>:
 802102c:	b570      	push	{r4, r5, r6, lr}
 802102e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021030:	4605      	mov	r5, r0
 8021032:	460c      	mov	r4, r1
 8021034:	b976      	cbnz	r6, 8021054 <_Bfree+0x28>
 8021036:	2010      	movs	r0, #16
 8021038:	f7fe f9c8 	bl	801f3cc <malloc>
 802103c:	4602      	mov	r2, r0
 802103e:	6268      	str	r0, [r5, #36]	; 0x24
 8021040:	b920      	cbnz	r0, 802104c <_Bfree+0x20>
 8021042:	4b09      	ldr	r3, [pc, #36]	; (8021068 <_Bfree+0x3c>)
 8021044:	4809      	ldr	r0, [pc, #36]	; (802106c <_Bfree+0x40>)
 8021046:	218a      	movs	r1, #138	; 0x8a
 8021048:	f000 fce6 	bl	8021a18 <__assert_func>
 802104c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021050:	6006      	str	r6, [r0, #0]
 8021052:	60c6      	str	r6, [r0, #12]
 8021054:	b13c      	cbz	r4, 8021066 <_Bfree+0x3a>
 8021056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8021058:	6862      	ldr	r2, [r4, #4]
 802105a:	68db      	ldr	r3, [r3, #12]
 802105c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021060:	6021      	str	r1, [r4, #0]
 8021062:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021066:	bd70      	pop	{r4, r5, r6, pc}
 8021068:	08035469 	.word	0x08035469
 802106c:	080354ec 	.word	0x080354ec

08021070 <__multadd>:
 8021070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021074:	690d      	ldr	r5, [r1, #16]
 8021076:	4607      	mov	r7, r0
 8021078:	460c      	mov	r4, r1
 802107a:	461e      	mov	r6, r3
 802107c:	f101 0c14 	add.w	ip, r1, #20
 8021080:	2000      	movs	r0, #0
 8021082:	f8dc 3000 	ldr.w	r3, [ip]
 8021086:	b299      	uxth	r1, r3
 8021088:	fb02 6101 	mla	r1, r2, r1, r6
 802108c:	0c1e      	lsrs	r6, r3, #16
 802108e:	0c0b      	lsrs	r3, r1, #16
 8021090:	fb02 3306 	mla	r3, r2, r6, r3
 8021094:	b289      	uxth	r1, r1
 8021096:	3001      	adds	r0, #1
 8021098:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802109c:	4285      	cmp	r5, r0
 802109e:	f84c 1b04 	str.w	r1, [ip], #4
 80210a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80210a6:	dcec      	bgt.n	8021082 <__multadd+0x12>
 80210a8:	b30e      	cbz	r6, 80210ee <__multadd+0x7e>
 80210aa:	68a3      	ldr	r3, [r4, #8]
 80210ac:	42ab      	cmp	r3, r5
 80210ae:	dc19      	bgt.n	80210e4 <__multadd+0x74>
 80210b0:	6861      	ldr	r1, [r4, #4]
 80210b2:	4638      	mov	r0, r7
 80210b4:	3101      	adds	r1, #1
 80210b6:	f7ff ff79 	bl	8020fac <_Balloc>
 80210ba:	4680      	mov	r8, r0
 80210bc:	b928      	cbnz	r0, 80210ca <__multadd+0x5a>
 80210be:	4602      	mov	r2, r0
 80210c0:	4b0c      	ldr	r3, [pc, #48]	; (80210f4 <__multadd+0x84>)
 80210c2:	480d      	ldr	r0, [pc, #52]	; (80210f8 <__multadd+0x88>)
 80210c4:	21b5      	movs	r1, #181	; 0xb5
 80210c6:	f000 fca7 	bl	8021a18 <__assert_func>
 80210ca:	6922      	ldr	r2, [r4, #16]
 80210cc:	3202      	adds	r2, #2
 80210ce:	f104 010c 	add.w	r1, r4, #12
 80210d2:	0092      	lsls	r2, r2, #2
 80210d4:	300c      	adds	r0, #12
 80210d6:	f7fe f989 	bl	801f3ec <memcpy>
 80210da:	4621      	mov	r1, r4
 80210dc:	4638      	mov	r0, r7
 80210de:	f7ff ffa5 	bl	802102c <_Bfree>
 80210e2:	4644      	mov	r4, r8
 80210e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80210e8:	3501      	adds	r5, #1
 80210ea:	615e      	str	r6, [r3, #20]
 80210ec:	6125      	str	r5, [r4, #16]
 80210ee:	4620      	mov	r0, r4
 80210f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210f4:	080354db 	.word	0x080354db
 80210f8:	080354ec 	.word	0x080354ec

080210fc <__hi0bits>:
 80210fc:	0c03      	lsrs	r3, r0, #16
 80210fe:	041b      	lsls	r3, r3, #16
 8021100:	b9d3      	cbnz	r3, 8021138 <__hi0bits+0x3c>
 8021102:	0400      	lsls	r0, r0, #16
 8021104:	2310      	movs	r3, #16
 8021106:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802110a:	bf04      	itt	eq
 802110c:	0200      	lsleq	r0, r0, #8
 802110e:	3308      	addeq	r3, #8
 8021110:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021114:	bf04      	itt	eq
 8021116:	0100      	lsleq	r0, r0, #4
 8021118:	3304      	addeq	r3, #4
 802111a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802111e:	bf04      	itt	eq
 8021120:	0080      	lsleq	r0, r0, #2
 8021122:	3302      	addeq	r3, #2
 8021124:	2800      	cmp	r0, #0
 8021126:	db05      	blt.n	8021134 <__hi0bits+0x38>
 8021128:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802112c:	f103 0301 	add.w	r3, r3, #1
 8021130:	bf08      	it	eq
 8021132:	2320      	moveq	r3, #32
 8021134:	4618      	mov	r0, r3
 8021136:	4770      	bx	lr
 8021138:	2300      	movs	r3, #0
 802113a:	e7e4      	b.n	8021106 <__hi0bits+0xa>

0802113c <__lo0bits>:
 802113c:	6803      	ldr	r3, [r0, #0]
 802113e:	f013 0207 	ands.w	r2, r3, #7
 8021142:	4601      	mov	r1, r0
 8021144:	d00b      	beq.n	802115e <__lo0bits+0x22>
 8021146:	07da      	lsls	r2, r3, #31
 8021148:	d423      	bmi.n	8021192 <__lo0bits+0x56>
 802114a:	0798      	lsls	r0, r3, #30
 802114c:	bf49      	itett	mi
 802114e:	085b      	lsrmi	r3, r3, #1
 8021150:	089b      	lsrpl	r3, r3, #2
 8021152:	2001      	movmi	r0, #1
 8021154:	600b      	strmi	r3, [r1, #0]
 8021156:	bf5c      	itt	pl
 8021158:	600b      	strpl	r3, [r1, #0]
 802115a:	2002      	movpl	r0, #2
 802115c:	4770      	bx	lr
 802115e:	b298      	uxth	r0, r3
 8021160:	b9a8      	cbnz	r0, 802118e <__lo0bits+0x52>
 8021162:	0c1b      	lsrs	r3, r3, #16
 8021164:	2010      	movs	r0, #16
 8021166:	b2da      	uxtb	r2, r3
 8021168:	b90a      	cbnz	r2, 802116e <__lo0bits+0x32>
 802116a:	3008      	adds	r0, #8
 802116c:	0a1b      	lsrs	r3, r3, #8
 802116e:	071a      	lsls	r2, r3, #28
 8021170:	bf04      	itt	eq
 8021172:	091b      	lsreq	r3, r3, #4
 8021174:	3004      	addeq	r0, #4
 8021176:	079a      	lsls	r2, r3, #30
 8021178:	bf04      	itt	eq
 802117a:	089b      	lsreq	r3, r3, #2
 802117c:	3002      	addeq	r0, #2
 802117e:	07da      	lsls	r2, r3, #31
 8021180:	d403      	bmi.n	802118a <__lo0bits+0x4e>
 8021182:	085b      	lsrs	r3, r3, #1
 8021184:	f100 0001 	add.w	r0, r0, #1
 8021188:	d005      	beq.n	8021196 <__lo0bits+0x5a>
 802118a:	600b      	str	r3, [r1, #0]
 802118c:	4770      	bx	lr
 802118e:	4610      	mov	r0, r2
 8021190:	e7e9      	b.n	8021166 <__lo0bits+0x2a>
 8021192:	2000      	movs	r0, #0
 8021194:	4770      	bx	lr
 8021196:	2020      	movs	r0, #32
 8021198:	4770      	bx	lr
	...

0802119c <__i2b>:
 802119c:	b510      	push	{r4, lr}
 802119e:	460c      	mov	r4, r1
 80211a0:	2101      	movs	r1, #1
 80211a2:	f7ff ff03 	bl	8020fac <_Balloc>
 80211a6:	4602      	mov	r2, r0
 80211a8:	b928      	cbnz	r0, 80211b6 <__i2b+0x1a>
 80211aa:	4b05      	ldr	r3, [pc, #20]	; (80211c0 <__i2b+0x24>)
 80211ac:	4805      	ldr	r0, [pc, #20]	; (80211c4 <__i2b+0x28>)
 80211ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80211b2:	f000 fc31 	bl	8021a18 <__assert_func>
 80211b6:	2301      	movs	r3, #1
 80211b8:	6144      	str	r4, [r0, #20]
 80211ba:	6103      	str	r3, [r0, #16]
 80211bc:	bd10      	pop	{r4, pc}
 80211be:	bf00      	nop
 80211c0:	080354db 	.word	0x080354db
 80211c4:	080354ec 	.word	0x080354ec

080211c8 <__multiply>:
 80211c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211cc:	4691      	mov	r9, r2
 80211ce:	690a      	ldr	r2, [r1, #16]
 80211d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80211d4:	429a      	cmp	r2, r3
 80211d6:	bfb8      	it	lt
 80211d8:	460b      	movlt	r3, r1
 80211da:	460c      	mov	r4, r1
 80211dc:	bfbc      	itt	lt
 80211de:	464c      	movlt	r4, r9
 80211e0:	4699      	movlt	r9, r3
 80211e2:	6927      	ldr	r7, [r4, #16]
 80211e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80211e8:	68a3      	ldr	r3, [r4, #8]
 80211ea:	6861      	ldr	r1, [r4, #4]
 80211ec:	eb07 060a 	add.w	r6, r7, sl
 80211f0:	42b3      	cmp	r3, r6
 80211f2:	b085      	sub	sp, #20
 80211f4:	bfb8      	it	lt
 80211f6:	3101      	addlt	r1, #1
 80211f8:	f7ff fed8 	bl	8020fac <_Balloc>
 80211fc:	b930      	cbnz	r0, 802120c <__multiply+0x44>
 80211fe:	4602      	mov	r2, r0
 8021200:	4b44      	ldr	r3, [pc, #272]	; (8021314 <__multiply+0x14c>)
 8021202:	4845      	ldr	r0, [pc, #276]	; (8021318 <__multiply+0x150>)
 8021204:	f240 115d 	movw	r1, #349	; 0x15d
 8021208:	f000 fc06 	bl	8021a18 <__assert_func>
 802120c:	f100 0514 	add.w	r5, r0, #20
 8021210:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021214:	462b      	mov	r3, r5
 8021216:	2200      	movs	r2, #0
 8021218:	4543      	cmp	r3, r8
 802121a:	d321      	bcc.n	8021260 <__multiply+0x98>
 802121c:	f104 0314 	add.w	r3, r4, #20
 8021220:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021224:	f109 0314 	add.w	r3, r9, #20
 8021228:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802122c:	9202      	str	r2, [sp, #8]
 802122e:	1b3a      	subs	r2, r7, r4
 8021230:	3a15      	subs	r2, #21
 8021232:	f022 0203 	bic.w	r2, r2, #3
 8021236:	3204      	adds	r2, #4
 8021238:	f104 0115 	add.w	r1, r4, #21
 802123c:	428f      	cmp	r7, r1
 802123e:	bf38      	it	cc
 8021240:	2204      	movcc	r2, #4
 8021242:	9201      	str	r2, [sp, #4]
 8021244:	9a02      	ldr	r2, [sp, #8]
 8021246:	9303      	str	r3, [sp, #12]
 8021248:	429a      	cmp	r2, r3
 802124a:	d80c      	bhi.n	8021266 <__multiply+0x9e>
 802124c:	2e00      	cmp	r6, #0
 802124e:	dd03      	ble.n	8021258 <__multiply+0x90>
 8021250:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021254:	2b00      	cmp	r3, #0
 8021256:	d05a      	beq.n	802130e <__multiply+0x146>
 8021258:	6106      	str	r6, [r0, #16]
 802125a:	b005      	add	sp, #20
 802125c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021260:	f843 2b04 	str.w	r2, [r3], #4
 8021264:	e7d8      	b.n	8021218 <__multiply+0x50>
 8021266:	f8b3 a000 	ldrh.w	sl, [r3]
 802126a:	f1ba 0f00 	cmp.w	sl, #0
 802126e:	d024      	beq.n	80212ba <__multiply+0xf2>
 8021270:	f104 0e14 	add.w	lr, r4, #20
 8021274:	46a9      	mov	r9, r5
 8021276:	f04f 0c00 	mov.w	ip, #0
 802127a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802127e:	f8d9 1000 	ldr.w	r1, [r9]
 8021282:	fa1f fb82 	uxth.w	fp, r2
 8021286:	b289      	uxth	r1, r1
 8021288:	fb0a 110b 	mla	r1, sl, fp, r1
 802128c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021290:	f8d9 2000 	ldr.w	r2, [r9]
 8021294:	4461      	add	r1, ip
 8021296:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802129a:	fb0a c20b 	mla	r2, sl, fp, ip
 802129e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80212a2:	b289      	uxth	r1, r1
 80212a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80212a8:	4577      	cmp	r7, lr
 80212aa:	f849 1b04 	str.w	r1, [r9], #4
 80212ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80212b2:	d8e2      	bhi.n	802127a <__multiply+0xb2>
 80212b4:	9a01      	ldr	r2, [sp, #4]
 80212b6:	f845 c002 	str.w	ip, [r5, r2]
 80212ba:	9a03      	ldr	r2, [sp, #12]
 80212bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80212c0:	3304      	adds	r3, #4
 80212c2:	f1b9 0f00 	cmp.w	r9, #0
 80212c6:	d020      	beq.n	802130a <__multiply+0x142>
 80212c8:	6829      	ldr	r1, [r5, #0]
 80212ca:	f104 0c14 	add.w	ip, r4, #20
 80212ce:	46ae      	mov	lr, r5
 80212d0:	f04f 0a00 	mov.w	sl, #0
 80212d4:	f8bc b000 	ldrh.w	fp, [ip]
 80212d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80212dc:	fb09 220b 	mla	r2, r9, fp, r2
 80212e0:	4492      	add	sl, r2
 80212e2:	b289      	uxth	r1, r1
 80212e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80212e8:	f84e 1b04 	str.w	r1, [lr], #4
 80212ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80212f0:	f8be 1000 	ldrh.w	r1, [lr]
 80212f4:	0c12      	lsrs	r2, r2, #16
 80212f6:	fb09 1102 	mla	r1, r9, r2, r1
 80212fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80212fe:	4567      	cmp	r7, ip
 8021300:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021304:	d8e6      	bhi.n	80212d4 <__multiply+0x10c>
 8021306:	9a01      	ldr	r2, [sp, #4]
 8021308:	50a9      	str	r1, [r5, r2]
 802130a:	3504      	adds	r5, #4
 802130c:	e79a      	b.n	8021244 <__multiply+0x7c>
 802130e:	3e01      	subs	r6, #1
 8021310:	e79c      	b.n	802124c <__multiply+0x84>
 8021312:	bf00      	nop
 8021314:	080354db 	.word	0x080354db
 8021318:	080354ec 	.word	0x080354ec

0802131c <__pow5mult>:
 802131c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021320:	4615      	mov	r5, r2
 8021322:	f012 0203 	ands.w	r2, r2, #3
 8021326:	4606      	mov	r6, r0
 8021328:	460f      	mov	r7, r1
 802132a:	d007      	beq.n	802133c <__pow5mult+0x20>
 802132c:	4c25      	ldr	r4, [pc, #148]	; (80213c4 <__pow5mult+0xa8>)
 802132e:	3a01      	subs	r2, #1
 8021330:	2300      	movs	r3, #0
 8021332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021336:	f7ff fe9b 	bl	8021070 <__multadd>
 802133a:	4607      	mov	r7, r0
 802133c:	10ad      	asrs	r5, r5, #2
 802133e:	d03d      	beq.n	80213bc <__pow5mult+0xa0>
 8021340:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021342:	b97c      	cbnz	r4, 8021364 <__pow5mult+0x48>
 8021344:	2010      	movs	r0, #16
 8021346:	f7fe f841 	bl	801f3cc <malloc>
 802134a:	4602      	mov	r2, r0
 802134c:	6270      	str	r0, [r6, #36]	; 0x24
 802134e:	b928      	cbnz	r0, 802135c <__pow5mult+0x40>
 8021350:	4b1d      	ldr	r3, [pc, #116]	; (80213c8 <__pow5mult+0xac>)
 8021352:	481e      	ldr	r0, [pc, #120]	; (80213cc <__pow5mult+0xb0>)
 8021354:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021358:	f000 fb5e 	bl	8021a18 <__assert_func>
 802135c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021360:	6004      	str	r4, [r0, #0]
 8021362:	60c4      	str	r4, [r0, #12]
 8021364:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802136c:	b94c      	cbnz	r4, 8021382 <__pow5mult+0x66>
 802136e:	f240 2171 	movw	r1, #625	; 0x271
 8021372:	4630      	mov	r0, r6
 8021374:	f7ff ff12 	bl	802119c <__i2b>
 8021378:	2300      	movs	r3, #0
 802137a:	f8c8 0008 	str.w	r0, [r8, #8]
 802137e:	4604      	mov	r4, r0
 8021380:	6003      	str	r3, [r0, #0]
 8021382:	f04f 0900 	mov.w	r9, #0
 8021386:	07eb      	lsls	r3, r5, #31
 8021388:	d50a      	bpl.n	80213a0 <__pow5mult+0x84>
 802138a:	4639      	mov	r1, r7
 802138c:	4622      	mov	r2, r4
 802138e:	4630      	mov	r0, r6
 8021390:	f7ff ff1a 	bl	80211c8 <__multiply>
 8021394:	4639      	mov	r1, r7
 8021396:	4680      	mov	r8, r0
 8021398:	4630      	mov	r0, r6
 802139a:	f7ff fe47 	bl	802102c <_Bfree>
 802139e:	4647      	mov	r7, r8
 80213a0:	106d      	asrs	r5, r5, #1
 80213a2:	d00b      	beq.n	80213bc <__pow5mult+0xa0>
 80213a4:	6820      	ldr	r0, [r4, #0]
 80213a6:	b938      	cbnz	r0, 80213b8 <__pow5mult+0x9c>
 80213a8:	4622      	mov	r2, r4
 80213aa:	4621      	mov	r1, r4
 80213ac:	4630      	mov	r0, r6
 80213ae:	f7ff ff0b 	bl	80211c8 <__multiply>
 80213b2:	6020      	str	r0, [r4, #0]
 80213b4:	f8c0 9000 	str.w	r9, [r0]
 80213b8:	4604      	mov	r4, r0
 80213ba:	e7e4      	b.n	8021386 <__pow5mult+0x6a>
 80213bc:	4638      	mov	r0, r7
 80213be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80213c2:	bf00      	nop
 80213c4:	08035638 	.word	0x08035638
 80213c8:	08035469 	.word	0x08035469
 80213cc:	080354ec 	.word	0x080354ec

080213d0 <__lshift>:
 80213d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80213d4:	460c      	mov	r4, r1
 80213d6:	6849      	ldr	r1, [r1, #4]
 80213d8:	6923      	ldr	r3, [r4, #16]
 80213da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80213de:	68a3      	ldr	r3, [r4, #8]
 80213e0:	4607      	mov	r7, r0
 80213e2:	4691      	mov	r9, r2
 80213e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80213e8:	f108 0601 	add.w	r6, r8, #1
 80213ec:	42b3      	cmp	r3, r6
 80213ee:	db0b      	blt.n	8021408 <__lshift+0x38>
 80213f0:	4638      	mov	r0, r7
 80213f2:	f7ff fddb 	bl	8020fac <_Balloc>
 80213f6:	4605      	mov	r5, r0
 80213f8:	b948      	cbnz	r0, 802140e <__lshift+0x3e>
 80213fa:	4602      	mov	r2, r0
 80213fc:	4b2a      	ldr	r3, [pc, #168]	; (80214a8 <__lshift+0xd8>)
 80213fe:	482b      	ldr	r0, [pc, #172]	; (80214ac <__lshift+0xdc>)
 8021400:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021404:	f000 fb08 	bl	8021a18 <__assert_func>
 8021408:	3101      	adds	r1, #1
 802140a:	005b      	lsls	r3, r3, #1
 802140c:	e7ee      	b.n	80213ec <__lshift+0x1c>
 802140e:	2300      	movs	r3, #0
 8021410:	f100 0114 	add.w	r1, r0, #20
 8021414:	f100 0210 	add.w	r2, r0, #16
 8021418:	4618      	mov	r0, r3
 802141a:	4553      	cmp	r3, sl
 802141c:	db37      	blt.n	802148e <__lshift+0xbe>
 802141e:	6920      	ldr	r0, [r4, #16]
 8021420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021424:	f104 0314 	add.w	r3, r4, #20
 8021428:	f019 091f 	ands.w	r9, r9, #31
 802142c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021430:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8021434:	d02f      	beq.n	8021496 <__lshift+0xc6>
 8021436:	f1c9 0e20 	rsb	lr, r9, #32
 802143a:	468a      	mov	sl, r1
 802143c:	f04f 0c00 	mov.w	ip, #0
 8021440:	681a      	ldr	r2, [r3, #0]
 8021442:	fa02 f209 	lsl.w	r2, r2, r9
 8021446:	ea42 020c 	orr.w	r2, r2, ip
 802144a:	f84a 2b04 	str.w	r2, [sl], #4
 802144e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021452:	4298      	cmp	r0, r3
 8021454:	fa22 fc0e 	lsr.w	ip, r2, lr
 8021458:	d8f2      	bhi.n	8021440 <__lshift+0x70>
 802145a:	1b03      	subs	r3, r0, r4
 802145c:	3b15      	subs	r3, #21
 802145e:	f023 0303 	bic.w	r3, r3, #3
 8021462:	3304      	adds	r3, #4
 8021464:	f104 0215 	add.w	r2, r4, #21
 8021468:	4290      	cmp	r0, r2
 802146a:	bf38      	it	cc
 802146c:	2304      	movcc	r3, #4
 802146e:	f841 c003 	str.w	ip, [r1, r3]
 8021472:	f1bc 0f00 	cmp.w	ip, #0
 8021476:	d001      	beq.n	802147c <__lshift+0xac>
 8021478:	f108 0602 	add.w	r6, r8, #2
 802147c:	3e01      	subs	r6, #1
 802147e:	4638      	mov	r0, r7
 8021480:	612e      	str	r6, [r5, #16]
 8021482:	4621      	mov	r1, r4
 8021484:	f7ff fdd2 	bl	802102c <_Bfree>
 8021488:	4628      	mov	r0, r5
 802148a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802148e:	f842 0f04 	str.w	r0, [r2, #4]!
 8021492:	3301      	adds	r3, #1
 8021494:	e7c1      	b.n	802141a <__lshift+0x4a>
 8021496:	3904      	subs	r1, #4
 8021498:	f853 2b04 	ldr.w	r2, [r3], #4
 802149c:	f841 2f04 	str.w	r2, [r1, #4]!
 80214a0:	4298      	cmp	r0, r3
 80214a2:	d8f9      	bhi.n	8021498 <__lshift+0xc8>
 80214a4:	e7ea      	b.n	802147c <__lshift+0xac>
 80214a6:	bf00      	nop
 80214a8:	080354db 	.word	0x080354db
 80214ac:	080354ec 	.word	0x080354ec

080214b0 <__mcmp>:
 80214b0:	b530      	push	{r4, r5, lr}
 80214b2:	6902      	ldr	r2, [r0, #16]
 80214b4:	690c      	ldr	r4, [r1, #16]
 80214b6:	1b12      	subs	r2, r2, r4
 80214b8:	d10e      	bne.n	80214d8 <__mcmp+0x28>
 80214ba:	f100 0314 	add.w	r3, r0, #20
 80214be:	3114      	adds	r1, #20
 80214c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80214c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80214c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80214cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80214d0:	42a5      	cmp	r5, r4
 80214d2:	d003      	beq.n	80214dc <__mcmp+0x2c>
 80214d4:	d305      	bcc.n	80214e2 <__mcmp+0x32>
 80214d6:	2201      	movs	r2, #1
 80214d8:	4610      	mov	r0, r2
 80214da:	bd30      	pop	{r4, r5, pc}
 80214dc:	4283      	cmp	r3, r0
 80214de:	d3f3      	bcc.n	80214c8 <__mcmp+0x18>
 80214e0:	e7fa      	b.n	80214d8 <__mcmp+0x28>
 80214e2:	f04f 32ff 	mov.w	r2, #4294967295
 80214e6:	e7f7      	b.n	80214d8 <__mcmp+0x28>

080214e8 <__mdiff>:
 80214e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214ec:	460c      	mov	r4, r1
 80214ee:	4606      	mov	r6, r0
 80214f0:	4611      	mov	r1, r2
 80214f2:	4620      	mov	r0, r4
 80214f4:	4690      	mov	r8, r2
 80214f6:	f7ff ffdb 	bl	80214b0 <__mcmp>
 80214fa:	1e05      	subs	r5, r0, #0
 80214fc:	d110      	bne.n	8021520 <__mdiff+0x38>
 80214fe:	4629      	mov	r1, r5
 8021500:	4630      	mov	r0, r6
 8021502:	f7ff fd53 	bl	8020fac <_Balloc>
 8021506:	b930      	cbnz	r0, 8021516 <__mdiff+0x2e>
 8021508:	4b3a      	ldr	r3, [pc, #232]	; (80215f4 <__mdiff+0x10c>)
 802150a:	4602      	mov	r2, r0
 802150c:	f240 2132 	movw	r1, #562	; 0x232
 8021510:	4839      	ldr	r0, [pc, #228]	; (80215f8 <__mdiff+0x110>)
 8021512:	f000 fa81 	bl	8021a18 <__assert_func>
 8021516:	2301      	movs	r3, #1
 8021518:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802151c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021520:	bfa4      	itt	ge
 8021522:	4643      	movge	r3, r8
 8021524:	46a0      	movge	r8, r4
 8021526:	4630      	mov	r0, r6
 8021528:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802152c:	bfa6      	itte	ge
 802152e:	461c      	movge	r4, r3
 8021530:	2500      	movge	r5, #0
 8021532:	2501      	movlt	r5, #1
 8021534:	f7ff fd3a 	bl	8020fac <_Balloc>
 8021538:	b920      	cbnz	r0, 8021544 <__mdiff+0x5c>
 802153a:	4b2e      	ldr	r3, [pc, #184]	; (80215f4 <__mdiff+0x10c>)
 802153c:	4602      	mov	r2, r0
 802153e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021542:	e7e5      	b.n	8021510 <__mdiff+0x28>
 8021544:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021548:	6926      	ldr	r6, [r4, #16]
 802154a:	60c5      	str	r5, [r0, #12]
 802154c:	f104 0914 	add.w	r9, r4, #20
 8021550:	f108 0514 	add.w	r5, r8, #20
 8021554:	f100 0e14 	add.w	lr, r0, #20
 8021558:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802155c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021560:	f108 0210 	add.w	r2, r8, #16
 8021564:	46f2      	mov	sl, lr
 8021566:	2100      	movs	r1, #0
 8021568:	f859 3b04 	ldr.w	r3, [r9], #4
 802156c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021570:	fa1f f883 	uxth.w	r8, r3
 8021574:	fa11 f18b 	uxtah	r1, r1, fp
 8021578:	0c1b      	lsrs	r3, r3, #16
 802157a:	eba1 0808 	sub.w	r8, r1, r8
 802157e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021582:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021586:	fa1f f888 	uxth.w	r8, r8
 802158a:	1419      	asrs	r1, r3, #16
 802158c:	454e      	cmp	r6, r9
 802158e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021592:	f84a 3b04 	str.w	r3, [sl], #4
 8021596:	d8e7      	bhi.n	8021568 <__mdiff+0x80>
 8021598:	1b33      	subs	r3, r6, r4
 802159a:	3b15      	subs	r3, #21
 802159c:	f023 0303 	bic.w	r3, r3, #3
 80215a0:	3304      	adds	r3, #4
 80215a2:	3415      	adds	r4, #21
 80215a4:	42a6      	cmp	r6, r4
 80215a6:	bf38      	it	cc
 80215a8:	2304      	movcc	r3, #4
 80215aa:	441d      	add	r5, r3
 80215ac:	4473      	add	r3, lr
 80215ae:	469e      	mov	lr, r3
 80215b0:	462e      	mov	r6, r5
 80215b2:	4566      	cmp	r6, ip
 80215b4:	d30e      	bcc.n	80215d4 <__mdiff+0xec>
 80215b6:	f10c 0203 	add.w	r2, ip, #3
 80215ba:	1b52      	subs	r2, r2, r5
 80215bc:	f022 0203 	bic.w	r2, r2, #3
 80215c0:	3d03      	subs	r5, #3
 80215c2:	45ac      	cmp	ip, r5
 80215c4:	bf38      	it	cc
 80215c6:	2200      	movcc	r2, #0
 80215c8:	441a      	add	r2, r3
 80215ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80215ce:	b17b      	cbz	r3, 80215f0 <__mdiff+0x108>
 80215d0:	6107      	str	r7, [r0, #16]
 80215d2:	e7a3      	b.n	802151c <__mdiff+0x34>
 80215d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80215d8:	fa11 f288 	uxtah	r2, r1, r8
 80215dc:	1414      	asrs	r4, r2, #16
 80215de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80215e2:	b292      	uxth	r2, r2
 80215e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80215e8:	f84e 2b04 	str.w	r2, [lr], #4
 80215ec:	1421      	asrs	r1, r4, #16
 80215ee:	e7e0      	b.n	80215b2 <__mdiff+0xca>
 80215f0:	3f01      	subs	r7, #1
 80215f2:	e7ea      	b.n	80215ca <__mdiff+0xe2>
 80215f4:	080354db 	.word	0x080354db
 80215f8:	080354ec 	.word	0x080354ec

080215fc <__d2b>:
 80215fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021600:	4689      	mov	r9, r1
 8021602:	2101      	movs	r1, #1
 8021604:	ec57 6b10 	vmov	r6, r7, d0
 8021608:	4690      	mov	r8, r2
 802160a:	f7ff fccf 	bl	8020fac <_Balloc>
 802160e:	4604      	mov	r4, r0
 8021610:	b930      	cbnz	r0, 8021620 <__d2b+0x24>
 8021612:	4602      	mov	r2, r0
 8021614:	4b25      	ldr	r3, [pc, #148]	; (80216ac <__d2b+0xb0>)
 8021616:	4826      	ldr	r0, [pc, #152]	; (80216b0 <__d2b+0xb4>)
 8021618:	f240 310a 	movw	r1, #778	; 0x30a
 802161c:	f000 f9fc 	bl	8021a18 <__assert_func>
 8021620:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021624:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021628:	bb35      	cbnz	r5, 8021678 <__d2b+0x7c>
 802162a:	2e00      	cmp	r6, #0
 802162c:	9301      	str	r3, [sp, #4]
 802162e:	d028      	beq.n	8021682 <__d2b+0x86>
 8021630:	4668      	mov	r0, sp
 8021632:	9600      	str	r6, [sp, #0]
 8021634:	f7ff fd82 	bl	802113c <__lo0bits>
 8021638:	9900      	ldr	r1, [sp, #0]
 802163a:	b300      	cbz	r0, 802167e <__d2b+0x82>
 802163c:	9a01      	ldr	r2, [sp, #4]
 802163e:	f1c0 0320 	rsb	r3, r0, #32
 8021642:	fa02 f303 	lsl.w	r3, r2, r3
 8021646:	430b      	orrs	r3, r1
 8021648:	40c2      	lsrs	r2, r0
 802164a:	6163      	str	r3, [r4, #20]
 802164c:	9201      	str	r2, [sp, #4]
 802164e:	9b01      	ldr	r3, [sp, #4]
 8021650:	61a3      	str	r3, [r4, #24]
 8021652:	2b00      	cmp	r3, #0
 8021654:	bf14      	ite	ne
 8021656:	2202      	movne	r2, #2
 8021658:	2201      	moveq	r2, #1
 802165a:	6122      	str	r2, [r4, #16]
 802165c:	b1d5      	cbz	r5, 8021694 <__d2b+0x98>
 802165e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021662:	4405      	add	r5, r0
 8021664:	f8c9 5000 	str.w	r5, [r9]
 8021668:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802166c:	f8c8 0000 	str.w	r0, [r8]
 8021670:	4620      	mov	r0, r4
 8021672:	b003      	add	sp, #12
 8021674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802167c:	e7d5      	b.n	802162a <__d2b+0x2e>
 802167e:	6161      	str	r1, [r4, #20]
 8021680:	e7e5      	b.n	802164e <__d2b+0x52>
 8021682:	a801      	add	r0, sp, #4
 8021684:	f7ff fd5a 	bl	802113c <__lo0bits>
 8021688:	9b01      	ldr	r3, [sp, #4]
 802168a:	6163      	str	r3, [r4, #20]
 802168c:	2201      	movs	r2, #1
 802168e:	6122      	str	r2, [r4, #16]
 8021690:	3020      	adds	r0, #32
 8021692:	e7e3      	b.n	802165c <__d2b+0x60>
 8021694:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021698:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802169c:	f8c9 0000 	str.w	r0, [r9]
 80216a0:	6918      	ldr	r0, [r3, #16]
 80216a2:	f7ff fd2b 	bl	80210fc <__hi0bits>
 80216a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80216aa:	e7df      	b.n	802166c <__d2b+0x70>
 80216ac:	080354db 	.word	0x080354db
 80216b0:	080354ec 	.word	0x080354ec

080216b4 <_calloc_r>:
 80216b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80216b6:	fba1 2402 	umull	r2, r4, r1, r2
 80216ba:	b94c      	cbnz	r4, 80216d0 <_calloc_r+0x1c>
 80216bc:	4611      	mov	r1, r2
 80216be:	9201      	str	r2, [sp, #4]
 80216c0:	f7fd ff30 	bl	801f524 <_malloc_r>
 80216c4:	9a01      	ldr	r2, [sp, #4]
 80216c6:	4605      	mov	r5, r0
 80216c8:	b930      	cbnz	r0, 80216d8 <_calloc_r+0x24>
 80216ca:	4628      	mov	r0, r5
 80216cc:	b003      	add	sp, #12
 80216ce:	bd30      	pop	{r4, r5, pc}
 80216d0:	220c      	movs	r2, #12
 80216d2:	6002      	str	r2, [r0, #0]
 80216d4:	2500      	movs	r5, #0
 80216d6:	e7f8      	b.n	80216ca <_calloc_r+0x16>
 80216d8:	4621      	mov	r1, r4
 80216da:	f7fd feaf 	bl	801f43c <memset>
 80216de:	e7f4      	b.n	80216ca <_calloc_r+0x16>

080216e0 <_realloc_r>:
 80216e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216e4:	4680      	mov	r8, r0
 80216e6:	4614      	mov	r4, r2
 80216e8:	460e      	mov	r6, r1
 80216ea:	b921      	cbnz	r1, 80216f6 <_realloc_r+0x16>
 80216ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80216f0:	4611      	mov	r1, r2
 80216f2:	f7fd bf17 	b.w	801f524 <_malloc_r>
 80216f6:	b92a      	cbnz	r2, 8021704 <_realloc_r+0x24>
 80216f8:	f7fd fea8 	bl	801f44c <_free_r>
 80216fc:	4625      	mov	r5, r4
 80216fe:	4628      	mov	r0, r5
 8021700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021704:	f000 f9ca 	bl	8021a9c <_malloc_usable_size_r>
 8021708:	4284      	cmp	r4, r0
 802170a:	4607      	mov	r7, r0
 802170c:	d802      	bhi.n	8021714 <_realloc_r+0x34>
 802170e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021712:	d812      	bhi.n	802173a <_realloc_r+0x5a>
 8021714:	4621      	mov	r1, r4
 8021716:	4640      	mov	r0, r8
 8021718:	f7fd ff04 	bl	801f524 <_malloc_r>
 802171c:	4605      	mov	r5, r0
 802171e:	2800      	cmp	r0, #0
 8021720:	d0ed      	beq.n	80216fe <_realloc_r+0x1e>
 8021722:	42bc      	cmp	r4, r7
 8021724:	4622      	mov	r2, r4
 8021726:	4631      	mov	r1, r6
 8021728:	bf28      	it	cs
 802172a:	463a      	movcs	r2, r7
 802172c:	f7fd fe5e 	bl	801f3ec <memcpy>
 8021730:	4631      	mov	r1, r6
 8021732:	4640      	mov	r0, r8
 8021734:	f7fd fe8a 	bl	801f44c <_free_r>
 8021738:	e7e1      	b.n	80216fe <_realloc_r+0x1e>
 802173a:	4635      	mov	r5, r6
 802173c:	e7df      	b.n	80216fe <_realloc_r+0x1e>

0802173e <__ssputs_r>:
 802173e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021742:	688e      	ldr	r6, [r1, #8]
 8021744:	429e      	cmp	r6, r3
 8021746:	4682      	mov	sl, r0
 8021748:	460c      	mov	r4, r1
 802174a:	4690      	mov	r8, r2
 802174c:	461f      	mov	r7, r3
 802174e:	d838      	bhi.n	80217c2 <__ssputs_r+0x84>
 8021750:	898a      	ldrh	r2, [r1, #12]
 8021752:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021756:	d032      	beq.n	80217be <__ssputs_r+0x80>
 8021758:	6825      	ldr	r5, [r4, #0]
 802175a:	6909      	ldr	r1, [r1, #16]
 802175c:	eba5 0901 	sub.w	r9, r5, r1
 8021760:	6965      	ldr	r5, [r4, #20]
 8021762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021766:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802176a:	3301      	adds	r3, #1
 802176c:	444b      	add	r3, r9
 802176e:	106d      	asrs	r5, r5, #1
 8021770:	429d      	cmp	r5, r3
 8021772:	bf38      	it	cc
 8021774:	461d      	movcc	r5, r3
 8021776:	0553      	lsls	r3, r2, #21
 8021778:	d531      	bpl.n	80217de <__ssputs_r+0xa0>
 802177a:	4629      	mov	r1, r5
 802177c:	f7fd fed2 	bl	801f524 <_malloc_r>
 8021780:	4606      	mov	r6, r0
 8021782:	b950      	cbnz	r0, 802179a <__ssputs_r+0x5c>
 8021784:	230c      	movs	r3, #12
 8021786:	f8ca 3000 	str.w	r3, [sl]
 802178a:	89a3      	ldrh	r3, [r4, #12]
 802178c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021790:	81a3      	strh	r3, [r4, #12]
 8021792:	f04f 30ff 	mov.w	r0, #4294967295
 8021796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802179a:	6921      	ldr	r1, [r4, #16]
 802179c:	464a      	mov	r2, r9
 802179e:	f7fd fe25 	bl	801f3ec <memcpy>
 80217a2:	89a3      	ldrh	r3, [r4, #12]
 80217a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80217a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80217ac:	81a3      	strh	r3, [r4, #12]
 80217ae:	6126      	str	r6, [r4, #16]
 80217b0:	6165      	str	r5, [r4, #20]
 80217b2:	444e      	add	r6, r9
 80217b4:	eba5 0509 	sub.w	r5, r5, r9
 80217b8:	6026      	str	r6, [r4, #0]
 80217ba:	60a5      	str	r5, [r4, #8]
 80217bc:	463e      	mov	r6, r7
 80217be:	42be      	cmp	r6, r7
 80217c0:	d900      	bls.n	80217c4 <__ssputs_r+0x86>
 80217c2:	463e      	mov	r6, r7
 80217c4:	6820      	ldr	r0, [r4, #0]
 80217c6:	4632      	mov	r2, r6
 80217c8:	4641      	mov	r1, r8
 80217ca:	f7fd fe1d 	bl	801f408 <memmove>
 80217ce:	68a3      	ldr	r3, [r4, #8]
 80217d0:	1b9b      	subs	r3, r3, r6
 80217d2:	60a3      	str	r3, [r4, #8]
 80217d4:	6823      	ldr	r3, [r4, #0]
 80217d6:	4433      	add	r3, r6
 80217d8:	6023      	str	r3, [r4, #0]
 80217da:	2000      	movs	r0, #0
 80217dc:	e7db      	b.n	8021796 <__ssputs_r+0x58>
 80217de:	462a      	mov	r2, r5
 80217e0:	f7ff ff7e 	bl	80216e0 <_realloc_r>
 80217e4:	4606      	mov	r6, r0
 80217e6:	2800      	cmp	r0, #0
 80217e8:	d1e1      	bne.n	80217ae <__ssputs_r+0x70>
 80217ea:	6921      	ldr	r1, [r4, #16]
 80217ec:	4650      	mov	r0, sl
 80217ee:	f7fd fe2d 	bl	801f44c <_free_r>
 80217f2:	e7c7      	b.n	8021784 <__ssputs_r+0x46>

080217f4 <_svfiprintf_r>:
 80217f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217f8:	4698      	mov	r8, r3
 80217fa:	898b      	ldrh	r3, [r1, #12]
 80217fc:	061b      	lsls	r3, r3, #24
 80217fe:	b09d      	sub	sp, #116	; 0x74
 8021800:	4607      	mov	r7, r0
 8021802:	460d      	mov	r5, r1
 8021804:	4614      	mov	r4, r2
 8021806:	d50e      	bpl.n	8021826 <_svfiprintf_r+0x32>
 8021808:	690b      	ldr	r3, [r1, #16]
 802180a:	b963      	cbnz	r3, 8021826 <_svfiprintf_r+0x32>
 802180c:	2140      	movs	r1, #64	; 0x40
 802180e:	f7fd fe89 	bl	801f524 <_malloc_r>
 8021812:	6028      	str	r0, [r5, #0]
 8021814:	6128      	str	r0, [r5, #16]
 8021816:	b920      	cbnz	r0, 8021822 <_svfiprintf_r+0x2e>
 8021818:	230c      	movs	r3, #12
 802181a:	603b      	str	r3, [r7, #0]
 802181c:	f04f 30ff 	mov.w	r0, #4294967295
 8021820:	e0d1      	b.n	80219c6 <_svfiprintf_r+0x1d2>
 8021822:	2340      	movs	r3, #64	; 0x40
 8021824:	616b      	str	r3, [r5, #20]
 8021826:	2300      	movs	r3, #0
 8021828:	9309      	str	r3, [sp, #36]	; 0x24
 802182a:	2320      	movs	r3, #32
 802182c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021830:	f8cd 800c 	str.w	r8, [sp, #12]
 8021834:	2330      	movs	r3, #48	; 0x30
 8021836:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80219e0 <_svfiprintf_r+0x1ec>
 802183a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802183e:	f04f 0901 	mov.w	r9, #1
 8021842:	4623      	mov	r3, r4
 8021844:	469a      	mov	sl, r3
 8021846:	f813 2b01 	ldrb.w	r2, [r3], #1
 802184a:	b10a      	cbz	r2, 8021850 <_svfiprintf_r+0x5c>
 802184c:	2a25      	cmp	r2, #37	; 0x25
 802184e:	d1f9      	bne.n	8021844 <_svfiprintf_r+0x50>
 8021850:	ebba 0b04 	subs.w	fp, sl, r4
 8021854:	d00b      	beq.n	802186e <_svfiprintf_r+0x7a>
 8021856:	465b      	mov	r3, fp
 8021858:	4622      	mov	r2, r4
 802185a:	4629      	mov	r1, r5
 802185c:	4638      	mov	r0, r7
 802185e:	f7ff ff6e 	bl	802173e <__ssputs_r>
 8021862:	3001      	adds	r0, #1
 8021864:	f000 80aa 	beq.w	80219bc <_svfiprintf_r+0x1c8>
 8021868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802186a:	445a      	add	r2, fp
 802186c:	9209      	str	r2, [sp, #36]	; 0x24
 802186e:	f89a 3000 	ldrb.w	r3, [sl]
 8021872:	2b00      	cmp	r3, #0
 8021874:	f000 80a2 	beq.w	80219bc <_svfiprintf_r+0x1c8>
 8021878:	2300      	movs	r3, #0
 802187a:	f04f 32ff 	mov.w	r2, #4294967295
 802187e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021882:	f10a 0a01 	add.w	sl, sl, #1
 8021886:	9304      	str	r3, [sp, #16]
 8021888:	9307      	str	r3, [sp, #28]
 802188a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802188e:	931a      	str	r3, [sp, #104]	; 0x68
 8021890:	4654      	mov	r4, sl
 8021892:	2205      	movs	r2, #5
 8021894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021898:	4851      	ldr	r0, [pc, #324]	; (80219e0 <_svfiprintf_r+0x1ec>)
 802189a:	f7e6 fca9 	bl	80081f0 <memchr>
 802189e:	9a04      	ldr	r2, [sp, #16]
 80218a0:	b9d8      	cbnz	r0, 80218da <_svfiprintf_r+0xe6>
 80218a2:	06d0      	lsls	r0, r2, #27
 80218a4:	bf44      	itt	mi
 80218a6:	2320      	movmi	r3, #32
 80218a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80218ac:	0711      	lsls	r1, r2, #28
 80218ae:	bf44      	itt	mi
 80218b0:	232b      	movmi	r3, #43	; 0x2b
 80218b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80218b6:	f89a 3000 	ldrb.w	r3, [sl]
 80218ba:	2b2a      	cmp	r3, #42	; 0x2a
 80218bc:	d015      	beq.n	80218ea <_svfiprintf_r+0xf6>
 80218be:	9a07      	ldr	r2, [sp, #28]
 80218c0:	4654      	mov	r4, sl
 80218c2:	2000      	movs	r0, #0
 80218c4:	f04f 0c0a 	mov.w	ip, #10
 80218c8:	4621      	mov	r1, r4
 80218ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80218ce:	3b30      	subs	r3, #48	; 0x30
 80218d0:	2b09      	cmp	r3, #9
 80218d2:	d94e      	bls.n	8021972 <_svfiprintf_r+0x17e>
 80218d4:	b1b0      	cbz	r0, 8021904 <_svfiprintf_r+0x110>
 80218d6:	9207      	str	r2, [sp, #28]
 80218d8:	e014      	b.n	8021904 <_svfiprintf_r+0x110>
 80218da:	eba0 0308 	sub.w	r3, r0, r8
 80218de:	fa09 f303 	lsl.w	r3, r9, r3
 80218e2:	4313      	orrs	r3, r2
 80218e4:	9304      	str	r3, [sp, #16]
 80218e6:	46a2      	mov	sl, r4
 80218e8:	e7d2      	b.n	8021890 <_svfiprintf_r+0x9c>
 80218ea:	9b03      	ldr	r3, [sp, #12]
 80218ec:	1d19      	adds	r1, r3, #4
 80218ee:	681b      	ldr	r3, [r3, #0]
 80218f0:	9103      	str	r1, [sp, #12]
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	bfbb      	ittet	lt
 80218f6:	425b      	neglt	r3, r3
 80218f8:	f042 0202 	orrlt.w	r2, r2, #2
 80218fc:	9307      	strge	r3, [sp, #28]
 80218fe:	9307      	strlt	r3, [sp, #28]
 8021900:	bfb8      	it	lt
 8021902:	9204      	strlt	r2, [sp, #16]
 8021904:	7823      	ldrb	r3, [r4, #0]
 8021906:	2b2e      	cmp	r3, #46	; 0x2e
 8021908:	d10c      	bne.n	8021924 <_svfiprintf_r+0x130>
 802190a:	7863      	ldrb	r3, [r4, #1]
 802190c:	2b2a      	cmp	r3, #42	; 0x2a
 802190e:	d135      	bne.n	802197c <_svfiprintf_r+0x188>
 8021910:	9b03      	ldr	r3, [sp, #12]
 8021912:	1d1a      	adds	r2, r3, #4
 8021914:	681b      	ldr	r3, [r3, #0]
 8021916:	9203      	str	r2, [sp, #12]
 8021918:	2b00      	cmp	r3, #0
 802191a:	bfb8      	it	lt
 802191c:	f04f 33ff 	movlt.w	r3, #4294967295
 8021920:	3402      	adds	r4, #2
 8021922:	9305      	str	r3, [sp, #20]
 8021924:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80219f0 <_svfiprintf_r+0x1fc>
 8021928:	7821      	ldrb	r1, [r4, #0]
 802192a:	2203      	movs	r2, #3
 802192c:	4650      	mov	r0, sl
 802192e:	f7e6 fc5f 	bl	80081f0 <memchr>
 8021932:	b140      	cbz	r0, 8021946 <_svfiprintf_r+0x152>
 8021934:	2340      	movs	r3, #64	; 0x40
 8021936:	eba0 000a 	sub.w	r0, r0, sl
 802193a:	fa03 f000 	lsl.w	r0, r3, r0
 802193e:	9b04      	ldr	r3, [sp, #16]
 8021940:	4303      	orrs	r3, r0
 8021942:	3401      	adds	r4, #1
 8021944:	9304      	str	r3, [sp, #16]
 8021946:	f814 1b01 	ldrb.w	r1, [r4], #1
 802194a:	4826      	ldr	r0, [pc, #152]	; (80219e4 <_svfiprintf_r+0x1f0>)
 802194c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021950:	2206      	movs	r2, #6
 8021952:	f7e6 fc4d 	bl	80081f0 <memchr>
 8021956:	2800      	cmp	r0, #0
 8021958:	d038      	beq.n	80219cc <_svfiprintf_r+0x1d8>
 802195a:	4b23      	ldr	r3, [pc, #140]	; (80219e8 <_svfiprintf_r+0x1f4>)
 802195c:	bb1b      	cbnz	r3, 80219a6 <_svfiprintf_r+0x1b2>
 802195e:	9b03      	ldr	r3, [sp, #12]
 8021960:	3307      	adds	r3, #7
 8021962:	f023 0307 	bic.w	r3, r3, #7
 8021966:	3308      	adds	r3, #8
 8021968:	9303      	str	r3, [sp, #12]
 802196a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802196c:	4433      	add	r3, r6
 802196e:	9309      	str	r3, [sp, #36]	; 0x24
 8021970:	e767      	b.n	8021842 <_svfiprintf_r+0x4e>
 8021972:	fb0c 3202 	mla	r2, ip, r2, r3
 8021976:	460c      	mov	r4, r1
 8021978:	2001      	movs	r0, #1
 802197a:	e7a5      	b.n	80218c8 <_svfiprintf_r+0xd4>
 802197c:	2300      	movs	r3, #0
 802197e:	3401      	adds	r4, #1
 8021980:	9305      	str	r3, [sp, #20]
 8021982:	4619      	mov	r1, r3
 8021984:	f04f 0c0a 	mov.w	ip, #10
 8021988:	4620      	mov	r0, r4
 802198a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802198e:	3a30      	subs	r2, #48	; 0x30
 8021990:	2a09      	cmp	r2, #9
 8021992:	d903      	bls.n	802199c <_svfiprintf_r+0x1a8>
 8021994:	2b00      	cmp	r3, #0
 8021996:	d0c5      	beq.n	8021924 <_svfiprintf_r+0x130>
 8021998:	9105      	str	r1, [sp, #20]
 802199a:	e7c3      	b.n	8021924 <_svfiprintf_r+0x130>
 802199c:	fb0c 2101 	mla	r1, ip, r1, r2
 80219a0:	4604      	mov	r4, r0
 80219a2:	2301      	movs	r3, #1
 80219a4:	e7f0      	b.n	8021988 <_svfiprintf_r+0x194>
 80219a6:	ab03      	add	r3, sp, #12
 80219a8:	9300      	str	r3, [sp, #0]
 80219aa:	462a      	mov	r2, r5
 80219ac:	4b0f      	ldr	r3, [pc, #60]	; (80219ec <_svfiprintf_r+0x1f8>)
 80219ae:	a904      	add	r1, sp, #16
 80219b0:	4638      	mov	r0, r7
 80219b2:	f7fd fecb 	bl	801f74c <_printf_float>
 80219b6:	1c42      	adds	r2, r0, #1
 80219b8:	4606      	mov	r6, r0
 80219ba:	d1d6      	bne.n	802196a <_svfiprintf_r+0x176>
 80219bc:	89ab      	ldrh	r3, [r5, #12]
 80219be:	065b      	lsls	r3, r3, #25
 80219c0:	f53f af2c 	bmi.w	802181c <_svfiprintf_r+0x28>
 80219c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80219c6:	b01d      	add	sp, #116	; 0x74
 80219c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219cc:	ab03      	add	r3, sp, #12
 80219ce:	9300      	str	r3, [sp, #0]
 80219d0:	462a      	mov	r2, r5
 80219d2:	4b06      	ldr	r3, [pc, #24]	; (80219ec <_svfiprintf_r+0x1f8>)
 80219d4:	a904      	add	r1, sp, #16
 80219d6:	4638      	mov	r0, r7
 80219d8:	f7fe f95c 	bl	801fc94 <_printf_i>
 80219dc:	e7eb      	b.n	80219b6 <_svfiprintf_r+0x1c2>
 80219de:	bf00      	nop
 80219e0:	08035644 	.word	0x08035644
 80219e4:	0803564e 	.word	0x0803564e
 80219e8:	0801f74d 	.word	0x0801f74d
 80219ec:	0802173f 	.word	0x0802173f
 80219f0:	0803564a 	.word	0x0803564a

080219f4 <_read_r>:
 80219f4:	b538      	push	{r3, r4, r5, lr}
 80219f6:	4d07      	ldr	r5, [pc, #28]	; (8021a14 <_read_r+0x20>)
 80219f8:	4604      	mov	r4, r0
 80219fa:	4608      	mov	r0, r1
 80219fc:	4611      	mov	r1, r2
 80219fe:	2200      	movs	r2, #0
 8021a00:	602a      	str	r2, [r5, #0]
 8021a02:	461a      	mov	r2, r3
 8021a04:	f7ed f9a6 	bl	800ed54 <_read>
 8021a08:	1c43      	adds	r3, r0, #1
 8021a0a:	d102      	bne.n	8021a12 <_read_r+0x1e>
 8021a0c:	682b      	ldr	r3, [r5, #0]
 8021a0e:	b103      	cbz	r3, 8021a12 <_read_r+0x1e>
 8021a10:	6023      	str	r3, [r4, #0]
 8021a12:	bd38      	pop	{r3, r4, r5, pc}
 8021a14:	2000eb68 	.word	0x2000eb68

08021a18 <__assert_func>:
 8021a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021a1a:	4614      	mov	r4, r2
 8021a1c:	461a      	mov	r2, r3
 8021a1e:	4b09      	ldr	r3, [pc, #36]	; (8021a44 <__assert_func+0x2c>)
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	4605      	mov	r5, r0
 8021a24:	68d8      	ldr	r0, [r3, #12]
 8021a26:	b14c      	cbz	r4, 8021a3c <__assert_func+0x24>
 8021a28:	4b07      	ldr	r3, [pc, #28]	; (8021a48 <__assert_func+0x30>)
 8021a2a:	9100      	str	r1, [sp, #0]
 8021a2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021a30:	4906      	ldr	r1, [pc, #24]	; (8021a4c <__assert_func+0x34>)
 8021a32:	462b      	mov	r3, r5
 8021a34:	f000 f80e 	bl	8021a54 <fiprintf>
 8021a38:	f000 fa60 	bl	8021efc <abort>
 8021a3c:	4b04      	ldr	r3, [pc, #16]	; (8021a50 <__assert_func+0x38>)
 8021a3e:	461c      	mov	r4, r3
 8021a40:	e7f3      	b.n	8021a2a <__assert_func+0x12>
 8021a42:	bf00      	nop
 8021a44:	20000100 	.word	0x20000100
 8021a48:	08035655 	.word	0x08035655
 8021a4c:	08035662 	.word	0x08035662
 8021a50:	08035690 	.word	0x08035690

08021a54 <fiprintf>:
 8021a54:	b40e      	push	{r1, r2, r3}
 8021a56:	b503      	push	{r0, r1, lr}
 8021a58:	4601      	mov	r1, r0
 8021a5a:	ab03      	add	r3, sp, #12
 8021a5c:	4805      	ldr	r0, [pc, #20]	; (8021a74 <fiprintf+0x20>)
 8021a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021a62:	6800      	ldr	r0, [r0, #0]
 8021a64:	9301      	str	r3, [sp, #4]
 8021a66:	f000 f84b 	bl	8021b00 <_vfiprintf_r>
 8021a6a:	b002      	add	sp, #8
 8021a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021a70:	b003      	add	sp, #12
 8021a72:	4770      	bx	lr
 8021a74:	20000100 	.word	0x20000100

08021a78 <__ascii_mbtowc>:
 8021a78:	b082      	sub	sp, #8
 8021a7a:	b901      	cbnz	r1, 8021a7e <__ascii_mbtowc+0x6>
 8021a7c:	a901      	add	r1, sp, #4
 8021a7e:	b142      	cbz	r2, 8021a92 <__ascii_mbtowc+0x1a>
 8021a80:	b14b      	cbz	r3, 8021a96 <__ascii_mbtowc+0x1e>
 8021a82:	7813      	ldrb	r3, [r2, #0]
 8021a84:	600b      	str	r3, [r1, #0]
 8021a86:	7812      	ldrb	r2, [r2, #0]
 8021a88:	1e10      	subs	r0, r2, #0
 8021a8a:	bf18      	it	ne
 8021a8c:	2001      	movne	r0, #1
 8021a8e:	b002      	add	sp, #8
 8021a90:	4770      	bx	lr
 8021a92:	4610      	mov	r0, r2
 8021a94:	e7fb      	b.n	8021a8e <__ascii_mbtowc+0x16>
 8021a96:	f06f 0001 	mvn.w	r0, #1
 8021a9a:	e7f8      	b.n	8021a8e <__ascii_mbtowc+0x16>

08021a9c <_malloc_usable_size_r>:
 8021a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021aa0:	1f18      	subs	r0, r3, #4
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	bfbc      	itt	lt
 8021aa6:	580b      	ldrlt	r3, [r1, r0]
 8021aa8:	18c0      	addlt	r0, r0, r3
 8021aaa:	4770      	bx	lr

08021aac <__sfputc_r>:
 8021aac:	6893      	ldr	r3, [r2, #8]
 8021aae:	3b01      	subs	r3, #1
 8021ab0:	2b00      	cmp	r3, #0
 8021ab2:	b410      	push	{r4}
 8021ab4:	6093      	str	r3, [r2, #8]
 8021ab6:	da08      	bge.n	8021aca <__sfputc_r+0x1e>
 8021ab8:	6994      	ldr	r4, [r2, #24]
 8021aba:	42a3      	cmp	r3, r4
 8021abc:	db01      	blt.n	8021ac2 <__sfputc_r+0x16>
 8021abe:	290a      	cmp	r1, #10
 8021ac0:	d103      	bne.n	8021aca <__sfputc_r+0x1e>
 8021ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021ac6:	f000 b94b 	b.w	8021d60 <__swbuf_r>
 8021aca:	6813      	ldr	r3, [r2, #0]
 8021acc:	1c58      	adds	r0, r3, #1
 8021ace:	6010      	str	r0, [r2, #0]
 8021ad0:	7019      	strb	r1, [r3, #0]
 8021ad2:	4608      	mov	r0, r1
 8021ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021ad8:	4770      	bx	lr

08021ada <__sfputs_r>:
 8021ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021adc:	4606      	mov	r6, r0
 8021ade:	460f      	mov	r7, r1
 8021ae0:	4614      	mov	r4, r2
 8021ae2:	18d5      	adds	r5, r2, r3
 8021ae4:	42ac      	cmp	r4, r5
 8021ae6:	d101      	bne.n	8021aec <__sfputs_r+0x12>
 8021ae8:	2000      	movs	r0, #0
 8021aea:	e007      	b.n	8021afc <__sfputs_r+0x22>
 8021aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021af0:	463a      	mov	r2, r7
 8021af2:	4630      	mov	r0, r6
 8021af4:	f7ff ffda 	bl	8021aac <__sfputc_r>
 8021af8:	1c43      	adds	r3, r0, #1
 8021afa:	d1f3      	bne.n	8021ae4 <__sfputs_r+0xa>
 8021afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021b00 <_vfiprintf_r>:
 8021b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b04:	460d      	mov	r5, r1
 8021b06:	b09d      	sub	sp, #116	; 0x74
 8021b08:	4614      	mov	r4, r2
 8021b0a:	4698      	mov	r8, r3
 8021b0c:	4606      	mov	r6, r0
 8021b0e:	b118      	cbz	r0, 8021b18 <_vfiprintf_r+0x18>
 8021b10:	6983      	ldr	r3, [r0, #24]
 8021b12:	b90b      	cbnz	r3, 8021b18 <_vfiprintf_r+0x18>
 8021b14:	f7fd fb98 	bl	801f248 <__sinit>
 8021b18:	4b89      	ldr	r3, [pc, #548]	; (8021d40 <_vfiprintf_r+0x240>)
 8021b1a:	429d      	cmp	r5, r3
 8021b1c:	d11b      	bne.n	8021b56 <_vfiprintf_r+0x56>
 8021b1e:	6875      	ldr	r5, [r6, #4]
 8021b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021b22:	07d9      	lsls	r1, r3, #31
 8021b24:	d405      	bmi.n	8021b32 <_vfiprintf_r+0x32>
 8021b26:	89ab      	ldrh	r3, [r5, #12]
 8021b28:	059a      	lsls	r2, r3, #22
 8021b2a:	d402      	bmi.n	8021b32 <_vfiprintf_r+0x32>
 8021b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021b2e:	f7ed fa95 	bl	800f05c <__retarget_lock_acquire_recursive>
 8021b32:	89ab      	ldrh	r3, [r5, #12]
 8021b34:	071b      	lsls	r3, r3, #28
 8021b36:	d501      	bpl.n	8021b3c <_vfiprintf_r+0x3c>
 8021b38:	692b      	ldr	r3, [r5, #16]
 8021b3a:	b9eb      	cbnz	r3, 8021b78 <_vfiprintf_r+0x78>
 8021b3c:	4629      	mov	r1, r5
 8021b3e:	4630      	mov	r0, r6
 8021b40:	f000 f96e 	bl	8021e20 <__swsetup_r>
 8021b44:	b1c0      	cbz	r0, 8021b78 <_vfiprintf_r+0x78>
 8021b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021b48:	07dc      	lsls	r4, r3, #31
 8021b4a:	d50e      	bpl.n	8021b6a <_vfiprintf_r+0x6a>
 8021b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8021b50:	b01d      	add	sp, #116	; 0x74
 8021b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b56:	4b7b      	ldr	r3, [pc, #492]	; (8021d44 <_vfiprintf_r+0x244>)
 8021b58:	429d      	cmp	r5, r3
 8021b5a:	d101      	bne.n	8021b60 <_vfiprintf_r+0x60>
 8021b5c:	68b5      	ldr	r5, [r6, #8]
 8021b5e:	e7df      	b.n	8021b20 <_vfiprintf_r+0x20>
 8021b60:	4b79      	ldr	r3, [pc, #484]	; (8021d48 <_vfiprintf_r+0x248>)
 8021b62:	429d      	cmp	r5, r3
 8021b64:	bf08      	it	eq
 8021b66:	68f5      	ldreq	r5, [r6, #12]
 8021b68:	e7da      	b.n	8021b20 <_vfiprintf_r+0x20>
 8021b6a:	89ab      	ldrh	r3, [r5, #12]
 8021b6c:	0598      	lsls	r0, r3, #22
 8021b6e:	d4ed      	bmi.n	8021b4c <_vfiprintf_r+0x4c>
 8021b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021b72:	f7ed fa87 	bl	800f084 <__retarget_lock_release_recursive>
 8021b76:	e7e9      	b.n	8021b4c <_vfiprintf_r+0x4c>
 8021b78:	2300      	movs	r3, #0
 8021b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8021b7c:	2320      	movs	r3, #32
 8021b7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8021b86:	2330      	movs	r3, #48	; 0x30
 8021b88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021d4c <_vfiprintf_r+0x24c>
 8021b8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021b90:	f04f 0901 	mov.w	r9, #1
 8021b94:	4623      	mov	r3, r4
 8021b96:	469a      	mov	sl, r3
 8021b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021b9c:	b10a      	cbz	r2, 8021ba2 <_vfiprintf_r+0xa2>
 8021b9e:	2a25      	cmp	r2, #37	; 0x25
 8021ba0:	d1f9      	bne.n	8021b96 <_vfiprintf_r+0x96>
 8021ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8021ba6:	d00b      	beq.n	8021bc0 <_vfiprintf_r+0xc0>
 8021ba8:	465b      	mov	r3, fp
 8021baa:	4622      	mov	r2, r4
 8021bac:	4629      	mov	r1, r5
 8021bae:	4630      	mov	r0, r6
 8021bb0:	f7ff ff93 	bl	8021ada <__sfputs_r>
 8021bb4:	3001      	adds	r0, #1
 8021bb6:	f000 80aa 	beq.w	8021d0e <_vfiprintf_r+0x20e>
 8021bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021bbc:	445a      	add	r2, fp
 8021bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8021bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8021bc4:	2b00      	cmp	r3, #0
 8021bc6:	f000 80a2 	beq.w	8021d0e <_vfiprintf_r+0x20e>
 8021bca:	2300      	movs	r3, #0
 8021bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8021bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021bd4:	f10a 0a01 	add.w	sl, sl, #1
 8021bd8:	9304      	str	r3, [sp, #16]
 8021bda:	9307      	str	r3, [sp, #28]
 8021bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021be0:	931a      	str	r3, [sp, #104]	; 0x68
 8021be2:	4654      	mov	r4, sl
 8021be4:	2205      	movs	r2, #5
 8021be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021bea:	4858      	ldr	r0, [pc, #352]	; (8021d4c <_vfiprintf_r+0x24c>)
 8021bec:	f7e6 fb00 	bl	80081f0 <memchr>
 8021bf0:	9a04      	ldr	r2, [sp, #16]
 8021bf2:	b9d8      	cbnz	r0, 8021c2c <_vfiprintf_r+0x12c>
 8021bf4:	06d1      	lsls	r1, r2, #27
 8021bf6:	bf44      	itt	mi
 8021bf8:	2320      	movmi	r3, #32
 8021bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021bfe:	0713      	lsls	r3, r2, #28
 8021c00:	bf44      	itt	mi
 8021c02:	232b      	movmi	r3, #43	; 0x2b
 8021c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021c08:	f89a 3000 	ldrb.w	r3, [sl]
 8021c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8021c0e:	d015      	beq.n	8021c3c <_vfiprintf_r+0x13c>
 8021c10:	9a07      	ldr	r2, [sp, #28]
 8021c12:	4654      	mov	r4, sl
 8021c14:	2000      	movs	r0, #0
 8021c16:	f04f 0c0a 	mov.w	ip, #10
 8021c1a:	4621      	mov	r1, r4
 8021c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021c20:	3b30      	subs	r3, #48	; 0x30
 8021c22:	2b09      	cmp	r3, #9
 8021c24:	d94e      	bls.n	8021cc4 <_vfiprintf_r+0x1c4>
 8021c26:	b1b0      	cbz	r0, 8021c56 <_vfiprintf_r+0x156>
 8021c28:	9207      	str	r2, [sp, #28]
 8021c2a:	e014      	b.n	8021c56 <_vfiprintf_r+0x156>
 8021c2c:	eba0 0308 	sub.w	r3, r0, r8
 8021c30:	fa09 f303 	lsl.w	r3, r9, r3
 8021c34:	4313      	orrs	r3, r2
 8021c36:	9304      	str	r3, [sp, #16]
 8021c38:	46a2      	mov	sl, r4
 8021c3a:	e7d2      	b.n	8021be2 <_vfiprintf_r+0xe2>
 8021c3c:	9b03      	ldr	r3, [sp, #12]
 8021c3e:	1d19      	adds	r1, r3, #4
 8021c40:	681b      	ldr	r3, [r3, #0]
 8021c42:	9103      	str	r1, [sp, #12]
 8021c44:	2b00      	cmp	r3, #0
 8021c46:	bfbb      	ittet	lt
 8021c48:	425b      	neglt	r3, r3
 8021c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8021c4e:	9307      	strge	r3, [sp, #28]
 8021c50:	9307      	strlt	r3, [sp, #28]
 8021c52:	bfb8      	it	lt
 8021c54:	9204      	strlt	r2, [sp, #16]
 8021c56:	7823      	ldrb	r3, [r4, #0]
 8021c58:	2b2e      	cmp	r3, #46	; 0x2e
 8021c5a:	d10c      	bne.n	8021c76 <_vfiprintf_r+0x176>
 8021c5c:	7863      	ldrb	r3, [r4, #1]
 8021c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8021c60:	d135      	bne.n	8021cce <_vfiprintf_r+0x1ce>
 8021c62:	9b03      	ldr	r3, [sp, #12]
 8021c64:	1d1a      	adds	r2, r3, #4
 8021c66:	681b      	ldr	r3, [r3, #0]
 8021c68:	9203      	str	r2, [sp, #12]
 8021c6a:	2b00      	cmp	r3, #0
 8021c6c:	bfb8      	it	lt
 8021c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8021c72:	3402      	adds	r4, #2
 8021c74:	9305      	str	r3, [sp, #20]
 8021c76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021d5c <_vfiprintf_r+0x25c>
 8021c7a:	7821      	ldrb	r1, [r4, #0]
 8021c7c:	2203      	movs	r2, #3
 8021c7e:	4650      	mov	r0, sl
 8021c80:	f7e6 fab6 	bl	80081f0 <memchr>
 8021c84:	b140      	cbz	r0, 8021c98 <_vfiprintf_r+0x198>
 8021c86:	2340      	movs	r3, #64	; 0x40
 8021c88:	eba0 000a 	sub.w	r0, r0, sl
 8021c8c:	fa03 f000 	lsl.w	r0, r3, r0
 8021c90:	9b04      	ldr	r3, [sp, #16]
 8021c92:	4303      	orrs	r3, r0
 8021c94:	3401      	adds	r4, #1
 8021c96:	9304      	str	r3, [sp, #16]
 8021c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c9c:	482c      	ldr	r0, [pc, #176]	; (8021d50 <_vfiprintf_r+0x250>)
 8021c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021ca2:	2206      	movs	r2, #6
 8021ca4:	f7e6 faa4 	bl	80081f0 <memchr>
 8021ca8:	2800      	cmp	r0, #0
 8021caa:	d03f      	beq.n	8021d2c <_vfiprintf_r+0x22c>
 8021cac:	4b29      	ldr	r3, [pc, #164]	; (8021d54 <_vfiprintf_r+0x254>)
 8021cae:	bb1b      	cbnz	r3, 8021cf8 <_vfiprintf_r+0x1f8>
 8021cb0:	9b03      	ldr	r3, [sp, #12]
 8021cb2:	3307      	adds	r3, #7
 8021cb4:	f023 0307 	bic.w	r3, r3, #7
 8021cb8:	3308      	adds	r3, #8
 8021cba:	9303      	str	r3, [sp, #12]
 8021cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021cbe:	443b      	add	r3, r7
 8021cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8021cc2:	e767      	b.n	8021b94 <_vfiprintf_r+0x94>
 8021cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8021cc8:	460c      	mov	r4, r1
 8021cca:	2001      	movs	r0, #1
 8021ccc:	e7a5      	b.n	8021c1a <_vfiprintf_r+0x11a>
 8021cce:	2300      	movs	r3, #0
 8021cd0:	3401      	adds	r4, #1
 8021cd2:	9305      	str	r3, [sp, #20]
 8021cd4:	4619      	mov	r1, r3
 8021cd6:	f04f 0c0a 	mov.w	ip, #10
 8021cda:	4620      	mov	r0, r4
 8021cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021ce0:	3a30      	subs	r2, #48	; 0x30
 8021ce2:	2a09      	cmp	r2, #9
 8021ce4:	d903      	bls.n	8021cee <_vfiprintf_r+0x1ee>
 8021ce6:	2b00      	cmp	r3, #0
 8021ce8:	d0c5      	beq.n	8021c76 <_vfiprintf_r+0x176>
 8021cea:	9105      	str	r1, [sp, #20]
 8021cec:	e7c3      	b.n	8021c76 <_vfiprintf_r+0x176>
 8021cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8021cf2:	4604      	mov	r4, r0
 8021cf4:	2301      	movs	r3, #1
 8021cf6:	e7f0      	b.n	8021cda <_vfiprintf_r+0x1da>
 8021cf8:	ab03      	add	r3, sp, #12
 8021cfa:	9300      	str	r3, [sp, #0]
 8021cfc:	462a      	mov	r2, r5
 8021cfe:	4b16      	ldr	r3, [pc, #88]	; (8021d58 <_vfiprintf_r+0x258>)
 8021d00:	a904      	add	r1, sp, #16
 8021d02:	4630      	mov	r0, r6
 8021d04:	f7fd fd22 	bl	801f74c <_printf_float>
 8021d08:	4607      	mov	r7, r0
 8021d0a:	1c78      	adds	r0, r7, #1
 8021d0c:	d1d6      	bne.n	8021cbc <_vfiprintf_r+0x1bc>
 8021d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021d10:	07d9      	lsls	r1, r3, #31
 8021d12:	d405      	bmi.n	8021d20 <_vfiprintf_r+0x220>
 8021d14:	89ab      	ldrh	r3, [r5, #12]
 8021d16:	059a      	lsls	r2, r3, #22
 8021d18:	d402      	bmi.n	8021d20 <_vfiprintf_r+0x220>
 8021d1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021d1c:	f7ed f9b2 	bl	800f084 <__retarget_lock_release_recursive>
 8021d20:	89ab      	ldrh	r3, [r5, #12]
 8021d22:	065b      	lsls	r3, r3, #25
 8021d24:	f53f af12 	bmi.w	8021b4c <_vfiprintf_r+0x4c>
 8021d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021d2a:	e711      	b.n	8021b50 <_vfiprintf_r+0x50>
 8021d2c:	ab03      	add	r3, sp, #12
 8021d2e:	9300      	str	r3, [sp, #0]
 8021d30:	462a      	mov	r2, r5
 8021d32:	4b09      	ldr	r3, [pc, #36]	; (8021d58 <_vfiprintf_r+0x258>)
 8021d34:	a904      	add	r1, sp, #16
 8021d36:	4630      	mov	r0, r6
 8021d38:	f7fd ffac 	bl	801fc94 <_printf_i>
 8021d3c:	e7e4      	b.n	8021d08 <_vfiprintf_r+0x208>
 8021d3e:	bf00      	nop
 8021d40:	080353e4 	.word	0x080353e4
 8021d44:	08035404 	.word	0x08035404
 8021d48:	080353c4 	.word	0x080353c4
 8021d4c:	08035644 	.word	0x08035644
 8021d50:	0803564e 	.word	0x0803564e
 8021d54:	0801f74d 	.word	0x0801f74d
 8021d58:	08021adb 	.word	0x08021adb
 8021d5c:	0803564a 	.word	0x0803564a

08021d60 <__swbuf_r>:
 8021d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d62:	460e      	mov	r6, r1
 8021d64:	4614      	mov	r4, r2
 8021d66:	4605      	mov	r5, r0
 8021d68:	b118      	cbz	r0, 8021d72 <__swbuf_r+0x12>
 8021d6a:	6983      	ldr	r3, [r0, #24]
 8021d6c:	b90b      	cbnz	r3, 8021d72 <__swbuf_r+0x12>
 8021d6e:	f7fd fa6b 	bl	801f248 <__sinit>
 8021d72:	4b21      	ldr	r3, [pc, #132]	; (8021df8 <__swbuf_r+0x98>)
 8021d74:	429c      	cmp	r4, r3
 8021d76:	d12b      	bne.n	8021dd0 <__swbuf_r+0x70>
 8021d78:	686c      	ldr	r4, [r5, #4]
 8021d7a:	69a3      	ldr	r3, [r4, #24]
 8021d7c:	60a3      	str	r3, [r4, #8]
 8021d7e:	89a3      	ldrh	r3, [r4, #12]
 8021d80:	071a      	lsls	r2, r3, #28
 8021d82:	d52f      	bpl.n	8021de4 <__swbuf_r+0x84>
 8021d84:	6923      	ldr	r3, [r4, #16]
 8021d86:	b36b      	cbz	r3, 8021de4 <__swbuf_r+0x84>
 8021d88:	6923      	ldr	r3, [r4, #16]
 8021d8a:	6820      	ldr	r0, [r4, #0]
 8021d8c:	1ac0      	subs	r0, r0, r3
 8021d8e:	6963      	ldr	r3, [r4, #20]
 8021d90:	b2f6      	uxtb	r6, r6
 8021d92:	4283      	cmp	r3, r0
 8021d94:	4637      	mov	r7, r6
 8021d96:	dc04      	bgt.n	8021da2 <__swbuf_r+0x42>
 8021d98:	4621      	mov	r1, r4
 8021d9a:	4628      	mov	r0, r5
 8021d9c:	f7ff f8a8 	bl	8020ef0 <_fflush_r>
 8021da0:	bb30      	cbnz	r0, 8021df0 <__swbuf_r+0x90>
 8021da2:	68a3      	ldr	r3, [r4, #8]
 8021da4:	3b01      	subs	r3, #1
 8021da6:	60a3      	str	r3, [r4, #8]
 8021da8:	6823      	ldr	r3, [r4, #0]
 8021daa:	1c5a      	adds	r2, r3, #1
 8021dac:	6022      	str	r2, [r4, #0]
 8021dae:	701e      	strb	r6, [r3, #0]
 8021db0:	6963      	ldr	r3, [r4, #20]
 8021db2:	3001      	adds	r0, #1
 8021db4:	4283      	cmp	r3, r0
 8021db6:	d004      	beq.n	8021dc2 <__swbuf_r+0x62>
 8021db8:	89a3      	ldrh	r3, [r4, #12]
 8021dba:	07db      	lsls	r3, r3, #31
 8021dbc:	d506      	bpl.n	8021dcc <__swbuf_r+0x6c>
 8021dbe:	2e0a      	cmp	r6, #10
 8021dc0:	d104      	bne.n	8021dcc <__swbuf_r+0x6c>
 8021dc2:	4621      	mov	r1, r4
 8021dc4:	4628      	mov	r0, r5
 8021dc6:	f7ff f893 	bl	8020ef0 <_fflush_r>
 8021dca:	b988      	cbnz	r0, 8021df0 <__swbuf_r+0x90>
 8021dcc:	4638      	mov	r0, r7
 8021dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021dd0:	4b0a      	ldr	r3, [pc, #40]	; (8021dfc <__swbuf_r+0x9c>)
 8021dd2:	429c      	cmp	r4, r3
 8021dd4:	d101      	bne.n	8021dda <__swbuf_r+0x7a>
 8021dd6:	68ac      	ldr	r4, [r5, #8]
 8021dd8:	e7cf      	b.n	8021d7a <__swbuf_r+0x1a>
 8021dda:	4b09      	ldr	r3, [pc, #36]	; (8021e00 <__swbuf_r+0xa0>)
 8021ddc:	429c      	cmp	r4, r3
 8021dde:	bf08      	it	eq
 8021de0:	68ec      	ldreq	r4, [r5, #12]
 8021de2:	e7ca      	b.n	8021d7a <__swbuf_r+0x1a>
 8021de4:	4621      	mov	r1, r4
 8021de6:	4628      	mov	r0, r5
 8021de8:	f000 f81a 	bl	8021e20 <__swsetup_r>
 8021dec:	2800      	cmp	r0, #0
 8021dee:	d0cb      	beq.n	8021d88 <__swbuf_r+0x28>
 8021df0:	f04f 37ff 	mov.w	r7, #4294967295
 8021df4:	e7ea      	b.n	8021dcc <__swbuf_r+0x6c>
 8021df6:	bf00      	nop
 8021df8:	080353e4 	.word	0x080353e4
 8021dfc:	08035404 	.word	0x08035404
 8021e00:	080353c4 	.word	0x080353c4

08021e04 <__ascii_wctomb>:
 8021e04:	b149      	cbz	r1, 8021e1a <__ascii_wctomb+0x16>
 8021e06:	2aff      	cmp	r2, #255	; 0xff
 8021e08:	bf85      	ittet	hi
 8021e0a:	238a      	movhi	r3, #138	; 0x8a
 8021e0c:	6003      	strhi	r3, [r0, #0]
 8021e0e:	700a      	strbls	r2, [r1, #0]
 8021e10:	f04f 30ff 	movhi.w	r0, #4294967295
 8021e14:	bf98      	it	ls
 8021e16:	2001      	movls	r0, #1
 8021e18:	4770      	bx	lr
 8021e1a:	4608      	mov	r0, r1
 8021e1c:	4770      	bx	lr
	...

08021e20 <__swsetup_r>:
 8021e20:	4b32      	ldr	r3, [pc, #200]	; (8021eec <__swsetup_r+0xcc>)
 8021e22:	b570      	push	{r4, r5, r6, lr}
 8021e24:	681d      	ldr	r5, [r3, #0]
 8021e26:	4606      	mov	r6, r0
 8021e28:	460c      	mov	r4, r1
 8021e2a:	b125      	cbz	r5, 8021e36 <__swsetup_r+0x16>
 8021e2c:	69ab      	ldr	r3, [r5, #24]
 8021e2e:	b913      	cbnz	r3, 8021e36 <__swsetup_r+0x16>
 8021e30:	4628      	mov	r0, r5
 8021e32:	f7fd fa09 	bl	801f248 <__sinit>
 8021e36:	4b2e      	ldr	r3, [pc, #184]	; (8021ef0 <__swsetup_r+0xd0>)
 8021e38:	429c      	cmp	r4, r3
 8021e3a:	d10f      	bne.n	8021e5c <__swsetup_r+0x3c>
 8021e3c:	686c      	ldr	r4, [r5, #4]
 8021e3e:	89a3      	ldrh	r3, [r4, #12]
 8021e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021e44:	0719      	lsls	r1, r3, #28
 8021e46:	d42c      	bmi.n	8021ea2 <__swsetup_r+0x82>
 8021e48:	06dd      	lsls	r5, r3, #27
 8021e4a:	d411      	bmi.n	8021e70 <__swsetup_r+0x50>
 8021e4c:	2309      	movs	r3, #9
 8021e4e:	6033      	str	r3, [r6, #0]
 8021e50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021e54:	81a3      	strh	r3, [r4, #12]
 8021e56:	f04f 30ff 	mov.w	r0, #4294967295
 8021e5a:	e03e      	b.n	8021eda <__swsetup_r+0xba>
 8021e5c:	4b25      	ldr	r3, [pc, #148]	; (8021ef4 <__swsetup_r+0xd4>)
 8021e5e:	429c      	cmp	r4, r3
 8021e60:	d101      	bne.n	8021e66 <__swsetup_r+0x46>
 8021e62:	68ac      	ldr	r4, [r5, #8]
 8021e64:	e7eb      	b.n	8021e3e <__swsetup_r+0x1e>
 8021e66:	4b24      	ldr	r3, [pc, #144]	; (8021ef8 <__swsetup_r+0xd8>)
 8021e68:	429c      	cmp	r4, r3
 8021e6a:	bf08      	it	eq
 8021e6c:	68ec      	ldreq	r4, [r5, #12]
 8021e6e:	e7e6      	b.n	8021e3e <__swsetup_r+0x1e>
 8021e70:	0758      	lsls	r0, r3, #29
 8021e72:	d512      	bpl.n	8021e9a <__swsetup_r+0x7a>
 8021e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021e76:	b141      	cbz	r1, 8021e8a <__swsetup_r+0x6a>
 8021e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021e7c:	4299      	cmp	r1, r3
 8021e7e:	d002      	beq.n	8021e86 <__swsetup_r+0x66>
 8021e80:	4630      	mov	r0, r6
 8021e82:	f7fd fae3 	bl	801f44c <_free_r>
 8021e86:	2300      	movs	r3, #0
 8021e88:	6363      	str	r3, [r4, #52]	; 0x34
 8021e8a:	89a3      	ldrh	r3, [r4, #12]
 8021e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021e90:	81a3      	strh	r3, [r4, #12]
 8021e92:	2300      	movs	r3, #0
 8021e94:	6063      	str	r3, [r4, #4]
 8021e96:	6923      	ldr	r3, [r4, #16]
 8021e98:	6023      	str	r3, [r4, #0]
 8021e9a:	89a3      	ldrh	r3, [r4, #12]
 8021e9c:	f043 0308 	orr.w	r3, r3, #8
 8021ea0:	81a3      	strh	r3, [r4, #12]
 8021ea2:	6923      	ldr	r3, [r4, #16]
 8021ea4:	b94b      	cbnz	r3, 8021eba <__swsetup_r+0x9a>
 8021ea6:	89a3      	ldrh	r3, [r4, #12]
 8021ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021eb0:	d003      	beq.n	8021eba <__swsetup_r+0x9a>
 8021eb2:	4621      	mov	r1, r4
 8021eb4:	4630      	mov	r0, r6
 8021eb6:	f000 f84d 	bl	8021f54 <__smakebuf_r>
 8021eba:	89a0      	ldrh	r0, [r4, #12]
 8021ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021ec0:	f010 0301 	ands.w	r3, r0, #1
 8021ec4:	d00a      	beq.n	8021edc <__swsetup_r+0xbc>
 8021ec6:	2300      	movs	r3, #0
 8021ec8:	60a3      	str	r3, [r4, #8]
 8021eca:	6963      	ldr	r3, [r4, #20]
 8021ecc:	425b      	negs	r3, r3
 8021ece:	61a3      	str	r3, [r4, #24]
 8021ed0:	6923      	ldr	r3, [r4, #16]
 8021ed2:	b943      	cbnz	r3, 8021ee6 <__swsetup_r+0xc6>
 8021ed4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021ed8:	d1ba      	bne.n	8021e50 <__swsetup_r+0x30>
 8021eda:	bd70      	pop	{r4, r5, r6, pc}
 8021edc:	0781      	lsls	r1, r0, #30
 8021ede:	bf58      	it	pl
 8021ee0:	6963      	ldrpl	r3, [r4, #20]
 8021ee2:	60a3      	str	r3, [r4, #8]
 8021ee4:	e7f4      	b.n	8021ed0 <__swsetup_r+0xb0>
 8021ee6:	2000      	movs	r0, #0
 8021ee8:	e7f7      	b.n	8021eda <__swsetup_r+0xba>
 8021eea:	bf00      	nop
 8021eec:	20000100 	.word	0x20000100
 8021ef0:	080353e4 	.word	0x080353e4
 8021ef4:	08035404 	.word	0x08035404
 8021ef8:	080353c4 	.word	0x080353c4

08021efc <abort>:
 8021efc:	b508      	push	{r3, lr}
 8021efe:	2006      	movs	r0, #6
 8021f00:	f000 f890 	bl	8022024 <raise>
 8021f04:	2001      	movs	r0, #1
 8021f06:	f7ec ff1b 	bl	800ed40 <_exit>

08021f0a <__swhatbuf_r>:
 8021f0a:	b570      	push	{r4, r5, r6, lr}
 8021f0c:	460e      	mov	r6, r1
 8021f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f12:	2900      	cmp	r1, #0
 8021f14:	b096      	sub	sp, #88	; 0x58
 8021f16:	4614      	mov	r4, r2
 8021f18:	461d      	mov	r5, r3
 8021f1a:	da08      	bge.n	8021f2e <__swhatbuf_r+0x24>
 8021f1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021f20:	2200      	movs	r2, #0
 8021f22:	602a      	str	r2, [r5, #0]
 8021f24:	061a      	lsls	r2, r3, #24
 8021f26:	d410      	bmi.n	8021f4a <__swhatbuf_r+0x40>
 8021f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021f2c:	e00e      	b.n	8021f4c <__swhatbuf_r+0x42>
 8021f2e:	466a      	mov	r2, sp
 8021f30:	f000 f894 	bl	802205c <_fstat_r>
 8021f34:	2800      	cmp	r0, #0
 8021f36:	dbf1      	blt.n	8021f1c <__swhatbuf_r+0x12>
 8021f38:	9a01      	ldr	r2, [sp, #4]
 8021f3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021f3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021f42:	425a      	negs	r2, r3
 8021f44:	415a      	adcs	r2, r3
 8021f46:	602a      	str	r2, [r5, #0]
 8021f48:	e7ee      	b.n	8021f28 <__swhatbuf_r+0x1e>
 8021f4a:	2340      	movs	r3, #64	; 0x40
 8021f4c:	2000      	movs	r0, #0
 8021f4e:	6023      	str	r3, [r4, #0]
 8021f50:	b016      	add	sp, #88	; 0x58
 8021f52:	bd70      	pop	{r4, r5, r6, pc}

08021f54 <__smakebuf_r>:
 8021f54:	898b      	ldrh	r3, [r1, #12]
 8021f56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021f58:	079d      	lsls	r5, r3, #30
 8021f5a:	4606      	mov	r6, r0
 8021f5c:	460c      	mov	r4, r1
 8021f5e:	d507      	bpl.n	8021f70 <__smakebuf_r+0x1c>
 8021f60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021f64:	6023      	str	r3, [r4, #0]
 8021f66:	6123      	str	r3, [r4, #16]
 8021f68:	2301      	movs	r3, #1
 8021f6a:	6163      	str	r3, [r4, #20]
 8021f6c:	b002      	add	sp, #8
 8021f6e:	bd70      	pop	{r4, r5, r6, pc}
 8021f70:	ab01      	add	r3, sp, #4
 8021f72:	466a      	mov	r2, sp
 8021f74:	f7ff ffc9 	bl	8021f0a <__swhatbuf_r>
 8021f78:	9900      	ldr	r1, [sp, #0]
 8021f7a:	4605      	mov	r5, r0
 8021f7c:	4630      	mov	r0, r6
 8021f7e:	f7fd fad1 	bl	801f524 <_malloc_r>
 8021f82:	b948      	cbnz	r0, 8021f98 <__smakebuf_r+0x44>
 8021f84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021f88:	059a      	lsls	r2, r3, #22
 8021f8a:	d4ef      	bmi.n	8021f6c <__smakebuf_r+0x18>
 8021f8c:	f023 0303 	bic.w	r3, r3, #3
 8021f90:	f043 0302 	orr.w	r3, r3, #2
 8021f94:	81a3      	strh	r3, [r4, #12]
 8021f96:	e7e3      	b.n	8021f60 <__smakebuf_r+0xc>
 8021f98:	4b0d      	ldr	r3, [pc, #52]	; (8021fd0 <__smakebuf_r+0x7c>)
 8021f9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8021f9c:	89a3      	ldrh	r3, [r4, #12]
 8021f9e:	6020      	str	r0, [r4, #0]
 8021fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021fa4:	81a3      	strh	r3, [r4, #12]
 8021fa6:	9b00      	ldr	r3, [sp, #0]
 8021fa8:	6163      	str	r3, [r4, #20]
 8021faa:	9b01      	ldr	r3, [sp, #4]
 8021fac:	6120      	str	r0, [r4, #16]
 8021fae:	b15b      	cbz	r3, 8021fc8 <__smakebuf_r+0x74>
 8021fb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021fb4:	4630      	mov	r0, r6
 8021fb6:	f000 f863 	bl	8022080 <_isatty_r>
 8021fba:	b128      	cbz	r0, 8021fc8 <__smakebuf_r+0x74>
 8021fbc:	89a3      	ldrh	r3, [r4, #12]
 8021fbe:	f023 0303 	bic.w	r3, r3, #3
 8021fc2:	f043 0301 	orr.w	r3, r3, #1
 8021fc6:	81a3      	strh	r3, [r4, #12]
 8021fc8:	89a0      	ldrh	r0, [r4, #12]
 8021fca:	4305      	orrs	r5, r0
 8021fcc:	81a5      	strh	r5, [r4, #12]
 8021fce:	e7cd      	b.n	8021f6c <__smakebuf_r+0x18>
 8021fd0:	0801f1e1 	.word	0x0801f1e1

08021fd4 <_raise_r>:
 8021fd4:	291f      	cmp	r1, #31
 8021fd6:	b538      	push	{r3, r4, r5, lr}
 8021fd8:	4604      	mov	r4, r0
 8021fda:	460d      	mov	r5, r1
 8021fdc:	d904      	bls.n	8021fe8 <_raise_r+0x14>
 8021fde:	2316      	movs	r3, #22
 8021fe0:	6003      	str	r3, [r0, #0]
 8021fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8021fe6:	bd38      	pop	{r3, r4, r5, pc}
 8021fe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021fea:	b112      	cbz	r2, 8021ff2 <_raise_r+0x1e>
 8021fec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021ff0:	b94b      	cbnz	r3, 8022006 <_raise_r+0x32>
 8021ff2:	4620      	mov	r0, r4
 8021ff4:	f000 f830 	bl	8022058 <_getpid_r>
 8021ff8:	462a      	mov	r2, r5
 8021ffa:	4601      	mov	r1, r0
 8021ffc:	4620      	mov	r0, r4
 8021ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022002:	f000 b817 	b.w	8022034 <_kill_r>
 8022006:	2b01      	cmp	r3, #1
 8022008:	d00a      	beq.n	8022020 <_raise_r+0x4c>
 802200a:	1c59      	adds	r1, r3, #1
 802200c:	d103      	bne.n	8022016 <_raise_r+0x42>
 802200e:	2316      	movs	r3, #22
 8022010:	6003      	str	r3, [r0, #0]
 8022012:	2001      	movs	r0, #1
 8022014:	e7e7      	b.n	8021fe6 <_raise_r+0x12>
 8022016:	2400      	movs	r4, #0
 8022018:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802201c:	4628      	mov	r0, r5
 802201e:	4798      	blx	r3
 8022020:	2000      	movs	r0, #0
 8022022:	e7e0      	b.n	8021fe6 <_raise_r+0x12>

08022024 <raise>:
 8022024:	4b02      	ldr	r3, [pc, #8]	; (8022030 <raise+0xc>)
 8022026:	4601      	mov	r1, r0
 8022028:	6818      	ldr	r0, [r3, #0]
 802202a:	f7ff bfd3 	b.w	8021fd4 <_raise_r>
 802202e:	bf00      	nop
 8022030:	20000100 	.word	0x20000100

08022034 <_kill_r>:
 8022034:	b538      	push	{r3, r4, r5, lr}
 8022036:	4d07      	ldr	r5, [pc, #28]	; (8022054 <_kill_r+0x20>)
 8022038:	2300      	movs	r3, #0
 802203a:	4604      	mov	r4, r0
 802203c:	4608      	mov	r0, r1
 802203e:	4611      	mov	r1, r2
 8022040:	602b      	str	r3, [r5, #0]
 8022042:	f7ec fe6d 	bl	800ed20 <_kill>
 8022046:	1c43      	adds	r3, r0, #1
 8022048:	d102      	bne.n	8022050 <_kill_r+0x1c>
 802204a:	682b      	ldr	r3, [r5, #0]
 802204c:	b103      	cbz	r3, 8022050 <_kill_r+0x1c>
 802204e:	6023      	str	r3, [r4, #0]
 8022050:	bd38      	pop	{r3, r4, r5, pc}
 8022052:	bf00      	nop
 8022054:	2000eb68 	.word	0x2000eb68

08022058 <_getpid_r>:
 8022058:	f7ec be5a 	b.w	800ed10 <_getpid>

0802205c <_fstat_r>:
 802205c:	b538      	push	{r3, r4, r5, lr}
 802205e:	4d07      	ldr	r5, [pc, #28]	; (802207c <_fstat_r+0x20>)
 8022060:	2300      	movs	r3, #0
 8022062:	4604      	mov	r4, r0
 8022064:	4608      	mov	r0, r1
 8022066:	4611      	mov	r1, r2
 8022068:	602b      	str	r3, [r5, #0]
 802206a:	f7ec feb8 	bl	800edde <_fstat>
 802206e:	1c43      	adds	r3, r0, #1
 8022070:	d102      	bne.n	8022078 <_fstat_r+0x1c>
 8022072:	682b      	ldr	r3, [r5, #0]
 8022074:	b103      	cbz	r3, 8022078 <_fstat_r+0x1c>
 8022076:	6023      	str	r3, [r4, #0]
 8022078:	bd38      	pop	{r3, r4, r5, pc}
 802207a:	bf00      	nop
 802207c:	2000eb68 	.word	0x2000eb68

08022080 <_isatty_r>:
 8022080:	b538      	push	{r3, r4, r5, lr}
 8022082:	4d06      	ldr	r5, [pc, #24]	; (802209c <_isatty_r+0x1c>)
 8022084:	2300      	movs	r3, #0
 8022086:	4604      	mov	r4, r0
 8022088:	4608      	mov	r0, r1
 802208a:	602b      	str	r3, [r5, #0]
 802208c:	f7ec feb7 	bl	800edfe <_isatty>
 8022090:	1c43      	adds	r3, r0, #1
 8022092:	d102      	bne.n	802209a <_isatty_r+0x1a>
 8022094:	682b      	ldr	r3, [r5, #0]
 8022096:	b103      	cbz	r3, 802209a <_isatty_r+0x1a>
 8022098:	6023      	str	r3, [r4, #0]
 802209a:	bd38      	pop	{r3, r4, r5, pc}
 802209c:	2000eb68 	.word	0x2000eb68

080220a0 <_init>:
 80220a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80220a2:	bf00      	nop
 80220a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80220a6:	bc08      	pop	{r3}
 80220a8:	469e      	mov	lr, r3
 80220aa:	4770      	bx	lr

080220ac <_fini>:
 80220ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80220ae:	bf00      	nop
 80220b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80220b2:	bc08      	pop	{r3}
 80220b4:	469e      	mov	lr, r3
 80220b6:	4770      	bx	lr
